
(* This file was generated by metaprogram lalr,
   with command line (excluding surrounding quotes):
   "../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr"
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT IntSets;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 50 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2025 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3CLOptions; 
    IMPORT FM3CLToks; 
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;

    TYPE Bkt = BrandKindTyp ;
    
    PROCEDURE BrandKindImage ( Kind : BrandKindTyp ) : TEXT

    = BEGIN
        CASE Kind OF
        | Bkt . BkAbsent => RETURN "BkAbsent"
        | Bkt . BkAnon => RETURN "BkAnon"
        | Bkt . BkExplicit => RETURN "BkExplicit"
        END (*CASE*) 
      END BrandKindImage ; 
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 291;
   yyTableMax               = 1353;
   yyNTableMax              = 1600;
   yyFirstReadState         = 1;
   yyLastReadState          = 217;
   yyFirstReadTermState             = 218;
   yyLastReadTermState              = 318;
   yyLastReadNontermState           = 441;
   yyFirstReduceState               = 442;
   yyLastReduceState                = 745;
   yyStartState             = 1;
   yyStopState              = 442;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   1])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   2])
         , (*  12*) ADR (yyTComb [   3]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   4]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   5]) , (*  31*) ADR (yyTComb [   3])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  10]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [   4]) , (*  37*) ADR (yyTComb [   1])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [  13])
         , (*  40*) ADR (yyTComb [  72]) , (*  41*) ADR (yyTComb [  73])
         , (*  42*) ADR (yyTComb [  17]) , (*  43*) ADR (yyTComb [  16])
         , (*  44*) ADR (yyTComb [  17]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [  10]) , (*  47*) ADR (yyTComb [   0])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [   0])
         , (*  50*) ADR (yyTComb [  83]) , (*  51*) ADR (yyTComb [   5])
         , (*  52*) ADR (yyTComb [  34]) , (*  53*) ADR (yyTComb [  34])
         , (*  54*) ADR (yyTComb [ 129]) , (*  55*) ADR (yyTComb [  27])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [ 187])
         , (*  58*) ADR (yyTComb [ 259]) , (*  59*) ADR (yyTComb [   0])
         , (*  60*) ADR (yyTComb [ 331]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [ 403]) , (*  63*) ADR (yyTComb [ 491])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [ 579])
         , (*  66*) ADR (yyTComb [ 667]) , (*  67*) ADR (yyTComb [   0])
         , (*  68*) ADR (yyTComb [ 769]) , (*  69*) ADR (yyTComb [  19])
         , (*  70*) ADR (yyTComb [ 141]) , (*  71*) ADR (yyTComb [ 871])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 973])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [  38])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [  40])
         , (*  78*) ADR (yyTComb [  17]) , (*  79*) ADR (yyTComb [  72])
         , (*  80*) ADR (yyTComb [1061]) , (*  81*) ADR (yyTComb [  38])
         , (*  82*) ADR (yyTComb [   0]) , (*  83*) ADR (yyTComb [  39])
         , (*  84*) ADR (yyTComb [   0]) , (*  85*) ADR (yyTComb [   3])
         , (*  86*) ADR (yyTComb [   0]) , (*  87*) ADR (yyTComb [ 476])
         , (*  88*) ADR (yyTComb [   0]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [   1]) , (*  91*) ADR (yyTComb [   5])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [1157])
         , (*  94*) ADR (yyTComb [ 866]) , (*  95*) ADR (yyTComb [   2])
         , (*  96*) ADR (yyTComb [   6]) , (*  97*) ADR (yyTComb [   0])
         , (*  98*) ADR (yyTComb [   4]) , (*  99*) ADR (yyTComb [   0])
         , (* 100*) ADR (yyTComb [   0]) , (* 101*) ADR (yyTComb [  51])
         , (* 102*) ADR (yyTComb [  52]) , (* 103*) ADR (yyTComb [  61])
         , (* 104*) ADR (yyTComb [  38]) , (* 105*) ADR (yyTComb [   2])
         , (* 106*) ADR (yyTComb [ 564]) , (* 107*) ADR (yyTComb [  43])
         , (* 108*) ADR (yyTComb [ 188]) , (* 109*) ADR (yyTComb [ 230])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [1166])
         , (* 112*) ADR (yyTComb [   5]) , (* 113*) ADR (yyTComb [   6])
         , (* 114*) ADR (yyTComb [  20]) , (* 115*) ADR (yyTComb [ 121])
         , (* 116*) ADR (yyTComb [   4]) , (* 117*) ADR (yyTComb [ 101])
         , (* 118*) ADR (yyTComb [  97]) , (* 119*) ADR (yyTComb [   0])
         , (* 120*) ADR (yyTComb [  71]) , (* 121*) ADR (yyTComb [  75])
         , (* 122*) ADR (yyTComb [  80]) , (* 123*) ADR (yyTComb [ 249])
         , (* 124*) ADR (yyTComb [  52]) , (* 125*) ADR (yyTComb [ 103])
         , (* 126*) ADR (yyTComb [  85]) , (* 127*) ADR (yyTComb [   0])
         , (* 128*) ADR (yyTComb [   5]) , (* 129*) ADR (yyTComb [   3])
         , (* 130*) ADR (yyTComb [ 129]) , (* 131*) ADR (yyTComb [ 133])
         , (* 132*) ADR (yyTComb [  85]) , (* 133*) ADR (yyTComb [   0])
         , (* 134*) ADR (yyTComb [   6]) , (* 135*) ADR (yyTComb [ 136])
         , (* 136*) ADR (yyTComb [ 137]) , (* 137*) ADR (yyTComb [ 189])
         , (* 138*) ADR (yyTComb [ 332]) , (* 139*) ADR (yyTComb [   7])
         , (* 140*) ADR (yyTComb [ 652]) , (* 141*) ADR (yyTComb [ 152])
         , (* 142*) ADR (yyTComb [  78]) , (* 143*) ADR (yyTComb [  85])
         , (* 144*) ADR (yyTComb [ 188]) , (* 145*) ADR (yyTComb [  71])
         , (* 146*) ADR (yyTComb [ 106]) , (* 147*) ADR (yyTComb [ 108])
         , (* 148*) ADR (yyTComb [   0]) , (* 149*) ADR (yyTComb [ 124])
         , (* 150*) ADR (yyTComb [ 474]) , (* 151*) ADR (yyTComb [1195])
         , (* 152*) ADR (yyTComb [ 125]) , (* 153*) ADR (yyTComb [ 203])
         , (* 154*) ADR (yyTComb [   0]) , (* 155*) ADR (yyTComb [ 127])
         , (* 156*) ADR (yyTComb [ 771]) , (* 157*) ADR (yyTComb [ 235])
         , (* 158*) ADR (yyTComb [ 328]) , (* 159*) ADR (yyTComb [ 773])
         , (* 160*) ADR (yyTComb [ 128]) , (* 161*) ADR (yyTComb [ 135])
         , (* 162*) ADR (yyTComb [ 975]) , (* 163*) ADR (yyTComb [1198])
         , (* 164*) ADR (yyTComb [ 138]) , (* 165*) ADR (yyTComb [ 139])
         , (* 166*) ADR (yyTComb [ 164]) , (* 167*) ADR (yyTComb [ 182])
         , (* 168*) ADR (yyTComb [ 407]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [ 168]) , (* 171*) ADR (yyTComb [   0])
         , (* 172*) ADR (yyTComb [   0]) , (* 173*) ADR (yyTComb [   0])
         , (* 174*) ADR (yyTComb [   8]) , (* 175*) ADR (yyTComb [ 177])
         , (* 176*) ADR (yyTComb [   0]) , (* 177*) ADR (yyTComb [1178])
         , (* 178*) ADR (yyTComb [  18]) , (* 179*) ADR (yyTComb [1245])
         , (* 180*) ADR (yyTComb [ 263]) , (* 181*) ADR (yyTComb [ 249])
         , (* 182*) ADR (yyTComb [   0]) , (* 183*) ADR (yyTComb [ 239])
         , (* 184*) ADR (yyTComb [   0]) , (* 185*) ADR (yyTComb [   0])
         , (* 186*) ADR (yyTComb [ 183]) , (* 187*) ADR (yyTComb [  10])
         , (* 188*) ADR (yyTComb [   0]) , (* 189*) ADR (yyTComb [ 200])
         , (* 190*) ADR (yyTComb [ 203]) , (* 191*) ADR (yyTComb [ 769])
         , (* 192*) ADR (yyTComb [ 973]) , (* 193*) ADR (yyTComb [   1])
         , (* 194*) ADR (yyTComb [   5]) , (* 195*) ADR (yyTComb [  12])
         , (* 196*) ADR (yyTComb [  16]) , (* 197*) ADR (yyTComb [   0])
         , (* 198*) ADR (yyTComb [ 203]) , (* 199*) ADR (yyTComb [ 210])
         , (* 200*) ADR (yyTComb [   0]) , (* 201*) ADR (yyTComb [ 210])
         , (* 202*) ADR (yyTComb [ 251]) , (* 203*) ADR (yyTComb [ 233])
         , (* 204*) ADR (yyTComb [ 589]) , (* 205*) ADR (yyTComb [1071])
         , (* 206*) ADR (yyTComb [  17]) , (* 207*) ADR (yyTComb [  38])
         , (* 208*) ADR (yyTComb [   0]) , (* 209*) ADR (yyTComb [ 242])
         , (* 210*) ADR (yyTComb [ 244]) , (* 211*) ADR (yyTComb [ 247])
         , (* 212*) ADR (yyTComb [ 252]) , (* 213*) ADR (yyTComb [ 297])
         , (* 214*) ADR (yyTComb [ 304]) , (* 215*) ADR (yyTComb [ 228])
         , (* 216*) ADR (yyTComb [ 237]) , (* 217*) ADR (yyTComb [ 270])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 114])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 112])
         , (*  16*) ADR (yyNComb [ 114]) , (*  17*) ADR (yyNComb [ 121])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 123])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 125])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 126])
         , (*  24*) ADR (yyNComb [ 127]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 128]) , (*  27*) ADR (yyNComb [ 129])
         , (*  28*) ADR (yyNComb [ 127]) , (*  29*) ADR (yyNComb [ 113])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 132])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 127])
         , (*  36*) ADR (yyNComb [ 109]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 137]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 113]) , (*  41*) ADR (yyNComb [ 115])
         , (*  42*) ADR (yyNComb [ 109]) , (*  43*) ADR (yyNComb [ 115])
         , (*  44*) ADR (yyNComb [ 115]) , (*  45*) ADR (yyNComb [ 133])
         , (*  46*) ADR (yyNComb [ 109]) , (*  47*) ADR (yyNComb [ 205])
         , (*  48*) ADR (yyNComb [ 157]) , (*  49*) ADR (yyNComb [ 224])
         , (*  50*) ADR (yyNComb [ 109]) , (*  51*) ADR (yyNComb [ 109])
         , (*  52*) ADR (yyNComb [ 109]) , (*  53*) ADR (yyNComb [ 242])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 109])
         , (*  56*) ADR (yyNComb [ 281]) , (*  57*) ADR (yyNComb [ 109])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 300])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 366])
         , (*  62*) ADR (yyNComb [ 113]) , (*  63*) ADR (yyNComb [ 111])
         , (*  64*) ADR (yyNComb [ 171]) , (*  65*) ADR (yyNComb [ 111])
         , (*  66*) ADR (yyNComb [ 109]) , (*  67*) ADR (yyNComb [ 258])
         , (*  68*) ADR (yyNComb [ 109]) , (*  69*) ADR (yyNComb [ 114])
         , (*  70*) ADR (yyNComb [ 144]) , (*  71*) ADR (yyNComb [ 114])
         , (*  72*) ADR (yyNComb [ 138]) , (*  73*) ADR (yyNComb [ 109])
         , (*  74*) ADR (yyNComb [ 424]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 446]) , (*  77*) ADR (yyNComb [ 109])
         , (*  78*) ADR (yyNComb [ 467]) , (*  79*) ADR (yyNComb [ 109])
         , (*  80*) ADR (yyNComb [ 113]) , (*  81*) ADR (yyNComb [ 109])
         , (*  82*) ADR (yyNComb [ 491]) , (*  83*) ADR (yyNComb [ 109])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 510])
         , (*  86*) ADR (yyNComb [ 119]) , (*  87*) ADR (yyNComb [ 110])
         , (*  88*) ADR (yyNComb [ 634]) , (*  89*) ADR (yyNComb [ 109])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 109])
         , (*  92*) ADR (yyNComb [ 704]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 112])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 774])
         , (*  98*) ADR (yyNComb [ 109]) , (*  99*) ADR (yyNComb [ 844])
         , (* 100*) ADR (yyNComb [ 914]) , (* 101*) ADR (yyNComb [ 140])
         , (* 102*) ADR (yyNComb [ 109]) , (* 103*) ADR (yyNComb [ 109])
         , (* 104*) ADR (yyNComb [ 132]) , (* 105*) ADR (yyNComb [ 212])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 109])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 110])
         , (* 110*) ADR (yyNComb [ 984]) , (* 111*) ADR (yyNComb [ 109])
         , (* 112*) ADR (yyNComb [ 143]) , (* 113*) ADR (yyNComb [ 109])
         , (* 114*) ADR (yyNComb [ 372]) , (* 115*) ADR (yyNComb [ 138])
         , (* 116*) ADR (yyNComb [ 168]) , (* 117*) ADR (yyNComb [ 122])
         , (* 118*) ADR (yyNComb [ 163]) , (* 119*) ADR (yyNComb [ 197])
         , (* 120*) ADR (yyNComb [ 208]) , (* 121*) ADR (yyNComb [ 109])
         , (* 122*) ADR (yyNComb [ 125]) , (* 123*) ADR (yyNComb [ 153])
         , (* 124*) ADR (yyNComb [ 119]) , (* 125*) ADR (yyNComb [ 112])
         , (* 126*) ADR (yyNComb [ 111]) , (* 127*) ADR (yyNComb [ 992])
         , (* 128*) ADR (yyNComb [ 134]) , (* 129*) ADR (yyNComb [ 173])
         , (* 130*) ADR (yyNComb [ 128]) , (* 131*) ADR (yyNComb [ 213])
         , (* 132*) ADR (yyNComb [ 109]) , (* 133*) ADR (yyNComb [1056])
         , (* 134*) ADR (yyNComb [ 109]) , (* 135*) ADR (yyNComb [ 129])
         , (* 136*) ADR (yyNComb [ 391]) , (* 137*) ADR (yyNComb [ 113])
         , (* 138*) ADR (yyNComb [ 113]) , (* 139*) ADR (yyNComb [ 109])
         , (* 140*) ADR (yyNComb [ 137]) , (* 141*) ADR (yyNComb [ 109])
         , (* 142*) ADR (yyNComb [ 162]) , (* 143*) ADR (yyNComb [ 109])
         , (* 144*) ADR (yyNComb [ 109]) , (* 145*) ADR (yyNComb [ 141])
         , (* 146*) ADR (yyNComb [ 115]) , (* 147*) ADR (yyNComb [ 109])
         , (* 148*) ADR (yyNComb [1075]) , (* 149*) ADR (yyNComb [ 109])
         , (* 150*) ADR (yyNComb [ 361]) , (* 151*) ADR (yyNComb [ 273])
         , (* 152*) ADR (yyNComb [ 109]) , (* 153*) ADR (yyNComb [ 118])
         , (* 154*) ADR (yyNComb [1199]) , (* 155*) ADR (yyNComb [ 109])
         , (* 156*) ADR (yyNComb [ 428]) , (* 157*) ADR (yyNComb [ 129])
         , (* 158*) ADR (yyNComb [1269]) , (* 159*) ADR (yyNComb [ 434])
         , (* 160*) ADR (yyNComb [ 109]) , (* 161*) ADR (yyNComb [ 109])
         , (* 162*) ADR (yyNComb [ 416]) , (* 163*) ADR (yyNComb [ 397])
         , (* 164*) ADR (yyNComb [ 109]) , (* 165*) ADR (yyNComb [ 109])
         , (* 166*) ADR (yyNComb [ 231]) , (* 167*) ADR (yyNComb [ 208])
         , (* 168*) ADR (yyNComb [ 235]) , (* 169*) ADR (yyNComb [ 191])
         , (* 170*) ADR (yyNComb [ 109]) , (* 171*) ADR (yyNComb [1353])
         , (* 172*) ADR (yyNComb [ 109]) , (* 173*) ADR (yyNComb [1291])
         , (* 174*) ADR (yyNComb [ 109]) , (* 175*) ADR (yyNComb [ 109])
         , (* 176*) ADR (yyNComb [1116]) , (* 177*) ADR (yyNComb [ 177])
         , (* 178*) ADR (yyNComb [1359]) , (* 179*) ADR (yyNComb [ 109])
         , (* 180*) ADR (yyNComb [ 985]) , (* 181*) ADR (yyNComb [ 263])
         , (* 182*) ADR (yyNComb [ 463]) , (* 183*) ADR (yyNComb [ 109])
         , (* 184*) ADR (yyNComb [ 344]) , (* 185*) ADR (yyNComb [ 283])
         , (* 186*) ADR (yyNComb [ 289]) , (* 187*) ADR (yyNComb [ 109])
         , (* 188*) ADR (yyNComb [ 296]) , (* 189*) ADR (yyNComb [ 109])
         , (* 190*) ADR (yyNComb [ 109]) , (* 191*) ADR (yyNComb [ 295])
         , (* 192*) ADR (yyNComb [ 447]) , (* 193*) ADR (yyNComb [1359])
         , (* 194*) ADR (yyNComb [ 109]) , (* 195*) ADR (yyNComb [1418])
         , (* 196*) ADR (yyNComb [ 109]) , (* 197*) ADR (yyNComb [ 355])
         , (* 198*) ADR (yyNComb [ 109]) , (* 199*) ADR (yyNComb [ 109])
         , (* 200*) ADR (yyNComb [ 352]) , (* 201*) ADR (yyNComb [ 363])
         , (* 202*) ADR (yyNComb [ 109]) , (* 203*) ADR (yyNComb [ 109])
         , (* 204*) ADR (yyNComb [ 380]) , (* 205*) ADR (yyNComb [ 476])
         , (* 206*) ADR (yyNComb [1413]) , (* 207*) ADR (yyNComb [ 109])
         , (* 208*) ADR (yyNComb [ 387]) , (* 209*) ADR (yyNComb [ 109])
         , (* 210*) ADR (yyNComb [ 109]) , (* 211*) ADR (yyNComb [ 381])
         , (* 212*) ADR (yyNComb [ 109]) , (* 213*) ADR (yyNComb [ 396])
         , (* 214*) ADR (yyNComb [ 497]) , (* 215*) ADR (yyNComb [ 387])
         , (* 216*) ADR (yyNComb [ 409]) , (* 217*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  216
         , (*   4*)  216 , (*   5*)    0 , (*   6*)    0 , (*   7*)  216
         , (*   8*)    0 , (*   9*)    0 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)  216 , (*  14*)    0 , (*  15*)  204
         , (*  16*)  205 , (*  17*)  216 , (*  18*)    0 , (*  19*)  216
         , (*  20*)    0 , (*  21*)  216 , (*  22*)    0 , (*  23*)  216
         , (*  24*)  216 , (*  25*)    0 , (*  26*)  216 , (*  27*)  216
         , (*  28*)  186 , (*  29*)  201 , (*  30*)  202 , (*  31*)    0
         , (*  32*)    0 , (*  33*)  216 , (*  34*)    0 , (*  35*)  206
         , (*  36*)    0 , (*  37*)    0 , (*  38*)  216 , (*  39*)    0
         , (*  40*)   41 , (*  41*)    0 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)  158 , (*  46*)    0 , (*  47*)  178
         , (*  48*)   69 , (*  49*)  178 , (*  50*)   54 , (*  51*)    0
         , (*  52*)    0 , (*  53*)   78 , (*  54*)    0 , (*  55*)    0
         , (*  56*)  178 , (*  57*)   79 , (*  58*)   60 , (*  59*)  178
         , (*  60*)    0 , (*  61*)  178 , (*  62*)   80 , (*  63*)   65
         , (*  64*)   69 , (*  65*)    0 , (*  66*)   68 , (*  67*)   69
         , (*  68*)    0 , (*  69*)   70 , (*  70*)    0 , (*  71*)   52
         , (*  72*)  216 , (*  73*)    0 , (*  74*)  178 , (*  75*)    0
         , (*  76*)  178 , (*  77*)    0 , (*  78*)  178 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)  178 , (*  83*)    0
         , (*  84*)    0 , (*  85*)  178 , (*  86*)  166 , (*  87*)    0
         , (*  88*)  158 , (*  89*)    0 , (*  90*)    0 , (*  91*)    0
         , (*  92*)  158 , (*  93*)    0 , (*  94*)    0 , (*  95*)   90
         , (*  96*)    0 , (*  97*)  158 , (*  98*)    0 , (*  99*)  158
         , (* 100*)  158 , (* 101*)  104 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)  124 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)  158 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)  105 , (* 115*)    0
         , (* 116*)  118 , (* 117*)  130 , (* 118*)  131 , (* 119*)  166
         , (* 120*)  123 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    0 , (* 126*)    0 , (* 127*)  178
         , (* 128*)    0 , (* 129*)  131 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)  178 , (* 134*)    0 , (* 135*)  117
         , (* 136*)  118 , (* 137*)    0 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)    0 , (* 142*)  145 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)    0
         , (* 148*)  178 , (* 149*)    0 , (* 150*)  151 , (* 151*)    0
         , (* 152*)    0 , (* 153*)    0 , (* 154*)  158 , (* 155*)    0
         , (* 156*)  145 , (* 157*)    0 , (* 158*)  112 , (* 159*)  145
         , (* 160*)    0 , (* 161*)    0 , (* 162*)  124 , (* 163*)  124
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)    0 , (* 169*)  216 , (* 170*)    0 , (* 171*)  193
         , (* 172*)    0 , (* 173*)  195 , (* 174*)    0 , (* 175*)    0
         , (* 176*)  178 , (* 177*)    0 , (* 178*)   69 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)  216 , (* 183*)    0
         , (* 184*)  216 , (* 185*)  216 , (* 186*)    0 , (* 187*)    0
         , (* 188*)  216 , (* 189*)    0 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)  180 , (* 194*)    0 , (* 195*)  178
         , (* 196*)    0 , (* 197*)  216 , (* 198*)    0 , (* 199*)    0
         , (* 200*)  211 , (* 201*)    0 , (* 202*)    0 , (* 203*)    0
         , (* 204*)    0 , (* 205*)    0 , (* 206*)  180 , (* 207*)    0
         , (* 208*)  216 , (* 209*)    0 , (* 210*)    0 , (* 211*)    0
         , (* 212*)    0 , (* 213*)    0 , (* 214*)    0 , (* 215*)    0
         , (* 216*)    0 , (* 217*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  442} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 172,  173}
         , (*  10*) yyTCombType { 193,  734} , (*  11*) yyTCombType {  89,  617}
         , (*  12*) yyTCombType {  90,   85} , (*  13*) yyTCombType {  20,   21}
         , (*  14*) yyTCombType { 194,  195} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType { 112,   85} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  32,   33}
         , (*  20*) yyTCombType {  37,   38} , (*  21*) yyTCombType { 105,  594}
         , (*  22*) yyTCombType { 129,  608} , (*  23*) yyTCombType { 116,  601}
         , (*  24*) yyTCombType { 128,  607} , (*  25*) yyTCombType { 134,  293}
         , (*  26*) yyTCombType { 139,  294} , (*  27*) yyTCombType { 174,  312}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 187,  188}
         , (*  30*) yyTCombType {  18,  222} , (*  31*) yyTCombType { 195,  739}
         , (*  32*) yyTCombType {   1,  473} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType { 196,  197}
         , (*  36*) yyTCombType { 206,  734} , (*  37*) yyTCombType {   1,  473}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,   13}
         , (*  40*) yyTCombType {  84,  275} , (*  41*) yyTCombType {  95,  618}
         , (*  42*) yyTCombType {  85,  615} , (*  43*) yyTCombType {  98,  281}
         , (*  44*) yyTCombType { 112,  614} , (*  45*) yyTCombType { 113,  286}
         , (*  46*) yyTCombType { 116,  601} , (*  47*) yyTCombType { 128,  129}
         , (*  48*) yyTCombType {  89,  617} , (*  49*) yyTCombType {  90,  614}
         , (*  50*) yyTCombType {  46,  236} , (*  51*) yyTCombType {  85,  615}
         , (*  52*) yyTCombType {  89,  279} , (*  53*) yyTCombType {  91,   92}
         , (*  54*) yyTCombType {  96,   97} , (*  55*) yyTCombType { 114,  594}
         , (*  56*) yyTCombType { 178,   48} , (*  57*) yyTCombType { 207,  208}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  219}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType { 114,  594} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,  459} , (*  67*) yyTCombType {   9,  455}
         , (*  68*) yyTCombType {   8,  459} , (*  69*) yyTCombType {   9,  455}
         , (*  70*) yyTCombType {  14,   15} , (*  71*) yyTCombType {  20,  483}
         , (*  72*) yyTCombType {  14,   27} , (*  73*) yyTCombType {  22,  223}
         , (*  74*) yyTCombType {  25,  224} , (*  75*) yyTCombType {  30,  225}
         , (*  76*) yyTCombType {  20,  483} , (*  77*) yyTCombType {  34,  227}
         , (*  78*) yyTCombType {  22,   23} , (*  79*) yyTCombType {  25,   26}
         , (*  80*) yyTCombType {  39,  233} , (*  81*) yyTCombType {  40,  515}
         , (*  82*) yyTCombType {  41,  516} , (*  83*) yyTCombType {  42,  235}
         , (*  84*) yyTCombType {  43,  520} , (*  85*) yyTCombType {  44,  522}
         , (*  86*) yyTCombType {  40,  515} , (*  87*) yyTCombType {  41,  516}
         , (*  88*) yyTCombType {  43,  520} , (*  89*) yyTCombType {  44,   45}
         , (*  90*) yyTCombType {  46,   47} , (*  91*) yyTCombType {  40,  515}
         , (*  92*) yyTCombType {  41,  516} , (*  93*) yyTCombType {   8,  459}
         , (*  94*) yyTCombType {   9,   10} , (*  95*) yyTCombType {  10,   11}
         , (*  96*) yyTCombType {  11,  220} , (*  97*) yyTCombType {  12,  221}
         , (*  98*) yyTCombType {  31,  226} , (*  99*) yyTCombType {  36,  229}
         , (* 100*) yyTCombType {  51,  239} , (* 101*) yyTCombType {  55,   56}
         , (* 102*) yyTCombType {  50,  682} , (* 103*) yyTCombType {  52,   53}
         , (* 104*) yyTCombType {  53,  689} , (* 105*) yyTCombType {  53,  689}
         , (* 106*) yyTCombType {  69,  237} , (* 107*) yyTCombType {  69,  238}
         , (* 108*) yyTCombType {  10,   12} , (* 109*) yyTCombType {  75,  267}
         , (* 110*) yyTCombType {  77,  270} , (* 111*) yyTCombType {  77,  271}
         , (* 112*) yyTCombType {  78,   54} , (* 113*) yyTCombType {  79,  251}
         , (* 114*) yyTCombType {  52,   74} , (* 115*) yyTCombType {  40,  515}
         , (* 116*) yyTCombType {  41,  516} , (* 117*) yyTCombType {  81,   82}
         , (* 118*) yyTCombType {  50,  682} , (* 119*) yyTCombType {  75,  268}
         , (* 120*) yyTCombType {  83,  274} , (* 121*) yyTCombType {  50,  682}
         , (* 122*) yyTCombType {  50,  682} , (* 123*) yyTCombType {  40,  515}
         , (* 124*) yyTCombType {  41,  516} , (* 125*) yyTCombType {  50,  682}
         , (* 126*) yyTCombType {  52,  272} , (* 127*) yyTCombType { 101,  588}
         , (* 128*) yyTCombType { 102,  283} , (* 129*) yyTCombType {  40,  515}
         , (* 130*) yyTCombType {  41,  516} , (* 131*) yyTCombType {  50,  682}
         , (* 132*) yyTCombType { 103,  104} , (* 133*) yyTCombType { 104,  282}
         , (* 134*) yyTCombType {  54,  682} , (* 135*) yyTCombType {  40,  515}
         , (* 136*) yyTCombType {  41,  516} , (* 137*) yyTCombType { 103,  589}
         , (* 138*) yyTCombType { 107,  285} , (* 139*) yyTCombType { 118,  474}
         , (* 140*) yyTCombType { 115,  600} , (* 141*) yyTCombType { 120,  632}
         , (* 142*) yyTCombType {  79,  273} , (* 143*) yyTCombType { 117,  475}
         , (* 144*) yyTCombType {  54,  682} , (* 145*) yyTCombType { 121,  291}
         , (* 146*) yyTCombType { 122,  123} , (* 147*) yyTCombType { 124,  284}
         , (* 148*) yyTCombType { 130,  475} , (* 149*) yyTCombType {  50,  682}
         , (* 150*) yyTCombType { 122,  475} , (* 151*) yyTCombType { 126,  555}
         , (* 152*) yyTCombType { 131,  474} , (* 153*) yyTCombType { 132,  133}
         , (* 154*) yyTCombType { 142,  504} , (* 155*) yyTCombType { 126,  555}
         , (* 156*) yyTCombType { 115,  116} , (* 157*) yyTCombType {  50,  682}
         , (* 158*) yyTCombType { 141,  295} , (* 159*) yyTCombType { 126,  127}
         , (* 160*) yyTCombType {  54,  682} , (* 161*) yyTCombType { 143,  296}
         , (* 162*) yyTCombType {  50,  682} , (* 163*) yyTCombType { 115,  600}
         , (* 164*) yyTCombType {  50,  682} , (* 165*) yyTCombType {  54,  682}
         , (* 166*) yyTCombType { 145,   93} , (* 167*) yyTCombType { 117,  118}
         , (* 168*) yyTCombType {  41,  234} , (* 169*) yyTCombType { 125,  552}
         , (* 170*) yyTCombType {  54,  682} , (* 171*) yyTCombType { 135,  475}
         , (* 172*) yyTCombType { 136,  474} , (* 173*) yyTCombType { 125,  552}
         , (* 174*) yyTCombType { 146,  523} , (* 175*) yyTCombType { 125,  110}
         , (* 176*) yyTCombType { 147,  148} , (* 177*) yyTCombType { 125,  552}
         , (* 178*) yyTCombType {  50,  682} , (* 179*) yyTCombType {  50,  682}
         , (* 180*) yyTCombType {  50,  682} , (* 181*) yyTCombType {  50,  682}
         , (* 182*) yyTCombType {  50,  682} , (* 183*) yyTCombType {  50,  682}
         , (* 184*) yyTCombType {  50,  682} , (* 185*) yyTCombType {  50,  682}
         , (* 186*) yyTCombType {  50,  682} , (* 187*) yyTCombType {  50,  682}
         , (* 188*) yyTCombType {  50,  682} , (* 189*) yyTCombType {  50,  682}
         , (* 190*) yyTCombType { 149,  297} , (* 191*) yyTCombType { 152,  299}
         , (* 192*) yyTCombType { 118,  287} , (* 193*) yyTCombType { 155,  302}
         , (* 194*) yyTCombType { 160,  305} , (* 195*) yyTCombType { 130,  131}
         , (* 196*) yyTCombType {  54,   51} , (* 197*) yyTCombType {  54,  682}
         , (* 198*) yyTCombType {  54,  496} , (* 199*) yyTCombType {  54,  682}
         , (* 200*) yyTCombType {  54,  682} , (* 201*) yyTCombType { 161,  306}
         , (* 202*) yyTCombType { 135,  136} , (* 203*) yyTCombType {  54,  495}
         , (* 204*) yyTCombType { 164,  307} , (* 205*) yyTCombType { 165,  308}
         , (* 206*) yyTCombType {  57,  654} , (* 207*) yyTCombType { 108,  550}
         , (* 208*) yyTCombType { 137,  553} , (* 209*) yyTCombType {  54,  496}
         , (* 210*) yyTCombType {  70,   49} , (* 211*) yyTCombType {  54,  682}
         , (* 212*) yyTCombType {  54,  682} , (* 213*) yyTCombType {  54,  682}
         , (* 214*) yyTCombType {  54,  682} , (* 215*) yyTCombType {  54,  682}
         , (* 216*) yyTCombType {  54,  682} , (* 217*) yyTCombType {  54,  682}
         , (* 218*) yyTCombType {  54,  682} , (* 219*) yyTCombType {  54,  682}
         , (* 220*) yyTCombType {  54,  682} , (* 221*) yyTCombType {  54,  496}
         , (* 222*) yyTCombType {  57,  654} , (* 223*) yyTCombType { 108,  550}
         , (* 224*) yyTCombType { 137,  553} , (* 225*) yyTCombType {  57,  654}
         , (* 226*) yyTCombType {  57,  654} , (* 227*) yyTCombType { 141,  142}
         , (* 228*) yyTCombType { 131,  292} , (* 229*) yyTCombType {  57,  654}
         , (* 230*) yyTCombType { 108,  550} , (* 231*) yyTCombType { 137,  553}
         , (* 232*) yyTCombType { 136,  284} , (* 233*) yyTCombType { 166,  276}
         , (* 234*) yyTCombType { 170,  311} , (* 235*) yyTCombType {  57,  654}
         , (* 236*) yyTCombType {  70,   50} , (* 237*) yyTCombType {  70,  240}
         , (* 238*) yyTCombType {  70,  241} , (* 239*) yyTCombType {  70,  242}
         , (* 240*) yyTCombType {  70,  243} , (* 241*) yyTCombType {  70,  244}
         , (* 242*) yyTCombType {  70,  245} , (* 243*) yyTCombType {  70,  246}
         , (* 244*) yyTCombType {  70,  247} , (* 245*) yyTCombType {  70,  248}
         , (* 246*) yyTCombType {  70,  249} , (* 247*) yyTCombType {  70,  250}
         , (* 248*) yyTCombType { 167,  309} , (* 249*) yyTCombType { 109,  552}
         , (* 250*) yyTCombType { 167,  310} , (* 251*) yyTCombType { 175,  176}
         , (* 252*) yyTCombType { 186,   29} , (* 253*) yyTCombType {  57,  654}
         , (* 254*) yyTCombType { 108,  550} , (* 255*) yyTCombType { 137,  553}
         , (* 256*) yyTCombType {  57,  654} , (* 257*) yyTCombType {  57,  654}
         , (* 258*) yyTCombType {  57,  654} , (* 259*) yyTCombType { 144,  145}
         , (* 260*) yyTCombType { 108,  550} , (* 261*) yyTCombType {  57,  654}
         , (* 262*) yyTCombType { 108,  550} , (* 263*) yyTCombType { 137,  553}
         , (* 264*) yyTCombType { 144,  505} , (* 265*) yyTCombType { 109,  552}
         , (* 266*) yyTCombType {  57,  654} , (* 267*) yyTCombType { 189,  314}
         , (* 268*) yyTCombType {  57,  654} , (* 269*) yyTCombType { 190,  191}
         , (* 270*) yyTCombType { 198,  315} , (* 271*) yyTCombType { 153,  300}
         , (* 272*) yyTCombType { 109,  552} , (* 273*) yyTCombType { 181,  182}
         , (* 274*) yyTCombType {  57,  654} , (* 275*) yyTCombType {  57,  654}
         , (* 276*) yyTCombType { 153,  301} , (* 277*) yyTCombType { 180,  228}
         , (* 278*) yyTCombType {  58,  655} , (* 279*) yyTCombType { 199,  451}
         , (* 280*) yyTCombType { 201,  503} , (* 281*) yyTCombType { 201,  503}
         , (* 282*) yyTCombType {  57,  654} , (* 283*) yyTCombType {  57,  654}
         , (* 284*) yyTCombType {  57,  654} , (* 285*) yyTCombType {  57,  654}
         , (* 286*) yyTCombType {  57,  654} , (* 287*) yyTCombType {  57,  654}
         , (* 288*) yyTCombType {  57,  654} , (* 289*) yyTCombType {  57,  654}
         , (* 290*) yyTCombType {  57,  654} , (* 291*) yyTCombType {  57,  654}
         , (* 292*) yyTCombType {  57,  654} , (* 293*) yyTCombType {  57,  654}
         , (* 294*) yyTCombType {  58,  655} , (* 295*) yyTCombType { 123,  288}
         , (* 296*) yyTCombType { 109,  552} , (* 297*) yyTCombType {  58,  655}
         , (* 298*) yyTCombType {  58,  655} , (* 299*) yyTCombType { 203,  204}
         , (* 300*) yyTCombType {  58,  655} , (* 301*) yyTCombType {  58,  655}
         , (* 302*) yyTCombType { 109,  110} , (* 303*) yyTCombType { 157,  303}
         , (* 304*) yyTCombType { 109,  552} , (* 305*) yyTCombType { 183,  491}
         , (* 306*) yyTCombType { 180,   36} , (* 307*) yyTCombType {  58,  655}
         , (* 308*) yyTCombType { 157,  304} , (* 309*) yyTCombType { 209,  317}
         , (* 310*) yyTCombType { 183,  184} , (* 311*) yyTCombType { 123,  289}
         , (* 312*) yyTCombType { 123,  290} , (* 313*) yyTCombType { 210,  452}
         , (* 314*) yyTCombType { 180,  230} , (* 315*) yyTCombType { 181,  490}
         , (* 316*) yyTCombType { 211,  201} , (* 317*) yyTCombType { 181,  185}
         , (* 318*) yyTCombType { 212,  213} , (* 319*) yyTCombType { 123,  474}
         , (* 320*) yyTCombType { 180,  231} , (* 321*) yyTCombType { 202,  316}
         , (* 322*) yyTCombType { 202,   31} , (* 323*) yyTCombType { 215,  471}
         , (* 324*) yyTCombType { 213,  478} , (* 325*) yyTCombType {  58,  655}
         , (* 326*) yyTCombType { 180,  232} , (* 327*) yyTCombType { 213,  478}
         , (* 328*) yyTCombType {  58,  655} , (* 329*) yyTCombType {  58,  655}
         , (* 330*) yyTCombType {  58,  655} , (* 331*) yyTCombType { 214,   17}
         , (* 332*) yyTCombType { 216,  218} , (* 333*) yyTCombType {  58,  655}
         , (* 334*) yyTCombType { 214,   19} , (* 335*) yyTCombType { 158,   46}
         , (* 336*) yyTCombType {  60,  252} , (* 337*) yyTCombType { 217,  318}
         , (* 338*) yyTCombType {  58,  655} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType {  58,  655} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {   0,    0} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType { 123,  636} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType {  58,  655} , (* 347*) yyTCombType {  58,  655}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType {  60,  657} , (* 351*) yyTCombType { 138,  555}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {  58,  655} , (* 355*) yyTCombType {  58,  655}
         , (* 356*) yyTCombType {  58,  655} , (* 357*) yyTCombType {  58,  655}
         , (* 358*) yyTCombType {  58,  655} , (* 359*) yyTCombType {  58,  655}
         , (* 360*) yyTCombType {  58,  655} , (* 361*) yyTCombType {  58,  655}
         , (* 362*) yyTCombType {  58,  655} , (* 363*) yyTCombType {  58,  655}
         , (* 364*) yyTCombType {  58,  655} , (* 365*) yyTCombType {  58,  655}
         , (* 366*) yyTCombType {  60,  657} , (* 367*) yyTCombType { 138,  555}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {  60,  657}
         , (* 370*) yyTCombType {  60,  657} , (* 371*) yyTCombType { 158,   86}
         , (* 372*) yyTCombType {  60,  657} , (* 373*) yyTCombType {  60,  657}
         , (* 374*) yyTCombType { 138,  555} , (* 375*) yyTCombType { 158,  277}
         , (* 376*) yyTCombType { 158,  617} , (* 377*) yyTCombType {   0,    0}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {  60,  657}
         , (* 380*) yyTCombType { 158,  278} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType { 158,   89}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType { 213,  478} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {  60,  657}
         , (* 398*) yyTCombType { 138,  555} , (* 399*) yyTCombType { 214,  489}
         , (* 400*) yyTCombType {  60,  657} , (* 401*) yyTCombType {  60,  657}
         , (* 402*) yyTCombType {  60,  657} , (* 403*) yyTCombType { 158,  280}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {  60,  657}
         , (* 406*) yyTCombType { 138,  127} , (* 407*) yyTCombType {   0,    0}
         , (* 408*) yyTCombType {  62,  661} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {  60,  657} , (* 411*) yyTCombType {   0,    0}
         , (* 412*) yyTCombType {  60,  657} , (* 413*) yyTCombType {   0,    0}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType { 168,  726} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {  60,  657} , (* 419*) yyTCombType {  60,  657}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType { 168,  726}
         , (* 422*) yyTCombType {  62,  661} , (* 423*) yyTCombType { 158,   93}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {   0,    0}
         , (* 426*) yyTCombType {  60,  657} , (* 427*) yyTCombType {  60,  657}
         , (* 428*) yyTCombType {  60,  657} , (* 429*) yyTCombType {  60,  657}
         , (* 430*) yyTCombType {  60,  657} , (* 431*) yyTCombType {  60,  657}
         , (* 432*) yyTCombType {  60,  657} , (* 433*) yyTCombType {  60,  657}
         , (* 434*) yyTCombType {  60,  657} , (* 435*) yyTCombType {  60,  657}
         , (* 436*) yyTCombType {  60,  657} , (* 437*) yyTCombType {  60,  657}
         , (* 438*) yyTCombType {  62,  661} , (* 439*) yyTCombType {   0,    0}
         , (* 440*) yyTCombType {   0,    0} , (* 441*) yyTCombType {  62,  661}
         , (* 442*) yyTCombType {  62,  661} , (* 443*) yyTCombType {   0,    0}
         , (* 444*) yyTCombType {  62,  661} , (* 445*) yyTCombType {  62,  661}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType { 168,  726} , (* 451*) yyTCombType {  62,  661}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType { 168,  726} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType { 168,  726} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {   0,    0}
         , (* 468*) yyTCombType {   0,    0} , (* 469*) yyTCombType {  62,  661}
         , (* 470*) yyTCombType { 168,  726} , (* 471*) yyTCombType {   0,    0}
         , (* 472*) yyTCombType {  62,  661} , (* 473*) yyTCombType {  62,  661}
         , (* 474*) yyTCombType {  62,  661} , (* 475*) yyTCombType {   0,    0}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {  62,  661}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {   0,    0}
         , (* 480*) yyTCombType {   0,    0} , (* 481*) yyTCombType {   0,    0}
         , (* 482*) yyTCombType {  62,  661} , (* 483*) yyTCombType { 150,  529}
         , (* 484*) yyTCombType {  62,  661} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType {   0,    0} , (* 487*) yyTCombType {   0,    0}
         , (* 488*) yyTCombType { 150,  529} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {  62,  661} , (* 491*) yyTCombType {  62,  661}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType { 150,  529}
         , (* 494*) yyTCombType {   0,    0} , (* 495*) yyTCombType {  87,  644}
         , (* 496*) yyTCombType {  63,  663} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {  62,  661} , (* 499*) yyTCombType {  62,  661}
         , (* 500*) yyTCombType {  62,  661} , (* 501*) yyTCombType {  62,  661}
         , (* 502*) yyTCombType {  62,  661} , (* 503*) yyTCombType {  62,  661}
         , (* 504*) yyTCombType {  62,  661} , (* 505*) yyTCombType {  62,  661}
         , (* 506*) yyTCombType {  62,  661} , (* 507*) yyTCombType {  62,  661}
         , (* 508*) yyTCombType {  62,  661} , (* 509*) yyTCombType {  62,  661}
         , (* 510*) yyTCombType {  63,  663} , (* 511*) yyTCombType {  87,  644}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType { 150,  529}
         , (* 518*) yyTCombType {  87,  644} , (* 519*) yyTCombType {   0,    0}
         , (* 520*) yyTCombType {   0,    0} , (* 521*) yyTCombType {  87,  644}
         , (* 522*) yyTCombType {  63,  663} , (* 523*) yyTCombType {   0,    0}
         , (* 524*) yyTCombType {   0,    0} , (* 525*) yyTCombType { 150,  529}
         , (* 526*) yyTCombType {  63,  663} , (* 527*) yyTCombType {   0,    0}
         , (* 528*) yyTCombType {   0,    0} , (* 529*) yyTCombType {  63,  663}
         , (* 530*) yyTCombType {  63,  663} , (* 531*) yyTCombType { 150,  529}
         , (* 532*) yyTCombType {  63,  663} , (* 533*) yyTCombType {  63,  663}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType {   0,    0} , (* 537*) yyTCombType { 150,  529}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType {  63,  663}
         , (* 540*) yyTCombType {   0,    0} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {  87,  644} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType {  87,  644} , (* 545*) yyTCombType {   0,    0}
         , (* 546*) yyTCombType {  87,  644} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {  87,   88} , (* 549*) yyTCombType {   0,    0}
         , (* 550*) yyTCombType {  87,  644} , (* 551*) yyTCombType {   0,    0}
         , (* 552*) yyTCombType {   0,    0} , (* 553*) yyTCombType {   0,    0}
         , (* 554*) yyTCombType {   0,    0} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {   0,    0} , (* 557*) yyTCombType {  63,  663}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType {  63,  663}
         , (* 560*) yyTCombType {  63,  663} , (* 561*) yyTCombType {  63,  663}
         , (* 562*) yyTCombType {  63,  663} , (* 563*) yyTCombType {   0,    0}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {  63,  663}
         , (* 566*) yyTCombType {   0,    0} , (* 567*) yyTCombType {   0,    0}
         , (* 568*) yyTCombType {   0,    0} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType {  63,  663} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType {  63,  663} , (* 573*) yyTCombType {  63,  663}
         , (* 574*) yyTCombType {  63,  663} , (* 575*) yyTCombType {  63,  663}
         , (* 576*) yyTCombType {  63,  663} , (* 577*) yyTCombType {  63,  663}
         , (* 578*) yyTCombType {   0,    0} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType {   0,    0} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType { 106,  557}
         , (* 584*) yyTCombType {  65,  665} , (* 585*) yyTCombType {   0,    0}
         , (* 586*) yyTCombType {  63,  663} , (* 587*) yyTCombType {  63,  663}
         , (* 588*) yyTCombType {  63,  663} , (* 589*) yyTCombType {  63,  663}
         , (* 590*) yyTCombType {  63,  663} , (* 591*) yyTCombType {  63,  663}
         , (* 592*) yyTCombType {  63,  663} , (* 593*) yyTCombType {  63,  663}
         , (* 594*) yyTCombType {  63,  663} , (* 595*) yyTCombType {  63,  663}
         , (* 596*) yyTCombType {  63,  663} , (* 597*) yyTCombType {  63,  663}
         , (* 598*) yyTCombType {  65,  665} , (* 599*) yyTCombType { 106,  557}
         , (* 600*) yyTCombType {   0,    0} , (* 601*) yyTCombType {   0,    0}
         , (* 602*) yyTCombType {   0,    0} , (* 603*) yyTCombType { 204,  478}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType {   0,    0}
         , (* 606*) yyTCombType { 106,  557} , (* 607*) yyTCombType {   0,    0}
         , (* 608*) yyTCombType { 204,  478} , (* 609*) yyTCombType {   0,    0}
         , (* 610*) yyTCombType {  65,  665} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType {   0,    0} , (* 613*) yyTCombType {   0,    0}
         , (* 614*) yyTCombType {  65,  665} , (* 615*) yyTCombType {   0,    0}
         , (* 616*) yyTCombType { 204,  478} , (* 617*) yyTCombType {  65,  665}
         , (* 618*) yyTCombType {  65,  665} , (* 619*) yyTCombType { 204,  478}
         , (* 620*) yyTCombType {  65,  665} , (* 621*) yyTCombType {  65,  665}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {   0,    0} , (* 627*) yyTCombType {  65,  665}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType {   0,    0}
         , (* 630*) yyTCombType { 106,  557} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType { 204,  478} , (* 633*) yyTCombType {   0,    0}
         , (* 634*) yyTCombType { 106,  557} , (* 635*) yyTCombType { 106,  107}
         , (* 636*) yyTCombType { 106,  557} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType { 106,  557} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType { 204,  478} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType {   0,    0}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {  65,  665}
         , (* 646*) yyTCombType { 204,  478} , (* 647*) yyTCombType {  65,  665}
         , (* 648*) yyTCombType {  65,  665} , (* 649*) yyTCombType {  65,  665}
         , (* 650*) yyTCombType {  65,  665} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType { 204,  478} , (* 653*) yyTCombType {  65,  665}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {   0,    0}
         , (* 658*) yyTCombType {  65,  665} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {  65,  665} , (* 661*) yyTCombType {  65,  665}
         , (* 662*) yyTCombType {  65,  665} , (* 663*) yyTCombType {  65,  665}
         , (* 664*) yyTCombType {  65,  665} , (* 665*) yyTCombType {  65,  665}
         , (* 666*) yyTCombType {  65,  260} , (* 667*) yyTCombType {  65,  261}
         , (* 668*) yyTCombType {  65,  262} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {   0,    0} , (* 671*) yyTCombType { 140,  645}
         , (* 672*) yyTCombType {  66,  666} , (* 673*) yyTCombType {   0,    0}
         , (* 674*) yyTCombType {  65,  665} , (* 675*) yyTCombType {  65,  665}
         , (* 676*) yyTCombType {  65,  665} , (* 677*) yyTCombType {  65,  665}
         , (* 678*) yyTCombType {  65,  665} , (* 679*) yyTCombType {  65,  665}
         , (* 680*) yyTCombType {  65,  665} , (* 681*) yyTCombType {  65,  665}
         , (* 682*) yyTCombType {  65,  665} , (* 683*) yyTCombType {  65,  665}
         , (* 684*) yyTCombType {  65,  665} , (* 685*) yyTCombType {  65,  665}
         , (* 686*) yyTCombType {  66,  666} , (* 687*) yyTCombType { 140,  645}
         , (* 688*) yyTCombType {   0,    0} , (* 689*) yyTCombType {   0,    0}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType {   0,    0}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType {   0,    0}
         , (* 694*) yyTCombType { 140,  645} , (* 695*) yyTCombType {   0,    0}
         , (* 696*) yyTCombType {   0,    0} , (* 697*) yyTCombType { 140,  141}
         , (* 698*) yyTCombType {  66,  666} , (* 699*) yyTCombType {   0,    0}
         , (* 700*) yyTCombType {   0,    0} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType {  66,  666} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {  66,  666}
         , (* 706*) yyTCombType {  66,  666} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType {  66,  666} , (* 709*) yyTCombType {  66,  666}
         , (* 710*) yyTCombType {   0,    0} , (* 711*) yyTCombType {   0,    0}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {   0,    0}
         , (* 714*) yyTCombType {   0,    0} , (* 715*) yyTCombType {  66,  666}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType {   0,    0}
         , (* 718*) yyTCombType { 140,  645} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType { 140,  645} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType { 140,  645} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {   0,    0} , (* 725*) yyTCombType {   0,    0}
         , (* 726*) yyTCombType { 140,  645} , (* 727*) yyTCombType {   0,    0}
         , (* 728*) yyTCombType {   0,    0} , (* 729*) yyTCombType {   0,    0}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {   0,    0}
         , (* 732*) yyTCombType {   0,    0} , (* 733*) yyTCombType {  66,  666}
         , (* 734*) yyTCombType {   0,    0} , (* 735*) yyTCombType {  66,  666}
         , (* 736*) yyTCombType {  66,  666} , (* 737*) yyTCombType {  66,  666}
         , (* 738*) yyTCombType {  66,  666} , (* 739*) yyTCombType {   0,    0}
         , (* 740*) yyTCombType {   0,    0} , (* 741*) yyTCombType {  66,  666}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType {   0,    0} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType {  66,  666} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType {  66,  666} , (* 749*) yyTCombType {  66,  666}
         , (* 750*) yyTCombType {  66,  666} , (* 751*) yyTCombType {  66,  666}
         , (* 752*) yyTCombType {  66,  666} , (* 753*) yyTCombType {  66,  666}
         , (* 754*) yyTCombType {  66,  666} , (* 755*) yyTCombType {  66,  666}
         , (* 756*) yyTCombType {  66,  666} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType {   0,    0}
         , (* 762*) yyTCombType {  66,  666} , (* 763*) yyTCombType {  66,  666}
         , (* 764*) yyTCombType {  66,  666} , (* 765*) yyTCombType {  66,  666}
         , (* 766*) yyTCombType {  66,  666} , (* 767*) yyTCombType {  66,  666}
         , (* 768*) yyTCombType {  66,  666} , (* 769*) yyTCombType {  66,  666}
         , (* 770*) yyTCombType {  66,  666} , (* 771*) yyTCombType {  66,  666}
         , (* 772*) yyTCombType {  66,  666} , (* 773*) yyTCombType {  66,  666}
         , (* 774*) yyTCombType {  68,  668} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {   0,    0} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType { 191,  478} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType { 156,  539} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType { 159,  540} , (* 783*) yyTCombType { 191,  478}
         , (* 784*) yyTCombType {  68,  263} , (* 785*) yyTCombType { 156,  539}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType { 159,  540}
         , (* 788*) yyTCombType {  68,  668} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType { 156,  539} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType { 159,  540} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType { 191,  478} , (* 797*) yyTCombType {   0,    0}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType { 191,  478}
         , (* 800*) yyTCombType {  68,  668} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {  68,  668} , (* 805*) yyTCombType {  68,  264}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType {  68,  668}
         , (* 808*) yyTCombType {  68,  668} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType {  68,  668} , (* 811*) yyTCombType {  68,  668}
         , (* 812*) yyTCombType { 191,  478} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType { 156,  539} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType { 159,  540} , (* 817*) yyTCombType {  68,  668}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType { 191,  478} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType { 156,  539} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType { 159,  540} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType { 191,  478} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType { 156,  539} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType { 159,  540} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType { 191,  478} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType { 156,  539} , (* 835*) yyTCombType {  68,  668}
         , (* 836*) yyTCombType { 159,  540} , (* 837*) yyTCombType {  68,  668}
         , (* 838*) yyTCombType {  68,  668} , (* 839*) yyTCombType {  68,  668}
         , (* 840*) yyTCombType {  68,  668} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {  68,  668}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType {  68,  668} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {  68,  668} , (* 851*) yyTCombType {  68,  668}
         , (* 852*) yyTCombType {  68,  668} , (* 853*) yyTCombType {  68,  668}
         , (* 854*) yyTCombType {  68,  668} , (* 855*) yyTCombType {  68,  668}
         , (* 856*) yyTCombType {  68,  668} , (* 857*) yyTCombType {  68,  668}
         , (* 858*) yyTCombType {  68,  668} , (* 859*) yyTCombType {  68,  265}
         , (* 860*) yyTCombType {  68,  266} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {  68,  668} , (* 865*) yyTCombType {  68,  668}
         , (* 866*) yyTCombType {  68,  668} , (* 867*) yyTCombType {  68,  668}
         , (* 868*) yyTCombType {  68,  668} , (* 869*) yyTCombType {  68,  668}
         , (* 870*) yyTCombType {  68,  668} , (* 871*) yyTCombType {  68,  668}
         , (* 872*) yyTCombType {  68,  668} , (* 873*) yyTCombType {  68,  668}
         , (* 874*) yyTCombType {  68,  668} , (* 875*) yyTCombType {  68,  668}
         , (* 876*) yyTCombType {  71,  678} , (* 877*) yyTCombType {  94,  619}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {  94,  558}
         , (* 886*) yyTCombType {  71,  678} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType {   0,    0}
         , (* 890*) yyTCombType {  71,  678} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {  94,  558}
         , (* 902*) yyTCombType {  71,  678} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {  94,  619}
         , (* 906*) yyTCombType {  71,  678} , (* 907*) yyTCombType {  71,  678}
         , (* 908*) yyTCombType {  94,  558} , (* 909*) yyTCombType {  71,  678}
         , (* 910*) yyTCombType {  71,  678} , (* 911*) yyTCombType {  94,  558}
         , (* 912*) yyTCombType {  71,  678} , (* 913*) yyTCombType {  71,  678}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType {   0,    0} , (* 919*) yyTCombType {  71,  678}
         , (* 920*) yyTCombType {   0,    0} , (* 921*) yyTCombType {   0,    0}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {   0,    0}
         , (* 926*) yyTCombType {   0,    0} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType {   0,    0} , (* 929*) yyTCombType {   0,    0}
         , (* 930*) yyTCombType {   0,    0} , (* 931*) yyTCombType {   0,    0}
         , (* 932*) yyTCombType {  94,  558} , (* 933*) yyTCombType {   0,    0}
         , (* 934*) yyTCombType {  94,  558} , (* 935*) yyTCombType {   0,    0}
         , (* 936*) yyTCombType {  94,  558} , (* 937*) yyTCombType {  71,  678}
         , (* 938*) yyTCombType {  71,   72} , (* 939*) yyTCombType {  71,  678}
         , (* 940*) yyTCombType {  94,  558} , (* 941*) yyTCombType {  71,  678}
         , (* 942*) yyTCombType {  71,  678} , (* 943*) yyTCombType {   0,    0}
         , (* 944*) yyTCombType {   0,    0} , (* 945*) yyTCombType {  71,  678}
         , (* 946*) yyTCombType {   0,    0} , (* 947*) yyTCombType {   0,    0}
         , (* 948*) yyTCombType {   0,    0} , (* 949*) yyTCombType {   0,    0}
         , (* 950*) yyTCombType {  71,  678} , (* 951*) yyTCombType {   0,    0}
         , (* 952*) yyTCombType {  71,  678} , (* 953*) yyTCombType {  71,  678}
         , (* 954*) yyTCombType {  71,  678} , (* 955*) yyTCombType {  71,  678}
         , (* 956*) yyTCombType {  71,  678} , (* 957*) yyTCombType {  71,  678}
         , (* 958*) yyTCombType {  71,  678} , (* 959*) yyTCombType {  71,  678}
         , (* 960*) yyTCombType {  71,  678} , (* 961*) yyTCombType {  71,  678}
         , (* 962*) yyTCombType {  71,  678} , (* 963*) yyTCombType {  71,  269}
         , (* 964*) yyTCombType {   0,    0} , (* 965*) yyTCombType {   0,    0}
         , (* 966*) yyTCombType {  71,  678} , (* 967*) yyTCombType {  71,  678}
         , (* 968*) yyTCombType {  71,  678} , (* 969*) yyTCombType {  71,  678}
         , (* 970*) yyTCombType {  71,  678} , (* 971*) yyTCombType {  71,  678}
         , (* 972*) yyTCombType {  71,  678} , (* 973*) yyTCombType {  71,  678}
         , (* 974*) yyTCombType {  71,  678} , (* 975*) yyTCombType {  71,  678}
         , (* 976*) yyTCombType {  71,  678} , (* 977*) yyTCombType {  71,  678}
         , (* 978*) yyTCombType {  73,  677} , (* 979*) yyTCombType {   0,    0}
         , (* 980*) yyTCombType {   0,    0} , (* 981*) yyTCombType {   0,    0}
         , (* 982*) yyTCombType { 192,  489} , (* 983*) yyTCombType {   0,    0}
         , (* 984*) yyTCombType { 162,  546} , (* 985*) yyTCombType {   0,    0}
         , (* 986*) yyTCombType {   0,    0} , (* 987*) yyTCombType { 192,  489}
         , (* 988*) yyTCombType {  73,  677} , (* 989*) yyTCombType { 162,  546}
         , (* 990*) yyTCombType {   0,    0} , (* 991*) yyTCombType {   0,    0}
         , (* 992*) yyTCombType {  73,  677} , (* 993*) yyTCombType {   0,    0}
         , (* 994*) yyTCombType { 162,  546} , (* 995*) yyTCombType {   0,    0}
         , (* 996*) yyTCombType {   0,    0} , (* 997*) yyTCombType {   0,    0}
         , (* 998*) yyTCombType {   0,    0} , (* 999*) yyTCombType {   0,    0}
         , (*1000*) yyTCombType { 192,   17} , (*1001*) yyTCombType {   0,    0}
         , (*1002*) yyTCombType {   0,    0} , (*1003*) yyTCombType { 192,   19}
         , (*1004*) yyTCombType {  73,  677} , (*1005*) yyTCombType {   0,    0}
         , (*1006*) yyTCombType {   0,    0} , (*1007*) yyTCombType {   0,    0}
         , (*1008*) yyTCombType {  73,  677} , (*1009*) yyTCombType {  73,  677}
         , (*1010*) yyTCombType {   0,    0} , (*1011*) yyTCombType {  73,  677}
         , (*1012*) yyTCombType {  73,  677} , (*1013*) yyTCombType {   0,    0}
         , (*1014*) yyTCombType {  73,  677} , (*1015*) yyTCombType {  73,  677}
         , (*1016*) yyTCombType { 192,  489} , (*1017*) yyTCombType {   0,    0}
         , (*1018*) yyTCombType { 162,  546} , (*1019*) yyTCombType {   0,    0}
         , (*1020*) yyTCombType {   0,    0} , (*1021*) yyTCombType {  73,  677}
         , (*1022*) yyTCombType {   0,    0} , (*1023*) yyTCombType {   0,    0}
         , (*1024*) yyTCombType { 192,  489} , (*1025*) yyTCombType {   0,    0}
         , (*1026*) yyTCombType { 162,  546} , (*1027*) yyTCombType {   0,    0}
         , (*1028*) yyTCombType {   0,    0} , (*1029*) yyTCombType {   0,    0}
         , (*1030*) yyTCombType { 192,  489} , (*1031*) yyTCombType {   0,    0}
         , (*1032*) yyTCombType { 162,  546} , (*1033*) yyTCombType {   0,    0}
         , (*1034*) yyTCombType {   0,    0} , (*1035*) yyTCombType {   0,    0}
         , (*1036*) yyTCombType { 192,  489} , (*1037*) yyTCombType {   0,    0}
         , (*1038*) yyTCombType { 162,  546} , (*1039*) yyTCombType {  73,  677}
         , (*1040*) yyTCombType {  73,  695} , (*1041*) yyTCombType {  73,  677}
         , (*1042*) yyTCombType {  73,  677} , (*1043*) yyTCombType {  73,  677}
         , (*1044*) yyTCombType {  73,  677} , (*1045*) yyTCombType {   0,    0}
         , (*1046*) yyTCombType {   0,    0} , (*1047*) yyTCombType {  73,  677}
         , (*1048*) yyTCombType {   0,    0} , (*1049*) yyTCombType {   0,    0}
         , (*1050*) yyTCombType {   0,    0} , (*1051*) yyTCombType {   0,    0}
         , (*1052*) yyTCombType {  73,  677} , (*1053*) yyTCombType {  73,  695}
         , (*1054*) yyTCombType {  73,  677} , (*1055*) yyTCombType {  73,  677}
         , (*1056*) yyTCombType {  73,  677} , (*1057*) yyTCombType {  73,  677}
         , (*1058*) yyTCombType {  73,  677} , (*1059*) yyTCombType {  73,  677}
         , (*1060*) yyTCombType {  73,  677} , (*1061*) yyTCombType {  73,  677}
         , (*1062*) yyTCombType {  73,  677} , (*1063*) yyTCombType {  73,  677}
         , (*1064*) yyTCombType {  73,  677} , (*1065*) yyTCombType {  73,  695}
         , (*1066*) yyTCombType {  80,  662} , (*1067*) yyTCombType {   0,    0}
         , (*1068*) yyTCombType {  73,  677} , (*1069*) yyTCombType {  73,  677}
         , (*1070*) yyTCombType {  73,  677} , (*1071*) yyTCombType {  73,  677}
         , (*1072*) yyTCombType {  73,  677} , (*1073*) yyTCombType {  73,  677}
         , (*1074*) yyTCombType {  73,  677} , (*1075*) yyTCombType {  73,  677}
         , (*1076*) yyTCombType {  73,  677} , (*1077*) yyTCombType {  73,  677}
         , (*1078*) yyTCombType {  73,  677} , (*1079*) yyTCombType {  73,  677}
         , (*1080*) yyTCombType {  80,  662} , (*1081*) yyTCombType {   0,    0}
         , (*1082*) yyTCombType {   0,    0} , (*1083*) yyTCombType {   0,    0}
         , (*1084*) yyTCombType {   0,    0} , (*1085*) yyTCombType { 205,  489}
         , (*1086*) yyTCombType {   0,    0} , (*1087*) yyTCombType {   0,    0}
         , (*1088*) yyTCombType {   0,    0} , (*1089*) yyTCombType {   0,    0}
         , (*1090*) yyTCombType { 205,  489} , (*1091*) yyTCombType {   0,    0}
         , (*1092*) yyTCombType {  80,  253} , (*1093*) yyTCombType {   0,    0}
         , (*1094*) yyTCombType {   0,    0} , (*1095*) yyTCombType {   0,    0}
         , (*1096*) yyTCombType {  80,  662} , (*1097*) yyTCombType {   0,    0}
         , (*1098*) yyTCombType { 205,   17} , (*1099*) yyTCombType {  80,  662}
         , (*1100*) yyTCombType {  80,  662} , (*1101*) yyTCombType { 205,   19}
         , (*1102*) yyTCombType {  80,  662} , (*1103*) yyTCombType {  80,  662}
         , (*1104*) yyTCombType {   0,    0} , (*1105*) yyTCombType {   0,    0}
         , (*1106*) yyTCombType {   0,    0} , (*1107*) yyTCombType {   0,    0}
         , (*1108*) yyTCombType {   0,    0} , (*1109*) yyTCombType {  80,  662}
         , (*1110*) yyTCombType {   0,    0} , (*1111*) yyTCombType {   0,    0}
         , (*1112*) yyTCombType {   0,    0} , (*1113*) yyTCombType {   0,    0}
         , (*1114*) yyTCombType { 205,  489} , (*1115*) yyTCombType {   0,    0}
         , (*1116*) yyTCombType {   0,    0} , (*1117*) yyTCombType {   0,    0}
         , (*1118*) yyTCombType {   0,    0} , (*1119*) yyTCombType {   0,    0}
         , (*1120*) yyTCombType {   0,    0} , (*1121*) yyTCombType {   0,    0}
         , (*1122*) yyTCombType { 205,  489} , (*1123*) yyTCombType {   0,    0}
         , (*1124*) yyTCombType {   0,    0} , (*1125*) yyTCombType {   0,    0}
         , (*1126*) yyTCombType {   0,    0} , (*1127*) yyTCombType {  80,  662}
         , (*1128*) yyTCombType { 205,  489} , (*1129*) yyTCombType {  80,  254}
         , (*1130*) yyTCombType {  80,  662} , (*1131*) yyTCombType {  80,  662}
         , (*1132*) yyTCombType {  80,  662} , (*1133*) yyTCombType {   0,    0}
         , (*1134*) yyTCombType { 205,  489} , (*1135*) yyTCombType {  80,  662}
         , (*1136*) yyTCombType {   0,    0} , (*1137*) yyTCombType {   0,    0}
         , (*1138*) yyTCombType {   0,    0} , (*1139*) yyTCombType {   0,    0}
         , (*1140*) yyTCombType {  80,  662} , (*1141*) yyTCombType {   0,    0}
         , (*1142*) yyTCombType {  80,  662} , (*1143*) yyTCombType {  80,  255}
         , (*1144*) yyTCombType {  80,  256} , (*1145*) yyTCombType {  80,  257}
         , (*1146*) yyTCombType {  80,  258} , (*1147*) yyTCombType {  80,  259}
         , (*1148*) yyTCombType {  80,  662} , (*1149*) yyTCombType {  80,  662}
         , (*1150*) yyTCombType {   0,    0} , (*1151*) yyTCombType {   0,    0}
         , (*1152*) yyTCombType {   0,    0} , (*1153*) yyTCombType {   0,    0}
         , (*1154*) yyTCombType {   0,    0} , (*1155*) yyTCombType {   0,    0}
         , (*1156*) yyTCombType {  80,  662} , (*1157*) yyTCombType {  80,  662}
         , (*1158*) yyTCombType {  80,  662} , (*1159*) yyTCombType {  80,  662}
         , (*1160*) yyTCombType {  80,  662} , (*1161*) yyTCombType {  80,  662}
         , (*1162*) yyTCombType {  80,  662} , (*1163*) yyTCombType {  80,  662}
         , (*1164*) yyTCombType {  80,  662} , (*1165*) yyTCombType {  80,  662}
         , (*1166*) yyTCombType {  80,  662} , (*1167*) yyTCombType {  80,  662}
         , (*1168*) yyTCombType {  93,  496} , (*1169*) yyTCombType {   0,    0}
         , (*1170*) yyTCombType {   0,    0} , (*1171*) yyTCombType {   0,    0}
         , (*1172*) yyTCombType {   0,    0} , (*1173*) yyTCombType {   0,    0}
         , (*1174*) yyTCombType {   0,    0} , (*1175*) yyTCombType {   0,    0}
         , (*1176*) yyTCombType {  93,  496} , (*1177*) yyTCombType { 111,  620}
         , (*1178*) yyTCombType {   0,    0} , (*1179*) yyTCombType {   0,    0}
         , (*1180*) yyTCombType {   0,    0} , (*1181*) yyTCombType {   0,    0}
         , (*1182*) yyTCombType {   0,    0} , (*1183*) yyTCombType {   0,    0}
         , (*1184*) yyTCombType {   0,    0} , (*1185*) yyTCombType { 111,  627}
         , (*1186*) yyTCombType {   0,    0} , (*1187*) yyTCombType {   0,    0}
         , (*1188*) yyTCombType {   0,    0} , (*1189*) yyTCombType {   0,    0}
         , (*1190*) yyTCombType {   0,    0} , (*1191*) yyTCombType {   0,    0}
         , (*1192*) yyTCombType {  93,  496} , (*1193*) yyTCombType {   0,    0}
         , (*1194*) yyTCombType {   0,    0} , (*1195*) yyTCombType {   0,    0}
         , (*1196*) yyTCombType {  93,  496} , (*1197*) yyTCombType { 177,  740}
         , (*1198*) yyTCombType {   0,    0} , (*1199*) yyTCombType {  93,  496}
         , (*1200*) yyTCombType {   0,    0} , (*1201*) yyTCombType { 111,  627}
         , (*1202*) yyTCombType {  93,  496} , (*1203*) yyTCombType {   0,    0}
         , (*1204*) yyTCombType { 151,  530} , (*1205*) yyTCombType { 111,  620}
         , (*1206*) yyTCombType {   0,    0} , (*1207*) yyTCombType { 163,  547}
         , (*1208*) yyTCombType { 111,  627} , (*1209*) yyTCombType { 151,  530}
         , (*1210*) yyTCombType {   0,    0} , (*1211*) yyTCombType { 111,  627}
         , (*1212*) yyTCombType { 163,  547} , (*1213*) yyTCombType {   0,    0}
         , (*1214*) yyTCombType { 151,  530} , (*1215*) yyTCombType {   0,    0}
         , (*1216*) yyTCombType { 177,  475} , (*1217*) yyTCombType { 163,  547}
         , (*1218*) yyTCombType {   0,    0} , (*1219*) yyTCombType {   0,    0}
         , (*1220*) yyTCombType {   0,    0} , (*1221*) yyTCombType {   0,    0}
         , (*1222*) yyTCombType {   0,    0} , (*1223*) yyTCombType {  93,  496}
         , (*1224*) yyTCombType {  93,   51} , (*1225*) yyTCombType {  93,  496}
         , (*1226*) yyTCombType {   0,    0} , (*1227*) yyTCombType {  93,  496}
         , (*1228*) yyTCombType {  93,  496} , (*1229*) yyTCombType {   0,    0}
         , (*1230*) yyTCombType {  93,  496} , (*1231*) yyTCombType {  93,  496}
         , (*1232*) yyTCombType { 111,  627} , (*1233*) yyTCombType {  93,  496}
         , (*1234*) yyTCombType { 111,  627} , (*1235*) yyTCombType {   0,    0}
         , (*1236*) yyTCombType { 111,  627} , (*1237*) yyTCombType {   0,    0}
         , (*1238*) yyTCombType { 151,  530} , (*1239*) yyTCombType {   0,    0}
         , (*1240*) yyTCombType { 111,  627} , (*1241*) yyTCombType { 163,  547}
         , (*1242*) yyTCombType {   0,    0} , (*1243*) yyTCombType {   0,    0}
         , (*1244*) yyTCombType { 177,  313} , (*1245*) yyTCombType {   0,    0}
         , (*1246*) yyTCombType { 151,  530} , (*1247*) yyTCombType { 177,  475}
         , (*1248*) yyTCombType {   0,    0} , (*1249*) yyTCombType { 163,  547}
         , (*1250*) yyTCombType {   0,    0} , (*1251*) yyTCombType {   0,    0}
         , (*1252*) yyTCombType { 151,  530} , (*1253*) yyTCombType {   0,    0}
         , (*1254*) yyTCombType { 179,  735} , (*1255*) yyTCombType { 163,  547}
         , (*1256*) yyTCombType {   0,    0} , (*1257*) yyTCombType {   0,    0}
         , (*1258*) yyTCombType { 151,  530} , (*1259*) yyTCombType { 179,  737}
         , (*1260*) yyTCombType {   0,    0} , (*1261*) yyTCombType { 163,  547}
         , (*1262*) yyTCombType {   0,    0} , (*1263*) yyTCombType {   0,    0}
         , (*1264*) yyTCombType { 179,  735} , (*1265*) yyTCombType { 177,  475}
         , (*1266*) yyTCombType { 177,  475} , (*1267*) yyTCombType {   0,    0}
         , (*1268*) yyTCombType {   0,    0} , (*1269*) yyTCombType {   0,    0}
         , (*1270*) yyTCombType {   0,    0} , (*1271*) yyTCombType {   0,    0}
         , (*1272*) yyTCombType {   0,    0} , (*1273*) yyTCombType { 177,  475}
         , (*1274*) yyTCombType { 177,  475} , (*1275*) yyTCombType { 177,  475}
         , (*1276*) yyTCombType { 177,  475} , (*1277*) yyTCombType { 177,  475}
         , (*1278*) yyTCombType { 177,  475} , (*1279*) yyTCombType { 177,  475}
         , (*1280*) yyTCombType { 177,  475} , (*1281*) yyTCombType { 177,  475}
         , (*1282*) yyTCombType { 177,  475} , (*1283*) yyTCombType { 177,  475}
         , (*1284*) yyTCombType { 177,  475} , (*1285*) yyTCombType {   0,    0}
         , (*1286*) yyTCombType {   0,    0} , (*1287*) yyTCombType {   0,    0}
         , (*1288*) yyTCombType { 179,  737} , (*1289*) yyTCombType {   0,    0}
         , (*1290*) yyTCombType { 151,  298} , (*1291*) yyTCombType {   0,    0}
         , (*1292*) yyTCombType {   0,    0} , (*1293*) yyTCombType {   0,    0}
         , (*1294*) yyTCombType {   0,    0} , (*1295*) yyTCombType {   0,    0}
         , (*1296*) yyTCombType { 179,  737} , (*1297*) yyTCombType {   0,    0}
         , (*1298*) yyTCombType {   0,    0} , (*1299*) yyTCombType {   0,    0}
         , (*1300*) yyTCombType {   0,    0} , (*1301*) yyTCombType {   0,    0}
         , (*1302*) yyTCombType { 179,  737} , (*1303*) yyTCombType {   0,    0}
         , (*1304*) yyTCombType {   0,    0} , (*1305*) yyTCombType {   0,    0}
         , (*1306*) yyTCombType {   0,    0} , (*1307*) yyTCombType {   0,    0}
         , (*1308*) yyTCombType { 179,  737} , (*1309*) yyTCombType {   0,    0}
         , (*1310*) yyTCombType {   0,    0} , (*1311*) yyTCombType {   0,    0}
         , (*1312*) yyTCombType {   0,    0} , (*1313*) yyTCombType {   0,    0}
         , (*1314*) yyTCombType {   0,    0} , (*1315*) yyTCombType {   0,    0}
         , (*1316*) yyTCombType {   0,    0} , (*1317*) yyTCombType {   0,    0}
         , (*1318*) yyTCombType {   0,    0} , (*1319*) yyTCombType {   0,    0}
         , (*1320*) yyTCombType {   0,    0} , (*1321*) yyTCombType {   0,    0}
         , (*1322*) yyTCombType {   0,    0} , (*1323*) yyTCombType {   0,    0}
         , (*1324*) yyTCombType {   0,    0} , (*1325*) yyTCombType {   0,    0}
         , (*1326*) yyTCombType {   0,    0} , (*1327*) yyTCombType {   0,    0}
         , (*1328*) yyTCombType {   0,    0} , (*1329*) yyTCombType {   0,    0}
         , (*1330*) yyTCombType {   0,    0} , (*1331*) yyTCombType {   0,    0}
         , (*1332*) yyTCombType {   0,    0} , (*1333*) yyTCombType {   0,    0}
         , (*1334*) yyTCombType {   0,    0} , (*1335*) yyTCombType {   0,    0}
         , (*1336*) yyTCombType {   0,    0} , (*1337*) yyTCombType {   0,    0}
         , (*1338*) yyTCombType {   0,    0} , (*1339*) yyTCombType {   0,    0}
         , (*1340*) yyTCombType {   0,    0} , (*1341*) yyTCombType {   0,    0}
         , (*1342*) yyTCombType {   0,    0} , (*1343*) yyTCombType {   0,    0}
         , (*1344*) yyTCombType {   0,    0} , (*1345*) yyTCombType {   0,    0}
         , (*1346*) yyTCombType {   0,    0} , (*1347*) yyTCombType {   0,    0}
         , (*1348*) yyTCombType {   0,    0} , (*1349*) yyTCombType {   0,    0}
         , (*1350*) yyTCombType {   0,    0} , (*1351*) yyTCombType {   0,    0}
         , (*1352*) yyTCombType {   0,    0} , (*1353*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  321 , (* 110*)    5 , (* 111*)  322 , (* 112*)  323
         , (* 113*)  324 , (* 114*)  325 , (* 115*)  326 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  200 , (* 119*)  211 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  319 , (* 124*)  320
         , (* 125*)   14 , (* 126*)    8 , (* 127*)    9 , (* 128*)  328
         , (* 129*)   35 , (* 130*)   16 , (* 131*)  327 , (* 132*)  181
         , (* 133*)  332 , (* 134*)  193 , (* 135*)   18 , (* 136*)  199
         , (* 137*)   20 , (* 138*)  210 , (* 139*)  329 , (* 140*)   20
         , (* 141*)  334 , (* 142*)  335 , (* 143*)   28 , (* 144*)   32
         , (* 145*)   30 , (* 146*)   34 , (* 147*)  333 , (* 148*)   37
         , (* 149*)  336 , (* 150*)   24 , (* 151*)   39 , (* 152*)   73
         , (* 153*)  403 , (* 154*)   52 , (* 155*)  338 , (* 156*)  401
         , (* 157*)   22 , (* 158*)  331 , (* 159*)  407 , (* 160*)  410
         , (* 161*)  330 , (* 162*)  106 , (* 163*)  337 , (* 164*)   25
         , (* 165*)   41 , (* 166*)  149 , (* 167*)   43 , (* 168*)   42
         , (* 169*)   43 , (* 170*)   44 , (* 171*)  146 , (* 172*)  147
         , (* 173*)  360 , (* 174*)  361 , (* 175*)  362 , (* 176*)   40
         , (* 177*)  154 , (* 178*)  419 , (* 179*)   94 , (* 180*)  417
         , (* 181*)  360 , (* 182*)  361 , (* 183*)  415 , (* 184*)   52
         , (* 185*)  338 , (* 186*)  109 , (* 187*)  150 , (* 188*)  137
         , (* 189*)  422 , (* 190*)  398 , (* 191*)  400 , (* 192*)  138
         , (* 193*)  412 , (* 194*)  156 , (* 195*)  158 , (* 196*)  425
         , (* 197*)   52 , (* 198*)  338 , (* 199*)  162 , (* 200*)  397
         , (* 201*)  427 , (* 202*)  360 , (* 203*)  361 , (* 204*)  414
         , (* 205*)  170 , (* 206*)  143 , (* 207*)  144 , (* 208*)  430
         , (* 209*)   90 , (* 210*)   91 , (* 211*)   52 , (* 212*)  338
         , (* 213*)   96 , (* 214*)   84 , (* 215*)  364 , (* 216*)  365
         , (* 217*)  366 , (* 218*)  367 , (* 219*)  368 , (* 220*)  369
         , (* 221*)  370 , (* 222*)  371 , (* 223*)  372 , (* 224*)  373
         , (* 225*)  374 , (* 226*)  375 , (* 227*)  376 , (* 228*)  377
         , (* 229*)  378 , (* 230*)  379 , (* 231*)  380 , (* 232*)  381
         , (* 233*)   95 , (* 234*)   98 , (* 235*)  383 , (* 236*)   99
         , (* 237*)  385 , (* 238*)  359 , (* 239*)  100 , (* 240*)  101
         , (* 241*)  140 , (* 242*)  389 , (* 243*)  387 , (* 244*)  113
         , (* 245*)   52 , (* 246*)  338 , (* 247*)  105 , (* 248*)  102
         , (* 249*)   87 , (* 250*)  103 , (* 251*)  388 , (* 252*)  120
         , (* 253*)  128 , (* 254*)  134 , (* 255*)  106 , (* 256*)   55
         , (* 257*)  392 , (* 258*)  111 , (* 259*)  112 , (* 260*)  393
         , (* 261*)  114 , (* 262*)  411 , (* 263*)   81 , (* 264*)   52
         , (* 265*)  338 , (* 266*)  342 , (* 267*)  343 , (* 268*)  344
         , (* 269*)  416 , (* 270*)  166 , (* 271*)  434 , (* 272*)  346
         , (* 273*)  356 , (* 274*)  357 , (* 275*)  347 , (* 276*)   70
         , (* 277*)   71 , (* 278*)  351 , (* 279*)  352 , (* 280*)  394
         , (* 281*)  119 , (* 282*)   52 , (* 283*)  338 , (* 284*)  117
         , (* 285*)  404 , (* 286*)  119 , (* 287*)  190 , (* 288*)  390
         , (* 289*)  396 , (* 290*)  124 , (* 291*)  125 , (* 292*)  126
         , (* 293*)  108 , (* 294*)  130 , (* 295*)  408 , (* 296*)  132
         , (* 297*)  186 , (* 298*)   52 , (* 299*)  338 , (* 300*)  353
         , (* 301*)  435 , (* 302*)  436 , (* 303*)  179 , (* 304*)  180
         , (* 305*)  348 , (* 306*)  187 , (* 307*)   71 , (* 308*)   80
         , (* 309*)   63 , (* 310*)  189 , (* 311*)   64 , (* 312*)   66
         , (* 313*)  192 , (* 314*)   67 , (* 315*)  345 , (* 316*)  395
         , (* 317*)   69 , (* 318*)  347 , (* 319*)   70 , (* 320*)   71
         , (* 321*)   52 , (* 322*)  338 , (* 323*)   65 , (* 324*)  139
         , (* 325*)  135 , (* 326*)   66 , (* 327*)   87 , (* 328*)   67
         , (* 329*)  345 , (* 330*)  120 , (* 331*)   69 , (* 332*)  347
         , (* 333*)   70 , (* 334*)   71 , (* 335*)  405 , (* 336*)  132
         , (* 337*)  152 , (* 338*)  153 , (* 339*)  339 , (* 340*)   52
         , (* 341*)  338 , (* 342*)  121 , (* 343*)  122 , (* 344*)  402
         , (* 345*)  124 , (* 346*)  125 , (* 347*)  126 , (* 348*)  428
         , (* 349*)  168 , (* 350*)  167 , (* 351*)   57 , (* 352*)   58
         , (* 353*)   59 , (* 354*)  340 , (* 355*)   61 , (* 356*)   62
         , (* 357*)   63 , (* 358*)  438 , (* 359*)   64 , (* 360*)   66
         , (* 361*)   87 , (* 362*)   67 , (* 363*)  345 , (* 364*)  120
         , (* 365*)   69 , (* 366*)  347 , (* 367*)   70 , (* 368*)   71
         , (* 369*)  198 , (* 370*)   79 , (* 371*)   58 , (* 372*)   59
         , (* 373*)  340 , (* 374*)   61 , (* 375*)   62 , (* 376*)   63
         , (* 377*)  169 , (* 378*)   64 , (* 379*)   66 , (* 380*)  203
         , (* 381*)   67 , (* 382*)  345 , (* 383*)  439 , (* 384*)   69
         , (* 385*)  347 , (* 386*)   70 , (* 387*)   71 , (* 388*)   57
         , (* 389*)   58 , (* 390*)   59 , (* 391*)  340 , (* 392*)   61
         , (* 393*)   62 , (* 394*)   63 , (* 395*)  202 , (* 396*)   64
         , (* 397*)   66 , (* 398*)  205 , (* 399*)   67 , (* 400*)  345
         , (* 401*)  209 , (* 402*)   69 , (* 403*)  347 , (* 404*)   70
         , (* 405*)   71 , (* 406*)   52 , (* 407*)  338 , (* 408*)  171
         , (* 409*)  212 , (* 410*)   77 , (* 411*)  354 , (* 412*)   78
         , (* 413*)   68 , (* 414*)  214 , (* 415*)  106 , (* 416*)  345
         , (* 417*)  216 , (* 418*)   69 , (* 419*)  347 , (* 420*)   70
         , (* 421*)   71 , (* 422*)  420 , (* 423*)  217 , (* 424*)  151
         , (* 425*)  155 , (* 426*)  153 , (* 427*)   57 , (* 428*)   58
         , (* 429*)   59 , (* 430*)  340 , (* 431*)   61 , (* 432*)   62
         , (* 433*)   63 , (* 434*)  106 , (* 435*)   64 , (* 436*)   66
         , (* 437*)    0 , (* 438*)   67 , (* 439*)  345 , (* 440*)  106
         , (* 441*)   69 , (* 442*)  347 , (* 443*)   70 , (* 444*)   71
         , (* 445*)    0 , (* 446*)    0 , (* 447*)   60 , (* 448*)  390
         , (* 449*)  340 , (* 450*)   61 , (* 451*)   62 , (* 452*)   63
         , (* 453*)  108 , (* 454*)   64 , (* 455*)   66 , (* 456*)    0
         , (* 457*)   67 , (* 458*)  345 , (* 459*)  106 , (* 460*)   69
         , (* 461*)  347 , (* 462*)   70 , (* 463*)   71 , (* 464*)   52
         , (* 465*)  338 , (* 466*)  441 , (* 467*)  409 , (* 468*)  360
         , (* 469*)  361 , (* 470*)  157 , (* 471*)    0 , (* 472*)  108
         , (* 473*)  164 , (* 474*)  360 , (* 475*)  361 , (* 476*)  157
         , (* 477*)  438 , (* 478*)  108 , (* 479*)    0 , (* 480*)  333
         , (* 481*)   55 , (* 482*)  349 , (* 483*)   24 , (* 484*)  115
         , (* 485*)  135 , (* 486*)   52 , (* 487*)  338 , (* 488*)    0
         , (* 489*)  426 , (* 490*)    0 , (* 491*)  163 , (* 492*)  165
         , (* 493*)    0 , (* 494*)    0 , (* 495*)  206 , (* 496*)  424
         , (* 497*)  108 , (* 498*)  159 , (* 499*)  161 , (* 500*)    0
         , (* 501*)  183 , (* 502*)  440 , (* 503*)    0 , (* 504*)  350
         , (* 505*)  160 , (* 506*)    0 , (* 507*)   52 , (* 508*)  338
         , (* 509*)  333 , (* 510*)    0 , (* 511*)    0 , (* 512*)   24
         , (* 513*)    0 , (* 514*)    0 , (* 515*)  341 , (* 516*)  215
         , (* 517*)   62 , (* 518*)   63 , (* 519*)    0 , (* 520*)   64
         , (* 521*)   66 , (* 522*)    0 , (* 523*)   67 , (* 524*)  345
         , (* 525*)  353 , (* 526*)   69 , (* 527*)  347 , (* 528*)   70
         , (* 529*)   71 , (* 530*)  333 , (* 531*)   52 , (* 532*)  338
         , (* 533*)   24 , (* 534*)    0 , (* 535*)    0 , (* 536*)    0
         , (* 537*)    0 , (* 538*)    0 , (* 539*)    0 , (* 540*)    0
         , (* 541*)    0 , (* 542*)    0 , (* 543*)    0 , (* 544*)    0
         , (* 545*)    0 , (* 546*)    0 , (* 547*)    0 , (* 548*)    0
         , (* 549*)   83 , (* 550*)   52 , (* 551*)  338 , (* 552*)    0
         , (* 553*)    0 , (* 554*)    0 , (* 555*)    0 , (* 556*)    0
         , (* 557*)    0 , (* 558*)    0 , (* 559*)    0 , (* 560*)    0
         , (* 561*)    0 , (* 562*)    0 , (* 563*)    0 , (* 564*)    0
         , (* 565*)    0 , (* 566*)    0 , (* 567*)    0 , (* 568*)  358
         , (* 569*)    0 , (* 570*)   57 , (* 571*)   58 , (* 572*)   59
         , (* 573*)  340 , (* 574*)   61 , (* 575*)   62 , (* 576*)   63
         , (* 577*)    0 , (* 578*)   64 , (* 579*)   66 , (* 580*)    0
         , (* 581*)   67 , (* 582*)  345 , (* 583*)    0 , (* 584*)   69
         , (* 585*)  347 , (* 586*)   70 , (* 587*)   71 , (* 588*)    0
         , (* 589*)    0 , (* 590*)   75 , (* 591*)   76 , (* 592*)   57
         , (* 593*)   58 , (* 594*)   59 , (* 595*)  340 , (* 596*)   61
         , (* 597*)   62 , (* 598*)   63 , (* 599*)    0 , (* 600*)   64
         , (* 601*)   66 , (* 602*)    0 , (* 603*)   67 , (* 604*)  345
         , (* 605*)    0 , (* 606*)   69 , (* 607*)  347 , (* 608*)   70
         , (* 609*)   71 , (* 610*)    0 , (* 611*)    0 , (* 612*)    0
         , (* 613*)   57 , (* 614*)   58 , (* 615*)   59 , (* 616*)  340
         , (* 617*)   61 , (* 618*)   62 , (* 619*)   63 , (* 620*)    0
         , (* 621*)   64 , (* 622*)   66 , (* 623*)    0 , (* 624*)   67
         , (* 625*)  345 , (* 626*)    0 , (* 627*)   69 , (* 628*)  347
         , (* 629*)   70 , (* 630*)   71 , (* 631*)    0 , (* 632*)    0
         , (* 633*)    0 , (* 634*)    0 , (* 635*)    0 , (* 636*)  355
         , (* 637*)   57 , (* 638*)   58 , (* 639*)   59 , (* 640*)  340
         , (* 641*)   61 , (* 642*)   62 , (* 643*)   63 , (* 644*)    0
         , (* 645*)   64 , (* 646*)   66 , (* 647*)    0 , (* 648*)   67
         , (* 649*)  345 , (* 650*)    0 , (* 651*)   69 , (* 652*)  347
         , (* 653*)   70 , (* 654*)   71 , (* 655*)    0 , (* 656*)   57
         , (* 657*)   58 , (* 658*)   59 , (* 659*)  340 , (* 660*)   61
         , (* 661*)   62 , (* 662*)   63 , (* 663*)    0 , (* 664*)   64
         , (* 665*)   66 , (* 666*)    0 , (* 667*)   67 , (* 668*)  345
         , (* 669*)    0 , (* 670*)   69 , (* 671*)  347 , (* 672*)   70
         , (* 673*)   71 , (* 674*)  360 , (* 675*)  361 , (* 676*)  362
         , (* 677*)    0 , (* 678*)    0 , (* 679*)    0 , (* 680*)   94
         , (* 681*)  413 , (* 682*)    0 , (* 683*)    0 , (* 684*)    0
         , (* 685*)    0 , (* 686*)    0 , (* 687*)    0 , (* 688*)    0
         , (* 689*)    0 , (* 690*)    0 , (* 691*)    0 , (* 692*)    0
         , (* 693*)    0 , (* 694*)    0 , (* 695*)    0 , (* 696*)    0
         , (* 697*)    0 , (* 698*)    0 , (* 699*)    0 , (* 700*)    0
         , (* 701*)    0 , (* 702*)    0 , (* 703*)    0 , (* 704*)    0
         , (* 705*)    0 , (* 706*)    0 , (* 707*)    0 , (* 708*)    0
         , (* 709*)    0 , (* 710*)    0 , (* 711*)    0 , (* 712*)    0
         , (* 713*)    0 , (* 714*)    0 , (* 715*)    0 , (* 716*)  364
         , (* 717*)  365 , (* 718*)  366 , (* 719*)  367 , (* 720*)  368
         , (* 721*)  369 , (* 722*)  370 , (* 723*)  371 , (* 724*)  372
         , (* 725*)  373 , (* 726*)  374 , (* 727*)  375 , (* 728*)  376
         , (* 729*)  377 , (* 730*)  378 , (* 731*)  379 , (* 732*)  380
         , (* 733*)  381 , (* 734*)   95 , (* 735*)   98 , (* 736*)  383
         , (* 737*)   99 , (* 738*)  385 , (* 739*)    0 , (* 740*)  100
         , (* 741*)  101 , (* 742*)    0 , (* 743*)  389 , (* 744*)  360
         , (* 745*)  361 , (* 746*)  362 , (* 747*)    0 , (* 748*)  105
         , (* 749*)    0 , (* 750*)   94 , (* 751*)  363 , (* 752*)    0
         , (* 753*)    0 , (* 754*)    0 , (* 755*)    0 , (* 756*)    0
         , (* 757*)    0 , (* 758*)  392 , (* 759*)  111 , (* 760*)  112
         , (* 761*)  393 , (* 762*)  114 , (* 763*)  411 , (* 764*)    0
         , (* 765*)    0 , (* 766*)    0 , (* 767*)    0 , (* 768*)    0
         , (* 769*)    0 , (* 770*)    0 , (* 771*)    0 , (* 772*)    0
         , (* 773*)    0 , (* 774*)    0 , (* 775*)    0 , (* 776*)    0
         , (* 777*)    0 , (* 778*)    0 , (* 779*)    0 , (* 780*)    0
         , (* 781*)    0 , (* 782*)    0 , (* 783*)    0 , (* 784*)    0
         , (* 785*)    0 , (* 786*)  364 , (* 787*)  365 , (* 788*)  366
         , (* 789*)  367 , (* 790*)  368 , (* 791*)  369 , (* 792*)  370
         , (* 793*)  371 , (* 794*)  372 , (* 795*)  373 , (* 796*)  374
         , (* 797*)  375 , (* 798*)  376 , (* 799*)  377 , (* 800*)  378
         , (* 801*)  379 , (* 802*)  380 , (* 803*)  381 , (* 804*)   95
         , (* 805*)   98 , (* 806*)  383 , (* 807*)   99 , (* 808*)  385
         , (* 809*)    0 , (* 810*)  100 , (* 811*)  101 , (* 812*)    0
         , (* 813*)  389 , (* 814*)  360 , (* 815*)  361 , (* 816*)  362
         , (* 817*)    0 , (* 818*)  105 , (* 819*)    0 , (* 820*)   94
         , (* 821*)  382 , (* 822*)    0 , (* 823*)    0 , (* 824*)    0
         , (* 825*)    0 , (* 826*)    0 , (* 827*)    0 , (* 828*)  392
         , (* 829*)  111 , (* 830*)  112 , (* 831*)  393 , (* 832*)  114
         , (* 833*)  411 , (* 834*)    0 , (* 835*)    0 , (* 836*)    0
         , (* 837*)    0 , (* 838*)    0 , (* 839*)    0 , (* 840*)    0
         , (* 841*)    0 , (* 842*)    0 , (* 843*)    0 , (* 844*)    0
         , (* 845*)    0 , (* 846*)    0 , (* 847*)    0 , (* 848*)    0
         , (* 849*)    0 , (* 850*)    0 , (* 851*)    0 , (* 852*)    0
         , (* 853*)    0 , (* 854*)    0 , (* 855*)    0 , (* 856*)  364
         , (* 857*)  365 , (* 858*)  366 , (* 859*)  367 , (* 860*)  368
         , (* 861*)  369 , (* 862*)  370 , (* 863*)  371 , (* 864*)  372
         , (* 865*)  373 , (* 866*)  374 , (* 867*)  375 , (* 868*)  376
         , (* 869*)  377 , (* 870*)  378 , (* 871*)  379 , (* 872*)  380
         , (* 873*)  381 , (* 874*)   95 , (* 875*)   98 , (* 876*)  383
         , (* 877*)   99 , (* 878*)  385 , (* 879*)    0 , (* 880*)  100
         , (* 881*)  101 , (* 882*)    0 , (* 883*)  389 , (* 884*)  360
         , (* 885*)  361 , (* 886*)  362 , (* 887*)    0 , (* 888*)  105
         , (* 889*)    0 , (* 890*)   94 , (* 891*)  384 , (* 892*)    0
         , (* 893*)    0 , (* 894*)    0 , (* 895*)    0 , (* 896*)    0
         , (* 897*)    0 , (* 898*)  392 , (* 899*)  111 , (* 900*)  112
         , (* 901*)  393 , (* 902*)  114 , (* 903*)  411 , (* 904*)    0
         , (* 905*)    0 , (* 906*)    0 , (* 907*)    0 , (* 908*)    0
         , (* 909*)    0 , (* 910*)    0 , (* 911*)    0 , (* 912*)    0
         , (* 913*)    0 , (* 914*)    0 , (* 915*)    0 , (* 916*)    0
         , (* 917*)    0 , (* 918*)    0 , (* 919*)    0 , (* 920*)    0
         , (* 921*)    0 , (* 922*)    0 , (* 923*)    0 , (* 924*)    0
         , (* 925*)    0 , (* 926*)  364 , (* 927*)  365 , (* 928*)  366
         , (* 929*)  367 , (* 930*)  368 , (* 931*)  369 , (* 932*)  370
         , (* 933*)  371 , (* 934*)  372 , (* 935*)  373 , (* 936*)  374
         , (* 937*)  375 , (* 938*)  376 , (* 939*)  377 , (* 940*)  378
         , (* 941*)  379 , (* 942*)  380 , (* 943*)  381 , (* 944*)   95
         , (* 945*)   98 , (* 946*)  383 , (* 947*)   99 , (* 948*)  385
         , (* 949*)    0 , (* 950*)  100 , (* 951*)  101 , (* 952*)    0
         , (* 953*)  389 , (* 954*)  360 , (* 955*)  361 , (* 956*)  362
         , (* 957*)    0 , (* 958*)  105 , (* 959*)    0 , (* 960*)   94
         , (* 961*)  386 , (* 962*)    0 , (* 963*)    0 , (* 964*)    0
         , (* 965*)    0 , (* 966*)    0 , (* 967*)    0 , (* 968*)  392
         , (* 969*)  111 , (* 970*)  112 , (* 971*)  393 , (* 972*)  114
         , (* 973*)  411 , (* 974*)    0 , (* 975*)    0 , (* 976*)    0
         , (* 977*)    0 , (* 978*)    0 , (* 979*)    0 , (* 980*)    0
         , (* 981*)    0 , (* 982*)    0 , (* 983*)    0 , (* 984*)    0
         , (* 985*)    0 , (* 986*)    0 , (* 987*)    0 , (* 988*)    0
         , (* 989*)    0 , (* 990*)    0 , (* 991*)    0 , (* 992*)    0
         , (* 993*)    0 , (* 994*)    0 , (* 995*)    0 , (* 996*)  364
         , (* 997*)  365 , (* 998*)  366 , (* 999*)  367 , (*1000*)  368
         , (*1001*)  369 , (*1002*)  370 , (*1003*)  371 , (*1004*)  372
         , (*1005*)  373 , (*1006*)  374 , (*1007*)  375 , (*1008*)  376
         , (*1009*)  377 , (*1010*)  378 , (*1011*)  379 , (*1012*)  380
         , (*1013*)  381 , (*1014*)   95 , (*1015*)   98 , (*1016*)  383
         , (*1017*)   99 , (*1018*)  385 , (*1019*)    0 , (*1020*)  100
         , (*1021*)  101 , (*1022*)    0 , (*1023*)  389 , (*1024*)  360
         , (*1025*)  361 , (*1026*)  362 , (*1027*)    0 , (*1028*)  105
         , (*1029*)    0 , (*1030*)   94 , (*1031*)  391 , (*1032*)   52
         , (*1033*)  338 , (*1034*)   40 , (*1035*)    0 , (*1036*)  419
         , (*1037*)    0 , (*1038*)  392 , (*1039*)  111 , (*1040*)  112
         , (*1041*)  393 , (*1042*)  114 , (*1043*)  411 , (*1044*)    0
         , (*1045*)  150 , (*1046*)    0 , (*1047*)  422 , (*1048*)    0
         , (*1049*)    0 , (*1050*)  399 , (*1051*)    0 , (*1052*)  156
         , (*1053*)    0 , (*1054*)  425 , (*1055*)    0 , (*1056*)    0
         , (*1057*)  162 , (*1058*)    0 , (*1059*)  427 , (*1060*)    0
         , (*1061*)    0 , (*1062*)    0 , (*1063*)    0 , (*1064*)    0
         , (*1065*)    0 , (*1066*)  364 , (*1067*)  365 , (*1068*)  366
         , (*1069*)  367 , (*1070*)  368 , (*1071*)  369 , (*1072*)  370
         , (*1073*)  371 , (*1074*)  372 , (*1075*)  373 , (*1076*)  374
         , (*1077*)  375 , (*1078*)  376 , (*1079*)  377 , (*1080*)  378
         , (*1081*)  379 , (*1082*)  380 , (*1083*)  381 , (*1084*)   95
         , (*1085*)   98 , (*1086*)  383 , (*1087*)   99 , (*1088*)  385
         , (*1089*)    0 , (*1090*)  100 , (*1091*)  101 , (*1092*)    0
         , (*1093*)  389 , (*1094*)    0 , (*1095*)    0 , (*1096*)   52
         , (*1097*)  338 , (*1098*)  105 , (*1099*)    0 , (*1100*)    0
         , (*1101*)    0 , (*1102*)    0 , (*1103*)    0 , (*1104*)    0
         , (*1105*)    0 , (*1106*)    0 , (*1107*)    0 , (*1108*)  392
         , (*1109*)  111 , (*1110*)  112 , (*1111*)  393 , (*1112*)  114
         , (*1113*)  411 , (*1114*)  406 , (*1115*)   52 , (*1116*)  338
         , (*1117*)    0 , (*1118*)    0 , (*1119*)    0 , (*1120*)    0
         , (*1121*)    0 , (*1122*)    0 , (*1123*)    0 , (*1124*)    0
         , (*1125*)    0 , (*1126*)    0 , (*1127*)    0 , (*1128*)  166
         , (*1129*)  434 , (*1130*)    0 , (*1131*)    0 , (*1132*)    0
         , (*1133*)  418 , (*1134*)    0 , (*1135*)    0 , (*1136*)    0
         , (*1137*)    0 , (*1138*)   57 , (*1139*)   58 , (*1140*)   59
         , (*1141*)  340 , (*1142*)   61 , (*1143*)   62 , (*1144*)   63
         , (*1145*)    0 , (*1146*)   64 , (*1147*)   66 , (*1148*)    0
         , (*1149*)   67 , (*1150*)  345 , (*1151*)    0 , (*1152*)   69
         , (*1153*)  347 , (*1154*)   70 , (*1155*)   71 , (*1156*)   52
         , (*1157*)  338 , (*1158*)    0 , (*1159*)  437 , (*1160*)  436
         , (*1161*)    0 , (*1162*)    0 , (*1163*)    0 , (*1164*)    0
         , (*1165*)    0 , (*1166*)    0 , (*1167*)    0 , (*1168*)    0
         , (*1169*)    0 , (*1170*)    0 , (*1171*)    0 , (*1172*)    0
         , (*1173*)    0 , (*1174*)  429 , (*1175*)    0 , (*1176*)    0
         , (*1177*)    0 , (*1178*)    0 , (*1179*)    0 , (*1180*)    0
         , (*1181*)    0 , (*1182*)    0 , (*1183*)    0 , (*1184*)    0
         , (*1185*)    0 , (*1186*)    0 , (*1187*)    0 , (*1188*)    0
         , (*1189*)    0 , (*1190*)    0 , (*1191*)    0 , (*1192*)    0
         , (*1193*)    0 , (*1194*)    0 , (*1195*)    0 , (*1196*)    0
         , (*1197*)    0 , (*1198*)    0 , (*1199*)    0 , (*1200*)    0
         , (*1201*)    0 , (*1202*)   57 , (*1203*)   58 , (*1204*)   59
         , (*1205*)  340 , (*1206*)   61 , (*1207*)   62 , (*1208*)   63
         , (*1209*)    0 , (*1210*)   64 , (*1211*)   66 , (*1212*)    0
         , (*1213*)   67 , (*1214*)  345 , (*1215*)    0 , (*1216*)   69
         , (*1217*)  347 , (*1218*)   70 , (*1219*)   71 , (*1220*)    0
         , (*1221*)   57 , (*1222*)   58 , (*1223*)   59 , (*1224*)  340
         , (*1225*)   61 , (*1226*)   62 , (*1227*)   63 , (*1228*)    0
         , (*1229*)   64 , (*1230*)   66 , (*1231*)    0 , (*1232*)   67
         , (*1233*)  345 , (*1234*)    0 , (*1235*)   69 , (*1236*)  347
         , (*1237*)   70 , (*1238*)   71 , (*1239*)  360 , (*1240*)  361
         , (*1241*)  362 , (*1242*)    0 , (*1243*)    0 , (*1244*)    0
         , (*1245*)   94 , (*1246*)  421 , (*1247*)    0 , (*1248*)    0
         , (*1249*)    0 , (*1250*)    0 , (*1251*)    0 , (*1252*)    0
         , (*1253*)    0 , (*1254*)    0 , (*1255*)    0 , (*1256*)    0
         , (*1257*)    0 , (*1258*)    0 , (*1259*)    0 , (*1260*)    0
         , (*1261*)    0 , (*1262*)   57 , (*1263*)   58 , (*1264*)   59
         , (*1265*)  340 , (*1266*)   61 , (*1267*)   62 , (*1268*)   63
         , (*1269*)    0 , (*1270*)   64 , (*1271*)   66 , (*1272*)    0
         , (*1273*)   67 , (*1274*)  345 , (*1275*)    0 , (*1276*)   69
         , (*1277*)  347 , (*1278*)   70 , (*1279*)   71 , (*1280*)    0
         , (*1281*)  364 , (*1282*)  365 , (*1283*)  366 , (*1284*)  367
         , (*1285*)  368 , (*1286*)  369 , (*1287*)  370 , (*1288*)  371
         , (*1289*)  372 , (*1290*)  373 , (*1291*)  374 , (*1292*)  375
         , (*1293*)  376 , (*1294*)  377 , (*1295*)  378 , (*1296*)  379
         , (*1297*)  380 , (*1298*)  381 , (*1299*)   95 , (*1300*)   98
         , (*1301*)  383 , (*1302*)   99 , (*1303*)  385 , (*1304*)    0
         , (*1305*)  100 , (*1306*)  101 , (*1307*)    0 , (*1308*)  389
         , (*1309*)  360 , (*1310*)  361 , (*1311*)  362 , (*1312*)    0
         , (*1313*)  105 , (*1314*)    0 , (*1315*)   94 , (*1316*)  423
         , (*1317*)  174 , (*1318*)    0 , (*1319*)    0 , (*1320*)    0
         , (*1321*)    0 , (*1322*)    0 , (*1323*)  392 , (*1324*)  111
         , (*1325*)  112 , (*1326*)  393 , (*1327*)  114 , (*1328*)  411
         , (*1329*)    0 , (*1330*)    0 , (*1331*)   52 , (*1332*)  338
         , (*1333*)    0 , (*1334*)    0 , (*1335*)    0 , (*1336*)    0
         , (*1337*)    0 , (*1338*)    0 , (*1339*)    0 , (*1340*)    0
         , (*1341*)    0 , (*1342*)    0 , (*1343*)    0 , (*1344*)    0
         , (*1345*)    0 , (*1346*)    0 , (*1347*)    0 , (*1348*)    0
         , (*1349*)  175 , (*1350*)    0 , (*1351*)  364 , (*1352*)  365
         , (*1353*)  366 , (*1354*)  367 , (*1355*)  368 , (*1356*)  369
         , (*1357*)  370 , (*1358*)  371 , (*1359*)  372 , (*1360*)  373
         , (*1361*)  374 , (*1362*)  375 , (*1363*)  376 , (*1364*)  377
         , (*1365*)  378 , (*1366*)  379 , (*1367*)  380 , (*1368*)  381
         , (*1369*)   95 , (*1370*)   98 , (*1371*)  383 , (*1372*)   99
         , (*1373*)  385 , (*1374*)  172 , (*1375*)  100 , (*1376*)  101
         , (*1377*)    0 , (*1378*)  389 , (*1379*)    0 , (*1380*)  194
         , (*1381*)    0 , (*1382*)    0 , (*1383*)  105 , (*1384*)    0
         , (*1385*)    0 , (*1386*)    0 , (*1387*)    0 , (*1388*)    0
         , (*1389*)    0 , (*1390*)    0 , (*1391*)    0 , (*1392*)    0
         , (*1393*)  392 , (*1394*)  111 , (*1395*)  112 , (*1396*)  393
         , (*1397*)  114 , (*1398*)  411 , (*1399*)   52 , (*1400*)  338
         , (*1401*)    0 , (*1402*)   40 , (*1403*)    0 , (*1404*)  419
         , (*1405*)    0 , (*1406*)    0 , (*1407*)    0 , (*1408*)   40
         , (*1409*)    0 , (*1410*)  419 , (*1411*)    0 , (*1412*)    0
         , (*1413*)  150 , (*1414*)    0 , (*1415*)  422 , (*1416*)    0
         , (*1417*)  175 , (*1418*)    0 , (*1419*)  150 , (*1420*)  156
         , (*1421*)  422 , (*1422*)  425 , (*1423*)    0 , (*1424*)    0
         , (*1425*)  162 , (*1426*)  156 , (*1427*)  427 , (*1428*)  425
         , (*1429*)    0 , (*1430*)    0 , (*1431*)  162 , (*1432*)    0
         , (*1433*)  427 , (*1434*)  207 , (*1435*)    0 , (*1436*)    0
         , (*1437*)   57 , (*1438*)   58 , (*1439*)   59 , (*1440*)  340
         , (*1441*)   61 , (*1442*)   62 , (*1443*)   63 , (*1444*)  196
         , (*1445*)   64 , (*1446*)   66 , (*1447*)    0 , (*1448*)   67
         , (*1449*)  345 , (*1450*)    0 , (*1451*)   69 , (*1452*)  347
         , (*1453*)   70 , (*1454*)   71 , (*1455*)    0 , (*1456*)    0
         , (*1457*)    0 , (*1458*)   52 , (*1459*)  338 , (*1460*)    0
         , (*1461*)    0 , (*1462*)   40 , (*1463*)    0 , (*1464*)  419
         , (*1465*)    0 , (*1466*)    0 , (*1467*)    0 , (*1468*)    0
         , (*1469*)  177 , (*1470*)  431 , (*1471*)  178 , (*1472*)  433
         , (*1473*)  150 , (*1474*)    0 , (*1475*)  422 , (*1476*)  175
         , (*1477*)    0 , (*1478*)    0 , (*1479*)    0 , (*1480*)  156
         , (*1481*)    0 , (*1482*)  425 , (*1483*)    0 , (*1484*)    0
         , (*1485*)  162 , (*1486*)    0 , (*1487*)  427 , (*1488*)    0
         , (*1489*)    0 , (*1490*)    0 , (*1491*)    0 , (*1492*)    0
         , (*1493*)    0 , (*1494*)    0 , (*1495*)    0 , (*1496*)  166
         , (*1497*)  434 , (*1498*)    0 , (*1499*)    0 , (*1500*)    0
         , (*1501*)    0 , (*1502*)  166 , (*1503*)  434 , (*1504*)    0
         , (*1505*)   57 , (*1506*)   58 , (*1507*)   59 , (*1508*)  340
         , (*1509*)   61 , (*1510*)   62 , (*1511*)   63 , (*1512*)    0
         , (*1513*)   64 , (*1514*)   66 , (*1515*)    0 , (*1516*)   67
         , (*1517*)  345 , (*1518*)    0 , (*1519*)   69 , (*1520*)  347
         , (*1521*)   70 , (*1522*)   71 , (*1523*)    0 , (*1524*)    0
         , (*1525*)    0 , (*1526*)    0 , (*1527*)  435 , (*1528*)  436
         , (*1529*)  179 , (*1530*)  180 , (*1531*)    0 , (*1532*)    0
         , (*1533*)  435 , (*1534*)  436 , (*1535*)  179 , (*1536*)  180
         , (*1537*)    0 , (*1538*)  432 , (*1539*)    0 , (*1540*)  433
         , (*1541*)    0 , (*1542*)    0 , (*1543*)    0 , (*1544*)    0
         , (*1545*)    0 , (*1546*)    0 , (*1547*)    0 , (*1548*)    0
         , (*1549*)    0 , (*1550*)    0 , (*1551*)    0 , (*1552*)    0
         , (*1553*)    0 , (*1554*)    0 , (*1555*)    0 , (*1556*)  166
         , (*1557*)  434 , (*1558*)    0 , (*1559*)    0 , (*1560*)    0
         , (*1561*)    0 , (*1562*)    0 , (*1563*)    0 , (*1564*)   57
         , (*1565*)   58 , (*1566*)   59 , (*1567*)  340 , (*1568*)   61
         , (*1569*)   62 , (*1570*)   63 , (*1571*)    0 , (*1572*)   64
         , (*1573*)   66 , (*1574*)    0 , (*1575*)   67 , (*1576*)  345
         , (*1577*)    0 , (*1578*)   69 , (*1579*)  347 , (*1580*)   70
         , (*1581*)   71 , (*1582*)    0 , (*1583*)    0 , (*1584*)    0
         , (*1585*)    0 , (*1586*)    0 , (*1587*)  435 , (*1588*)  436
         , (*1589*)  179 , (*1590*)  180 , (*1591*)    0 , (*1592*)    0
         , (*1593*)    0 , (*1594*)    0 , (*1595*)    0 , (*1596*)  177
         , (*1597*)  431 , (*1598*)  178 , (*1599*)  433 , (*1600*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 442(P   1)*)    2 , (*A 443(P   2)*)    1 , (*A 444(P   3)*)    1
         , (*A 445(P   4)*)    1 , (*A 446(P   5)*)    1 , (*A 447(P   6)*)    1
         , (*A 448(P   7)*)    1 , (*A 449(P   8)*)    0 , (*A 450(P   9)*)    0
         , (*A 451(P  10)*)    0 , (*A 452(P  11)*)    0 , (*A 453(P  12)*)    0
         , (*A 454(P  13)*)    0 , (*A 455(P  14)*)    4 , (*A 456(P  15)*)    7
         , (*A 457(P  16)*)    4 , (*A 458(P  17)*)    5 , (*A 459(P  18)*)    0
         , (*A 460(P  19)*)    2 , (*A 461(P  20)*)    3 , (*A 462(P  21)*)    3
         , (*A 463(P  22)*)    3 , (*A 464(P  23)*)    7 , (*A 465(P  24)*)    5
         , (*A 466(P  25)*)    7 , (*A 467(P  26)*)    3 , (*A 468(P  27)*)   10
         , (*A 469(P  28)*)    3 , (*A 470(P  29)*)    9 , (*A 471(P  30)*)    0
         , (*A 472(P  31)*)    1 , (*A 473(P  32)*)    0 , (*A 474(P  33)*)    1
         , (*A 475(P  34)*)    0 , (*A 476(P  35)*)    3 , (*A 477(P  36)*)    3
         , (*A 478(P  37)*)    0 , (*A 479(P  38)*)    2 , (*A 480(P  39)*)    3
         , (*A 481(P  40)*)    1 , (*A 482(P  41)*)    3 , (*A 483(P  42)*)    1
         , (*A 484(P  43)*)    3 , (*A 485(P  44)*)    3 , (*A 486(P  45)*)    3
         , (*A 487(P  46)*)    1 , (*A 488(P  47)*)    3 , (*A 489(P  48)*)    0
         , (*A 490(P  49)*)    0 , (*A 491(P  50)*)    2 , (*A 492(P  51)*)    1
         , (*A 493(P  52)*)    3 , (*A 494(P  53)*)    1 , (*A 495(P  54)*)    1
         , (*A 496(P  55)*)    1 , (*A 497(P  56)*)    3 , (*A 498(P  57)*)    1
         , (*A 499(P  58)*)    1 , (*A 500(P  59)*)    1 , (*A 501(P  60)*)    3
         , (*A 502(P  61)*)    3 , (*A 503(P  62)*)    0 , (*A 504(P  63)*)    0
         , (*A 505(P  64)*)    1 , (*A 506(P  65)*)    1 , (*A 507(P  66)*)    3
         , (*A 508(P  67)*)    1 , (*A 509(P  68)*)    1 , (*A 510(P  69)*)    2
         , (*A 511(P  70)*)    2 , (*A 512(P  71)*)    0 , (*A 513(P  72)*)    1
         , (*A 514(P  73)*)    2 , (*A 515(P  74)*)    0 , (*A 516(P  75)*)    1
         , (*A 517(P  76)*)    2 , (*A 518(P  77)*)    3 , (*A 519(P  78)*)    1
         , (*A 520(P  79)*)    0 , (*A 521(P  80)*)    2 , (*A 522(P  81)*)    0
         , (*A 523(P  82)*)    0 , (*A 524(P  83)*)    6 , (*A 525(P  84)*)    1
         , (*A 526(P  85)*)    1 , (*A 527(P  86)*)    1 , (*A 528(P  87)*)    2
         , (*A 529(P  88)*)    0 , (*A 530(P  89)*)    1 , (*A 531(P  90)*)    2
         , (*A 532(P  91)*)    3 , (*A 533(P  92)*)    1 , (*A 534(P  93)*)    3
         , (*A 535(P  94)*)    1 , (*A 536(P  95)*)    1 , (*A 537(P  96)*)    1
         , (*A 538(P  97)*)    2 , (*A 539(P  98)*)    0 , (*A 540(P  99)*)    1
         , (*A 541(P 100)*)    2 , (*A 542(P 101)*)    3 , (*A 543(P 102)*)    3
         , (*A 544(P 103)*)    1 , (*A 545(P 104)*)    2 , (*A 546(P 105)*)    0
         , (*A 547(P 106)*)    1 , (*A 548(P 107)*)    2 , (*A 549(P 108)*)    3
         , (*A 550(P 109)*)    0 , (*A 551(P 110)*)    2 , (*A 552(P 111)*)    0
         , (*A 553(P 112)*)    0 , (*A 554(P 113)*)    2 , (*A 555(P 114)*)    0
         , (*A 556(P 115)*)    5 , (*A 557(P 116)*)    1 , (*A 558(P 117)*)    1
         , (*A 559(P 118)*)    1 , (*A 560(P 119)*)    1 , (*A 561(P 120)*)    1
         , (*A 562(P 121)*)    1 , (*A 563(P 122)*)    1 , (*A 564(P 123)*)    1
         , (*A 565(P 124)*)    1 , (*A 566(P 125)*)    1 , (*A 567(P 126)*)    1
         , (*A 568(P 127)*)    1 , (*A 569(P 128)*)    1 , (*A 570(P 129)*)    1
         , (*A 571(P 130)*)    1 , (*A 572(P 131)*)    1 , (*A 573(P 132)*)    1
         , (*A 574(P 133)*)    1 , (*A 575(P 134)*)    1 , (*A 576(P 135)*)    1
         , (*A 577(P 136)*)    4 , (*A 578(P 137)*)    5 , (*A 579(P 138)*)    1
         , (*A 580(P 139)*)    2 , (*A 581(P 140)*)    2 , (*A 582(P 141)*)    1
         , (*A 583(P 142)*)    3 , (*A 584(P 143)*)    2 , (*A 585(P 144)*)    5
         , (*A 586(P 145)*)    1 , (*A 587(P 146)*)    3 , (*A 588(P 147)*)    0
         , (*A 589(P 148)*)    1 , (*A 590(P 149)*)    1 , (*A 591(P 150)*)    3
         , (*A 592(P 151)*)    1 , (*A 593(P 152)*)    1 , (*A 594(P 153)*)    0
         , (*A 595(P 154)*)    2 , (*A 596(P 155)*)    1 , (*A 597(P 156)*)    3
         , (*A 598(P 157)*)    1 , (*A 599(P 158)*)    3 , (*A 600(P 159)*)    0
         , (*A 601(P 160)*)    1 , (*A 602(P 161)*)    3 , (*A 603(P 162)*)    1
         , (*A 604(P 163)*)    3 , (*A 605(P 164)*)    1 , (*A 606(P 165)*)    2
         , (*A 607(P 166)*)    0 , (*A 608(P 167)*)    1 , (*A 609(P 168)*)    3
         , (*A 610(P 169)*)    1 , (*A 611(P 170)*)    3 , (*A 612(P 171)*)    1
         , (*A 613(P 172)*)    3 , (*A 614(P 173)*)    0 , (*A 615(P 174)*)    1
         , (*A 616(P 175)*)    2 , (*A 617(P 176)*)    0 , (*A 618(P 177)*)    1
         , (*A 619(P 178)*)    1 , (*A 620(P 179)*)    1 , (*A 621(P 180)*)    1
         , (*A 622(P 181)*)    1 , (*A 623(P 182)*)    3 , (*A 624(P 183)*)    1
         , (*A 625(P 184)*)    2 , (*A 626(P 185)*)    5 , (*A 627(P 186)*)    1
         , (*A 628(P 187)*)    2 , (*A 629(P 188)*)    3 , (*A 630(P 189)*)    1
         , (*A 631(P 190)*)    3 , (*A 632(P 191)*)    0 , (*A 633(P 192)*)    2
         , (*A 634(P 193)*)    1 , (*A 635(P 194)*)    3 , (*A 636(P 195)*)    0
         , (*A 637(P 196)*)    1 , (*A 638(P 197)*)    1 , (*A 639(P 198)*)    1
         , (*A 640(P 199)*)    2 , (*A 641(P 200)*)    2 , (*A 642(P 201)*)    2
         , (*A 643(P 202)*)    2 , (*A 644(P 203)*)    0 , (*A 645(P 204)*)    0
         , (*A 646(P 205)*)    2 , (*A 647(P 206)*)    4 , (*A 648(P 207)*)    1
         , (*A 649(P 208)*)    1 , (*A 650(P 209)*)    4 , (*A 651(P 210)*)    2
         , (*A 652(P 211)*)    3 , (*A 653(P 212)*)    0 , (*A 654(P 213)*)    1
         , (*A 655(P 214)*)    1 , (*A 656(P 215)*)    2 , (*A 657(P 216)*)    2
         , (*A 658(P 217)*)    1 , (*A 659(P 218)*)    2 , (*A 660(P 219)*)    2
         , (*A 661(P 220)*)    1 , (*A 662(P 221)*)    2 , (*A 663(P 222)*)    1
         , (*A 664(P 223)*)    2 , (*A 665(P 224)*)    2 , (*A 666(P 225)*)    1
         , (*A 667(P 226)*)    2 , (*A 668(P 227)*)    2 , (*A 669(P 228)*)    1
         , (*A 670(P 229)*)    2 , (*A 671(P 230)*)    2 , (*A 672(P 231)*)    1
         , (*A 673(P 232)*)    2 , (*A 674(P 233)*)    2 , (*A 675(P 234)*)    2
         , (*A 676(P 235)*)    2 , (*A 677(P 236)*)    3 , (*A 678(P 237)*)    1
         , (*A 679(P 238)*)    2 , (*A 680(P 239)*)    2 , (*A 681(P 240)*)    2
         , (*A 682(P 241)*)    1 , (*A 683(P 242)*)    1 , (*A 684(P 243)*)    3
         , (*A 685(P 244)*)    1 , (*A 686(P 245)*)    2 , (*A 687(P 246)*)    2
         , (*A 688(P 247)*)    3 , (*A 689(P 248)*)    0 , (*A 690(P 249)*)    1
         , (*A 691(P 250)*)    2 , (*A 692(P 251)*)    2 , (*A 693(P 252)*)    1
         , (*A 694(P 253)*)    3 , (*A 695(P 254)*)    3 , (*A 696(P 255)*)    1
         , (*A 697(P 256)*)    1 , (*A 698(P 257)*)    1 , (*A 699(P 258)*)    1
         , (*A 700(P 259)*)    1 , (*A 701(P 260)*)    1 , (*A 702(P 261)*)    1
         , (*A 703(P 262)*)    1 , (*A 704(P 263)*)    1 , (*A 705(P 264)*)    1
         , (*A 706(P 265)*)    1 , (*A 707(P 266)*)    3 , (*A 708(P 267)*)    1
         , (*A 709(P 268)*)    1 , (*A 710(P 269)*)    1 , (*A 711(P 270)*)    1
         , (*A 712(P 271)*)    1 , (*A 713(P 272)*)    1 , (*A 714(P 273)*)    1
         , (*A 715(P 274)*)    1 , (*A 716(P 275)*)    1 , (*A 717(P 276)*)    1
         , (*A 718(P 277)*)    1 , (*A 719(P 278)*)    1 , (*A 720(P 279)*)    1
         , (*A 721(P 280)*)    1 , (*A 722(P 281)*)    1 , (*A 723(P 282)*)    1
         , (*A 724(P 283)*)    0 , (*A 725(P 284)*)    5 , (*A 726(P 285)*)    0
         , (*A 727(P 286)*)    5 , (*A 728(P 287)*)    1 , (*A 729(P 288)*)    1
         , (*A 730(P 289)*)    1 , (*A 731(P 290)*)    1 , (*A 732(P 291)*)    1
         , (*A 733(P 292)*)    1 , (*A 734(P 293)*)    0 , (*A 735(P 294)*)    1
         , (*A 736(P 295)*)    1 , (*A 737(P 296)*)    1 , (*A 738(P 297)*)    2
         , (*A 739(P 298)*)    0 , (*A 740(P 299)*)    1 , (*A 741(P 300)*)    1
         , (*A 742(P 301)*)    2 , (*A 743(P 302)*)    2 , (*A 744(P 303)*)    1
         , (*A 745(P 304)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 442(P   1)*)  291 , (*A 443(P   2)*)  110 , (*A 444(P   3)*)  110
         , (*A 445(P   4)*)  110 , (*A 446(P   5)*)  110 , (*A 447(P   6)*)  110
         , (*A 448(P   7)*)  110 , (*A 449(P   8)*)  116 , (*A 450(P   9)*)  117
         , (*A 451(P  10)*)  118 , (*A 452(P  11)*)  119 , (*A 453(P  12)*)  120
         , (*A 454(P  13)*)  121 , (*A 455(P  14)*)  125 , (*A 456(P  15)*)  114
         , (*A 457(P  16)*)  129 , (*A 458(P  17)*)  109 , (*A 459(P  18)*)  124
         , (*A 460(P  19)*)  124 , (*A 461(P  20)*)  131 , (*A 462(P  21)*)  131
         , (*A 463(P  22)*)  132 , (*A 464(P  23)*)  115 , (*A 465(P  24)*)  134
         , (*A 466(P  25)*)  111 , (*A 467(P  26)*)  136 , (*A 468(P  27)*)  112
         , (*A 469(P  28)*)  138 , (*A 470(P  29)*)  113 , (*A 471(P  30)*)  139
         , (*A 472(P  31)*)  122 , (*A 473(P  32)*)  122 , (*A 474(P  33)*)  140
         , (*A 475(P  34)*)  140 , (*A 476(P  35)*)  137 , (*A 477(P  36)*)  126
         , (*A 478(P  37)*)  127 , (*A 479(P  38)*)  127 , (*A 480(P  39)*)  142
         , (*A 481(P  40)*)  143 , (*A 482(P  41)*)  143 , (*A 483(P  42)*)  144
         , (*A 484(P  43)*)  144 , (*A 485(P  44)*)  145 , (*A 486(P  45)*)  142
         , (*A 487(P  46)*)  146 , (*A 488(P  47)*)  146 , (*A 489(P  48)*)  128
         , (*A 490(P  49)*)  133 , (*A 491(P  50)*)  133 , (*A 492(P  51)*)  147
         , (*A 493(P  52)*)  147 , (*A 494(P  53)*)  148 , (*A 495(P  54)*)  123
         , (*A 496(P  55)*)  149 , (*A 497(P  56)*)  150 , (*A 498(P  57)*)  151
         , (*A 499(P  58)*)  151 , (*A 500(P  59)*)  152 , (*A 501(P  60)*)  152
         , (*A 502(P  61)*)  141 , (*A 503(P  62)*)  141 , (*A 504(P  63)*)  153
         , (*A 505(P  64)*)  153 , (*A 506(P  65)*)  154 , (*A 507(P  66)*)  154
         , (*A 508(P  67)*)  155 , (*A 509(P  68)*)  155 , (*A 510(P  69)*)  155
         , (*A 511(P  70)*)  157 , (*A 512(P  71)*)  157 , (*A 513(P  72)*)  158
         , (*A 514(P  73)*)  160 , (*A 515(P  74)*)  159 , (*A 516(P  75)*)  159
         , (*A 517(P  76)*)  161 , (*A 518(P  77)*)  161 , (*A 519(P  78)*)  163
         , (*A 520(P  79)*)  164 , (*A 521(P  80)*)  165 , (*A 522(P  81)*)  165
         , (*A 523(P  82)*)  166 , (*A 524(P  83)*)  162 , (*A 525(P  84)*)  168
         , (*A 526(P  85)*)  168 , (*A 527(P  86)*)  169 , (*A 528(P  87)*)  171
         , (*A 529(P  88)*)  170 , (*A 530(P  89)*)  170 , (*A 531(P  90)*)  172
         , (*A 532(P  91)*)  172 , (*A 533(P  92)*)  174 , (*A 534(P  93)*)  173
         , (*A 535(P  94)*)  175 , (*A 536(P  95)*)  175 , (*A 537(P  96)*)  176
         , (*A 538(P  97)*)  178 , (*A 539(P  98)*)  177 , (*A 540(P  99)*)  177
         , (*A 541(P 100)*)  179 , (*A 542(P 101)*)  179 , (*A 543(P 102)*)  180
         , (*A 544(P 103)*)  181 , (*A 545(P 104)*)  183 , (*A 546(P 105)*)  182
         , (*A 547(P 106)*)  182 , (*A 548(P 107)*)  184 , (*A 549(P 108)*)  184
         , (*A 550(P 109)*)  186 , (*A 551(P 110)*)  187 , (*A 552(P 111)*)  187
         , (*A 553(P 112)*)  188 , (*A 554(P 113)*)  189 , (*A 555(P 114)*)  189
         , (*A 556(P 115)*)  185 , (*A 557(P 116)*)  190 , (*A 558(P 117)*)  156
         , (*A 559(P 118)*)  156 , (*A 560(P 119)*)  156 , (*A 561(P 120)*)  156
         , (*A 562(P 121)*)  156 , (*A 563(P 122)*)  156 , (*A 564(P 123)*)  156
         , (*A 565(P 124)*)  156 , (*A 566(P 125)*)  156 , (*A 567(P 126)*)  156
         , (*A 568(P 127)*)  156 , (*A 569(P 128)*)  156 , (*A 570(P 129)*)  156
         , (*A 571(P 130)*)  156 , (*A 572(P 131)*)  156 , (*A 573(P 132)*)  156
         , (*A 574(P 133)*)  156 , (*A 575(P 134)*)  156 , (*A 576(P 135)*)  156
         , (*A 577(P 136)*)  207 , (*A 578(P 137)*)  208 , (*A 579(P 138)*)  156
         , (*A 580(P 139)*)  212 , (*A 581(P 140)*)  211 , (*A 582(P 141)*)  156
         , (*A 583(P 142)*)  215 , (*A 584(P 143)*)  213 , (*A 585(P 144)*)  214
         , (*A 586(P 145)*)  216 , (*A 587(P 146)*)  218 , (*A 588(P 147)*)  217
         , (*A 589(P 148)*)  217 , (*A 590(P 149)*)  219 , (*A 591(P 150)*)  219
         , (*A 592(P 151)*)  220 , (*A 593(P 152)*)  156 , (*A 594(P 153)*)  221
         , (*A 595(P 154)*)  221 , (*A 596(P 155)*)  222 , (*A 597(P 156)*)  222
         , (*A 598(P 157)*)  223 , (*A 599(P 158)*)  156 , (*A 600(P 159)*)  224
         , (*A 601(P 160)*)  224 , (*A 602(P 161)*)  224 , (*A 603(P 162)*)  225
         , (*A 604(P 163)*)  225 , (*A 605(P 164)*)  227 , (*A 606(P 165)*)  226
         , (*A 607(P 166)*)  229 , (*A 608(P 167)*)  229 , (*A 609(P 168)*)  229
         , (*A 610(P 169)*)  230 , (*A 611(P 170)*)  230 , (*A 612(P 171)*)  232
         , (*A 613(P 172)*)  231 , (*A 614(P 173)*)  210 , (*A 615(P 174)*)  210
         , (*A 616(P 175)*)  210 , (*A 617(P 176)*)  209 , (*A 618(P 177)*)  233
         , (*A 619(P 178)*)  233 , (*A 620(P 179)*)  233 , (*A 621(P 180)*)  235
         , (*A 622(P 181)*)  237 , (*A 623(P 182)*)  236 , (*A 624(P 183)*)  237
         , (*A 625(P 184)*)  238 , (*A 626(P 185)*)  234 , (*A 627(P 186)*)  156
         , (*A 628(P 187)*)  156 , (*A 629(P 188)*)  228 , (*A 630(P 189)*)  242
         , (*A 631(P 190)*)  239 , (*A 632(P 191)*)  243 , (*A 633(P 192)*)  243
         , (*A 634(P 193)*)  244 , (*A 635(P 194)*)  244 , (*A 636(P 195)*)  246
         , (*A 637(P 196)*)  246 , (*A 638(P 197)*)  246 , (*A 639(P 198)*)  246
         , (*A 640(P 199)*)  247 , (*A 641(P 200)*)  248 , (*A 642(P 201)*)  245
         , (*A 643(P 202)*)  240 , (*A 644(P 203)*)  240 , (*A 645(P 204)*)  241
         , (*A 646(P 205)*)  241 , (*A 647(P 206)*)  241 , (*A 648(P 207)*)  249
         , (*A 649(P 208)*)  250 , (*A 650(P 209)*)  249 , (*A 651(P 210)*)  252
         , (*A 652(P 211)*)  253 , (*A 653(P 212)*)  254 , (*A 654(P 213)*)  167
         , (*A 655(P 214)*)  255 , (*A 656(P 215)*)  257 , (*A 657(P 216)*)  255
         , (*A 658(P 217)*)  256 , (*A 659(P 218)*)  259 , (*A 660(P 219)*)  256
         , (*A 661(P 220)*)  258 , (*A 662(P 221)*)  258 , (*A 663(P 222)*)  260
         , (*A 664(P 223)*)  263 , (*A 665(P 224)*)  260 , (*A 666(P 225)*)  261
         , (*A 667(P 226)*)  266 , (*A 668(P 227)*)  261 , (*A 669(P 228)*)  264
         , (*A 670(P 229)*)  269 , (*A 671(P 230)*)  264 , (*A 672(P 231)*)  267
         , (*A 673(P 232)*)  267 , (*A 674(P 233)*)  270 , (*A 675(P 234)*)  270
         , (*A 676(P 235)*)  270 , (*A 677(P 236)*)  270 , (*A 678(P 237)*)  270
         , (*A 679(P 238)*)  270 , (*A 680(P 239)*)  270 , (*A 681(P 240)*)  270
         , (*A 682(P 241)*)  270 , (*A 683(P 242)*)  270 , (*A 684(P 243)*)  273
         , (*A 685(P 244)*)  275 , (*A 686(P 245)*)  276 , (*A 687(P 246)*)  275
         , (*A 688(P 247)*)  274 , (*A 689(P 248)*)  277 , (*A 690(P 249)*)  277
         , (*A 691(P 250)*)  279 , (*A 692(P 251)*)  277 , (*A 693(P 252)*)  278
         , (*A 694(P 253)*)  278 , (*A 695(P 254)*)  272 , (*A 696(P 255)*)  272
         , (*A 697(P 256)*)  272 , (*A 698(P 257)*)  272 , (*A 699(P 258)*)  272
         , (*A 700(P 259)*)  272 , (*A 701(P 260)*)  272 , (*A 702(P 261)*)  272
         , (*A 703(P 262)*)  272 , (*A 704(P 263)*)  272 , (*A 705(P 264)*)  272
         , (*A 706(P 265)*)  272 , (*A 707(P 266)*)  272 , (*A 708(P 267)*)  262
         , (*A 709(P 268)*)  262 , (*A 710(P 269)*)  262 , (*A 711(P 270)*)  262
         , (*A 712(P 271)*)  262 , (*A 713(P 272)*)  262 , (*A 714(P 273)*)  262
         , (*A 715(P 274)*)  265 , (*A 716(P 275)*)  265 , (*A 717(P 276)*)  265
         , (*A 718(P 277)*)  268 , (*A 719(P 278)*)  268 , (*A 720(P 279)*)  268
         , (*A 721(P 280)*)  268 , (*A 722(P 281)*)  271 , (*A 723(P 282)*)  271
         , (*A 724(P 283)*)  280 , (*A 725(P 284)*)  281 , (*A 726(P 285)*)  282
         , (*A 727(P 286)*)  251 , (*A 728(P 287)*)  283 , (*A 729(P 288)*)  283
         , (*A 730(P 289)*)  283 , (*A 731(P 290)*)  283 , (*A 732(P 291)*)  283
         , (*A 733(P 292)*)  283 , (*A 734(P 293)*)  130 , (*A 735(P 294)*)  130
         , (*A 736(P 295)*)  285 , (*A 737(P 296)*)  286 , (*A 738(P 297)*)  285
         , (*A 739(P 298)*)  135 , (*A 740(P 299)*)  135 , (*A 741(P 300)*)  287
         , (*A 742(P 301)*)  289 , (*A 743(P 302)*)  287 , (*A 744(P 303)*)  288
         , (*A 745(P 304)*)  290
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   37
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   66 , (*:  10*)  108 , (*:  11*)   94
         , (*:  12*)   94 , (*:  13*)   95 , (*:  14*)   66
         , (*:  15*)   14 , (*:  16*)   14 , (*:  17*)   95
         , (*:  18*)   30 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   95 , (*:  25*)   66 , (*:  26*)   95
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   70 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)   19
         , (*:  36*)   95 , (*:  37*)   19 , (*:  38*)   95
         , (*:  39*)   67 , (*:  40*)    9 , (*:  41*)    9
         , (*:  42*)   66 , (*:  43*)   68 , (*:  44*)   68
         , (*:  45*)   95 , (*:  46*)   40 , (*:  47*)   96
         , (*:  48*)   96 , (*:  49*)   96 , (*:  50*)    5
         , (*:  51*)   95 , (*:  52*)   92 , (*:  53*)   70
         , (*:  54*)    5 , (*:  55*)   74 , (*:  56*)   96
         , (*:  57*)   19 , (*:  58*)   19 , (*:  59*)   96
         , (*:  60*)   19 , (*:  61*)   96 , (*:  62*)    5
         , (*:  63*)    5 , (*:  64*)   96 , (*:  65*)    5
         , (*:  66*)    5 , (*:  67*)   96 , (*:  68*)    5
         , (*:  69*)   96 , (*:  70*)   96 , (*:  71*)    5
         , (*:  72*)   95 , (*:  73*)   67 , (*:  74*)   96
         , (*:  75*)   81 , (*:  76*)   96 , (*:  77*)   70
         , (*:  78*)   96 , (*:  79*)   70 , (*:  80*)    5
         , (*:  81*)   79 , (*:  82*)   96 , (*:  83*)   81
         , (*:  84*)   40 , (*:  85*)   39 , (*:  86*)   69
         , (*:  87*)   19 , (*:  88*)   95 , (*:  89*)   52
         , (*:  90*)   48 , (*:  91*)   48 , (*:  92*)   95
         , (*:  93*)   11 , (*:  94*)   19 , (*:  95*)   48
         , (*:  96*)   48 , (*:  97*)   95 , (*:  98*)   39
         , (*:  99*)   95 , (*: 100*)   95 , (*: 101*)   76
         , (*: 102*)   76 , (*: 103*)   76 , (*: 104*)   95
         , (*: 105*)   19 , (*: 106*)   19 , (*: 107*)   95
         , (*: 108*)   19 , (*: 109*)   19 , (*: 110*)   95
         , (*: 111*)   19 , (*: 112*)   39 , (*: 113*)   39
         , (*: 114*)   19 , (*: 115*)   19 , (*: 116*)   19
         , (*: 117*)   19 , (*: 118*)   19 , (*: 119*)   69
         , (*: 120*)   70 , (*: 121*)   70 , (*: 122*)   70
         , (*: 123*)   70 , (*: 124*)   95 , (*: 125*)   66
         , (*: 126*)   66 , (*: 127*)   96 , (*: 128*)   19
         , (*: 129*)   19 , (*: 130*)   19 , (*: 131*)   19
         , (*: 132*)   68 , (*: 133*)   96 , (*: 134*)   19
         , (*: 135*)   19 , (*: 136*)   19 , (*: 137*)   19
         , (*: 138*)   19 , (*: 139*)   19 , (*: 140*)   19
         , (*: 141*)    6 , (*: 142*)   76 , (*: 143*)   76
         , (*: 144*)   76 , (*: 145*)   95 , (*: 146*)   68
         , (*: 147*)   68 , (*: 148*)   96 , (*: 149*)   66
         , (*: 150*)    9 , (*: 151*)    9 , (*: 152*)   66
         , (*: 153*)   68 , (*: 154*)   95 , (*: 155*)   66
         , (*: 156*)    9 , (*: 157*)   68 , (*: 158*)   95
         , (*: 159*)    9 , (*: 160*)   66 , (*: 161*)   66
         , (*: 162*)    9 , (*: 163*)    9 , (*: 164*)   66
         , (*: 165*)   66 , (*: 166*)   69 , (*: 167*)   66
         , (*: 168*)    9 , (*: 169*)   95 , (*: 170*)   66
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)   19
         , (*: 174*)   19 , (*: 175*)   74 , (*: 176*)   96
         , (*: 177*)   19 , (*: 178*)   96 , (*: 179*)    9
         , (*: 180*)   14 , (*: 181*)   66 , (*: 182*)   95
         , (*: 183*)   66 , (*: 184*)   95 , (*: 185*)   95
         , (*: 186*)   69 , (*: 187*)   19 , (*: 188*)   95
         , (*: 189*)   67 , (*: 190*)   66 , (*: 191*)    9
         , (*: 192*)    9 , (*: 193*)    9 , (*: 194*)    9
         , (*: 195*)   19 , (*: 196*)   19 , (*: 197*)   95
         , (*: 198*)   67 , (*: 199*)   69 , (*: 200*)   69
         , (*: 201*)   70 , (*: 202*)   70 , (*: 203*)   66
         , (*: 204*)   14 , (*: 205*)   14 , (*: 206*)   19
         , (*: 207*)   19 , (*: 208*)   95 , (*: 209*)   67
         , (*: 210*)   69 , (*: 211*)   69 , (*: 212*)   66
         , (*: 213*)   27 , (*: 214*)   95 , (*: 215*)   95
         , (*: 216*)   95 , (*: 217*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 218)*)  495 (*P53*) , (*RR: 219)*)  472 (*P30*)
         , (*RR: 220)*)  462 (*P20*) , (*RR: 221)*)  461 (*P19*)
         , (*RR: 222)*)  485 (*P43*) , (*RR: 223)*)  480 (*P38*)
         , (*RR: 224)*)  486 (*P44*) , (*RR: 225)*)  477 (*P35*)
         , (*RR: 226)*)  496 (*P54*) , (*RR: 227)*)  456 (*P14*)
         , (*RR: 228)*)  513 (*P71*) , (*RR: 229)*)  651 (*P209*)
         , (*RR: 230)*)  537 (*P95*) , (*RR: 231)*)  527 (*P85*)
         , (*RR: 232)*)  544 (*P102*) , (*RR: 233)*)  458 (*P16*)
         , (*RR: 234)*)  519 (*P77*) , (*RR: 235)*)  518 (*P76*)
         , (*RR: 236)*)  580 (*P138*) , (*RR: 237)*)  722 (*P280*)
         , (*RR: 238)*)  723 (*P281*) , (*RR: 239)*)  497 (*P55*)
         , (*RR: 240)*)  696 (*P254*) , (*RR: 241)*)  697 (*P255*)
         , (*RR: 242)*)  698 (*P256*) , (*RR: 243)*)  699 (*P257*)
         , (*RR: 244)*)  700 (*P258*) , (*RR: 245)*)  701 (*P259*)
         , (*RR: 246)*)  702 (*P260*) , (*RR: 247)*)  705 (*P263*)
         , (*RR: 248)*)  706 (*P264*) , (*RR: 249)*)  703 (*P261*)
         , (*RR: 250)*)  704 (*P262*) , (*RR: 251)*)  656 (*P214*)
         , (*RR: 252)*)  659 (*P217*) , (*RR: 253)*)  714 (*P272*)
         , (*RR: 254)*)  708 (*P266*) , (*RR: 255)*)  709 (*P267*)
         , (*RR: 256)*)  710 (*P268*) , (*RR: 257)*)  711 (*P269*)
         , (*RR: 258)*)  712 (*P270*) , (*RR: 259)*)  713 (*P271*)
         , (*RR: 260)*)  715 (*P273*) , (*RR: 261)*)  716 (*P274*)
         , (*RR: 262)*)  717 (*P275*) , (*RR: 263)*)  720 (*P278*)
         , (*RR: 264)*)  721 (*P279*) , (*RR: 265)*)  718 (*P276*)
         , (*RR: 266)*)  719 (*P277*) , (*RR: 267)*)  686 (*P244*)
         , (*RR: 268)*)  684 (*P242*) , (*RR: 269)*)  674 (*P232*)
         , (*RR: 270)*)  688 (*P246*) , (*RR: 271)*)  691 (*P249*)
         , (*RR: 272)*)  679 (*P237*) , (*RR: 273)*)  707 (*P265*)
         , (*RR: 274)*)  585 (*P143*) , (*RR: 275)*)  583 (*P141*)
         , (*RR: 276)*)  630 (*P188*) , (*RR: 277)*)  598 (*P156*)
         , (*RR: 278)*)  509 (*P67*) , (*RR: 279)*)  510 (*P68*)
         , (*RR: 280)*)  586 (*P144*) , (*RR: 281)*)  625 (*P183*)
         , (*RR: 282)*)  592 (*P150*) , (*RR: 283)*)  587 (*P145*)
         , (*RR: 284)*)  500 (*P58*) , (*RR: 285)*)  501 (*P59*)
         , (*RR: 286)*)  623 (*P181*) , (*RR: 287)*)  605 (*P163*)
         , (*RR: 288)*)  639 (*P197*) , (*RR: 289)*)  637 (*P195*)
         , (*RR: 290)*)  638 (*P196*) , (*RR: 291)*)  631 (*P189*)
         , (*RR: 292)*)  612 (*P170*) , (*RR: 293)*)  626 (*P184*)
         , (*RR: 294)*)  599 (*P157*) , (*RR: 295)*)  646 (*P204*)
         , (*RR: 296)*)  647 (*P205*) , (*RR: 297)*)  517 (*P75*)
         , (*RR: 298)*)  533 (*P91*) , (*RR: 299)*)  532 (*P90*)
         , (*RR: 300)*)  525 (*P83*) , (*RR: 301)*)  526 (*P84*)
         , (*RR: 302)*)  531 (*P89*) , (*RR: 303)*)  535 (*P93*)
         , (*RR: 304)*)  536 (*P94*) , (*RR: 305)*)  542 (*P100*)
         , (*RR: 306)*)  541 (*P99*) , (*RR: 307)*)  549 (*P107*)
         , (*RR: 308)*)  548 (*P106*) , (*RR: 309)*)  648 (*P206*)
         , (*RR: 310)*)  649 (*P207*) , (*RR: 311)*)  650 (*P208*)
         , (*RR: 312)*)  727 (*P285*) , (*RR: 313)*)  474 (*P32*)
         , (*RR: 314)*)  464 (*P22*) , (*RR: 315)*)  466 (*P24*)
         , (*RR: 316)*)  476 (*P34*) , (*RR: 317)*)  468 (*P26*)
         , (*RR: 318)*)  470 (*P28*) , (*RR: 319)*)  467 (*P25*)
         , (*RR: 320)*)  469 (*P27*) , (*RR: 321)*)  443 (*P1*)
         , (*RR: 322)*)  444 (*P2*) , (*RR: 323)*)  445 (*P3*)
         , (*RR: 324)*)  446 (*P4*) , (*RR: 325)*)  447 (*P5*)
         , (*RR: 326)*)  448 (*P6*) , (*RR: 327)*)  460 (*P18*)
         , (*RR: 328)*)  463 (*P21*) , (*RR: 329)*)  484 (*P42*)
         , (*RR: 330)*)  482 (*P40*) , (*RR: 331)*)  481 (*P39*)
         , (*RR: 332)*)  457 (*P15*) , (*RR: 333)*)  479 (*P37*)
         , (*RR: 334)*)  487 (*P45*) , (*RR: 335)*)  488 (*P46*)
         , (*RR: 336)*)  502 (*P60*) , (*RR: 337)*)  514 (*P72*)
         , (*RR: 338)*)  683 (*P241*) , (*RR: 339)*)  694 (*P252*)
         , (*RR: 340)*)  658 (*P216*) , (*RR: 341)*)  660 (*P218*)
         , (*RR: 342)*)  664 (*P222*) , (*RR: 343)*)  667 (*P225*)
         , (*RR: 344)*)  670 (*P228*) , (*RR: 345)*)  669 (*P227*)
         , (*RR: 346)*)  671 (*P229*) , (*RR: 347)*)  672 (*P230*)
         , (*RR: 348)*)  673 (*P231*) , (*RR: 349)*)  685 (*P243*)
         , (*RR: 350)*)  687 (*P245*) , (*RR: 351)*)  675 (*P233*)
         , (*RR: 352)*)  676 (*P234*) , (*RR: 353)*)  693 (*P251*)
         , (*RR: 354)*)  690 (*P248*) , (*RR: 355)*)  692 (*P250*)
         , (*RR: 356)*)  680 (*P238*) , (*RR: 357)*)  681 (*P239*)
         , (*RR: 358)*)  616 (*P174*) , (*RR: 359)*)  628 (*P186*)
         , (*RR: 360)*)  498 (*P56*) , (*RR: 361)*)  499 (*P57*)
         , (*RR: 362)*)  508 (*P66*) , (*RR: 363)*)  578 (*P136*)
         , (*RR: 364)*)  559 (*P117*) , (*RR: 365)*)  560 (*P118*)
         , (*RR: 366)*)  561 (*P119*) , (*RR: 367)*)  562 (*P120*)
         , (*RR: 368)*)  563 (*P121*) , (*RR: 369)*)  564 (*P122*)
         , (*RR: 370)*)  565 (*P123*) , (*RR: 371)*)  566 (*P124*)
         , (*RR: 372)*)  567 (*P125*) , (*RR: 373)*)  568 (*P126*)
         , (*RR: 374)*)  569 (*P127*) , (*RR: 375)*)  570 (*P128*)
         , (*RR: 376)*)  571 (*P129*) , (*RR: 377)*)  572 (*P130*)
         , (*RR: 378)*)  573 (*P131*) , (*RR: 379)*)  574 (*P132*)
         , (*RR: 380)*)  575 (*P133*) , (*RR: 381)*)  576 (*P134*)
         , (*RR: 382)*)  577 (*P135*) , (*RR: 383)*)  579 (*P137*)
         , (*RR: 384)*)  581 (*P139*) , (*RR: 385)*)  582 (*P140*)
         , (*RR: 386)*)  584 (*P142*) , (*RR: 387)*)  591 (*P149*)
         , (*RR: 388)*)  590 (*P148*) , (*RR: 389)*)  593 (*P151*)
         , (*RR: 390)*)  596 (*P154*) , (*RR: 391)*)  551 (*P109*)
         , (*RR: 392)*)  621 (*P179*) , (*RR: 393)*)  622 (*P180*)
         , (*RR: 394)*)  604 (*P162*) , (*RR: 395)*)  606 (*P164*)
         , (*RR: 396)*)  635 (*P193*) , (*RR: 397)*)  640 (*P198*)
         , (*RR: 398)*)  641 (*P199*) , (*RR: 399)*)  554 (*P112*)
         , (*RR: 400)*)  642 (*P200*) , (*RR: 401)*)  633 (*P191*)
         , (*RR: 402)*)  634 (*P192*) , (*RR: 403)*)  602 (*P160*)
         , (*RR: 404)*)  603 (*P161*) , (*RR: 405)*)  611 (*P169*)
         , (*RR: 406)*)  613 (*P171*) , (*RR: 407)*)  609 (*P167*)
         , (*RR: 408)*)  610 (*P168*) , (*RR: 409)*)  597 (*P155*)
         , (*RR: 410)*)  595 (*P153*) , (*RR: 411)*)  624 (*P182*)
         , (*RR: 412)*)  556 (*P114*) , (*RR: 413)*)  643 (*P201*)
         , (*RR: 414)*)  506 (*P64*) , (*RR: 415)*)  507 (*P65*)
         , (*RR: 416)*)  629 (*P187*) , (*RR: 417)*)  521 (*P79*)
         , (*RR: 418)*)  524 (*P82*) , (*RR: 419)*)  728 (*P286*)
         , (*RR: 420)*)  528 (*P86*) , (*RR: 421)*)  534 (*P92*)
         , (*RR: 422)*)  729 (*P287*) , (*RR: 423)*)  543 (*P101*)
         , (*RR: 424)*)  538 (*P96*) , (*RR: 425)*)  733 (*P291*)
         , (*RR: 426)*)  545 (*P103*) , (*RR: 427)*)  731 (*P289*)
         , (*RR: 428)*)  652 (*P210*) , (*RR: 429)*)  745 (*P303*)
         , (*RR: 430)*)  742 (*P300*) , (*RR: 431)*)  741 (*P299*)
         , (*RR: 432)*)  743 (*P301*) , (*RR: 433)*)  744 (*P302*)
         , (*RR: 434)*)  732 (*P290*) , (*RR: 435)*)  736 (*P294*)
         , (*RR: 436)*)  730 (*P288*) , (*RR: 437)*)  738 (*P296*)
         , (*RR: 438)*)  494 (*P52*) , (*RR: 439)*)  493 (*P51*)
         , (*RR: 440)*)  492 (*P50*) , (*RR: 441)*)  465 (*P23*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 93 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;
    TYPE Bkt = BrandKindTyp ; 

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 442 => (* P1 _0000_ (291): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 443,321 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 444,322 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 445,323 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 446,324 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 447,325 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 448,326 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 449 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 308 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 450 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 311 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 451 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 314 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 452 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 317 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 453 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 320 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 454 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 323 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 455 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE NonreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 326 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         (* Default Coord. *) 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntKind := Ukt . UkInterface ; 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 456,227 => (* P15 InstInterface (114): InterfaceLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 350 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 457,332 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 357 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkInterface *>
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 458,233 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 368 of "FM3Parser.lalr" *)
                 VAR LScopeRefOpen , LScopeRefDecl : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ;
                         <* ASSERT LScopeRefOpen . ScpKind = Skt . SkInterface *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                           
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                           
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefDecl ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . CheckStdUnitPragma ( FM3Units . UnitStackTopRef ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       END ; 
                     
              | 459 => (* P18 IntfPragmas (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 460,327 => (* P19 IntfPragmas (124): IntfPragmas IntfPragma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 461,221 => (* P20 IntfPragma (131): StkOpenPragma StkPragmaId StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 399 of "FM3Parser.lalr" *)
                 FM3Pass1 . RecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 462,220 => (* P21 IntfPragma (131): StkOpenPragma StkIdent StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 402 of "FM3Parser.lalr" *)
                 FM3Pass1 . UnrecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 463,328 => (* P22 ModuleLt (132): OptUnsafe StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 405 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         (* Default Coord. *) 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 464,314 => (* P23 InstModule (115): ModuleLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 428 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 465,441 => (* P24 ModuleMiddle (134): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 435 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 466,315 => (* P25 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 448 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl , LScopeRefOpen : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ;
                         <* ASSERT LScopeRefOpen . ScpKind = Skt . SkModule *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                           
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                         
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefDecl ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ; 
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 467,319 => (* P26 GenInterfaceLt (136): StkRwGENERIC StkRwINTERFACE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 477 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 468,317 => (* P27 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 498 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_TI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 469,320 => (* P28 GenModuleLt (138): StkRwGENERIC StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 506 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 470,318 => (* P29 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 526 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_TI ( Itk . ItkDeclScopeRt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 471 => (* P30 Block (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 472,219 => (* P31 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 537 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 473 => (* P32 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 539 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe? *) := FALSE (* Safe. *) ; 
              | 474,313 => (* P33 OptSemicolon (140): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 541 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
              | 475 => (* P34 OptSemicolon (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;
                (* line 543 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos2 := FM3Scanner . Attribute . Position ; 
                       (* If semicolon is absent, right end of item to left. *) 
                     
              | 476,316 => (* P35 GenFormalList (137): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 551 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 477,225 => (* P36 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 557 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 478 => (* P37 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 479,333 => (* P38 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 480,223 => (* P39 Import (142): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 481,331 => (* P40 ImportItemPlusList (143): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 482,330 => (* P41 ImportItemPlusList (143): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 483 => (* P42 ImportItem (144): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 576 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 484,329 => (* P43 ImportItem (144): NonreservedIdent StkRwAS NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 579 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 485,222 => (* P44 FromImportLt (145): StkRwFROM NonreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 583 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 486,224 => (* P45 Import (142): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 487,334 => (* P46 FromImportIdPlusList (146): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 594 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 488,335 => (* P47 FromImportIdPlusList (146): FromImportIdPlusList StkComma NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 599 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 489 => (* P48 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 604 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 490 => (* P49 Exports (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 612 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         IF FM3SharedUtils . CompareAToT 
                              ( FM3Units . UnitStackTopRef ^ . UntUnitIdent ^ , "Main" )
                            = FM3Base . CmpEQ
                            AND NOT FM3CLToks . CltStdSources IN FM3CLOptions . OptionTokSet
                         THEN (* Don't bring in Main.i3 when exported implicitly. *)
                         ELSE  
                           LUnitRef
                             := FM3ExpImp . GetInterface 
                                  ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                  , yyAttributeStack^[yyStackPtr] . PaPos 
                                  , IsExport := TRUE
                                  ) ;
                           FM3ExpImp . ImportAllDecls
                             ( LUnitRef , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                         END (*IF*) ; 
                       END (* Block. *) ;  
                     
              | 491 => (* P50 Exports (133): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;

              | 492,440 => (* P51 ExportIdPlusList (147): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 493,439 => (* P52 ExportIdPlusList (147): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;

              | 494,438 => (* P53 ExportIdent (148): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 639 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 495,218 => (* P54 NonreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 654 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                (* FIXME: emit error if it's reserved. *) 
                     
              | 496,226 => (* P55 IdentRef (149): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 661 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 497,239 => (* P56 QualIdentRef (150): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 668 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . QualIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 498,360 => (* P57 IdentOrQualRef (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 677 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 499,361 => (* P58 IdentOrQualRef (151): QualIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 682 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 500,284 => (* P59 DeclIdListElems (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 695 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 501,285 => (* P60 DeclIdListElems (152): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 707 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 502,336 => (* P61 IdStarList (141): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 723 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 503 => (* P62 IdStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 725 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 504 => (* P63 IdentOrQualRefStarList (153): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 153;
                (* line 729 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 505 => (* P64 IdentOrQualRefStarList (153): IdentOrQualRefPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 731 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 506,414 => (* P65 IdentOrQualRefPlusList (154): IdentOrQualRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 733 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 507,415 => (* P66 IdentOrQualRefPlusList (154): IdentOrQualRefPlusList StkComma IdentOrQualRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 735 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 508,362 => (* P67 TypeName (155): IdentOrQualRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 509,278 => (* P68 TypeName (155): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 745 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . PaPos ) ; 
                     
              | 510,279 => (* P69 TypeName (155): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 750 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . PaPos
                         ) ; 
                     
              | 511 => (* P70 OptConstType (157): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 760 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 512 => (* P71 OptConstType (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 762 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 513,228 => (* P72 ConstDeclGroupLt (158): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 771 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
              | 514,337 => (* P73 ConstDeclGroup (160): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 774 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 515 => (* P74 ConstDeclList (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 779 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 516 => (* P75 ConstDeclList (159): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 159;
                (* line 785 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 517,297 => (* P76 ConstDeclPlus (161): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 161;
                (* line 790 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 518,235 => (* P77 ConstDeclPlus (161): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 161;
                (* line 795 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 519,234 => (* P78 ConstDeclId (163): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 812 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . PaInt (* Ident count, 0 if error, else 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkConst , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 520 => (* P79 ConstDeclTypeTok (164): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 164;
                (* line 818 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP 
                         ( Itk . ItkConstDeclType , FM3Scanner . Attribute . Position ) ;
                     
              | 521,417 => (* P80 OptConstDeclType (165): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 823 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                     
              | 522 => (* P81 OptConstDeclType (165): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 165;
                (* line 828 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 523 => (* P82 ConstDeclValueTok (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 835 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP 
                         ( Itk . ItkConstDeclValue , FM3Scanner . Attribute . Position ) ;
                     
              | 524,418 => (* P83 ConstDecl (162): ConstDeclId ConstDeclTypeTok OptConstDeclType ConstDeclValueTok StkEqual Expr .*)
                DEC (yyStackPtr, 6); yyNonterminal := 162;
                (* line 841 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkConstDeclLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 525,300 => (* P84 TypeRelation (168): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 855 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 526,301 => (* P85 TypeRelation (168): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 857 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 527,231 => (* P86 TypeDeclGroupLt (169): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 868 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 528,420 => (* P87 TypeDeclGroup (171): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 871 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 529 => (* P88 TypeDeclList (170): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 170;
                (* line 876 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 530 => (* P89 TypeDeclList (170): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 882 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 531,302 => (* P90 TypeDeclPlus (172): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 887 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 532,299 => (* P91 TypeDeclPlus (172): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 172;
                (* line 892 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 533,298 => (* P92 TypeDeclId (174): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 908 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . PaInt (* Ident count, 0 if error, else 1. *)
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkType , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ; 
                     
              | 534,421 => (* P93 TypeDecl (173): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 914 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 535,303 => (* P94 RevelationRelation (175): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 936 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 536,304 => (* P95 RevelationRelation (175): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 938 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 537,230 => (* P96 RevelationGroupLt (176): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 949 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 538,424 => (* P97 RevelationGroup (178): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 952 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 539 => (* P98 RevelationList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 957 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 540 => (* P99 RevelationList (177): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 963 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 541,306 => (* P100 RevelationPlus (179): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 968 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 542,305 => (* P101 RevelationPlus (179): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 973 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 543,423 => (* P102 Revelation (180): IdentOrQualRef RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 989 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 544,232 => (* P103 VarDeclGroupLt (181): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 1017 of "FM3Parser.lalr" *)
                 yySynAttribute . PaDeclDepth 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 545,426 => (* P104 VarDeclGroup (183): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1030 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *)  ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *>
                      
              | 546 => (* P105 VarDeclList (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 1036 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 547 => (* P106 VarDeclList (182): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1042 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 548,308 => (* P107 VarDeclPlus (184): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1055 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 549,307 => (* P108 VarDeclPlus (184): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 184;
                (* line 1060 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 550 => (* P109 DeclType (186): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 186;
                (* line 1078 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_EP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , yyAttributeStack^[yyStackPtr] . Scan . Position 
                         ) ;
                     
              | 551,391 => (* P110 OptDeclType (187): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1086 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;
                     
              | 552 => (* P111 OptDeclType (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1091 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
                     
              | 553 => (* P112 DeclValue (188): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 188;
                (* line 1098 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_ZP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , yyAttributeStack^[yyStackPtr] . Scan . Position 
                         ) ;
                     
              | 554,399 => (* P113 OptDeclValue (189): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 189;
                (* line 1106 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;
                      
              | 555 => (* P114 OptDeclValue (189): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 189;
                (* line 1111 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
                     
              | 556,412 => (* P115 VarDecl (185): VarDeclIds DeclType OptDeclType DeclValue OptDeclValue .*)
                DEC (yyStackPtr, 5); yyNonterminal := 185;
                (* line 1118 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                            ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+5] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         FM3Pass1 . PutBwd_LCP_rp (* The whole declaration. *) 
                           ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       ELSE (* Skip all but the empty id list. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 557 => (* P116 VarDeclIds (190): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 190;
                (* line 1138 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 558 => (* P117 Type (156): TypeName .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 1151 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; (* Needed? *) 
              | 559,364 => (* P118 Type (156): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 560,365 => (* P119 Type (156): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 561,366 => (* P120 Type (156): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 562,367 => (* P121 Type (156): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 563,368 => (* P122 Type (156): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 564,369 => (* P123 Type (156): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 565,370 => (* P124 Type (156): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 566,371 => (* P125 Type (156): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 567,372 => (* P126 Type (156): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 568,373 => (* P127 Type (156): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 569,374 => (* P128 Type (156): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 570,375 => (* P129 Type (156): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 571,376 => (* P130 Type (156): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 572,377 => (* P131 Type (156): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 573,378 => (* P132 Type (156): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 574,379 => (* P133 Type (156): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 575,380 => (* P134 Type (156): RefTypeTraced .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 576,381 => (* P135 Type (156): RefTypeUntraced .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 577,382 => (* P136 RefTypeTraced (207): SupertypeAbsent Brand StkRwREF Type .*)
                DEC (yyStackPtr, 4); yyNonterminal := 207;
                (* line 1198 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_eCP_rbP
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , FALSE (* IsUntraced. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 578,363 => (* P137 RefTypeUntraced (208): StkRwUNTRACED SupertypeAbsent Brand StkRwREF Type .*)
                DEC (yyStackPtr, 5); yyNonterminal := 208;
                (* line 1217 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_eCP_rbP
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , TRUE (* IsUntraced. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+5] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 579,383 => (* P138 Type (156): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 580,236 => (* P139 OpenArrayTypeLt (212): StkRwARRAY StkRwOF .*)
                DEC (yyStackPtr, 2); yyNonterminal := 212;
                (* line 1235 of "FM3Parser.lalr" *)
                 (* Default coord, position. *)
                       FM3Pass1 . PutBwd_TP
                         ( Itk .ItkSubscriptTypeAbsent , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                       FM3Pass1 . PutBwd_TBP 
                         ( Itk . ItkArrayTypeElmt , TRUE , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 581,384 => (* P140 OpenArrayType (211): OpenArrayTypeLt Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 211;
                (* line 1243 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_rbp
                         ( Itk . ItkArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , TRUE (* Open. *)  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 582,385 => (* P141 Type (156): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 583,275 => (* P142 FixedArrayTypeLt (215): StkRwARRAY SubrType StkRwOF .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1254 of "FM3Parser.lalr" *)
                 (* Default coord, position. *)
                       FM3Pass1 . PutBwd_TBP 
                         ( Itk . ItkArrayTypeElmt , FALSE , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                     
              | 584,386 => (* P143 FixedArrayType (213): FixedArrayTypeLt Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 213;
                (* line 1260 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_rbp
                         ( Itk . ItkArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , FALSE (* Open. *)  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 585,274 => (* P144 SubrType (214): StkOpenBracket Expr StkEllipsis Expr StkCloseBracket .*)
                DEC (yyStackPtr, 5); yyNonterminal := 214;
                (* line 1269 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( Itk . ItkSubrTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+3] .  PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 586,280 => (* P145 EnumTypeLt (216): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1284 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 587,283 => (* P146 EnumType (218): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 218;
                (* line 1299 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkEnum *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 588 => (* P147 EnumLitList (217): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 217;
                (* line 1317 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 589 => (* P148 EnumLitList (217): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1320 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 590,388 => (* P149 EnumLitPlus (219): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1323 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 591,387 => (* P150 EnumLitPlus (219): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1326 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 592,282 => (* P151 EnumLit (220): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1329 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Dkt . DkEnumLit
                                    , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 593,389 => (* P152 Type (156): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 594 => (* P153 FieldDeclList (221): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 221;
                (* line 1351 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ;
                      
              | 595,410 => (* P154 FieldDeclList (221): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 221;
                (* line 1359 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 596,390 => (* P155 FieldDeclPlus (222): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 222;
                (* line 1368 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 597,409 => (* P156 FieldDeclPlus (222): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1371 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 598,277 => (* P157 RecTypeLt (223): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 223;
                (* line 1383 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaDeclDepth (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 599,294 => (* P158 Type (156): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 1410 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkRec *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 600 => (* P159 MethodDeclList (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1433 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 601 => (* P160 MethodDeclList (224): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1441 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 602,403 => (* P161 MethodDeclList (224): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 224;
                (* line 1446 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 603,404 => (* P162 MethodDeclPlus (225): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1455 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 604,394 => (* P163 MethodDeclPlus (225): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 225;
                (* line 1458 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 605,287 => (* P164 MethodDeclLt (227): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1470 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkMethod , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 606,395 => (* P165 MethodDecl (226): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 226;
                (* line 1476 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) ; 
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkFormals *>
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*) 
                     
              | 607 => (* P166 OverrideList (229): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 229;
                (* line 1503 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 608 => (* P167 OverrideList (229): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1511 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 609,407 => (* P168 OverrideList (229): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1516 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 610,408 => (* P169 OverridePlus (230): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 230;
                (* line 1525 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 611,405 => (* P170 OverridePlus (230): OverridePlus StkSemicolon Override .*)
                DEC (yyStackPtr, 3); yyNonterminal := 230;
                (* line 1528 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 612,292 => (* P171 OverrideLt (232): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 232;
                (* line 1540 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* valid ident count, 0 or 1. *)
                              := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) )
                     
              | 613,406 => (* P172 Override (231): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 231;
                (* line 1545 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaInt < 1
                       THEN (* Skip the whole override. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       ELSE
                         yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( Itk . ItkOverrideLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*IF*) 
                     
              | 614 => (* P173 Brand (210): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 210;
                (* line 1569 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Bkt . BkAbsent ) ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkBrandAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 615 => (* P174 Brand (210): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1575 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Bkt . BkAnon ) ;
                       FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 616,358 => (* P175 Brand (210): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 210;
                (* line 1581 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPass1Coord := yyAttributeStack^[yyStackPtr+2] . PaPass1Coord ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Bkt . BkExplicit ) ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkBrandExplicitLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 617 => (* P176 SupertypeAbsent (209): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 209;
                (* line 1595 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkSupertypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 618 => (* P177 Supertype (233): SupertypeAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1599 of "FM3Parser.lalr" *)
                 (* Default Position & Coord. *) 
              | 619 => (* P178 Supertype (233): TypeName .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1601 of "FM3Parser.lalr" *)
                 (* Default Position & Coord. *) 
              | 620 => (* P179 Supertype (233): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1603 of "FM3Parser.lalr" *)
                 (* Default Position & Coord. *) 
              | 621,392 => (* P180 SupertypeSem (235): Supertype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1606 of "FM3Parser.lalr" *)
                 (* Default Position & Coord. *) 
                       (* ^The supertype will end up nested within its object type. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 622,393 => (* P181 ObjTypeLt (237): ObjSubtypeLt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1616 of "FM3Parser.lalr" *)
                 yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth ; 
                       yySynAttribute . PaBool := TRUE (* Has explicit subtype. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Scope num. *) ;  
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Brand kind, Bkt. *) ;
                     
              | 623,286 => (* P182 ObjSubtypeLt (236): SupertypeSem Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 236;
                (* line 1623 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         (* Default Position & Coord. *) 
                         yySynAttribute . PaDeclDepth (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+2] . PaByte (* Brand kind, Bkt. *) ;  
                         (* Need the scope now, to count decls. *) 
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         yySynAttribute . PaInt := LScopeRef ^ . ScpSelfScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 624,411 => (* P183 ObjTypeLt (237): ObjRootTypeLt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1654 of "FM3Parser.lalr" *)
                 yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth ; 
                       yySynAttribute . PaBool := FALSE (* Has explicit subtype. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Scope num. *) ; 
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Brand kind, Bkt. *) ; 
                     
              | 625,281 => (* P184 ObjRootTypeLt (238): Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1661 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         (* Default Position & Coord. *) 
                         yySynAttribute . PaDeclDepth (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Brand kind, Bkt. *) ;  
                         (* Need the scope now, to count decls. *) 
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                                ) ;
                         yySynAttribute . PaInt := LScopeRef ^ . ScpSelfScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END; 
                     
              | 626,293 => (* P185 ObjType (234): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 234;
                (* line 1690 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         (* Default Position & Coord. *)
                         (* NOTE: This keeps the decl scope of the object type around during
                                  the OverrideList, but it's harmless, because parsing will
                                  ensure there are no decls in the OverrideList.
                         *) 
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkObj *>
                         <* ASSERT LScopeRef ^ . ScpSelfScopeNo = yyAttributeStack^[yyStackPtr+1] . PaInt *> 
                         FM3Pass1 . PutBwd_LCIIP_riip
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaByte (* BrandKind, Bkt. *)
                           , LScopeRef ^ . ScpSelfScopeNo
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *> 
                       END; 
                     
              | 627 => (* P186 Type (156): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 628,359 => (* P187 Type (156): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 1718 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*Block*)
                     
              | 629,416 => (* P188 Signature (228): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 228;
                (* line 1734 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*Block*) 
                     
              | 630,276 => (* P189 FormalsLt (242): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 1751 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END ;
                     
              | 631,291 => (* P190 Formals (239): FormalsLt FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 239;
                (* line 1766 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ Maybe different tokens for different formal modes? *)
                     
              | 632 => (* P191 FormalsList (243): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 243;
                (* line 1772 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Formals count. *) ; 
              | 633,401 => (* P192 FormalsList (243): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 243;
                (* line 1775 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Formals count. *) ; 
              | 634,402 => (* P193 FormalPlus (244): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 1778 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Formals count. *) ; 
              | 635,396 => (* P194 FormalPlus (244): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1781 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt (* Formals count. *);
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt (* Number of formals to left. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 636 => (* P195 FormalLt (246): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 246;
                (* line 1792 of "FM3Parser.lalr" *)
                 (* Default coord. *)
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVALUEFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 637,289 => (* P196 FormalLt (246): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 1808 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVALUEFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 638,290 => (* P197 FormalLt (246): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 1825 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVARFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 639,288 => (* P198 FormalLt (246): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 1841 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkROFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 640,397 => (* P199 FormalType (247): FormalLt VarDeclIds .*)
                DEC (yyStackPtr, 2); yyNonterminal := 247;
                (* line 1857 of "FM3Parser.lalr" *)
                 (* Default position and coord. *)
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                       FM3Pass1 . PutBwd_EP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , FM3Scanner . Attribute . Position
                         ) ;
                     
              | 641,398 => (* P200 FormalValue (248): FormalType OptDeclType .*)
                DEC (yyStackPtr, 2); yyNonterminal := 248;
                (* line 1869 of "FM3Parser.lalr" *)
                 (* Default position and coord. *)
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+2] . PaBool (* Type is present. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal AND NOT yyAttributeStack^[yyStackPtr+2] . PaBool 
                       THEN
                         FM3Messages . ErrorArr
                           ( ARRAY OF REFANY 
                               { "VAR formal must have a type (2.2.8)." } 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           ) ;
                       END (*IF*) ; 
                       FM3Pass1 . PutBwd_ZP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , FM3Scanner . Attribute . Position
                         ) ;
                     
              | 642,400 => (* P201 Formal (245): FormalValue OptDeclValue .*)
                DEC (yyStackPtr, 2); yyNonterminal := 245;
                (* line 1890 of "FM3Parser.lalr" *)
                 (* Default position. *) 
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool OR yyAttributeStack^[yyStackPtr+2] . PaBool (* Type or val is present. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                
                       IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                       THEN 
                         yySynAttribute . PaBool (* OK. *) := yyAttributeStack^[yyStackPtr+1] . PaBool AND NOT yyAttributeStack^[yyStackPtr+2] . PaBool ; 
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* value is present? *) 
                         THEN
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { "VAR formal cannot have a default (2.2.8)." }
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             ) ;
                         END (*IF*) ;
                       ELSE (* VALUE or READONLY *)
                         yySynAttribute . PaBool (* OK. *) := yyAttributeStack^[yyStackPtr+1] . PaBool OR yyAttributeStack^[yyStackPtr+2] . PaBool ; 
                         IF NOT yySynAttribute . PaBool (* Has type and/or value. *)
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { FM3Pass1 . VarLabel [ VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) ] 
                                 , " must have a type and/or a default "
                                 , FM3Pass1 . VarSection [ VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) ]
                                 , "." 
                                 } 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ; 
                         END (*IF*)
                       END (*IF*) ;  
                       IF yySynAttribute . PaBool    
                       THEN 
                         FM3Pass1 . PutBwd_LCP_rp 
                           ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       ELSE (* Skip the decl, excluding possibly multiple idents. *)
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                       <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *>
                     
              | 643,413 => (* P202 ResultType (240): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 240;
                (* line 1940 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 644 => (* P203 ResultType (240): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 240;
                (* line 1948 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 645 => (* P204 Raises (241): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 241;
                (* line 1958 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 646,295 => (* P205 Raises (241): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 241;
                (* line 1964 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 647,296 => (* P206 Raises (241): StkRwRAISES StkOpenBrace IdentOrQualRefStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 241;
                (* line 1971 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 648,309 => (* P207 OptProcBody (249): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 1979 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl : FM3Scopes . ScopeRefTyp ;
                       BEGIN 
                         yySynAttribute . PaTok1 := Itk . ItkProcDeclLt ;  
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY
                                 { "A procedure in a module must have a body (2.5)." } 
                             , yyAttributeStack^[yyStackPtr] . Scan . Position
                             ) ;
                         END (*IF*) ;  
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRefDecl ^ . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefDecl ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_TIP
                           ( Itk . ItkProcDeclRt , yyAttributeStack^[yyStackPtr] . Scan . SaAtom , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                       END (*Block*) 
                     
              | 649,310 => (* P208 ProcBodyLt (250): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2002 of "FM3Parser.lalr" *)
                 VAR LFormalsScopeRef : FM3Scopes . ScopeRefTyp ; 
                       VAR LBodyScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         (* Default Coord and Position. *) 
                         yySynAttribute . PaTok1 := Itk . ItkProcDefLt ; 
                         FM3Pass1 . PutBwd_TP
                           ( Itk . ItkProcDefBody , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         (* Make formals decl scope also open. *) 
                         LFormalsScopeRef := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ; 
                         FM3Pass1 . DeclScopeRtL2R ( LFormalsScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LFormalsScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Scopes . PushOpenScopeRef ( LFormalsScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LFormalsScopeRef ^ . ScpSelfScopeNo ) ;
                           
                         (* Create Body scope, for both decls and refs:*)
                         LBodyScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkProcBody  
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                                ) ;
                         LBodyScopeRef ^ . ScpFormalsScopeRef := LFormalsScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LBodyScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LBodyScopeRef ^ . ScpSelfScopeNo ) ; 
                         FM3Scopes . PushOpenScopeRef ( LBodyScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LBodyScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*) ; 
                     
              | 650,311 => (* P209 OptProcBody (249): ProcBodyLt ProcBlock NonreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 249;
                (* line 2037 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl : FM3Scopes . ScopeRefTyp ; 
                       VAR LScopeRefOpen : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         (* Default Coord and position. *) 
                         yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+1] . PaTok1 ;
                         (* Body Scope: *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                         <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkProcBody *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *>
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefDecl ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                           
                         (* Formals scope, open only: *)
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                         <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                
                         FM3Pass1 . PutBwd_TIP
                           ( Itk . ItkProcDefRt , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                             
                         IF NOT FM3Units . CurrentUnitIsModule ( )
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                               { "A procedure in an interface must not have a body (2.5.2)." }
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ;
                
                           FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) ; 
                         
                       END (*Block*) ;
                     
              | 651,229 => (* P210 ProcDeclLt (252): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2079 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         (* Default coord and position. *) 
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkProc , IdAttribute := yyAttributeStack^[yyStackPtr+2] ) ) ;
                       END (*Block*) 
                     
              | 652,428 => (* P211 ProcDecl (253): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 253;
                (* line 2090 of "FM3Parser.lalr" *)
                 (* Default coord and position. *)
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         FM3Pass1 . PutBwd_LCIP
                           ( yyAttributeStack^[yyStackPtr+3] . PaTok1
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                     
              | 653 => (* P212 BinOpOp (254): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 254;
                (* line 2109 of "FM3Parser.lalr" *)
                 
              | 654 => (* P213 Expr (167): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 2111 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 655 => (* P214 E0 (255): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2113 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 656,251 => (* P215 E0Lt (257): E0 StkRwOR .*)
                DEC (yyStackPtr, 2); yyNonterminal := 257;
                (* line 2116 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator , Stk . StkRwOR , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 657 => (* P216 E0 (255): E0Lt E1 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 255;
                (* line 2122 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 658,340 => (* P217 E1 (256): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2131 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 659,252 => (* P218 E1Lt (259): E1 StkRwAND .*)
                DEC (yyStackPtr, 2); yyNonterminal := 259;
                (* line 2134 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator , Stk . StkRwAND , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 660,341 => (* P219 E1 (256): E1Lt E2 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2140 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , Stk . StkRwAND
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 661 => (* P220 E2 (258): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2149 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 662 => (* P221 E2 (258): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 258;
                (* line 2152 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , Stk . StkRwNOT 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 663 => (* P222 E3 (260): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2161 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 664,342 => (* P223 E3Lt (263): E3 ExprRelOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 263;
                (* line 2164 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 665 => (* P224 E3 (260): E3Lt E4 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 260;
                (* line 2174 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 666 => (* P225 E4 (261): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2183 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 667,343 => (* P226 E4Lt (266): E4 ExprAddOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 266;
                (* line 2186 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 668 => (* P227 E4 (261): E4Lt E5 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 261;
                (* line 2196 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 669,345 => (* P228 E5 (264): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 264;
                (* line 2205 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 670,344 => (* P229 E5Lt (269): E5 ExprMulOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 269;
                (* line 2208 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 671,346 => (* P230 E5 (264): E5Lt E6 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 264;
                (* line 2218 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 672,347 => (* P231 E6 (267): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2227 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 673,348 => (* P232 E6 (267): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 267;
                (* line 2230 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 674,269 => (* P233 E7 (270): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2249 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 675,351 => (* P234 E7 (270): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2254 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 676,352 => (* P235 E7 (270): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2265 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ; 
                     
              | 677 => (* P236 E7 (270): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 270;
                (* line 2276 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 678 => (* P237 E7 (270): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 270;

              | 679,272 => (* P238 E7 (270): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2287 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be dereferenced" ) 
                       THEN (* OK *) 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*IF*) ; 
                     
              | 680,356 => (* P239 E7 (270): IdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2301 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be subscripted" ) 
                       THEN (* OK *)
                         FM3Pass1 . PutBwd_LCIP_eCip_rip
                           ( Itk . ItkSubscriptLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+2] . PaInt 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       END (*IF*) ; 
                     
              | 681,357 => (* P240 E7 (270): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2321 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckReservedActualsCt ( ActualsAttr := yyAttributeStack^[yyStackPtr+2] , TokAttr := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Actuals non problematic.  Handle it here *)
                         FM3Pass1 . PutBwd_LCIP_eCip_rip
                           ( Itk . ItkCallLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+2] . PaInt 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           ) ; 
                       END (*IF*) ; 
                     
              | 682 => (* P241 E7 (270): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 270;
                (* line 2334 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefLone ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 683,338 => (* P242 E7 (270): QualIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 270;

              | 684,268 => (* P243 Subscripts (273): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 273;
                (* line 2345 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 685,349 => (* P244 SsPlusList (275): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 275;
                (* line 2354 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 686,267 => (* P245 SsPlusListLt (276): SsPlusList StkComma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 276;
                (* line 2360 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkSubscriptsPlusListSep
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 687,350 => (* P246 SsPlusList (275): SsPlusListLt Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 275;
                (* line 2371 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 688,270 => (* P247 Actuals (274): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 274;
                (* line 2382 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                     
              | 689 => (* P248 ActualList (277): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 277;
                (* line 2392 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 690,354 => (* P249 ActualList (277): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 277;
                (* line 2398 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 691,271 => (* P250 ActualListLt (279): ActualList StkComma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 279;
                (* line 2404 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkActualsListSep
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 692,355 => (* P251 ActualList (277): ActualListLt Actual .*)
                DEC (yyStackPtr, 2); yyNonterminal := 277;
                (* line 2415 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 693,353 => (* P252 Actual (278): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2421 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 694,339 => (* P253 Actual (278): NonreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 278;
                (* line 2428 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 695 => (* P254 E8WOId (272): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 272;
                (* line 2445 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         )
                     
              | 696,240 => (* P255 E8WOId (272): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2456 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 697,241 => (* P256 E8WOId (272): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2463 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 698,242 => (* P257 E8WOId (272): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2470 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 699,243 => (* P258 E8WOId (272): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2480 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 700,244 => (* P259 E8WOId (272): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2490 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 701,245 => (* P260 E8WOId (272): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2497 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 702,246 => (* P261 E8WOId (272): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2504 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 703,249 => (* P262 E8WOId (272): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2512 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 704,250 => (* P263 E8WOId (272): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2519 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 705,247 => (* P264 E8WOId (272): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2526 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 706,248 => (* P265 E8WOId (272): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2528 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 707,273 => (* P266 E8WOId (272): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 272;

              | 708,254 => (* P267 ExprRelOp (262): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2532 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 709,255 => (* P268 ExprRelOp (262): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2533 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 710,256 => (* P269 ExprRelOp (262): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2534 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 711,257 => (* P270 ExprRelOp (262): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2535 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 712,258 => (* P271 ExprRelOp (262): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2536 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 713,259 => (* P272 ExprRelOp (262): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2537 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 714,253 => (* P273 ExprRelOp (262): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2538 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 715,260 => (* P274 ExprAddOp (265): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2541 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 716,261 => (* P275 ExprAddOp (265): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2542 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 717,262 => (* P276 ExprAddOp (265): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2543 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 718,265 => (* P277 ExprMulOp (268): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 268;
                (* line 2545 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 719,266 => (* P278 ExprMulOp (268): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 268;
                (* line 2546 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 720,263 => (* P279 ExprMulOp (268): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 268;
                (* line 2547 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 721,264 => (* P280 ExprMulOp (268): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 268;
                (* line 2548 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 722,237 => (* P281 ExprUnaryAddOp (271): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 271;
                (* line 2551 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 723,238 => (* P282 ExprUnaryAddOp (271): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 271;
                (* line 2552 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 724 => (* P283 AnonBlockLt (280): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 280;
                (* line 2557 of "FM3Parser.lalr" *)
                
                     
              | 725 => (* P284 AnonBlock (281): AnonBlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 281;
                (* line 2561 of "FM3Parser.lalr" *)
                
                     
              | 726 => (* P285 ProcBlockLt (282): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 282;
                (* line 2565 of "FM3Parser.lalr" *)
                
                     
              | 727,312 => (* P286 ProcBlock (251): ProcBlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 251;
                (* line 2569 of "FM3Parser.lalr" *)
                
                     
              | 728,419 => (* P287 BlockDecl (283): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2575 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 729,422 => (* P288 BlockDecl (283): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2579 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 730,436 => (* P289 BlockDecl (283): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2583 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 731,427 => (* P290 BlockDecl (283): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2587 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 732,434 => (* P291 BlockDecl (283): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2591 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 733,425 => (* P292 BlockDecl (283): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;
                (* line 2595 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 734 => (* P293 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2606 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 735 => (* P294 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2614 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *) 
                       MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 736,435 => (* P295 BlockDeclPlus (285): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 285;
                (* line 2625 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . PaPos2 ;
                     
              | 737 => (* P296 BlockDeclPlusSepLt (286): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 286;
                (* line 2632 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . PaPos2 ;
                       (* Default PaPass1Coord. *) 
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt > 0
                       THEN
                         FM3Pass1 . PutBwd_TIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListSep
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       END (*IF*) ; 
                     
              | 738,437 => (* P297 BlockDeclPlus (285): BlockDeclPlusSepLt BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 285;
                (* line 2647 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                     
              | 739 => (* P298 StmtList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 2659 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 740 => (* P299 StmtList (135): StmtPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;
                (* line 2667 of "FM3Parser.lalr" *)
                 (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                       MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 741,431 => (* P300 StmtPlus (287): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 287;
                (* line 2678 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                     
              | 742,430 => (* P301 StmtPlusSepLt (289): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 289;
                (* line 2684 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Count of stmts to left. *) ;
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                
                       FM3Pass1 . PutBwd_TIP (* Internal separator. *)
                         ( Itk . ItkStmtListSep 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 743,432 => (* P302 StmtPlus (287): StmtPlusSepLt Stmt .*)
                DEC (yyStackPtr, 2); yyNonterminal := 287;
                (* line 2697 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                     
              | 744,433 => (* P303 Stmt (288): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 288;

              | 745,429 => (* P304 AssignStmt (290): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 290;
                (* line 2708 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 111 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 114 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

