
(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024  Rodney M. Bates.                                    *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

(* This file was generated by FM3's GenTok metaprogram,
   from input file "FM3SrcToks.gentok", with command line 
     "./gentok -S -L -i -n FM3SrcToks.gentok". *)

INTERFACE FM3SrcToks

; TYPE TokTyp = INTEGER 

; PROCEDURE Image ( TokNo : TokTyp ) : TEXT 

; PROCEDURE Name ( TokNo : TokTyp ) : TEXT 

(* ABS 0: *)

; CONST StkEOF                                       =     0 (*16_00 *)
(* From lalr, Gen.m3, FindFirstToken:
               "EndOfToken wird immer mit 0 codiert"
            *)
(* Not used in FM3Scanner or FM3Parser: *)
(* Use as a Null Opcode. *)
; CONST StkUnknown                                   =     1 (*16_01 *)
; CONST StkBOF                                       =     2 (*16_02 *)
(* Leave a little space. *)
(* These source token codes' declarations have copies in FM3Parser.lalr,
      in lalr's own syntax, which these must remain consistent with.
   *)
(* Modula-3 Reserved words: *)
(* ABS 5: *)

; CONST StkRwAND                                     =     5 (*16_05 *)
; CONST StkRwANY                                     =     6 (*16_06 *)
; CONST StkRwARRAY                                   =     7 (*16_07 *)
; CONST StkRwAS                                      =     8 (*16_08 *)
; CONST StkRwBEGIN                                   =     9 (*16_09 *)
; CONST StkRwBITS                                    =    10 (*16_0a *)
; CONST StkRwBRANDED                                 =    11 (*16_0b *)
; CONST StkRwBY                                      =    12 (*16_0c *)
; CONST StkRwCASE                                    =    13 (*16_0d *)
; CONST StkRwCONST                                   =    14 (*16_0e *)
; CONST StkRwDIV                                     =    15 (*16_0f *)
; CONST StkRwDO                                      =    16 (*16_10 *)
; CONST StkRwELSE                                    =    17 (*16_11 *)
; CONST StkRwELSIF                                   =    18 (*16_12 *)
; CONST StkRwEND                                     =    19 (*16_13 *)
; CONST StkRwEVAL                                    =    20 (*16_14 *)
; CONST StkRwEXCEPT                                  =    21 (*16_15 *)
; CONST StkRwEXCEPTION                               =    22 (*16_16 *)
; CONST StkRwEXIT                                    =    23 (*16_17 *)
; CONST StkRwEXPORTS                                 =    24 (*16_18 *)
; CONST StkRwFINALLY                                 =    25 (*16_19 *)
; CONST StkRwFOR                                     =    26 (*16_1a *)
; CONST StkRwFROM                                    =    27 (*16_1b *)
; CONST StkRwGENERIC                                 =    28 (*16_1c *)
; CONST StkRwIF                                      =    29 (*16_1d *)
; CONST StkRwIMPORT                                  =    30 (*16_1e *)
; CONST StkRwIN                                      =    31 (*16_1f *)
; CONST StkRwINTERFACE                               =    32 (*16_20 *)
; CONST StkRwLOCK                                    =    33 (*16_21 *)
; CONST StkRwLOOP                                    =    34 (*16_22 *)
; CONST StkRwMETHODS                                 =    35 (*16_23 *)
; CONST StkRwMOD                                     =    36 (*16_24 *)
; CONST StkRwMODULE                                  =    37 (*16_25 *)
; CONST StkRwNOT                                     =    38 (*16_26 *)
; CONST StkRwOBJECT                                  =    39 (*16_27 *)
; CONST StkRwOF                                      =    40 (*16_28 *)
; CONST StkRwOR                                      =    41 (*16_29 *)
; CONST StkRwOVERRIDES                               =    42 (*16_2a *)
; CONST StkRwPROCEDURE                               =    43 (*16_2b *)
; CONST StkRwRAISE                                   =    44 (*16_2c *)
; CONST StkRwRAISES                                  =    45 (*16_2d *)
; CONST StkRwREADONLY                                =    46 (*16_2e *)
; CONST StkRwRECORD                                  =    47 (*16_2f *)
; CONST StkRwREF                                     =    48 (*16_30 *)
; CONST StkRwREPEAT                                  =    49 (*16_31 *)
; CONST StkRwRETURN                                  =    50 (*16_32 *)
; CONST StkRwREVEAL                                  =    51 (*16_33 *)
; CONST StkRwROOT                                    =    52 (*16_34 *)
; CONST StkRwSET                                     =    53 (*16_35 *)
; CONST StkRwTHEN                                    =    54 (*16_36 *)
; CONST StkRwTO                                      =    55 (*16_37 *)
; CONST StkRwTRY                                     =    56 (*16_38 *)
; CONST StkRwTYPE                                    =    57 (*16_39 *)
; CONST StkRwTYPECASE                                =    58 (*16_3a *)
; CONST StkRwUNSAFE                                  =    59 (*16_3b *)
; CONST StkRwUNTIL                                   =    60 (*16_3c *)
; CONST StkRwUNTRACED                                =    61 (*16_3d *)
; CONST StkRwVALUE                                   =    62 (*16_3e *)
; CONST StkRwVAR                                     =    63 (*16_3f *)
; CONST StkRwWHILE                                   =    64 (*16_c0 00 *)
; CONST StkRwWITH                                    =    65 (*16_c1 00 *)
(* Special character tokens: *)
; CONST StkSemicolon                                 =    66 (*16_c2 00 *)
; CONST StkDot                                       =    67 (*16_c3 00 *)
; CONST StkEqual                                     =    68 (*16_c4 00 *)
; CONST StkOpenParen                                 =    69 (*16_c5 00 *)
; CONST StkCloseParen                                =    70 (*16_c6 00 *)
; CONST StkComma                                     =    71 (*16_c7 00 *)
; CONST StkColon                                     =    72 (*16_c8 00 *)
; CONST StkSubtype                                   =    73 (*16_c9 00 *)
; CONST StkBecomes                                   =    74 (*16_ca 00 *)
; CONST StkOpenBrace                                 =    75 (*16_cb 00 *)
; CONST StkCloseBrace                                =    76 (*16_cc 00 *)
; CONST StkStroke                                    =    77 (*16_cd 00 *)
; CONST StkArrow                                     =    78 (*16_ce 00 *)
; CONST StkEllipsis                                  =    79 (*16_cf 00 *)
; CONST StkOpenBracket                               =    80 (*16_d0 00 *)
; CONST StkCloseBracket                              =    81 (*16_d1 00 *)
; CONST StkUnequal                                   =    82 (*16_d2 00 *)
; CONST StkLess                                      =    83 (*16_d3 00 *)
; CONST StkGreater                                   =    84 (*16_d4 00 *)
; CONST StkLessEqual                                 =    85 (*16_d5 00 *)
; CONST StkGreaterEqual                              =    86 (*16_d6 00 *)
; CONST StkPlus                                      =    87 (*16_d7 00 *)
; CONST StkMinus                                     =    88 (*16_d8 00 *)
; CONST StkAmpersand                                 =    89 (*16_d9 00 *)
; CONST StkStar                                      =    90 (*16_da 00 *)
; CONST StkSlash                                     =    91 (*16_db 00 *)
; CONST StkDeref                                     =    92 (*16_dc 00 *)
; CONST StkOpenPragma                                =    93 (*16_dd 00 *)
; CONST StkClosePragma                               =    94 (*16_de 00 *)
(* Variable tokens: *)
; CONST StkIdent                                     =    95 (*16_df 00 *)
; CONST StkIntLit                                    =    96 (*16_e0 00 *)
; CONST StkLongIntLit                                =    97 (*16_e1 00 *)
; CONST StkBasedLit                                  =    98 (*16_e2 00 *)
; CONST StkLongBasedLit                              =    99 (*16_e3 00 *)
; CONST StkRealLit                                   =   100 (*16_e4 00 *)
; CONST StkLongRealLit                               =   101 (*16_e5 00 *)
; CONST StkExtendedLit                               =   102 (*16_e6 00 *)
; CONST StkTextLit                                   =   103 (*16_e7 00 *)
; CONST StkWideTextLit                               =   104 (*16_e8 00 *)
; CONST StkCharLit                                   =   105 (*16_e9 00 *)
; CONST StkWideCharLit                               =   106 (*16_ea 00 *)
; CONST StkLexErrChars                               =   107 (*16_eb 00 *)
; CONST StkPragmaId                                  =   108 (*16_ec 00 *)
(* Not a known pragma ident, but found where one is expected. *)
(* The scanner will recognize standard ids declared in interfaces that
      have special treatment by the compiler and reserved ids, all using the
      same lex machine as reserved words. 
   *)
(* The parser will convert '+' and '-' into StkUnary* when they really are
      unary.  They will be used later as operation codes.  The scanner will
      not recognize them.
   *)
; CONST StkUnaryPlus                                 =   109 (*16_ed 00 *)
; CONST StkUnaryMinus                                =   110 (*16_ee 00 *)
(* Reserved identifiers: *)
; CONST StkMinRid                                    =   111 (*16_ef 00 *)
; CONST RidNull                                      =   111 (*16_ef 00 *)
(* ^Scanner will never present this, but parsing may convert to it in a
       context where a reserved ident is illegal. *)
; CONST RidABS                                       =   112 (*16_f0 00 *)
; CONST RidADDRESS                                   =   113 (*16_f1 00 *)
; CONST RidADR                                       =   114 (*16_f2 00 *)
; CONST RidADRSIZE                                   =   115 (*16_f3 00 *)
; CONST RidBITSIZE                                   =   116 (*16_f4 00 *)
; CONST RidBOOLEAN                                   =   117 (*16_f5 00 *)
; CONST RidBYTESIZE                                  =   118 (*16_f6 00 *)
; CONST RidCARDINAL                                  =   119 (*16_f7 00 *)
; CONST RidCEILING                                   =   120 (*16_f8 00 *)
; CONST RidCHAR                                      =   121 (*16_f9 00 *)
; CONST RidDEC                                       =   122 (*16_fa 00 *)
; CONST RidDISPOSE                                   =   123 (*16_fb 00 *)
; CONST RidEXTENDED                                  =   124 (*16_fc 00 *)
; CONST RidFALSE                                     =   125 (*16_fd 00 *)
; CONST RidFIRST                                     =   126 (*16_fe 00 *)
; CONST RidFLOAT                                     =   127 (*16_ff 00 *)
; CONST RidFLOOR                                     =   128 (*16_80 01 *)
; CONST RidINC                                       =   129 (*16_81 01 *)
; CONST RidINTEGER                                   =   130 (*16_82 01 *)
; CONST RidISTYPE                                    =   131 (*16_83 01 *)
; CONST RidLAST                                      =   132 (*16_84 01 *)
; CONST RidLONGCARD                                  =   133 (*16_85 01 *)
; CONST RidLONGINT                                   =   134 (*16_86 01 *)
; CONST RidLONGREAL                                  =   135 (*16_87 01 *)
; CONST StkStkPd                                     =   136 (*16_88 01 *)
; CONST RidLOOPHOLE                                  =   137 (*16_89 01 *)
; CONST RidMAX                                       =   138 (*16_8a 01 *)
; CONST RidMIN                                       =   139 (*16_8b 01 *)
; CONST RidMUTEX                                     =   140 (*16_8c 01 *)
; CONST RidNARROW                                    =   141 (*16_8d 01 *)
; CONST RidNEW                                       =   142 (*16_8e 01 *)
; CONST RidNIL                                       =   143 (*16_8f 01 *)
; CONST RidNULL                                      =   144 (*16_90 01 *)
; CONST RidNUMBER                                    =   145 (*16_91 01 *)
; CONST RidORD                                       =   146 (*16_92 01 *)
; CONST RidREAL                                      =   147 (*16_93 01 *)
; CONST RidREFANY                                    =   148 (*16_94 01 *)
; CONST RidROUND                                     =   149 (*16_95 01 *)
; CONST RidSUBARRAY                                  =   150 (*16_96 01 *)
; CONST RidTEXT                                      =   151 (*16_97 01 *)
; CONST RidTRUE                                      =   152 (*16_98 01 *)
; CONST RidTRUNC                                     =   153 (*16_99 01 *)
; CONST RidTYPECODE                                  =   154 (*16_9a 01 *)
; CONST RidVAL                                       =   155 (*16_9b 01 *)
; CONST RidWIDECHAR                                  =   156 (*16_9c 01 *)
(* ROOT and UNTRACED behave semantically like reserved identifiers, but
      each occurs in a different set of syntactic contexts from identifiers,
      so they are source-code reserved words.  We convert those after parsing
      into reserved idents with the following Rid atoms.  FM3Scanner
      will not recognize them.
   *)
; CONST RidROOT                                      =   157 (*16_9d 01 *)
; CONST StkMaxRid                                    =   158 (*16_9e 01 *)
; CONST RidUNTRACEDROOT                              =   158 (*16_9e 01 *)
(* Standard identifiers.  Scanner will treat these as ordinary
      identifiers, except it adds their codes as a separate field.
      Later semantic processsing will decide whether the standard
      meaning should  be used. 
   *)
; CONST StkMinStd                                    =   159 (*16_9f 01 *)
(* Standard interface names.  These values are used as unique unit numbers.
   Keep them low in the unit number space. *)
(* Standard interface names: *)
; CONST StkPdMain                                    =   159 (*16_9f 01 *)
; CONST StkPdText                                    =   160 (*16_a0 01 *)
; CONST StkThread                                    =   161 (*16_a1 01 *)
; CONST StkPdWord                                    =   162 (*16_a2 01 *)
; CONST StkPdLong                                    =   163 (*16_a3 01 *)
(* For LONGINT. *)
; CONST StkPdReal                                    =   164 (*16_a4 01 *)
; CONST StkPdLongReal                                =   165 (*16_a5 01 *)
; CONST StkPdExtended                                =   166 (*16_a6 01 *)
; CONST StkPdRealFloat                               =   167 (*16_a7 01 *)
; CONST StkPdLongRealFloat                           =   168 (*16_a8 01 *)
; CONST StkPdExtendedFloat                           =   169 (*16_a9 01 *)
; CONST StkPdFloatMode                               =   170 (*16_aa 01 *)
; CONST StkPdLex                                     =   171 (*16_ab 01 *)
; CONST StkMaxStdIntf                                =   172 (*16_ac 01 *)
; CONST StkPdFmt                                     =   172 (*16_ac 01 *)
(* In many standard interfaces: *)
(* In Word and Long: *)
; CONST StkPdT                                       =   173 (*16_ad 01 *)
; CONST StkMinWordLong                               =   174 (*16_ae 01 *)
; CONST StkPdSize                                    =   174 (*16_ae 01 *)
; CONST StkPdPlus                                    =   175 (*16_af 01 *)
; CONST StkPdTimes                                   =   176 (*16_b0 01 *)
; CONST StkPdMinus                                   =   177 (*16_b1 01 *)
; CONST StkPdDivide                                  =   178 (*16_b2 01 *)
; CONST StkPdMod                                     =   179 (*16_b3 01 *)
; CONST StkPdLT                                      =   180 (*16_b4 01 *)
; CONST StkPdLE                                      =   181 (*16_b5 01 *)
; CONST StkPdGT                                      =   182 (*16_b6 01 *)
; CONST StkPdGE                                      =   183 (*16_b7 01 *)
(* Bitwise *)
; CONST StkPdAnd                                     =   184 (*16_b8 01 *)
(* Bitwise *)
; CONST StkPdOr                                      =   185 (*16_b9 01 *)
(* Bitwise *)
; CONST StkPdXor                                     =   186 (*16_ba 01 *)
(* Bitwise *)
; CONST StkPdNot                                     =   187 (*16_bb 01 *)
; CONST StkPdShift                                   =   188 (*16_bc 01 *)
; CONST StkPdLeftShift                               =   189 (*16_bd 01 *)
; CONST StkPdRightShift                              =   190 (*16_be 01 *)
; CONST StkPdRotate                                  =   191 (*16_bf 01 *)
; CONST StkPdLeftRotate                              =   192 (*16_c0 01 *)
; CONST StkPdRightRotate                             =   193 (*16_c1 01 *)
; CONST StkPdExtract                                 =   194 (*16_c2 01 *)
; CONST StkMaxWordLong                               =   195 (*16_c3 01 *)
; CONST StkPdInsert                                  =   195 (*16_c3 01 *)
(* Translated to unique builtin decl codes in Long: *)
(* These must remain in the same order as their Word counterparts.
   See FM3Pass2 . FixDeclTok.
*)
; CONST StkMinLong                                   =   196 (*16_c4 01 *)
; CONST StkPd_Long_Size                              =   196 (*16_c4 01 *)
; CONST StkPd_Long_Plus                              =   197 (*16_c5 01 *)
; CONST StkPd_Long_Times                             =   198 (*16_c6 01 *)
; CONST StkPd_Long_Minus                             =   199 (*16_c7 01 *)
; CONST StkPd_Long_Divide                            =   200 (*16_c8 01 *)
; CONST StkPd_Long_Mod                               =   201 (*16_c9 01 *)
; CONST StkPd_Long_LT                                =   202 (*16_ca 01 *)
; CONST StkPd_Long_LE                                =   203 (*16_cb 01 *)
; CONST StkPd_Long_GT                                =   204 (*16_cc 01 *)
; CONST StkPd_Long_GE                                =   205 (*16_cd 01 *)
(* Bitwise *)
; CONST StkPd_Long_And                               =   206 (*16_ce 01 *)
(* Bitwise *)
; CONST StkPd_Long_Or                                =   207 (*16_cf 01 *)
(* Bitwise *)
; CONST StkPd_Long_Xor                               =   208 (*16_d0 01 *)
(* Bitwise *)
; CONST StkPd_Long_Not                               =   209 (*16_d1 01 *)
; CONST StkPd_Long_Shift                             =   210 (*16_d2 01 *)
; CONST StkPd_Long_LeftShift                         =   211 (*16_d3 01 *)
; CONST StkPd_Long_RightShift                        =   212 (*16_d4 01 *)
; CONST StkPd_Long_Rotate                            =   213 (*16_d5 01 *)
; CONST StkPd_Long_LeftRotate                        =   214 (*16_d6 01 *)
; CONST StkPd_Long_RightRotate                       =   215 (*16_d7 01 *)
; CONST StkPd_Long_Extract                           =   216 (*16_d8 01 *)
; CONST StkMaxLong                                   =   217 (*16_d9 01 *)
; CONST StkMaxStd                                    =   217 (*16_d9 01 *)
; CONST StkPd_Long_Insert                            =   217 (*16_d9 01 *)
(* COMPLETEME: Idents declared in other standard interfaces. *)
(* End of FM3SrcToks.gentok. *)
; CONST TkMinTok                                     =     0

; CONST TkMaxTok                                     =   217

; END FM3SrcToks
.

