
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* Global insertions from the .lalr file: *)
(* line 30 "FM3Parser.lalr" *)
 IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3ParsePass;
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCP_rp , Push_LCP_eCP_rP ,
      Push_LCPeCprp , Push_LIP , Push_LIP_rip , Push_EIP , Push_ECIP , 
      Push_ECIP_riP , Push_LCBr , Push_LCIri , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Push_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeList , MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  
(* End of global insertions from the .lalr file: *) 

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* Lalr-generated constants: *) 
   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 190;
   yyTableMax               = 340;
   yyNTableMax              = 335;
   yyFirstReadState         = 1;
   yyLastReadState          = 131;
   yyFirstReadTermState             = 132;
   yyLastReadTermState              = 170;
   yyLastReadNontermState           = 218;
   yyFirstReduceState               = 219;
   yyLastReduceState                = 347;
   yyStartState             = 1;
   yyStopState              = 219;
(* End of lalr-generated constants: *) 

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, uses in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   0]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   0]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   1]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [  11]) , (*  21*) ADR (yyTComb [  10])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   2]) , (*  25*) ADR (yyTComb [  17])
         , (*  26*) ADR (yyTComb [   2]) , (*  27*) ADR (yyTComb [   5])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [  20])
         , (*  30*) ADR (yyTComb [   0]) , (*  31*) ADR (yyTComb [   3])
         , (*  32*) ADR (yyTComb [   9]) , (*  33*) ADR (yyTComb [   4])
         , (*  34*) ADR (yyTComb [  66]) , (*  35*) ADR (yyTComb [  12])
         , (*  36*) ADR (yyTComb [  22]) , (*  37*) ADR (yyTComb [  28])
         , (*  38*) ADR (yyTComb [   6]) , (*  39*) ADR (yyTComb [  42])
         , (*  40*) ADR (yyTComb [  23]) , (*  41*) ADR (yyTComb [   7])
         , (*  42*) ADR (yyTComb [  57]) , (*  43*) ADR (yyTComb [  44])
         , (*  44*) ADR (yyTComb [  22]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [  51]) , (*  47*) ADR (yyTComb [  61])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [  71])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [  37])
         , (*  52*) ADR (yyTComb [  40]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [  50]) , (*  55*) ADR (yyTComb [ 129])
         , (*  56*) ADR (yyTComb [  29]) , (*  57*) ADR (yyTComb [  57])
         , (*  58*) ADR (yyTComb [  62]) , (*  59*) ADR (yyTComb [ 130])
         , (*  60*) ADR (yyTComb [   0]) , (*  61*) ADR (yyTComb [  34])
         , (*  62*) ADR (yyTComb [  76]) , (*  63*) ADR (yyTComb [ 137])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [   6])
         , (*  66*) ADR (yyTComb [  73]) , (*  67*) ADR (yyTComb [  53])
         , (*  68*) ADR (yyTComb [   7]) , (*  69*) ADR (yyTComb [ 131])
         , (*  70*) ADR (yyTComb [   8]) , (*  71*) ADR (yyTComb [  58])
         , (*  72*) ADR (yyTComb [ 145]) , (*  73*) ADR (yyTComb [  87])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [  90])
         , (*  76*) ADR (yyTComb [  91]) , (*  77*) ADR (yyTComb [  92])
         , (*  78*) ADR (yyTComb [  94]) , (*  79*) ADR (yyTComb [   0])
         , (*  80*) ADR (yyTComb [ 176]) , (*  81*) ADR (yyTComb [ 195])
         , (*  82*) ADR (yyTComb [   0]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [  67]) , (*  85*) ADR (yyTComb [  68])
         , (*  86*) ADR (yyTComb [  99]) , (*  87*) ADR (yyTComb [  71])
         , (*  88*) ADR (yyTComb [ 103]) , (*  89*) ADR (yyTComb [  72])
         , (*  90*) ADR (yyTComb [   0]) , (*  91*) ADR (yyTComb [  99])
         , (*  92*) ADR (yyTComb [ 102]) , (*  93*) ADR (yyTComb [ 109])
         , (*  94*) ADR (yyTComb [   0]) , (*  95*) ADR (yyTComb [   0])
         , (*  96*) ADR (yyTComb [  81]) , (*  97*) ADR (yyTComb [ 110])
         , (*  98*) ADR (yyTComb [   0]) , (*  99*) ADR (yyTComb [   3])
         , (* 100*) ADR (yyTComb [   0]) , (* 101*) ADR (yyTComb [ 113])
         , (* 102*) ADR (yyTComb [ 112]) , (* 103*) ADR (yyTComb [ 191])
         , (* 104*) ADR (yyTComb [ 193]) , (* 105*) ADR (yyTComb [  12])
         , (* 106*) ADR (yyTComb [  87]) , (* 107*) ADR (yyTComb [ 116])
         , (* 108*) ADR (yyTComb [ 116]) , (* 109*) ADR (yyTComb [  96])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 128])
         , (* 112*) ADR (yyTComb [ 145]) , (* 113*) ADR (yyTComb [  15])
         , (* 114*) ADR (yyTComb [ 101]) , (* 115*) ADR (yyTComb [ 134])
         , (* 116*) ADR (yyTComb [ 116]) , (* 117*) ADR (yyTComb [ 189])
         , (* 118*) ADR (yyTComb [ 122]) , (* 119*) ADR (yyTComb [ 158])
         , (* 120*) ADR (yyTComb [ 162]) , (* 121*) ADR (yyTComb [ 154])
         , (* 122*) ADR (yyTComb [ 232]) , (* 123*) ADR (yyTComb [ 223])
         , (* 124*) ADR (yyTComb [ 128]) , (* 125*) ADR (yyTComb [ 160])
         , (* 126*) ADR (yyTComb [ 163]) , (* 127*) ADR (yyTComb [ 140])
         , (* 128*) ADR (yyTComb [ 171]) , (* 129*) ADR (yyTComb [  22])
         , (* 130*) ADR (yyTComb [ 147]) , (* 131*) ADR (yyTComb [ 176])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 109])
         , (*   8*) ADR (yyNComb [ 109]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 109])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 109])
         , (*  16*) ADR (yyNComb [ 109]) , (*  17*) ADR (yyNComb [ 109])
         , (*  18*) ADR (yyNComb [ 114]) , (*  19*) ADR (yyNComb [ 110])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 110])
         , (*  22*) ADR (yyNComb [ 116]) , (*  23*) ADR (yyNComb [ 118])
         , (*  24*) ADR (yyNComb [ 109]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 109]) , (*  27*) ADR (yyNComb [ 109])
         , (*  28*) ADR (yyNComb [ 120]) , (*  29*) ADR (yyNComb [ 109])
         , (*  30*) ADR (yyNComb [ 121]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 124])
         , (*  34*) ADR (yyNComb [ 117]) , (*  35*) ADR (yyNComb [ 109])
         , (*  36*) ADR (yyNComb [ 109]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 117]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 109]) , (*  41*) ADR (yyNComb [ 109])
         , (*  42*) ADR (yyNComb [ 117]) , (*  43*) ADR (yyNComb [ 111])
         , (*  44*) ADR (yyNComb [ 121]) , (*  45*) ADR (yyNComb [ 122])
         , (*  46*) ADR (yyNComb [ 109]) , (*  47*) ADR (yyNComb [ 120])
         , (*  48*) ADR (yyNComb [ 166]) , (*  49*) ADR (yyNComb [ 122])
         , (*  50*) ADR (yyNComb [ 168]) , (*  51*) ADR (yyNComb [ 109])
         , (*  52*) ADR (yyNComb [ 109]) , (*  53*) ADR (yyNComb [ 169])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 124])
         , (*  56*) ADR (yyNComb [ 109]) , (*  57*) ADR (yyNComb [ 135])
         , (*  58*) ADR (yyNComb [ 126]) , (*  59*) ADR (yyNComb [ 125])
         , (*  60*) ADR (yyNComb [ 130]) , (*  61*) ADR (yyNComb [ 109])
         , (*  62*) ADR (yyNComb [ 109]) , (*  63*) ADR (yyNComb [ 125])
         , (*  64*) ADR (yyNComb [ 109]) , (*  65*) ADR (yyNComb [ 175])
         , (*  66*) ADR (yyNComb [ 109]) , (*  67*) ADR (yyNComb [ 177])
         , (*  68*) ADR (yyNComb [ 109]) , (*  69*) ADR (yyNComb [ 179])
         , (*  70*) ADR (yyNComb [ 180]) , (*  71*) ADR (yyNComb [ 169])
         , (*  72*) ADR (yyNComb [ 171]) , (*  73*) ADR (yyNComb [ 109])
         , (*  74*) ADR (yyNComb [ 181]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 190]) , (*  77*) ADR (yyNComb [ 109])
         , (*  78*) ADR (yyNComb [ 109]) , (*  79*) ADR (yyNComb [ 193])
         , (*  80*) ADR (yyNComb [ 181]) , (*  81*) ADR (yyNComb [ 185])
         , (*  82*) ADR (yyNComb [ 189]) , (*  83*) ADR (yyNComb [ 109])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 191])
         , (*  86*) ADR (yyNComb [ 109]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 109]) , (*  89*) ADR (yyNComb [ 203])
         , (*  90*) ADR (yyNComb [ 110]) , (*  91*) ADR (yyNComb [ 109])
         , (*  92*) ADR (yyNComb [ 110]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 215]) , (*  95*) ADR (yyNComb [ 209])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 109])
         , (*  98*) ADR (yyNComb [ 109]) , (*  99*) ADR (yyNComb [ 109])
         , (* 100*) ADR (yyNComb [ 111]) , (* 101*) ADR (yyNComb [ 109])
         , (* 102*) ADR (yyNComb [ 109]) , (* 103*) ADR (yyNComb [ 217])
         , (* 104*) ADR (yyNComb [ 211]) , (* 105*) ADR (yyNComb [ 109])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 109])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 109])
         , (* 110*) ADR (yyNComb [ 110]) , (* 111*) ADR (yyNComb [ 203])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 109])
         , (* 114*) ADR (yyNComb [ 109]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 254]) , (* 117*) ADR (yyNComb [ 228])
         , (* 118*) ADR (yyNComb [ 205]) , (* 119*) ADR (yyNComb [ 109])
         , (* 120*) ADR (yyNComb [ 109]) , (* 121*) ADR (yyNComb [ 109])
         , (* 122*) ADR (yyNComb [ 218]) , (* 123*) ADR (yyNComb [ 214])
         , (* 124*) ADR (yyNComb [ 109]) , (* 125*) ADR (yyNComb [ 109])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 109])
         , (* 128*) ADR (yyNComb [ 216]) , (* 129*) ADR (yyNComb [ 109])
         , (* 130*) ADR (yyNComb [ 109]) , (* 131*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  116
         , (*   4*)    0 , (*   5*)   92 , (*   6*)  111 , (*   7*)  112
         , (*   8*)   89 , (*   9*)    0 , (*  10*)  103 , (*  11*)  104
         , (*  12*)    0 , (*  13*)    0 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)   74 , (*  19*)   57
         , (*  20*)    0 , (*  21*)    0 , (*  22*)   74 , (*  23*)   74
         , (*  24*)  118 , (*  25*)    0 , (*  26*)    0 , (*  27*)    0
         , (*  28*)   74 , (*  29*)    0 , (*  30*)   67 , (*  31*)    0
         , (*  32*)   69 , (*  33*)  118 , (*  34*)    0 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)    0 , (*  41*)    0 , (*  42*)    0 , (*  43*)    0
         , (*  44*)   42 , (*  45*)  118 , (*  46*)    0 , (*  47*)    0
         , (*  48*)   74 , (*  49*)    0 , (*  50*)   67 , (*  51*)    0
         , (*  52*)    0 , (*  53*)   67 , (*  54*)    0 , (*  55*)   16
         , (*  56*)    0 , (*  57*)    0 , (*  58*)    0 , (*  59*)    0
         , (*  60*)  123 , (*  61*)    0 , (*  62*)    0 , (*  63*)    0
         , (*  64*)    0 , (*  65*)   67 , (*  66*)    0 , (*  67*)   89
         , (*  68*)    0 , (*  69*)    0 , (*  70*)   67 , (*  71*)    0
         , (*  72*)   71 , (*  73*)    0 , (*  74*)   89 , (*  75*)    0
         , (*  76*)  118 , (*  77*)    0 , (*  78*)    0 , (*  79*)  118
         , (*  80*)    0 , (*  81*)    0 , (*  82*)   89 , (*  83*)    0
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)    0 , (*  89*)    0 , (*  90*)  116 , (*  91*)    0
         , (*  92*)    0 , (*  93*)    0 , (*  94*)  122 , (*  95*)  123
         , (*  96*)    0 , (*  97*)    0 , (*  98*)    0 , (*  99*)    0
         , (* 100*)  116 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)  128 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    0 , (* 126*)    0 , (* 127*)    0
         , (* 128*)    0 , (* 129*)    0 , (* 130*)    0 , (* 131*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {  98,  219} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  64,   65}
         , (*  10*) yyTCombType {  15,  335} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {  15,   16}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {  35,  142} , (*  19*) yyTCombType {  12,   13}
         , (*  20*) yyTCombType {  15,  335} , (*  21*) yyTCombType {  24,  299}
         , (*  22*) yyTCombType {  31,  141} , (*  23*) yyTCombType {  33,  245}
         , (*  24*) yyTCombType {  27,  294} , (*  25*) yyTCombType {  65,  345}
         , (*  26*) yyTCombType {  68,  152} , (*  27*) yyTCombType {  70,  245}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType {  21,  323}
         , (*  30*) yyTCombType {  83,   84} , (*  31*) yyTCombType { 105,  106}
         , (*  32*) yyTCombType {   1,  243} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType { 113,  114} , (*  35*) yyTCombType {  99,  100}
         , (*  36*) yyTCombType {  25,  292} , (*  37*) yyTCombType {   1,  243}
         , (*  38*) yyTCombType {   2,   90} , (*  39*) yyTCombType {  29,  296}
         , (*  40*) yyTCombType {  99,  116} , (*  41*) yyTCombType { 129,  130}
         , (*  42*) yyTCombType {   0,    0} , (*  43*) yyTCombType {  74,   19}
         , (*  44*) yyTCombType {  15,   56} , (*  45*) yyTCombType {   0,    0}
         , (*  46*) yyTCombType {   0,    0} , (*  47*) yyTCombType {  74,  137}
         , (*  48*) yyTCombType {  74,   23} , (*  49*) yyTCombType {   0,    0}
         , (*  50*) yyTCombType {   0,    0} , (*  51*) yyTCombType {   0,    0}
         , (*  52*) yyTCombType {   0,    0} , (*  53*) yyTCombType {   0,    0}
         , (*  54*) yyTCombType {   0,    0} , (*  55*) yyTCombType {  21,  323}
         , (*  56*) yyTCombType {   0,    0} , (*  57*) yyTCombType {  20,  309}
         , (*  58*) yyTCombType {  15,   71} , (*  59*) yyTCombType {   1,  164}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {  15,  155} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  14,  135}
         , (*  68*) yyTCombType {  17,  283} , (*  69*) yyTCombType {   4,  232}
         , (*  70*) yyTCombType {   7,  133} , (*  71*) yyTCombType {  27,  294}
         , (*  72*) yyTCombType {  17,   18} , (*  73*) yyTCombType {  20,  309}
         , (*  74*) yyTCombType {  20,  309} , (*  75*) yyTCombType {  32,   33}
         , (*  76*) yyTCombType {  21,  323} , (*  77*) yyTCombType {  27,   28}
         , (*  78*) yyTCombType {  21,  323} , (*  79*) yyTCombType {  27,  294}
         , (*  80*) yyTCombType {  21,  323} , (*  81*) yyTCombType {  20,  136}
         , (*  82*) yyTCombType {  21,   22} , (*  83*) yyTCombType {  25,  292}
         , (*  84*) yyTCombType {  21,  323} , (*  85*) yyTCombType {  34,  326}
         , (*  86*) yyTCombType {  29,  296} , (*  87*) yyTCombType {  35,   36}
         , (*  88*) yyTCombType {  25,   26} , (*  89*) yyTCombType {  25,  292}
         , (*  90*) yyTCombType {  40,   41} , (*  91*) yyTCombType {  25,  292}
         , (*  92*) yyTCombType {  44,  245} , (*  93*) yyTCombType {  36,  255}
         , (*  94*) yyTCombType {  29,   30} , (*  95*) yyTCombType {  13,   14}
         , (*  96*) yyTCombType {  16,   17} , (*  97*) yyTCombType {  26,  139}
         , (*  98*) yyTCombType {  36,  255} , (*  99*) yyTCombType {  37,   38}
         , (* 100*) yyTCombType {  27,  294} , (* 101*) yyTCombType {  38,   39}
         , (* 102*) yyTCombType {  41,  143} , (* 103*) yyTCombType {  42,  145}
         , (* 104*) yyTCombType {  37,  144} , (* 105*) yyTCombType {  21,  323}
         , (* 106*) yyTCombType {  20,  309} , (* 107*) yyTCombType {  51,  148}
         , (* 108*) yyTCombType {  52,   53} , (* 109*) yyTCombType {  39,  247}
         , (* 110*) yyTCombType {  43,   44} , (* 111*) yyTCombType {  34,   35}
         , (* 112*) yyTCombType {  25,  292} , (* 113*) yyTCombType {  39,  256}
         , (* 114*) yyTCombType {  43,  246} , (* 115*) yyTCombType {  29,  296}
         , (* 116*) yyTCombType {  54,  149} , (* 117*) yyTCombType {  46,  317}
         , (* 118*) yyTCombType {  39,  256} , (* 119*) yyTCombType {  42,  146}
         , (* 120*) yyTCombType {  42,  147} , (* 121*) yyTCombType {  46,  317}
         , (* 122*) yyTCombType {  46,   26} , (* 123*) yyTCombType {  46,  317}
         , (* 124*) yyTCombType {  56,   57} , (* 125*) yyTCombType {  46,  317}
         , (* 126*) yyTCombType {  57,   20} , (* 127*) yyTCombType {  47,  319}
         , (* 128*) yyTCombType {  58,  150} , (* 129*) yyTCombType {  61,   62}
         , (* 130*) yyTCombType {  58,   59} , (* 131*) yyTCombType {  47,  319}
         , (* 132*) yyTCombType {  34,  326} , (* 133*) yyTCombType {  47,   48}
         , (* 134*) yyTCombType {  34,  326} , (* 135*) yyTCombType {  47,  319}
         , (* 136*) yyTCombType {  34,  326} , (* 137*) yyTCombType {  49,  321}
         , (* 138*) yyTCombType {  55,  278} , (* 139*) yyTCombType {  59,  330}
         , (* 140*) yyTCombType {  34,  326} , (* 141*) yyTCombType {  49,  321}
         , (* 142*) yyTCombType {  62,  151} , (* 143*) yyTCombType {  55,  278}
         , (* 144*) yyTCombType {  59,  330} , (* 145*) yyTCombType {  49,   50}
         , (* 146*) yyTCombType {  63,  337} , (* 147*) yyTCombType {  66,   67}
         , (* 148*) yyTCombType {  55,  278} , (* 149*) yyTCombType {  67,  140}
         , (* 150*) yyTCombType {  69,  246} , (* 151*) yyTCombType {  63,  337}
         , (* 152*) yyTCombType {  42,  312} , (* 153*) yyTCombType {  71,  153}
         , (* 154*) yyTCombType {  72,  273} , (* 155*) yyTCombType {  73,   74}
         , (* 156*) yyTCombType {  75,  154} , (* 157*) yyTCombType {  76,  286}
         , (* 158*) yyTCombType {  77,  156} , (* 159*) yyTCombType {  72,  273}
         , (* 160*) yyTCombType {  78,  157} , (* 161*) yyTCombType {  34,  326}
         , (* 162*) yyTCombType {  84,  158} , (* 163*) yyTCombType {  85,  159}
         , (* 164*) yyTCombType {  72,  273} , (* 165*) yyTCombType {  86,  160}
         , (* 166*) yyTCombType {  87,  161} , (* 167*) yyTCombType {  89,  134}
         , (* 168*) yyTCombType {  91,  233} , (* 169*) yyTCombType {  88,  162}
         , (* 170*) yyTCombType {  86,   87} , (* 171*) yyTCombType {  92,    6}
         , (* 172*) yyTCombType {  55,  278} , (* 173*) yyTCombType {  59,  330}
         , (* 174*) yyTCombType {  88,   89} , (* 175*) yyTCombType {  93,   94}
         , (* 176*) yyTCombType {  96,   97} , (* 177*) yyTCombType {  97,  163}
         , (* 178*) yyTCombType { 102,  103} , (* 179*) yyTCombType { 101,  230}
         , (* 180*) yyTCombType {  63,  337} , (* 181*) yyTCombType { 101,  234}
         , (* 182*) yyTCombType { 106,  107} , (* 183*) yyTCombType { 107,  165}
         , (* 184*) yyTCombType { 108,  109} , (* 185*) yyTCombType {  80,  262}
         , (* 186*) yyTCombType {  55,  278} , (* 187*) yyTCombType {  59,  330}
         , (* 188*) yyTCombType {  72,  273} , (* 189*) yyTCombType {  78,  289}
         , (* 190*) yyTCombType {  80,  262} , (* 191*) yyTCombType { 109,  110}
         , (* 192*) yyTCombType {  55,  278} , (* 193*) yyTCombType {  59,  330}
         , (* 194*) yyTCombType {  63,  337} , (* 195*) yyTCombType {  80,  262}
         , (* 196*) yyTCombType { 114,  115} , (* 197*) yyTCombType {  69,   70}
         , (* 198*) yyTCombType { 111,  253} , (* 199*) yyTCombType { 111,  253}
         , (* 200*) yyTCombType {  63,  337} , (* 201*) yyTCombType { 115,  167}
         , (* 202*) yyTCombType {  72,  273} , (* 203*) yyTCombType {  80,  262}
         , (* 204*) yyTCombType {  81,  260} , (* 205*) yyTCombType { 103,  259}
         , (* 206*) yyTCombType {  80,  262} , (* 207*) yyTCombType { 104,  337}
         , (* 208*) yyTCombType {  72,  273} , (* 209*) yyTCombType {  81,  260}
         , (* 210*) yyTCombType { 103,  259} , (* 211*) yyTCombType { 116,  132}
         , (* 212*) yyTCombType { 104,  337} , (* 213*) yyTCombType { 117,  168}
         , (* 214*) yyTCombType {  81,  260} , (* 215*) yyTCombType { 112,  166}
         , (* 216*) yyTCombType { 112,    8} , (* 217*) yyTCombType { 118,  138}
         , (* 218*) yyTCombType { 103,  259} , (* 219*) yyTCombType {  80,  262}
         , (* 220*) yyTCombType { 121,  122} , (* 221*) yyTCombType { 103,  259}
         , (* 222*) yyTCombType {  81,   82} , (* 223*) yyTCombType { 124,  125}
         , (* 224*) yyTCombType { 119,  270} , (* 225*) yyTCombType {  81,   85}
         , (* 226*) yyTCombType { 119,  270} , (* 227*) yyTCombType { 125,  169}
         , (* 228*) yyTCombType { 120,  231} , (* 229*) yyTCombType { 119,   26}
         , (* 230*) yyTCombType { 120,  235} , (* 231*) yyTCombType { 126,  127}
         , (* 232*) yyTCombType { 123,  333} , (* 233*) yyTCombType {  80,  262}
         , (* 234*) yyTCombType { 103,  259} , (* 235*) yyTCombType { 127,  128}
         , (* 236*) yyTCombType { 104,  337} , (* 237*) yyTCombType { 123,  333}
         , (* 238*) yyTCombType {  81,  260} , (* 239*) yyTCombType {  80,  262}
         , (* 240*) yyTCombType { 128,  111} , (* 241*) yyTCombType { 122,  259}
         , (* 242*) yyTCombType { 130,  131} , (* 243*) yyTCombType { 131,  170}
         , (* 244*) yyTCombType {   0,    0} , (* 245*) yyTCombType {   0,    0}
         , (* 246*) yyTCombType { 122,  259} , (* 247*) yyTCombType {   0,    0}
         , (* 248*) yyTCombType { 103,  259} , (* 249*) yyTCombType {   0,    0}
         , (* 250*) yyTCombType { 104,  337} , (* 251*) yyTCombType {   0,    0}
         , (* 252*) yyTCombType {  81,  260} , (* 253*) yyTCombType {   0,    0}
         , (* 254*) yyTCombType { 103,  259} , (* 255*) yyTCombType { 117,  227}
         , (* 256*) yyTCombType { 104,  337} , (* 257*) yyTCombType { 117,  227}
         , (* 258*) yyTCombType {  81,  260} , (* 259*) yyTCombType { 122,  259}
         , (* 260*) yyTCombType {   0,    0} , (* 261*) yyTCombType {   0,    0}
         , (* 262*) yyTCombType { 122,  259} , (* 263*) yyTCombType {   0,    0}
         , (* 264*) yyTCombType {   0,    0} , (* 265*) yyTCombType {   0,    0}
         , (* 266*) yyTCombType { 123,  333} , (* 267*) yyTCombType {   0,    0}
         , (* 268*) yyTCombType {   0,    0} , (* 269*) yyTCombType {   0,    0}
         , (* 270*) yyTCombType {   0,    0} , (* 271*) yyTCombType {   0,    0}
         , (* 272*) yyTCombType {   0,    0} , (* 273*) yyTCombType {   0,    0}
         , (* 274*) yyTCombType {   0,    0} , (* 275*) yyTCombType { 122,  259}
         , (* 276*) yyTCombType {   0,    0} , (* 277*) yyTCombType {   0,    0}
         , (* 278*) yyTCombType {   0,    0} , (* 279*) yyTCombType {   0,    0}
         , (* 280*) yyTCombType { 123,  333} , (* 281*) yyTCombType {   0,    0}
         , (* 282*) yyTCombType {   0,    0} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType {   0,    0} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType { 123,  333} , (* 287*) yyTCombType {   0,    0}
         , (* 288*) yyTCombType {   0,    0} , (* 289*) yyTCombType { 122,  259}
         , (* 290*) yyTCombType {   0,    0} , (* 291*) yyTCombType {   0,    0}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType {   0,    0}
         , (* 294*) yyTCombType {   0,    0} , (* 295*) yyTCombType { 122,  259}
         , (* 296*) yyTCombType {   0,    0} , (* 297*) yyTCombType {   0,    0}
         , (* 298*) yyTCombType {   0,    0} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType {   0,    0} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {   0,    0} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {   0,    0}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType {   0,    0} , (* 315*) yyTCombType {   0,    0}
         , (* 316*) yyTCombType {   0,    0} , (* 317*) yyTCombType {   0,    0}
         , (* 318*) yyTCombType {   0,    0} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {   0,    0} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {   0,    0} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {   0,    0} , (* 325*) yyTCombType {   0,    0}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType {   0,    0}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        to them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  211 , (* 110*)   98 , (* 111*)  212 , (* 112*)  213
         , (* 113*)  214 , (* 114*)  215 , (* 115*)  216 , (* 116*)    4
         , (* 117*)   91 , (* 118*)  101 , (* 119*)    0 , (* 120*)  102
         , (* 121*)  121 , (* 122*)    5 , (* 123*)   92 , (* 124*)  108
         , (* 125*)  126 , (* 126*)   99 , (* 127*)   11 , (* 128*)   12
         , (* 129*)    0 , (* 130*)    9 , (* 131*)   93 , (* 132*)  113
         , (* 133*)  181 , (* 134*)  171 , (* 135*)   51 , (* 136*)   25
         , (* 137*)    7 , (* 138*)   37 , (* 139*)  173 , (* 140*)   80
         , (* 141*)  173 , (* 142*)   40 , (* 143*)  173 , (* 144*)   64
         , (* 145*)  173 , (* 146*)  177 , (* 147*)  183 , (* 148*)  201
         , (* 149*)   46 , (* 150*)   61 , (* 151*)   25 , (* 152*)   55
         , (* 153*)  202 , (* 154*)  192 , (* 155*)   52 , (* 156*)  190
         , (* 157*)   76 , (* 158*)  182 , (* 159*)  205 , (* 160*)  174
         , (* 161*)  175 , (* 162*)  176 , (* 163*)   27 , (* 164*)   29
         , (* 165*)  179 , (* 166*)   31 , (* 167*)   32 , (* 168*)  178
         , (* 169*)  191 , (* 170*)  172 , (* 171*)   21 , (* 172*)   34
         , (* 173*)   24 , (* 174*)   42 , (* 175*)   24 , (* 176*)  180
         , (* 177*)   24 , (* 178*)   27 , (* 179*)   24 , (* 180*)  184
         , (* 181*)  206 , (* 182*)   43 , (* 183*)  189 , (* 184*)   45
         , (* 185*)   15 , (* 186*)  207 , (* 187*)  185 , (* 188*)   45
         , (* 189*)   49 , (* 190*)   47 , (* 191*)  173 , (* 192*)  188
         , (* 193*)  177 , (* 194*)  177 , (* 195*)   58 , (* 196*)   21
         , (* 197*)  198 , (* 198*)   60 , (* 199*)   42 , (* 200*)  177
         , (* 201*)   15 , (* 202*)  177 , (* 203*)  196 , (* 204*)   63
         , (* 205*)  177 , (* 206*)  173 , (* 207*)   72 , (* 208*)  186
         , (* 209*)  200 , (* 210*)   73 , (* 211*)  199 , (* 212*)   73
         , (* 213*)   81 , (* 214*)   83 , (* 215*)  187 , (* 216*)   54
         , (* 217*)   25 , (* 218*)  208 , (* 219*)  209 , (* 220*)   25
         , (* 221*)   88 , (* 222*)   66 , (* 223*)   75 , (* 224*)  193
         , (* 225*)   24 , (* 226*)   86 , (* 227*)   66 , (* 228*)  210
         , (* 229*)   96 , (* 230*)  105 , (* 231*)  112 , (* 232*)  119
         , (* 233*)   95 , (* 234*)  124 , (* 235*)  104 , (* 236*)  123
         , (* 237*)  217 , (* 238*)  129 , (* 239*)   77 , (* 240*)   24
         , (* 241*)   78 , (* 242*)  203 , (* 243*)   79 , (* 244*)   27
         , (* 245*)  204 , (* 246*)   80 , (* 247*)   27 , (* 248*)   80
         , (* 249*)   80 , (* 250*)   68 , (* 251*)    0 , (* 252*)    0
         , (* 253*)   69 , (* 254*)  197 , (* 255*)  195 , (* 256*)    0
         , (* 257*)    0 , (* 258*)    0 , (* 259*)  194 , (* 260*)  195
         , (* 261*)  117 , (* 262*)  218 , (* 263*)    0 , (* 264*)  120
         , (* 265*)  118 , (* 266*)    0 , (* 267*)    0 , (* 268*)    0
         , (* 269*)    0 , (* 270*)    0 , (* 271*)    0 , (* 272*)    0
         , (* 273*)    0 , (* 274*)    0 , (* 275*)    0 , (* 276*)    0
         , (* 277*)    0 , (* 278*)    0 , (* 279*)    0 , (* 280*)    0
         , (* 281*)    0 , (* 282*)    0 , (* 283*)   63 , (* 284*)    0
         , (* 285*)    0 , (* 286*)    0 , (* 287*)   15 , (* 288*)   63
         , (* 289*)    0 , (* 290*)    0 , (* 291*)    0 , (* 292*)    0
         , (* 293*)    0 , (* 294*)    0 , (* 295*)    0 , (* 296*)    0
         , (* 297*)    0 , (* 298*)    0 , (* 299*)    0 , (* 300*)    0
         , (* 301*)    0 , (* 302*)    0 , (* 303*)    0 , (* 304*)    0
         , (* 305*)    0 , (* 306*)    0 , (* 307*)    0 , (* 308*)    0
         , (* 309*)    0 , (* 310*)    0 , (* 311*)    0 , (* 312*)    0
         , (* 313*)    0 , (* 314*)    0 , (* 315*)    0 , (* 316*)    0
         , (* 317*)    0 , (* 318*)    0 , (* 319*)    0 , (* 320*)    0
         , (* 321*)    0 , (* 322*)    0 , (* 323*)    0 , (* 324*)    0
         , (* 325*)    0 , (* 326*)    0 , (* 327*)    0 , (* 328*)    0
         , (* 329*)    0 , (* 330*)    0 , (* 331*)    0 , (* 332*)    0
         , (* 333*)    0 , (* 334*)    0 , (* 335*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 219(P   1)*)    2 , (*A 220(P   2)*)    1 , (*A 221(P   3)*)    1
         , (*A 222(P   4)*)    1 , (*A 223(P   5)*)    1 , (*A 224(P   6)*)    1
         , (*A 225(P   7)*)    1 , (*A 226(P   8)*)    1 , (*A 227(P   9)*)    1
         , (*A 228(P  10)*)    2 , (*A 229(P  11)*)    1 , (*A 230(P  12)*)    0
         , (*A 231(P  13)*)    0 , (*A 232(P  14)*)    0 , (*A 233(P  15)*)    0
         , (*A 234(P  16)*)    0 , (*A 235(P  17)*)    0 , (*A 236(P  18)*)   10
         , (*A 237(P  19)*)    9 , (*A 238(P  20)*)   11 , (*A 239(P  21)*)   10
         , (*A 240(P  22)*)   10 , (*A 241(P  23)*)   10 , (*A 242(P  24)*)    1
         , (*A 243(P  25)*)    0 , (*A 244(P  26)*)    0 , (*A 245(P  27)*)    1
         , (*A 246(P  28)*)    0 , (*A 247(P  29)*)    1 , (*A 248(P  30)*)    1
         , (*A 249(P  31)*)    3 , (*A 250(P  32)*)    1 , (*A 251(P  33)*)    3
         , (*A 252(P  34)*)    3 , (*A 253(P  35)*)    0 , (*A 254(P  36)*)    3
         , (*A 255(P  37)*)    0 , (*A 256(P  38)*)    1 , (*A 257(P  39)*)    3
         , (*A 258(P  40)*)    3 , (*A 259(P  41)*)    0 , (*A 260(P  42)*)    0
         , (*A 261(P  43)*)    2 , (*A 262(P  44)*)    0 , (*A 263(P  45)*)    3
         , (*A 264(P  46)*)    1 , (*A 265(P  47)*)    3 , (*A 266(P  48)*)    2
         , (*A 267(P  49)*)    4 , (*A 268(P  50)*)    3 , (*A 269(P  51)*)    1
         , (*A 270(P  52)*)    2 , (*A 271(P  53)*)    3 , (*A 272(P  54)*)    3
         , (*A 273(P  55)*)    2 , (*A 274(P  56)*)    1 , (*A 275(P  57)*)    2
         , (*A 276(P  58)*)    1 , (*A 277(P  59)*)    4 , (*A 278(P  60)*)    2
         , (*A 279(P  61)*)    1 , (*A 280(P  62)*)    2 , (*A 281(P  63)*)    5
         , (*A 282(P  64)*)    2 , (*A 283(P  65)*)    0 , (*A 284(P  66)*)    1
         , (*A 285(P  67)*)    3 , (*A 286(P  68)*)    0 , (*A 287(P  69)*)    2
         , (*A 288(P  70)*)    1 , (*A 289(P  71)*)    1 , (*A 290(P  72)*)    2
         , (*A 291(P  73)*)    3 , (*A 292(P  74)*)    1 , (*A 293(P  75)*)    2
         , (*A 294(P  76)*)    0 , (*A 295(P  77)*)    2 , (*A 296(P  78)*)    0
         , (*A 297(P  79)*)    1 , (*A 298(P  80)*)    2 , (*A 299(P  81)*)    0
         , (*A 300(P  82)*)    2 , (*A 301(P  83)*)    1 , (*A 302(P  84)*)    3
         , (*A 303(P  85)*)    1 , (*A 304(P  86)*)    3 , (*A 305(P  87)*)    2
         , (*A 306(P  88)*)    3 , (*A 307(P  89)*)    2 , (*A 308(P  90)*)    4
         , (*A 309(P  91)*)    1 , (*A 310(P  92)*)    3 , (*A 311(P  93)*)    1
         , (*A 312(P  94)*)    0 , (*A 313(P  95)*)    1 , (*A 314(P  96)*)    1
         , (*A 315(P  97)*)    1 , (*A 316(P  98)*)    4 , (*A 317(P  99)*)    1
         , (*A 318(P 100)*)    2 , (*A 319(P 101)*)    0 , (*A 320(P 102)*)    2
         , (*A 321(P 103)*)    0 , (*A 322(P 104)*)    2 , (*A 323(P 105)*)    0
         , (*A 324(P 106)*)    2 , (*A 325(P 107)*)    4 , (*A 326(P 108)*)    0
         , (*A 327(P 109)*)    4 , (*A 328(P 110)*)    1 , (*A 329(P 111)*)    5
         , (*A 330(P 112)*)    0 , (*A 331(P 113)*)    1 , (*A 332(P 114)*)    1
         , (*A 333(P 115)*)    0 , (*A 334(P 116)*)    5 , (*A 335(P 117)*)    1
         , (*A 336(P 118)*)    2 , (*A 337(P 119)*)    0 , (*A 338(P 120)*)    1
         , (*A 339(P 121)*)    1 , (*A 340(P 122)*)    1 , (*A 341(P 123)*)    1
         , (*A 342(P 124)*)    2 , (*A 343(P 125)*)    1 , (*A 344(P 126)*)    3
         , (*A 345(P 127)*)    0 , (*A 346(P 128)*)    1 , (*A 347(P 129)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 219(P   1)*)  190 , (*A 220(P   2)*)  110 , (*A 221(P   3)*)  110
         , (*A 222(P   4)*)  110 , (*A 223(P   5)*)  110 , (*A 224(P   6)*)  110
         , (*A 225(P   7)*)  110 , (*A 226(P   8)*)  116 , (*A 227(P   9)*)  117
         , (*A 228(P  10)*)  119 , (*A 229(P  11)*)  119 , (*A 230(P  12)*)  120
         , (*A 231(P  13)*)  121 , (*A 232(P  14)*)  122 , (*A 233(P  15)*)  123
         , (*A 234(P  16)*)  124 , (*A 235(P  17)*)  125 , (*A 236(P  18)*)  109
         , (*A 237(P  19)*)  111 , (*A 238(P  20)*)  112 , (*A 239(P  21)*)  113
         , (*A 240(P  22)*)  114 , (*A 241(P  23)*)  115 , (*A 242(P  24)*)  126
         , (*A 243(P  25)*)  126 , (*A 244(P  26)*)  132 , (*A 245(P  27)*)  133
         , (*A 246(P  28)*)  133 , (*A 247(P  29)*)  134 , (*A 248(P  30)*)  135
         , (*A 249(P  31)*)  135 , (*A 250(P  32)*)  136 , (*A 251(P  33)*)  136
         , (*A 252(P  34)*)  137 , (*A 253(P  35)*)  137 , (*A 254(P  36)*)  138
         , (*A 255(P  37)*)  138 , (*A 256(P  38)*)  139 , (*A 257(P  39)*)  139
         , (*A 258(P  40)*)  127 , (*A 259(P  41)*)  140 , (*A 260(P  42)*)  142
         , (*A 261(P  43)*)  141 , (*A 262(P  44)*)  141 , (*A 263(P  45)*)  143
         , (*A 264(P  46)*)  144 , (*A 265(P  47)*)  144 , (*A 266(P  48)*)  143
         , (*A 267(P  49)*)  145 , (*A 268(P  50)*)  145 , (*A 269(P  51)*)  146
         , (*A 270(P  52)*)  118 , (*A 271(P  53)*)  130 , (*A 272(P  54)*)  131
         , (*A 273(P  55)*)  148 , (*A 274(P  56)*)  147 , (*A 275(P  57)*)  147
         , (*A 276(P  58)*)  150 , (*A 277(P  59)*)  149 , (*A 278(P  60)*)  153
         , (*A 279(P  61)*)  152 , (*A 280(P  62)*)  152 , (*A 281(P  63)*)  154
         , (*A 282(P  64)*)  155 , (*A 283(P  65)*)  155 , (*A 284(P  66)*)  157
         , (*A 285(P  67)*)  159 , (*A 286(P  68)*)  158 , (*A 287(P  69)*)  158
         , (*A 288(P  70)*)  160 , (*A 289(P  71)*)  162 , (*A 290(P  72)*)  160
         , (*A 291(P  73)*)  161 , (*A 292(P  74)*)  163 , (*A 293(P  75)*)  164
         , (*A 294(P  76)*)  164 , (*A 295(P  77)*)  165 , (*A 296(P  78)*)  165
         , (*A 297(P  79)*)  151 , (*A 298(P  80)*)  151 , (*A 299(P  81)*)  166
         , (*A 300(P  82)*)  166 , (*A 301(P  83)*)  167 , (*A 302(P  84)*)  167
         , (*A 303(P  85)*)  168 , (*A 304(P  86)*)  151 , (*A 305(P  87)*)  151
         , (*A 306(P  88)*)  169 , (*A 307(P  89)*)  170 , (*A 308(P  90)*)  170
         , (*A 309(P  91)*)  173 , (*A 310(P  92)*)  174 , (*A 311(P  93)*)  174
         , (*A 312(P  94)*)  176 , (*A 313(P  95)*)  176 , (*A 314(P  96)*)  176
         , (*A 315(P  97)*)  176 , (*A 316(P  98)*)  175 , (*A 317(P  99)*)  177
         , (*A 318(P 100)*)  178 , (*A 319(P 101)*)  178 , (*A 320(P 102)*)  179
         , (*A 321(P 103)*)  179 , (*A 322(P 104)*)  171 , (*A 323(P 105)*)  171
         , (*A 324(P 106)*)  172 , (*A 325(P 107)*)  172 , (*A 326(P 108)*)  172
         , (*A 327(P 109)*)  181 , (*A 328(P 110)*)  180 , (*A 329(P 111)*)  180
         , (*A 330(P 112)*)  182 , (*A 331(P 113)*)  156 , (*A 332(P 114)*)  156
         , (*A 333(P 115)*)  183 , (*A 334(P 116)*)  129 , (*A 335(P 117)*)  128
         , (*A 336(P 118)*)  185 , (*A 337(P 119)*)  185 , (*A 338(P 120)*)  186
         , (*A 339(P 121)*)  186 , (*A 340(P 122)*)  186 , (*A 341(P 123)*)  186
         , (*A 342(P 124)*)  184 , (*A 343(P 125)*)  187 , (*A 344(P 126)*)  187
         , (*A 345(P 127)*)  184 , (*A 346(P 128)*)  188 , (*A 347(P 129)*)  189
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   69 , (*:   5*)   69
         , (*:   6*)   70 , (*:   7*)   70 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   19 , (*:  13*)   95 , (*:  14*)   67
         , (*:  15*)    9 , (*:  16*)   95 , (*:  17*)   68
         , (*:  18*)   95 , (*:  19*)   69 , (*:  20*)   70
         , (*:  21*)   19 , (*:  22*)   95 , (*:  23*)   95
         , (*:  24*)   19 , (*:  25*)   19 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   19
         , (*:  30*)   95 , (*:  31*)   19 , (*:  32*)   19
         , (*:  33*)   19 , (*:  34*)   19 , (*:  35*)    6
         , (*:  36*)   71 , (*:  37*)   76 , (*:  38*)   95
         , (*:  39*)   71 , (*:  40*)   67 , (*:  41*)   95
         , (*:  42*)   95 , (*:  43*)   70 , (*:  44*)   70
         , (*:  45*)   95 , (*:  46*)   66 , (*:  47*)   66
         , (*:  48*)   95 , (*:  49*)   66 , (*:  50*)   95
         , (*:  51*)   70 , (*:  52*)   68 , (*:  53*)   95
         , (*:  54*)   66 , (*:  55*)    9 , (*:  56*)   95
         , (*:  57*)   69 , (*:  58*)   66 , (*:  59*)    9
         , (*:  60*)    9 , (*:  61*)   95 , (*:  62*)   66
         , (*:  63*)    9 , (*:  64*)    9 , (*:  65*)   19
         , (*:  66*)   74 , (*:  67*)   95 , (*:  68*)   19
         , (*:  69*)   19 , (*:  70*)   19 , (*:  71*)   95
         , (*:  72*)    9 , (*:  73*)   68 , (*:  74*)   95
         , (*:  75*)   66 , (*:  76*)   66 , (*:  77*)   66
         , (*:  78*)   66 , (*:  79*)   95 , (*:  80*)    9
         , (*:  81*)    9 , (*:  82*)   95 , (*:  83*)   30
         , (*:  84*)   95 , (*:  85*)   95 , (*:  86*)   66
         , (*:  87*)   95 , (*:  88*)   66 , (*:  89*)   95
         , (*:  90*)   95 , (*:  91*)   69 , (*:  92*)   69
         , (*:  93*)   66 , (*:  94*)    9 , (*:  95*)    9
         , (*:  96*)   95 , (*:  97*)   67 , (*:  98*)    0
         , (*:  99*)   32 , (*: 100*)   95 , (*: 101*)   66
         , (*: 102*)   66 , (*: 103*)   14 , (*: 104*)   14
         , (*: 105*)   19 , (*: 106*)   95 , (*: 107*)   67
         , (*: 108*)   68 , (*: 109*)   95 , (*: 110*)   69
         , (*: 111*)   70 , (*: 112*)   70 , (*: 113*)   19
         , (*: 114*)   95 , (*: 115*)   67 , (*: 116*)   95
         , (*: 117*)   66 , (*: 118*)   95 , (*: 119*)   66
         , (*: 120*)   66 , (*: 121*)   66 , (*: 122*)    9
         , (*: 123*)    9 , (*: 124*)   95 , (*: 125*)   67
         , (*: 126*)   68 , (*: 127*)   95 , (*: 128*)   69
         , (*: 129*)   19 , (*: 130*)   95 , (*: 131*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 132)*)  226 (*P7*) , (*RR: 133)*)  271 (*P52*)
         , (*RR: 134)*)  247 (*P28*) , (*RR: 135)*)  238 (*P19*)
         , (*RR: 136)*)  307 (*P88*) , (*RR: 137)*)  303 (*P84*)
         , (*RR: 138)*)  250 (*P31*) , (*RR: 139)*)  251 (*P32*)
         , (*RR: 140)*)  332 (*P113*) , (*RR: 141)*)  304 (*P85*)
         , (*RR: 142)*)  324 (*P105*) , (*RR: 143)*)  257 (*P38*)
         , (*RR: 144)*)  325 (*P106*) , (*RR: 145)*)  315 (*P96*)
         , (*RR: 146)*)  313 (*P94*) , (*RR: 147)*)  314 (*P95*)
         , (*RR: 148)*)  308 (*P89*) , (*RR: 149)*)  281 (*P62*)
         , (*RR: 150)*)  328 (*P109*) , (*RR: 151)*)  329 (*P110*)
         , (*RR: 152)*)  334 (*P115*) , (*RR: 153)*)  276 (*P57*)
         , (*RR: 154)*)  277 (*P58*) , (*RR: 155)*)  284 (*P65*)
         , (*RR: 156)*)  285 (*P66*) , (*RR: 157)*)  287 (*P68*)
         , (*RR: 158)*)  267 (*P48*) , (*RR: 159)*)  264 (*P45*)
         , (*RR: 160)*)  263 (*P44*) , (*RR: 161)*)  265 (*P46*)
         , (*RR: 162)*)  266 (*P47*) , (*RR: 163)*)  239 (*P20*)
         , (*RR: 164)*)  242 (*P23*) , (*RR: 165)*)  236 (*P17*)
         , (*RR: 166)*)  272 (*P53*) , (*RR: 167)*)  240 (*P21*)
         , (*RR: 168)*)  269 (*P50*) , (*RR: 169)*)  237 (*P18*)
         , (*RR: 170)*)  241 (*P22*) , (*RR: 171)*)  252 (*P33*)
         , (*RR: 172)*)  305 (*P86*) , (*RR: 173)*)  297 (*P78*)
         , (*RR: 174)*)  298 (*P79*) , (*RR: 175)*)  301 (*P82*)
         , (*RR: 176)*)  293 (*P74*) , (*RR: 177)*)  331 (*P112*)
         , (*RR: 178)*)  295 (*P76*) , (*RR: 179)*)  291 (*P72*)
         , (*RR: 180)*)  302 (*P83*) , (*RR: 181)*)  300 (*P81*)
         , (*RR: 182)*)  322 (*P103*) , (*RR: 183)*)  254 (*P35*)
         , (*RR: 184)*)  306 (*P87*) , (*RR: 185)*)  310 (*P91*)
         , (*RR: 186)*)  318 (*P99*) , (*RR: 187)*)  320 (*P101*)
         , (*RR: 188)*)  316 (*P97*) , (*RR: 189)*)  311 (*P92*)
         , (*RR: 190)*)  282 (*P63*) , (*RR: 191)*)  280 (*P61*)
         , (*RR: 192)*)  279 (*P60*) , (*RR: 193)*)  347 (*P128*)
         , (*RR: 194)*)  344 (*P125*) , (*RR: 195)*)  346 (*P127*)
         , (*RR: 196)*)  342 (*P123*) , (*RR: 197)*)  343 (*P124*)
         , (*RR: 198)*)  327 (*P108*) , (*RR: 199)*)  275 (*P56*)
         , (*RR: 200)*)  274 (*P55*) , (*RR: 201)*)  340 (*P121*)
         , (*RR: 202)*)  338 (*P119*) , (*RR: 203)*)  288 (*P69*)
         , (*RR: 204)*)  290 (*P71*) , (*RR: 205)*)  339 (*P120*)
         , (*RR: 206)*)  341 (*P122*) , (*RR: 207)*)  336 (*P117*)
         , (*RR: 208)*)  258 (*P39*) , (*RR: 209)*)  261 (*P42*)
         , (*RR: 210)*)  268 (*P49*) , (*RR: 211)*)  220 (*P1*)
         , (*RR: 212)*)  221 (*P2*) , (*RR: 213)*)  222 (*P3*)
         , (*RR: 214)*)  223 (*P4*) , (*RR: 215)*)  224 (*P5*)
         , (*RR: 216)*)  225 (*P6*) , (*RR: 217)*)  228 (*P9*)
         , (*RR: 218)*)  229 (*P10*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkReBegin.  Use it messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkReservedId";
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

   (* Declarations from the LOCAL section of the .lalr file: *) 
(* line 53 "FM3Parser.lalr" *)
 TYPE Sk = FM3Scopes . ScopeKindTyp ;
    TYPE Dk = FM3Decls . DeclKindTyp ; 
    TYPE Uk = FM3Units . UnitKindTyp ;

PROCEDURE Test ( READONLY Attr : tParsAttribute )
= VAR Debug : INTEGER := 0
; BEGIN
    IF Attr . PaInt = FIRST ( INTEGER)
    THEN
      Debug := 19
    END 
  END Test ;

  
   (* End of declarations from the LOCAL section of the .lalr file: *)
   
   VAR
      yyRHSUnnestCoord        : LONGINT; 
      yyPrereduceUnnestCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*                     PushUnnestStk (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*              PushUnnestStk (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceUnnestCoord := UnnestCoord ( );

             (* Inserted semantic action code from the .lalr file: **)
              CASE yyState OF
              | 219 => (* P1 _0000_ (190): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 220,211 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 221,212 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 222,213 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 223,214 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 224,215 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 225,216 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 226,132 => (* P8 UnitId (116): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 116;
                (* line 240 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                
                (* IF FM3ParsePass . DeclIdL2R ( Itk . ItkUnitId , yyAttributeStack^[yyStackPtr+1] )
                       THEN yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       ELSE yySynAttribute . Scan . SaAtom := FM3Base . AtomNull ;
                       END (*IF*) ;
                *)
                       FM3Units . UnitStackTopRef ^ . UntUnitIdAtom := yySynAttribute . Scan . SaAtom ;
                     
              | 227 => (* P9 UnitIdImpliedEXPORTS (117): UnitId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 252 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       (* Synthesize EXPORTS <self>. *) 
                       Push_LIP ( Itk . ItkExportIdListLt , 1 , yyAttributeStack^[yyStackPtr+1] . Scan . Position )  ; 
                       Push_LIP
                         ( Itk . ItkExportIdListLt + Itk . LtToListElem
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                       Push_LIP ( Itk . ItkExportIdListRt , 1 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 228,217 => (* P10 UnitIdAndExports (119): UnitId Exports .*)
                DEC (yyStackPtr, 2); yyNonterminal := 119;
                (* line 264 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
              | 229,218 => (* P11 UnitIdAndExports (119): UnitIdImpliedEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 119;
                (* line 267 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
              | 230 => (* P12 InterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 270 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInterface ; 
              | 231 => (* P13 ModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 273 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkModule ; 
              | 232 => (* P14 GenInterfaceKind (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 276 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenInterface ; 
              | 233 => (* P15 GenModuleKind (123): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 123;
                (* line 279 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenModule ; 
              | 234 => (* P16 InstInterfaceKind (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;
                (* line 282 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstInterface ; 
              | 235 => (* P17 InstModuleKind (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 285 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstModule ; 
              | 236,165 => (* P18 Interface (109): OptUnsafe StkRwINTERFACE UnitId InterfaceKind StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 109;

              | 237,169 => (* P19 Module (111): OptUnsafe StkRwMODULE UnitIdAndExports ModuleKind StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;

              | 238,135 => (* P20 GenInterface (112): StkRwGENERIC StkRwINTERFACE UnitId GenInterfaceKind GenFormalList StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 112;

              | 239,163 => (* P21 GenModule (113): StkRwGENERIC StkRwMODULE UnitId GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 113;

              | 240,167 => (* P22 InstInterface (114): OptUnsafe StkRwINTERFACE UnitId InstInterfaceKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 114;

              | 241,170 => (* P23 InstModule (115): OptUnsafe StkRwMODULE UnitIdAndExports InstModuleKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 115;

              | 242,164 => (* P24 OptUnsafe (126): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 126;
                (* line 311 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 243 => (* P25 OptUnsafe (126): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 126;
                (* line 312 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 244 => (* P26 CaptureCoord (132): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 132;
                (* line 315 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 245 => (* P27 OptSemicolon (133): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 133;

              | 246 => (* P28 OptSemicolon (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;

              | 247,134 => (* P29 IdentRef (134): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 134;
                (* line 323 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 248 => (* P30 IdPlusList (135): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;
                (* line 327 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 249 => (* P31 IdPlusList (135): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 331 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 250,138 => (* P32 DeclIdListElems (136): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;
                (* line 343 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3ParsePass . DeclIdL2R
                                  ( FM3Decls . TopDeclInfo ( ) . DiIdTok , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                              ) ;
                     
              | 251,139 => (* P33 DeclIdListElems (136): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 351 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . DeclIdL2R
                            ( FM3Decls . TopDeclInfo ( ) . DiIdTok , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No seprators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 252,171 => (* P34 IdStarList (137): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 361 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 253 => (* P35 IdStarList (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 363 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 254,183 => (* P36 QualIdStarList (138): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 367 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 255 => (* P37 QualIdStarList (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 369 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 256 => (* P38 QualId (139): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 257,143 => (* P39 QualId (139): IdentRef StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;
                (* line 374 of "FM3Parser.lalr" *)
                 Push_LCeCr
                         ( Itk . ItkQualIdLt ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord );
                     
              | 258,208 => (* P40 Imports (127): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 381 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 259 => (* P41 ImportsLt (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;
                (* line 384 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 260 => (* P42 ImportsRt (142): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 142;
                (* line 385 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 261,209 => (* P43 ImportsRecurse (141): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 141;
                (* line 387 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 262 => (* P44 ImportsRecurse (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 391 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 263,160 => (* P45 ImportItem (143): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 397 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 264,159 => (* P46 ImportIntfPlusList (144): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 401 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 265,161 => (* P47 ImportIntfPlusList (144): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 413 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 266,162 => (* P48 ImportItem (143): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 143;
                (* line 427 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 267,158 => (* P49 FromImportPlusList (145): StkRwFROM IdentRef StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 145;
                (* line 431 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 268,210 => (* P50 FromImportPlusList (145): FromImportPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 454 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 269,168 => (* P51 ExportsLt (146): StkRwEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 497 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* Although an export list is not exactly a scope, we use the scope
                          and DeclInfo mechanisms to check reserved and duplicated idents.
                          ScopeRtL2R will handle the legal ones specially.
                       *)
                       yySynAttribute . PaConstructNo 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkExports , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^Because ScopeLtL2R Pushes a token, thus changing UnnestCoord. *) 
                       yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkNull
                                  , DiIdListTok := Itk . ItkExportIdListLt 
                                  , DiIdTok := Itk . ItkExportIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkExportIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkExports 
                                  }
                              ) ;
                     
                     
              | 270 => (* P52 Exports (118): ExportsLt DeclIdListElems .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;
                (* line 521 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+2] . PaInt <= 0 (* No usable idents. *)
                       THEN (* Skip entire decl, along with any Ids. *) 
                         yySynAttribute . PaInt := FM3ParsePass . StartSkipping ( ) ;
                       ELSE 
                         MakeListPos (* The identifier list. *) 
                           ( yySynAttribute
                           , Itk . ItkExportIdListLt
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                (* CHECK: MakeListPos could take the position from ElemsAttr.
                          Do other calls have the same property? *) 
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                           ) ; 
                       END (*IF*) ;
                       <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt (* Scope No. *) *>
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                     
              | 271,133 => (* P53 GenFormalList (130): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 130;
                (* line 542 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 272,166 => (* P54 GenActualList (131): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 548 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 273 => (* P55 TypeDeclGroup (148): StkRwTYPE TypeDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;

              | 274,200 => (* P56 TypeDecls (147): TypeDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 275,199 => (* P57 TypeDecls (147): TypeDecls TypeDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 147;

              | 276,153 => (* P58 TypeDeclId (150): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;
                (* line 559 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool
                         := FM3ParsePass . DeclIdL2R
                              ( DeclIdTok := Itk . ItkTypeDeclId , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ;
                       IF NOT yySynAttribute . PaBool
                       THEN yySynAttribute . PaInt :=  FM3ParsePass . StartSkipping ( )
                       END (*IF*) ; 
                   
              | 277,154 => (* P59 TypeDecl (149): TypeDeclId StkEqual Type StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 149;
                (* line 568 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaBool (* Using this decl? *) 
                       THEN
                         IF FM3ParsePass . SkipDepth = 0 
                         THEN 
                           Push_LCP_eCP_rP
                             ( Itk . ItkTypeDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position (* Really? Not yyAttributeStack^[yyStackPtr+1]? *) 
                             ) ;
                         END (*IF*) 
                       ELSE 
                         <* ASSERT yyAttributeStack^[yyStackPtr+1] . PaInt = FM3ParsePass . StopSkipping ( ) *>
                       END (*IF**) ; 
                     
              | 278 => (* P60 ConstDeclGroup (153): StkRwCONST ConstDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;

              | 279,192 => (* P61 ConstDecls (152): ConstDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 280,191 => (* P62 ConstDecls (152): ConstDecls ConstDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 152;

              | 281,149 => (* P63 ConstDecl (154): StkIdent OptConstType StkEqual Expr StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 154;

              | 282,190 => (* P64 OptConstType (155): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 593 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 283 => (* P65 OptConstType (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 595 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 284,155 => (* P66 VarDeclGroupLt (157): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 609 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt 
                                  , DiIdTok := Itk . ItkVarDeclIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 285,156 => (* P67 VarDeclGroup (159): VarDeclGroupLt VarDeclList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 623 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 286 => (* P68 VarDeclList (158): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 158;
                (* line 629 of "FM3Parser.lalr" *)
                 Push_LIP_rip
                          ( Itk . ItkVarDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                      
              | 287,157 => (* P69 VarDeclList (158): VarDeclPlus StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 634 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 288,203 => (* P70 VarDeclPlus (160): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 643 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 289 => (* P71 VarDeclPrefix (162): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 646 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       Push_EIP
                         ( Itk . ItkVarDeclListLt , yyAttributeStack^[yyStackPtr+1] . PaInt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 290,204 => (* P72 VarDeclPlus (160): VarDeclPrefix VarDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 652 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ; 
              | 291,179 => (* P73 VarDecl (161): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 161;
                (* line 659 of "FM3Parser.lalr" *)
                 FM3ParsePass . RequireTypeAndOrValue
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) ;
                       (* ^Check this even if there are no valid ids. *)
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt < 0 (* Skipping this decl?  *) 
                       THEN (* Have been omitting the declaration. *)
                         <* ASSERT FM3ParsePass . StopSkipping ( ) = - yyAttributeStack^[yyStackPtr+1] . PaInt *> 
                       ELSIF FM3ParsePass . SkipDepth > 0
                             (* Skipping some containing construct? *)
                       THEN (* No output. *) 
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           Push_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*) 
                       END (*IF*) 
                     
              | 292 => (* P74 VarDeclIds (163): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 687 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt = 0 (* No usable idents. *)
                       THEN (* Start skipping this decl. *) 
                         yySynAttribute . PaInt (* Negative Skipping depth. *) 
                           := - FM3ParsePass . StartSkipping ( ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         MakeListPos (* The identifier list. *) 
                           ( yySynAttribute
                           , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                           ) ; 
                       END (*IF*) ;
                     
              | 293,176 => (* P75 OptDeclType (164): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 164;
                (* line 705 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 294 => (* P76 OptDeclType (164): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 164;
                (* line 709 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 295,178 => (* P77 OptDeclValue (165): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 713 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 296 => (* P78 OptDeclValue (165): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 165;
                (* line 717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 297,173 => (* P79 Type (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 298,174 => (* P80 Type (151): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 726 of "FM3Parser.lalr" *)
                 Push_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 299 => (* P81 FieldDeclList (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 737 of "FM3Parser.lalr" *)
                 Push_LIP_rip
                          ( Itk . ItkFieldDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                      
              | 300,181 => (* P82 FieldDeclList (166): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 742 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 301,175 => (* P83 FieldDeclPlus (167): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 751 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 302,180 => (* P84 FieldDeclPlus (167): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 167;
                (* line 754 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       Push_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 303,137 => (* P85 RecTypeLt (168): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 766 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo  
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkRec , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkFieldDeclLt
                                  , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                  , DiIdTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkRecField 
                                  }
                              ) ;
                     
              | 304,141 => (* P86 Type (151): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 783 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCIP_rip
                         ( Itk . ItkRecDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                       <* ASSERT FM3Decls . PopDeclInfo ( )
                                 = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *) *> 
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                     
              | 305,172 => (* P87 Type (151): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 797 of "FM3Parser.lalr" *)
                 Push_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 306,184 => (* P88 Signature (169): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 803 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Has result type *) 
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         Push_LCP_rp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 307,136 => (* P89 Formals (170): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 170;
                (* line 819 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := 0 ; 
                       FM3ParsePass . ScopeEmpty ( Sk . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 308,148 => (* P90 Formals (170): FormalsLt FormalsPlusList OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 4); yyNonterminal := 170;
                (* line 825 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes. *) 
                     
              | 309 => (* P91 FormalsLt (173): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 833 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaConstructNo 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkFormals , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^ScopeLtL2R Pushes a token and changes UnnestCoord. *) 
                     
              | 310,185 => (* P92 FormalsPlusList (174): FormalsPlusList StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 174;
                (* line 841 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 311,189 => (* P93 FormalsPlusList (174): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 843 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 312 => (* P94 FormalLt (176): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 176;
                (* line 847 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dk . DkValueFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListElem
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkValueFormal
                                  }
                              ) ;
                     
              | 313,146 => (* P95 FormalLt (176): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 862 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dk . DkValueFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListElem
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkValueFormal
                                  }
                              ) ;
                     
              | 314,147 => (* P96 FormalLt (176): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 878 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dk . DkVarFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkVARFormalIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkValueFormal
                                  }
                              ) ;
                     
              | 315,145 => (* P97 FormalLt (176): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 892 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dk . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkROFormalIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dk . DkROFormal
                                  }
                              ) ;
                     
              | 316,188 => (* P98 Formal (175): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 175;
                (* line 909 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                       DO (* Check this even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dk ) = Dk . DkVarFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               );
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               );
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           FM3ParsePass . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+3] . PaBool
                             , yyAttributeStack^[yyStackPtr+4] . PaBool
                             )
                         END (*IF*) ;
                
                         IF yyAttributeStack^[yyStackPtr+2] . PaInt < 0 (* Skipping this formal? *)
                         THEN (* No output and skip remainder of decl. *) 
                           <* ASSERT FM3ParsePass . StopSkipping ( ) = yyAttributeStack^[yyStackPtr+2] . PaInt *>
                         ELSIF FM3ParsePass . SkipDepth > 0
                               (* Skipping some containing construct? *)
                         THEN (* No output. *) 
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id Ct. *) ;  
                           Push_LCP_eCP_zCP_rP 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*WITH*) 
                       END (*IF*) ;
                       <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                     
              | 317 => (* P99 FormalIds (177): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 963 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt = 0 (* No valid ids. *)
                       THEN (* Start skipping this formal. *) 
                         yySynAttribute . PaInt (* Negative Skipping depth. *) 
                           := - FM3ParsePass . StartSkipping ( ) ;
                       ELSE
                         yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                         MakeListPos
                           ( yySynAttribute
                           , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                           ) ; 
                       END (*IF*) ;
                     
              | 318,186 => (* P100 FormalType (178): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 981 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       Push_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 319 => (* P101 FormalType (178): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 178;
                (* line 990 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 320,187 => (* P102 FormalExpr (179): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 998 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       Push_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 321 => (* P103 FormalExpr (179): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 179;
                (* line 1007 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 322,182 => (* P104 ResultType (171): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 1015 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 323 => (* P105 ResultType (171): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 171;
                (* line 1021 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
                     
              | 324,142 => (* P106 Raises (172): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 1030 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkRaisesANY ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 325,144 => (* P107 Raises (172): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 172;
                (* line 1037 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 326 => (* P108 Raises (172): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 172;
                (* line 1042 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *);
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkRaisesSetAbsent , FM3Scanner . Attribute . Position ); 
                     
              | 327,198 => (* P109 ProcDecl (181): StkRwPROCEDURE StkIdent Signature OptBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 181;
                (* line 1051 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Units . UnitStackTopRef ^ . UntKind OF 
                         | Uk . UkInterface 
                         , Uk . UkGenInterface  
                         , Uk . UkInstInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY 
                                  { " A procedure in an interface must not have a body (2.5.2)." }
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                );  
                
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | Uk . UkModule  
                         , Uk . UkGenModule  
                         , Uk . UkInstModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY
                                    { " A procedure in a module must have a body (2.5)." } 
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         END (*CASE*);
                         Push_LCIri ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord, yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ); 
                       END (*Block*) 
                     
              | 328,150 => (* P110 OptBody (180): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 180;
                (* line 1090 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LP ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 329,151 => (* P111 OptBody (180): StkEqual ProcBodyScopeLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 180;
                (* line 1096 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                       yySynAttribute . PaConstructNo := yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkProcBodyLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+2] . PaConstructNo ) ; 
                     
              | 330 => (* P112 ProcBodyScopeLt (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 1104 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkProcBody , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^ScopeLtL2R Pushes a token and changes UnnestCoord. *) 
                     
              | 331,177 => (* P113 Expr (156): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 332,140 => (* P114 Expr (156): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 333 => (* P115 BlockLt (183): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 183;
                (* line 1120 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkBlock , FM3Scanner . Attribute . Position ) ;
                       Push_LIP
                         ( Itk . ItkBlockLt
                         , yySynAttribute . PaConstructNo
                         , FM3Scanner . Attribute . Position
                         ); 
                     
              | 334,152 => (* P116 Block (129): BlockLt DeclList StkRwBEGIN Stmts StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 129;
                (* line 1131 of "FM3Parser.lalr" *)
                 FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                       Push_ECIP_riP
                         ( Itk . ItkBlockLt
                         , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . PaConstructNo 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 335 => (* P117 DeclList (128): DeclListRecurse .*)
                DEC (yyStackPtr, 1); yyNonterminal := 128;
                (* line 1144 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk . ItkDeclListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 336,207 => (* P118 DeclListRecurse (185): DeclListRecurse Decl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 185;
                (* line 1148 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       (* Emit an Itk decl separator. *) 
                     
              | 337 => (* P119 DeclListRecurse (185): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 185;
                (* line 1152 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                     
              | 338,202 => (* P120 Decl (186): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;

              | 339,205 => (* P121 Decl (186): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;

              | 340,201 => (* P122 Decl (186): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;

              | 341,206 => (* P123 Decl (186): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;

              | 342,196 => (* P124 Stmts (184): StmtPlusList OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;

              | 343,197 => (* P125 StmtPlusList (187): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 187;

              | 344,194 => (* P126 StmtPlusList (187): StmtPlusList StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 187;

              | 345 => (* P127 Stmts (184): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 184;

              | 346,195 => (* P128 Stmt (188): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 188;

              | 347,193 => (* P129 AssignStmt (189): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 189;
                (* line 1173 of "FM3Parser.lalr" *)
                 Push_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);
             (* End of inserted semantic action code from the .lalr file: **)

               (* Here, a reduction has been partially done.  yyStackPtr has been
                  decremented by the RHS length, yyNonterminal has been set to
                  the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := yyPrereduceUnnestCoord; 
                   ELSE WParsAttr . PaUnnestCoord := yyRHSUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ;
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*            PushUnnestStk (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 70 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 72 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

