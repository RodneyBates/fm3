
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 37 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3ParsePass;
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCP_rp , Push_LCP_eCP_rP ,
      Push_LCPeCprp , Push_LIP , Push_LIP_rip , Push_EIP , Push_ECIP , 
      Push_ECIP_riP , Push_LCBr , Push_LCIri , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Push_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 201;
   yyTableMax               = 405;
   yyNTableMax              = 379;
   yyFirstReadState         = 1;
   yyLastReadState          = 141;
   yyFirstReadTermState             = 142;
   yyLastReadTermState              = 194;
   yyLastReadNontermState           = 243;
   yyFirstReduceState               = 244;
   yyLastReduceState                = 393;
   yyStartState             = 1;
   yyStopState              = 244;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   0]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   0]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   1])
         , (*  18*) ADR (yyTComb [   7]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   1])
         , (*  22*) ADR (yyTComb [  16]) , (*  23*) ADR (yyTComb [   2])
         , (*  24*) ADR (yyTComb [   1]) , (*  25*) ADR (yyTComb [  27])
         , (*  26*) ADR (yyTComb [   5]) , (*  27*) ADR (yyTComb [  36])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [  37])
         , (*  30*) ADR (yyTComb [   0]) , (*  31*) ADR (yyTComb [   8])
         , (*  32*) ADR (yyTComb [   2]) , (*  33*) ADR (yyTComb [   1])
         , (*  34*) ADR (yyTComb [   3]) , (*  35*) ADR (yyTComb [  46])
         , (*  36*) ADR (yyTComb [   1]) , (*  37*) ADR (yyTComb [   9])
         , (*  38*) ADR (yyTComb [  33]) , (*  39*) ADR (yyTComb [  10])
         , (*  40*) ADR (yyTComb [  60]) , (*  41*) ADR (yyTComb [  47])
         , (*  42*) ADR (yyTComb [   8]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [  55]) , (*  45*) ADR (yyTComb [  58])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [  65])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [  49])
         , (*  50*) ADR (yyTComb [  18]) , (*  51*) ADR (yyTComb [  26])
         , (*  52*) ADR (yyTComb [   0]) , (*  53*) ADR (yyTComb [  41])
         , (*  54*) ADR (yyTComb [ 127]) , (*  55*) ADR (yyTComb [  23])
         , (*  56*) ADR (yyTComb [  65]) , (*  57*) ADR (yyTComb [  72])
         , (*  58*) ADR (yyTComb [ 128]) , (*  59*) ADR (yyTComb [   0])
         , (*  60*) ADR (yyTComb [  48]) , (*  61*) ADR (yyTComb [  78])
         , (*  62*) ADR (yyTComb [ 138]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [   4]) , (*  65*) ADR (yyTComb [  71])
         , (*  66*) ADR (yyTComb [  52]) , (*  67*) ADR (yyTComb [ 130])
         , (*  68*) ADR (yyTComb [   5]) , (*  69*) ADR (yyTComb [ 131])
         , (*  70*) ADR (yyTComb [ 155]) , (*  71*) ADR (yyTComb [ 168])
         , (*  72*) ADR (yyTComb [  85]) , (*  73*) ADR (yyTComb [  85])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [  88])
         , (*  76*) ADR (yyTComb [ 185]) , (*  77*) ADR (yyTComb [  88])
         , (*  78*) ADR (yyTComb [ 174]) , (*  79*) ADR (yyTComb [ 201])
         , (*  80*) ADR (yyTComb [  91]) , (*  81*) ADR (yyTComb [  93])
         , (*  82*) ADR (yyTComb [ 218]) , (*  83*) ADR (yyTComb [ 231])
         , (*  84*) ADR (yyTComb [  94]) , (*  85*) ADR (yyTComb [  96])
         , (*  86*) ADR (yyTComb [   6]) , (*  87*) ADR (yyTComb [  10])
         , (*  88*) ADR (yyTComb [  70]) , (*  89*) ADR (yyTComb [  99])
         , (*  90*) ADR (yyTComb [ 240]) , (*  91*) ADR (yyTComb [ 257])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [   0])
         , (*  94*) ADR (yyTComb [  72]) , (*  95*) ADR (yyTComb [  73])
         , (*  96*) ADR (yyTComb [ 109]) , (*  97*) ADR (yyTComb [  77])
         , (*  98*) ADR (yyTComb [ 117]) , (*  99*) ADR (yyTComb [  78])
         , (* 100*) ADR (yyTComb [   0]) , (* 101*) ADR (yyTComb [ 107])
         , (* 102*) ADR (yyTComb [ 117]) , (* 103*) ADR (yyTComb [ 126])
         , (* 104*) ADR (yyTComb [   0]) , (* 105*) ADR (yyTComb [   0])
         , (* 106*) ADR (yyTComb [  98]) , (* 107*) ADR (yyTComb [ 133])
         , (* 108*) ADR (yyTComb [   0]) , (* 109*) ADR (yyTComb [   2])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 137])
         , (* 112*) ADR (yyTComb [ 136]) , (* 113*) ADR (yyTComb [ 259])
         , (* 114*) ADR (yyTComb [ 258]) , (* 115*) ADR (yyTComb [  12])
         , (* 116*) ADR (yyTComb [ 112]) , (* 117*) ADR (yyTComb [ 141])
         , (* 118*) ADR (yyTComb [ 141]) , (* 119*) ADR (yyTComb [ 119])
         , (* 120*) ADR (yyTComb [   0]) , (* 121*) ADR (yyTComb [ 153])
         , (* 122*) ADR (yyTComb [ 159]) , (* 123*) ADR (yyTComb [  17])
         , (* 124*) ADR (yyTComb [ 121]) , (* 125*) ADR (yyTComb [ 166])
         , (* 126*) ADR (yyTComb [ 139]) , (* 127*) ADR (yyTComb [ 227])
         , (* 128*) ADR (yyTComb [ 143]) , (* 129*) ADR (yyTComb [ 175])
         , (* 130*) ADR (yyTComb [ 189]) , (* 131*) ADR (yyTComb [ 173])
         , (* 132*) ADR (yyTComb [ 297]) , (* 133*) ADR (yyTComb [ 290])
         , (* 134*) ADR (yyTComb [ 152]) , (* 135*) ADR (yyTComb [ 189])
         , (* 136*) ADR (yyTComb [ 192]) , (* 137*) ADR (yyTComb [ 170])
         , (* 138*) ADR (yyTComb [ 199]) , (* 139*) ADR (yyTComb [  21])
         , (* 140*) ADR (yyTComb [ 184]) , (* 141*) ADR (yyTComb [ 213])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 109])
         , (*   8*) ADR (yyNComb [ 109]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 109])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 109])
         , (*  16*) ADR (yyNComb [ 109]) , (*  17*) ADR (yyNComb [ 109])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 115])
         , (*  20*) ADR (yyNComb [ 130]) , (*  21*) ADR (yyNComb [ 109])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 109])
         , (*  24*) ADR (yyNComb [ 109]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 109]) , (*  27*) ADR (yyNComb [ 109])
         , (*  28*) ADR (yyNComb [ 155]) , (*  29*) ADR (yyNComb [ 116])
         , (*  30*) ADR (yyNComb [ 113]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 109])
         , (*  34*) ADR (yyNComb [ 125]) , (*  35*) ADR (yyNComb [ 112])
         , (*  36*) ADR (yyNComb [ 109]) , (*  37*) ADR (yyNComb [ 113])
         , (*  38*) ADR (yyNComb [ 109]) , (*  39*) ADR (yyNComb [ 113])
         , (*  40*) ADR (yyNComb [ 117]) , (*  41*) ADR (yyNComb [ 111])
         , (*  42*) ADR (yyNComb [ 125]) , (*  43*) ADR (yyNComb [ 120])
         , (*  44*) ADR (yyNComb [ 109]) , (*  45*) ADR (yyNComb [ 111])
         , (*  46*) ADR (yyNComb [ 172]) , (*  47*) ADR (yyNComb [ 125])
         , (*  48*) ADR (yyNComb [ 181]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 109]) , (*  51*) ADR (yyNComb [ 109])
         , (*  52*) ADR (yyNComb [ 182]) , (*  53*) ADR (yyNComb [ 109])
         , (*  54*) ADR (yyNComb [ 113]) , (*  55*) ADR (yyNComb [ 109])
         , (*  56*) ADR (yyNComb [ 139]) , (*  57*) ADR (yyNComb [ 125])
         , (*  58*) ADR (yyNComb [ 128]) , (*  59*) ADR (yyNComb [ 138])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 109])
         , (*  62*) ADR (yyNComb [ 195]) , (*  63*) ADR (yyNComb [ 109])
         , (*  64*) ADR (yyNComb [ 186]) , (*  65*) ADR (yyNComb [ 109])
         , (*  66*) ADR (yyNComb [ 188]) , (*  67*) ADR (yyNComb [ 109])
         , (*  68*) ADR (yyNComb [ 109]) , (*  69*) ADR (yyNComb [ 120])
         , (*  70*) ADR (yyNComb [ 168]) , (*  71*) ADR (yyNComb [ 115])
         , (*  72*) ADR (yyNComb [ 109]) , (*  73*) ADR (yyNComb [ 118])
         , (*  74*) ADR (yyNComb [ 203]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 206]) , (*  77*) ADR (yyNComb [ 116])
         , (*  78*) ADR (yyNComb [ 215]) , (*  79*) ADR (yyNComb [ 197])
         , (*  80*) ADR (yyNComb [ 109]) , (*  81*) ADR (yyNComb [ 109])
         , (*  82*) ADR (yyNComb [ 205]) , (*  83*) ADR (yyNComb [ 195])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 238]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 109]) , (*  89*) ADR (yyNComb [ 109])
         , (*  90*) ADR (yyNComb [ 137]) , (*  91*) ADR (yyNComb [ 253])
         , (*  92*) ADR (yyNComb [ 195]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 190])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 109])
         , (*  98*) ADR (yyNComb [ 109]) , (*  99*) ADR (yyNComb [ 205])
         , (* 100*) ADR (yyNComb [ 110]) , (* 101*) ADR (yyNComb [ 109])
         , (* 102*) ADR (yyNComb [ 110]) , (* 103*) ADR (yyNComb [ 109])
         , (* 104*) ADR (yyNComb [ 220]) , (* 105*) ADR (yyNComb [ 219])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 109])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 109])
         , (* 110*) ADR (yyNComb [ 111]) , (* 111*) ADR (yyNComb [ 109])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 224])
         , (* 114*) ADR (yyNComb [ 260]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 109]) , (* 117*) ADR (yyNComb [ 109])
         , (* 118*) ADR (yyNComb [ 109]) , (* 119*) ADR (yyNComb [ 109])
         , (* 120*) ADR (yyNComb [ 110]) , (* 121*) ADR (yyNComb [ 216])
         , (* 122*) ADR (yyNComb [ 109]) , (* 123*) ADR (yyNComb [ 109])
         , (* 124*) ADR (yyNComb [ 109]) , (* 125*) ADR (yyNComb [ 109])
         , (* 126*) ADR (yyNComb [ 287]) , (* 127*) ADR (yyNComb [ 263])
         , (* 128*) ADR (yyNComb [ 222]) , (* 129*) ADR (yyNComb [ 109])
         , (* 130*) ADR (yyNComb [ 109]) , (* 131*) ADR (yyNComb [ 109])
         , (* 132*) ADR (yyNComb [ 233]) , (* 133*) ADR (yyNComb [ 249])
         , (* 134*) ADR (yyNComb [ 109]) , (* 135*) ADR (yyNComb [ 109])
         , (* 136*) ADR (yyNComb [ 109]) , (* 137*) ADR (yyNComb [ 109])
         , (* 138*) ADR (yyNComb [ 239]) , (* 139*) ADR (yyNComb [ 109])
         , (* 140*) ADR (yyNComb [ 109]) , (* 141*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  126
         , (*   4*)    0 , (*   5*)  102 , (*   6*)  121 , (*   7*)  122
         , (*   8*)   99 , (*   9*)    0 , (*  10*)  113 , (*  11*)  114
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   78 , (*  15*)    0
         , (*  16*)   56 , (*  17*)    0 , (*  18*)    0 , (*  19*)   78
         , (*  20*)   78 , (*  21*)    0 , (*  22*)    0 , (*  23*)    0
         , (*  24*)  128 , (*  25*)    0 , (*  26*)    0 , (*  27*)    0
         , (*  28*)   78 , (*  29*)    0 , (*  30*)   66 , (*  31*)   53
         , (*  32*)    0 , (*  33*)   69 , (*  34*)  128 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)    0 , (*  41*)    0 , (*  42*)   40 , (*  43*)  128
         , (*  44*)    0 , (*  45*)    0 , (*  46*)   78 , (*  47*)    0
         , (*  48*)   66 , (*  49*)   53 , (*  50*)    0 , (*  51*)    0
         , (*  52*)   66 , (*  53*)    0 , (*  54*)   12 , (*  55*)    0
         , (*  56*)    0 , (*  57*)    0 , (*  58*)    0 , (*  59*)  133
         , (*  60*)    0 , (*  61*)    0 , (*  62*)    0 , (*  63*)    0
         , (*  64*)   66 , (*  65*)    0 , (*  66*)   99 , (*  67*)   53
         , (*  68*)    0 , (*  69*)    0 , (*  70*)   71 , (*  71*)    0
         , (*  72*)    0 , (*  73*)    0 , (*  74*)   78 , (*  75*)    0
         , (*  76*)   79 , (*  77*)    0 , (*  78*)   39 , (*  79*)   39
         , (*  80*)    0 , (*  81*)    0 , (*  82*)  128 , (*  83*)  128
         , (*  84*)    0 , (*  85*)    0 , (*  86*)  114 , (*  87*)    0
         , (*  88*)    0 , (*  89*)    0 , (*  90*)    0 , (*  91*)    0
         , (*  92*)   99 , (*  93*)    0 , (*  94*)    0 , (*  95*)    0
         , (*  96*)    0 , (*  97*)    0 , (*  98*)    0 , (*  99*)    0
         , (* 100*)  126 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)  132 , (* 105*)  133 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)  126 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)  138 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    0 , (* 126*)    0 , (* 127*)    0
         , (* 128*)    0 , (* 129*)    0 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)    0 , (* 134*)    0 , (* 135*)    0
         , (* 136*)    0 , (* 137*)    0 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType { 108,  244} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {  36,  156}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  63,   64}
         , (*  10*) yyTCombType {   0,    0} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {  86,  385}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  15,  145}
         , (*  20*) yyTCombType {  24,  341} , (*  21*) yyTCombType {  32,  155}
         , (*  22*) yyTCombType {  34,  270} , (*  23*) yyTCombType {  64,  388}
         , (*  24*) yyTCombType {  68,  168} , (*  25*) yyTCombType {  86,  385}
         , (*  26*) yyTCombType {  18,  365} , (*  27*) yyTCombType {  31,  336}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType {  87,   88}
         , (*  30*) yyTCombType {  93,   94} , (*  31*) yyTCombType { 115,  116}
         , (*  32*) yyTCombType {   1,  268} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType { 109,  110} , (*  35*) yyTCombType {  22,  281}
         , (*  36*) yyTCombType { 123,  124} , (*  37*) yyTCombType {   1,  268}
         , (*  38*) yyTCombType {   2,  100} , (*  39*) yyTCombType { 109,  126}
         , (*  40*) yyTCombType { 139,  140} , (*  41*) yyTCombType {   0,    0}
         , (*  42*) yyTCombType {   0,    0} , (*  43*) yyTCombType {   0,    0}
         , (*  44*) yyTCombType {   0,    0} , (*  45*) yyTCombType {   0,    0}
         , (*  46*) yyTCombType {  25,  333} , (*  47*) yyTCombType {  17,  351}
         , (*  48*) yyTCombType {   0,    0} , (*  49*) yyTCombType {   0,    0}
         , (*  50*) yyTCombType {   0,    0} , (*  51*) yyTCombType {   0,    0}
         , (*  52*) yyTCombType {  18,  365} , (*  53*) yyTCombType {  21,  149}
         , (*  54*) yyTCombType {   0,    0} , (*  55*) yyTCombType {  27,  335}
         , (*  56*) yyTCombType {  29,  337} , (*  57*) yyTCombType {   0,    0}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  188}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {  22,  281}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  17,  351}
         , (*  64*) yyTCombType {  17,  351} , (*  65*) yyTCombType {  35,  368}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  33,   34}
         , (*  68*) yyTCombType {  13,  306} , (*  69*) yyTCombType {   4,  257}
         , (*  70*) yyTCombType {   7,  143} , (*  71*) yyTCombType {  17,  146}
         , (*  72*) yyTCombType {  13,   14} , (*  73*) yyTCombType {  18,  365}
         , (*  74*) yyTCombType {  31,  336} , (*  75*) yyTCombType {  18,  365}
         , (*  76*) yyTCombType {  36,   37} , (*  77*) yyTCombType {  18,  365}
         , (*  78*) yyTCombType {  42,  270} , (*  79*) yyTCombType {  18,   19}
         , (*  80*) yyTCombType {  37,  280} , (*  81*) yyTCombType {  18,  365}
         , (*  82*) yyTCombType {  22,  281} , (*  83*) yyTCombType {  22,   23}
         , (*  84*) yyTCombType {  22,  281} , (*  85*) yyTCombType {  37,  280}
         , (*  86*) yyTCombType {  22,  281} , (*  87*) yyTCombType {  22,  281}
         , (*  88*) yyTCombType {  50,  161} , (*  89*) yyTCombType {  22,  281}
         , (*  90*) yyTCombType {  22,  281} , (*  91*) yyTCombType {  35,   36}
         , (*  92*) yyTCombType {  22,  281} , (*  93*) yyTCombType {  25,  333}
         , (*  94*) yyTCombType {  51,   52} , (*  95*) yyTCombType {  12,   13}
         , (*  96*) yyTCombType {  17,  351} , (*  97*) yyTCombType {  23,  150}
         , (*  98*) yyTCombType {  25,   26} , (*  99*) yyTCombType {  25,  333}
         , (* 100*) yyTCombType {  26,  152} , (* 101*) yyTCombType {  25,  333}
         , (* 102*) yyTCombType {  27,  335} , (* 103*) yyTCombType {  29,  337}
         , (* 104*) yyTCombType {  38,   39} , (* 105*) yyTCombType {  39,   22}
         , (* 106*) yyTCombType {  40,  158} , (* 107*) yyTCombType {  53,  162}
         , (* 108*) yyTCombType {  27,   28} , (* 109*) yyTCombType {  38,  157}
         , (* 110*) yyTCombType {  27,  335} , (* 111*) yyTCombType {  29,   30}
         , (* 112*) yyTCombType {  35,  368} , (* 113*) yyTCombType {  41,   42}
         , (* 114*) yyTCombType {  35,  368} , (* 115*) yyTCombType {  49,  362}
         , (* 116*) yyTCombType {  35,  368} , (* 117*) yyTCombType {  41,  271}
         , (* 118*) yyTCombType {  55,   56} , (* 119*) yyTCombType {  49,  362}
         , (* 120*) yyTCombType {  35,  368} , (* 121*) yyTCombType {  44,  359}
         , (* 122*) yyTCombType {  40,  159} , (* 123*) yyTCombType {  40,  160}
         , (* 124*) yyTCombType {  45,  361} , (* 125*) yyTCombType {  44,  359}
         , (* 126*) yyTCombType {  44,   26} , (* 127*) yyTCombType {  44,  359}
         , (* 128*) yyTCombType {  45,  361} , (* 129*) yyTCombType {  44,  359}
         , (* 130*) yyTCombType {  45,   46} , (* 131*) yyTCombType {  47,  363}
         , (* 132*) yyTCombType {  45,  361} , (* 133*) yyTCombType {  53,  154}
         , (* 134*) yyTCombType {  56,   17} , (* 135*) yyTCombType {  47,  363}
         , (* 136*) yyTCombType {  54,  301} , (* 137*) yyTCombType {  58,  372}
         , (* 138*) yyTCombType {  57,  163} , (* 139*) yyTCombType {  47,   48}
         , (* 140*) yyTCombType {  57,   58} , (* 141*) yyTCombType {  54,  301}
         , (* 142*) yyTCombType {  58,  372} , (* 143*) yyTCombType {  60,   61}
         , (* 144*) yyTCombType {  61,  164} , (* 145*) yyTCombType {  65,   66}
         , (* 146*) yyTCombType {  54,  301} , (* 147*) yyTCombType {  62,  384}
         , (* 148*) yyTCombType {  66,  153} , (* 149*) yyTCombType {  67,  393}
         , (* 150*) yyTCombType {  69,  271} , (* 151*) yyTCombType {  72,  171}
         , (* 152*) yyTCombType {  62,   12} , (* 153*) yyTCombType {  73,  172}
         , (* 154*) yyTCombType {  75,  174} , (* 155*) yyTCombType {  40,  354}
         , (* 156*) yyTCombType {  77,  175} , (* 157*) yyTCombType {  80,  177}
         , (* 158*) yyTCombType {  73,  173} , (* 159*) yyTCombType {  81,  178}
         , (* 160*) yyTCombType {  84,  179} , (* 161*) yyTCombType {  77,  176}
         , (* 162*) yyTCombType {  85,  180} , (* 163*) yyTCombType {  65,  154}
         , (* 164*) yyTCombType {  70,  311} , (* 165*) yyTCombType {  88,   89}
         , (* 166*) yyTCombType {  89,  181} , (* 167*) yyTCombType {  94,  182}
         , (* 168*) yyTCombType {  95,  183} , (* 169*) yyTCombType {  70,  311}
         , (* 170*) yyTCombType {  54,  301} , (* 171*) yyTCombType {  58,  372}
         , (* 172*) yyTCombType {  97,  185} , (* 173*) yyTCombType {  99,  144}
         , (* 174*) yyTCombType {  70,  311} , (* 175*) yyTCombType {  96,  184}
         , (* 176*) yyTCombType { 101,  258} , (* 177*) yyTCombType {  71,  312}
         , (* 178*) yyTCombType {  54,  301} , (* 179*) yyTCombType {  58,  372}
         , (* 180*) yyTCombType {  96,   97} , (* 181*) yyTCombType {  62,   55}
         , (* 182*) yyTCombType {  71,  312} , (* 183*) yyTCombType {  98,  186}
         , (* 184*) yyTCombType {  54,  301} , (* 185*) yyTCombType {  58,  372}
         , (* 186*) yyTCombType { 102,    6} , (* 187*) yyTCombType {  71,  312}
         , (* 188*) yyTCombType {  98,   99} , (* 189*) yyTCombType {  62,  165}
         , (* 190*) yyTCombType {  54,  301} , (* 191*) yyTCombType {  58,  372}
         , (* 192*) yyTCombType { 103,  104} , (* 193*) yyTCombType { 106,  107}
         , (* 194*) yyTCombType {  76,  321} , (* 195*) yyTCombType {  62,  166}
         , (* 196*) yyTCombType {  67,  393} , (* 197*) yyTCombType {  69,  169}
         , (* 198*) yyTCombType {  70,  311} , (* 199*) yyTCombType {  76,  321}
         , (* 200*) yyTCombType { 107,  187} , (* 201*) yyTCombType {  62,  167}
         , (* 202*) yyTCombType { 112,  113} , (* 203*) yyTCombType { 111,  255}
         , (* 204*) yyTCombType {  76,  321} , (* 205*) yyTCombType { 111,  259}
         , (* 206*) yyTCombType {  70,  311} , (* 207*) yyTCombType { 116,  117}
         , (* 208*) yyTCombType { 117,  189} , (* 209*) yyTCombType { 118,  119}
         , (* 210*) yyTCombType {  79,  322} , (* 211*) yyTCombType {  71,  312}
         , (* 212*) yyTCombType {  70,  311} , (* 213*) yyTCombType {  78,   15}
         , (* 214*) yyTCombType { 119,  120} , (* 215*) yyTCombType {  79,  322}
         , (* 216*) yyTCombType { 124,  125} , (* 217*) yyTCombType {  78,   16}
         , (* 218*) yyTCombType {  70,  311} , (* 219*) yyTCombType {  71,  312}
         , (* 220*) yyTCombType {  79,  322} , (* 221*) yyTCombType {  78,  147}
         , (* 222*) yyTCombType {  78,   20} , (* 223*) yyTCombType { 121,  278}
         , (* 224*) yyTCombType { 121,  278} , (* 225*) yyTCombType {  71,  312}
         , (* 226*) yyTCombType {  78,  148} , (* 227*) yyTCombType {  82,  328}
         , (* 228*) yyTCombType {  76,  321} , (* 229*) yyTCombType { 122,  190}
         , (* 230*) yyTCombType { 122,    8} , (* 231*) yyTCombType {  71,  312}
         , (* 232*) yyTCombType {  82,  328} , (* 233*) yyTCombType { 125,  191}
         , (* 234*) yyTCombType { 126,  142} , (* 235*) yyTCombType {  78,   21}
         , (* 236*) yyTCombType {  76,  321} , (* 237*) yyTCombType {  82,  328}
         , (* 238*) yyTCombType { 128,  151} , (* 239*) yyTCombType { 131,  132}
         , (* 240*) yyTCombType {  83,  329} , (* 241*) yyTCombType { 129,  298}
         , (* 242*) yyTCombType {  76,  321} , (* 243*) yyTCombType { 129,  298}
         , (* 244*) yyTCombType {  79,  322} , (* 245*) yyTCombType {  83,  329}
         , (* 246*) yyTCombType { 129,   26} , (* 247*) yyTCombType { 134,  135}
         , (* 248*) yyTCombType {  76,  321} , (* 249*) yyTCombType {  90,  290}
         , (* 250*) yyTCombType {  83,  329} , (* 251*) yyTCombType { 127,  192}
         , (* 252*) yyTCombType {  79,  322} , (* 253*) yyTCombType {  79,  148}
         , (* 254*) yyTCombType {  90,  290} , (* 255*) yyTCombType { 130,  256}
         , (* 256*) yyTCombType { 135,  193} , (* 257*) yyTCombType { 130,  260}
         , (* 258*) yyTCombType {  79,  322} , (* 259*) yyTCombType {  90,  290}
         , (* 260*) yyTCombType { 136,  137} , (* 261*) yyTCombType {  82,  328}
         , (* 262*) yyTCombType {  79,   21} , (* 263*) yyTCombType {  71,  170}
         , (* 264*) yyTCombType {  79,  322} , (* 265*) yyTCombType { 137,  138}
         , (* 266*) yyTCombType {  91,  288} , (* 267*) yyTCombType {  90,  290}
         , (* 268*) yyTCombType { 138,  121} , (* 269*) yyTCombType {  82,  328}
         , (* 270*) yyTCombType {  90,  290} , (* 271*) yyTCombType {  91,  288}
         , (* 272*) yyTCombType { 114,   12} , (* 273*) yyTCombType { 113,  287}
         , (* 274*) yyTCombType {  83,  329} , (* 275*) yyTCombType {  82,  328}
         , (* 276*) yyTCombType {  91,  288} , (* 277*) yyTCombType { 114,  384}
         , (* 278*) yyTCombType { 113,  287} , (* 279*) yyTCombType { 140,  141}
         , (* 280*) yyTCombType { 141,  194} , (* 281*) yyTCombType {  82,  328}
         , (* 282*) yyTCombType {  83,  329} , (* 283*) yyTCombType {  90,  290}
         , (* 284*) yyTCombType {  91,   92} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType { 113,  287} , (* 287*) yyTCombType {  91,   95}
         , (* 288*) yyTCombType {  83,  329} , (* 289*) yyTCombType { 113,  287}
         , (* 290*) yyTCombType {   0,    0} , (* 291*) yyTCombType {  90,  290}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType { 127,  252}
         , (* 294*) yyTCombType {  83,  329} , (* 295*) yyTCombType { 127,  252}
         , (* 296*) yyTCombType {   0,    0} , (* 297*) yyTCombType {  90,  290}
         , (* 298*) yyTCombType {   0,    0} , (* 299*) yyTCombType { 133,  376}
         , (* 300*) yyTCombType {  91,  288} , (* 301*) yyTCombType { 114,   55}
         , (* 302*) yyTCombType { 113,  287} , (* 303*) yyTCombType {  90,  290}
         , (* 304*) yyTCombType { 133,  376} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType { 132,  287} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {  91,  288} , (* 309*) yyTCombType { 114,  165}
         , (* 310*) yyTCombType { 113,  287} , (* 311*) yyTCombType { 132,  287}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType {  91,  288} , (* 315*) yyTCombType { 114,  166}
         , (* 316*) yyTCombType { 113,  287} , (* 317*) yyTCombType {   0,    0}
         , (* 318*) yyTCombType {   0,    0} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {  91,  288} , (* 321*) yyTCombType { 114,  167}
         , (* 322*) yyTCombType { 113,  287} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType { 132,  287} , (* 325*) yyTCombType {   0,    0}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType { 132,  287}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType { 133,  376}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType { 132,  287} , (* 341*) yyTCombType { 133,  376}
         , (* 342*) yyTCombType {   0,    0} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType {   0,    0} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType {   0,    0} , (* 347*) yyTCombType { 133,  376}
         , (* 348*) yyTCombType { 132,  287} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType { 133,  376}
         , (* 354*) yyTCombType { 132,  287} , (* 355*) yyTCombType {   0,    0}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType { 132,  287} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {   0,    0}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {   0,    0}
         , (* 374*) yyTCombType {   0,    0} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType {   0,    0}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {   0,    0} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType {   0,    0}
         , (* 400*) yyTCombType {   0,    0} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  236 , (* 110*)  108 , (* 111*)  237 , (* 112*)  238
         , (* 113*)  239 , (* 114*)  240 , (* 115*)  241 , (* 116*)    4
         , (* 117*)  101 , (* 118*)  111 , (* 119*)    0 , (* 120*)  112
         , (* 121*)  131 , (* 122*)    5 , (* 123*)  102 , (* 124*)  118
         , (* 125*)  136 , (* 126*)  109 , (* 127*)   11 , (* 128*)   87
         , (* 129*)    0 , (* 130*)    9 , (* 131*)  103 , (* 132*)  123
         , (* 133*)  205 , (* 134*)  195 , (* 135*)   50 , (* 136*)   25
         , (* 137*)    7 , (* 138*)  202 , (* 139*)  197 , (* 140*)  198
         , (* 141*)   90 , (* 142*)   38 , (* 143*)  207 , (* 144*)  216
         , (* 145*)  197 , (* 146*)  198 , (* 147*)   44 , (* 148*)   54
         , (* 149*)  219 , (* 150*)  215 , (* 151*)   51 , (* 152*)   25
         , (* 153*)  213 , (* 154*)  214 , (* 155*)   70 , (* 156*)   31
         , (* 157*)  222 , (* 158*)   60 , (* 159*)  206 , (* 160*)  197
         , (* 161*)  198 , (* 162*)   76 , (* 163*)   74 , (* 164*)  225
         , (* 165*)   72 , (* 166*)   73 , (* 167*)   82 , (* 168*)   78
         , (* 169*)  227 , (* 170*)   91 , (* 171*)  200 , (* 172*)   27
         , (* 173*)   29 , (* 174*)  199 , (* 175*)   32 , (* 176*)   33
         , (* 177*)   24 , (* 178*)  196 , (* 179*)   18 , (* 180*)   35
         , (* 181*)  203 , (* 182*)   40 , (* 183*)   24 , (* 184*)  208
         , (* 185*)  197 , (* 186*)  198 , (* 187*)  204 , (* 188*)   27
         , (* 189*)   47 , (* 190*)  228 , (* 191*)   41 , (* 192*)  212
         , (* 193*)   43 , (* 194*)  229 , (* 195*)  230 , (* 196*)   86
         , (* 197*)   45 , (* 198*)   24 , (* 199*)  201 , (* 200*)  209
         , (* 201*)   43 , (* 202*)  197 , (* 203*)  198 , (* 204*)  211
         , (* 205*)  232 , (* 206*)  202 , (* 207*)  202 , (* 208*)   57
         , (* 209*)   18 , (* 210*)   59 , (* 211*)  202 , (* 212*)   40
         , (* 213*)  202 , (* 214*)   63 , (* 215*)  220 , (* 216*)  210
         , (* 217*)   71 , (* 218*)   75 , (* 219*)   73 , (* 220*)   93
         , (* 221*)   62 , (* 222*)   25 , (* 223*)   24 , (* 224*)   49
         , (* 225*)   53 , (* 226*)   96 , (* 227*)  197 , (* 228*)   77
         , (* 229*)   65 , (* 230*)  235 , (* 231*)   67 , (* 232*)   25
         , (* 233*)  197 , (* 234*)  198 , (* 235*)  219 , (* 236*)  197
         , (* 237*)   77 , (* 238*)  105 , (* 239*)  106 , (* 240*)   24
         , (* 241*)   70 , (* 242*)  114 , (* 243*)  222 , (* 244*)  122
         , (* 245*)  197 , (* 246*)  198 , (* 247*)  221 , (* 248*)   76
         , (* 249*)  129 , (* 250*)  225 , (* 251*)  133 , (* 252*)   90
         , (* 253*)   82 , (* 254*)   80 , (* 255*)  227 , (* 256*)   90
         , (* 257*)   84 , (* 258*)   27 , (* 259*)  223 , (* 260*)  224
         , (* 261*)  139 , (* 262*)   79 , (* 263*)   81 , (* 264*)  226
         , (* 265*)   90 , (* 266*)   83 , (* 267*)   85 , (* 268*)   27
         , (* 269*)  134 , (* 270*)   68 , (* 271*)   24 , (* 272*)  242
         , (* 273*)    0 , (* 274*)   69 , (* 275*)  217 , (* 276*)  228
         , (* 277*)  218 , (* 278*)  219 , (* 279*)  115 , (* 280*)  229
         , (* 281*)  230 , (* 282*)   86 , (* 283*)   24 , (* 284*)   70
         , (* 285*)    0 , (* 286*)  222 , (* 287*)  233 , (* 288*)  234
         , (* 289*)    0 , (* 290*)   98 , (* 291*)   76 , (* 292*)    0
         , (* 293*)  225 , (* 294*)  127 , (* 295*)  243 , (* 296*)   82
         , (* 297*)  130 , (* 298*)  227 , (* 299*)    0 , (* 300*)  219
         , (* 301*)  128 , (* 302*)   62 , (* 303*)    0 , (* 304*)    0
         , (* 305*)    0 , (* 306*)   70 , (* 307*)    0 , (* 308*)  222
         , (* 309*)    0 , (* 310*)    0 , (* 311*)    0 , (* 312*)    0
         , (* 313*)   76 , (* 314*)    0 , (* 315*)  225 , (* 316*)    0
         , (* 317*)    0 , (* 318*)   82 , (* 319*)  228 , (* 320*)  227
         , (* 321*)    0 , (* 322*)    0 , (* 323*)  231 , (* 324*)  230
         , (* 325*)    0 , (* 326*)    0 , (* 327*)    0 , (* 328*)    0
         , (* 329*)    0 , (* 330*)    0 , (* 331*)    0 , (* 332*)   62
         , (* 333*)    0 , (* 334*)    0 , (* 335*)    0 , (* 336*)    0
         , (* 337*)    0 , (* 338*)    0 , (* 339*)    0 , (* 340*)    0
         , (* 341*)  228 , (* 342*)    0 , (* 343*)    0 , (* 344*)    0
         , (* 345*)  229 , (* 346*)  230 , (* 347*)   86 , (* 348*)    0
         , (* 349*)    0 , (* 350*)    0 , (* 351*)    0 , (* 352*)    0
         , (* 353*)    0 , (* 354*)    0 , (* 355*)    0 , (* 356*)    0
         , (* 357*)    0 , (* 358*)    0 , (* 359*)    0 , (* 360*)    0
         , (* 361*)    0 , (* 362*)    0 , (* 363*)    0 , (* 364*)    0
         , (* 365*)    0 , (* 366*)    0 , (* 367*)    0 , (* 368*)    0
         , (* 369*)    0 , (* 370*)    0 , (* 371*)    0 , (* 372*)    0
         , (* 373*)    0 , (* 374*)    0 , (* 375*)    0 , (* 376*)    0
         , (* 377*)    0 , (* 378*)    0 , (* 379*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 244(P   1)*)    2 , (*A 245(P   2)*)    1 , (*A 246(P   3)*)    1
         , (*A 247(P   4)*)    1 , (*A 248(P   5)*)    1 , (*A 249(P   6)*)    1
         , (*A 250(P   7)*)    1 , (*A 251(P   8)*)    1 , (*A 252(P   9)*)    1
         , (*A 253(P  10)*)    2 , (*A 254(P  11)*)    1 , (*A 255(P  12)*)    0
         , (*A 256(P  13)*)    0 , (*A 257(P  14)*)    0 , (*A 258(P  15)*)    0
         , (*A 259(P  16)*)    0 , (*A 260(P  17)*)    0 , (*A 261(P  18)*)   10
         , (*A 262(P  19)*)    9 , (*A 263(P  20)*)   11 , (*A 264(P  21)*)   10
         , (*A 265(P  22)*)   10 , (*A 266(P  23)*)   10 , (*A 267(P  24)*)    1
         , (*A 268(P  25)*)    0 , (*A 269(P  26)*)    0 , (*A 270(P  27)*)    1
         , (*A 271(P  28)*)    0 , (*A 272(P  29)*)    1 , (*A 273(P  30)*)    1
         , (*A 274(P  31)*)    3 , (*A 275(P  32)*)    1 , (*A 276(P  33)*)    3
         , (*A 277(P  34)*)    3 , (*A 278(P  35)*)    0 , (*A 279(P  36)*)    3
         , (*A 280(P  37)*)    0 , (*A 281(P  38)*)    1 , (*A 282(P  39)*)    3
         , (*A 283(P  40)*)    1 , (*A 284(P  41)*)    1 , (*A 285(P  42)*)    2
         , (*A 286(P  43)*)    3 , (*A 287(P  44)*)    0 , (*A 288(P  45)*)    0
         , (*A 289(P  46)*)    2 , (*A 290(P  47)*)    0 , (*A 291(P  48)*)    3
         , (*A 292(P  49)*)    1 , (*A 293(P  50)*)    3 , (*A 294(P  51)*)    2
         , (*A 295(P  52)*)    4 , (*A 296(P  53)*)    3 , (*A 297(P  54)*)    1
         , (*A 298(P  55)*)    2 , (*A 299(P  56)*)    3 , (*A 300(P  57)*)    3
         , (*A 301(P  58)*)    2 , (*A 302(P  59)*)    1 , (*A 303(P  60)*)    2
         , (*A 304(P  61)*)    5 , (*A 305(P  62)*)    2 , (*A 306(P  63)*)    0
         , (*A 307(P  64)*)    1 , (*A 308(P  65)*)    1 , (*A 309(P  66)*)    1
         , (*A 310(P  67)*)    2 , (*A 311(P  68)*)    0 , (*A 312(P  69)*)    1
         , (*A 313(P  70)*)    2 , (*A 314(P  71)*)    3 , (*A 315(P  72)*)    1
         , (*A 316(P  73)*)    3 , (*A 317(P  74)*)    1 , (*A 318(P  75)*)    1
         , (*A 319(P  76)*)    1 , (*A 320(P  77)*)    2 , (*A 321(P  78)*)    0
         , (*A 322(P  79)*)    1 , (*A 323(P  80)*)    2 , (*A 324(P  81)*)    3
         , (*A 325(P  82)*)    3 , (*A 326(P  83)*)    1 , (*A 327(P  84)*)    2
         , (*A 328(P  85)*)    0 , (*A 329(P  86)*)    1 , (*A 330(P  87)*)    2
         , (*A 331(P  88)*)    3 , (*A 332(P  89)*)    3 , (*A 333(P  90)*)    1
         , (*A 334(P  91)*)    2 , (*A 335(P  92)*)    0 , (*A 336(P  93)*)    2
         , (*A 337(P  94)*)    0 , (*A 338(P  95)*)    1 , (*A 339(P  96)*)    2
         , (*A 340(P  97)*)    2 , (*A 341(P  98)*)    0 , (*A 342(P  99)*)    2
         , (*A 343(P 100)*)    1 , (*A 344(P 101)*)    3 , (*A 345(P 102)*)    1
         , (*A 346(P 103)*)    3 , (*A 347(P 104)*)    2 , (*A 348(P 105)*)    3
         , (*A 349(P 106)*)    2 , (*A 350(P 107)*)    4 , (*A 351(P 108)*)    1
         , (*A 352(P 109)*)    3 , (*A 353(P 110)*)    1 , (*A 354(P 111)*)    0
         , (*A 355(P 112)*)    1 , (*A 356(P 113)*)    1 , (*A 357(P 114)*)    1
         , (*A 358(P 115)*)    4 , (*A 359(P 116)*)    1 , (*A 360(P 117)*)    2
         , (*A 361(P 118)*)    0 , (*A 362(P 119)*)    2 , (*A 363(P 120)*)    0
         , (*A 364(P 121)*)    2 , (*A 365(P 122)*)    0 , (*A 366(P 123)*)    2
         , (*A 367(P 124)*)    4 , (*A 368(P 125)*)    0 , (*A 369(P 126)*)    4
         , (*A 370(P 127)*)    1 , (*A 371(P 128)*)    5 , (*A 372(P 129)*)    0
         , (*A 373(P 130)*)    1 , (*A 374(P 131)*)    1 , (*A 375(P 132)*)    2
         , (*A 376(P 133)*)    0 , (*A 377(P 134)*)    5 , (*A 378(P 135)*)    1
         , (*A 379(P 136)*)    1 , (*A 380(P 137)*)    1 , (*A 381(P 138)*)    1
         , (*A 382(P 139)*)    1 , (*A 383(P 140)*)    1 , (*A 384(P 141)*)    0
         , (*A 385(P 142)*)    1 , (*A 386(P 143)*)    1 , (*A 387(P 144)*)    2
         , (*A 388(P 145)*)    0 , (*A 389(P 146)*)    2 , (*A 390(P 147)*)    1
         , (*A 391(P 148)*)    3 , (*A 392(P 149)*)    1 , (*A 393(P 150)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 244(P   1)*)  201 , (*A 245(P   2)*)  110 , (*A 246(P   3)*)  110
         , (*A 247(P   4)*)  110 , (*A 248(P   5)*)  110 , (*A 249(P   6)*)  110
         , (*A 250(P   7)*)  110 , (*A 251(P   8)*)  116 , (*A 252(P   9)*)  117
         , (*A 253(P  10)*)  119 , (*A 254(P  11)*)  119 , (*A 255(P  12)*)  120
         , (*A 256(P  13)*)  121 , (*A 257(P  14)*)  122 , (*A 258(P  15)*)  123
         , (*A 259(P  16)*)  124 , (*A 260(P  17)*)  125 , (*A 261(P  18)*)  109
         , (*A 262(P  19)*)  111 , (*A 263(P  20)*)  112 , (*A 264(P  21)*)  113
         , (*A 265(P  22)*)  114 , (*A 266(P  23)*)  115 , (*A 267(P  24)*)  126
         , (*A 268(P  25)*)  126 , (*A 269(P  26)*)  132 , (*A 270(P  27)*)  133
         , (*A 271(P  28)*)  133 , (*A 272(P  29)*)  134 , (*A 273(P  30)*)  135
         , (*A 274(P  31)*)  135 , (*A 275(P  32)*)  136 , (*A 276(P  33)*)  136
         , (*A 277(P  34)*)  137 , (*A 278(P  35)*)  137 , (*A 279(P  36)*)  138
         , (*A 280(P  37)*)  138 , (*A 281(P  38)*)  139 , (*A 282(P  39)*)  139
         , (*A 283(P  40)*)  140 , (*A 284(P  41)*)  140 , (*A 285(P  42)*)  140
         , (*A 286(P  43)*)  127 , (*A 287(P  44)*)  141 , (*A 288(P  45)*)  143
         , (*A 289(P  46)*)  142 , (*A 290(P  47)*)  142 , (*A 291(P  48)*)  144
         , (*A 292(P  49)*)  145 , (*A 293(P  50)*)  145 , (*A 294(P  51)*)  144
         , (*A 295(P  52)*)  146 , (*A 296(P  53)*)  146 , (*A 297(P  54)*)  147
         , (*A 298(P  55)*)  118 , (*A 299(P  56)*)  130 , (*A 300(P  57)*)  131
         , (*A 301(P  58)*)  149 , (*A 302(P  59)*)  148 , (*A 303(P  60)*)  148
         , (*A 304(P  61)*)  150 , (*A 305(P  62)*)  151 , (*A 306(P  63)*)  151
         , (*A 307(P  64)*)  154 , (*A 308(P  65)*)  154 , (*A 309(P  66)*)  155
         , (*A 310(P  67)*)  157 , (*A 311(P  68)*)  156 , (*A 312(P  69)*)  156
         , (*A 313(P  70)*)  158 , (*A 314(P  71)*)  158 , (*A 315(P  72)*)  160
         , (*A 316(P  73)*)  159 , (*A 317(P  74)*)  161 , (*A 318(P  75)*)  161
         , (*A 319(P  76)*)  162 , (*A 320(P  77)*)  164 , (*A 321(P  78)*)  163
         , (*A 322(P  79)*)  163 , (*A 323(P  80)*)  165 , (*A 324(P  81)*)  165
         , (*A 325(P  82)*)  166 , (*A 326(P  83)*)  167 , (*A 327(P  84)*)  169
         , (*A 328(P  85)*)  168 , (*A 329(P  86)*)  168 , (*A 330(P  87)*)  170
         , (*A 331(P  88)*)  170 , (*A 332(P  89)*)  171 , (*A 333(P  90)*)  172
         , (*A 334(P  91)*)  173 , (*A 335(P  92)*)  173 , (*A 336(P  93)*)  174
         , (*A 337(P  94)*)  174 , (*A 338(P  95)*)  153 , (*A 339(P  96)*)  153
         , (*A 340(P  97)*)  153 , (*A 341(P  98)*)  175 , (*A 342(P  99)*)  175
         , (*A 343(P 100)*)  176 , (*A 344(P 101)*)  176 , (*A 345(P 102)*)  177
         , (*A 346(P 103)*)  153 , (*A 347(P 104)*)  153 , (*A 348(P 105)*)  178
         , (*A 349(P 106)*)  179 , (*A 350(P 107)*)  179 , (*A 351(P 108)*)  182
         , (*A 352(P 109)*)  183 , (*A 353(P 110)*)  183 , (*A 354(P 111)*)  185
         , (*A 355(P 112)*)  185 , (*A 356(P 113)*)  185 , (*A 357(P 114)*)  185
         , (*A 358(P 115)*)  184 , (*A 359(P 116)*)  186 , (*A 360(P 117)*)  187
         , (*A 361(P 118)*)  187 , (*A 362(P 119)*)  188 , (*A 363(P 120)*)  188
         , (*A 364(P 121)*)  180 , (*A 365(P 122)*)  180 , (*A 366(P 123)*)  181
         , (*A 367(P 124)*)  181 , (*A 368(P 125)*)  181 , (*A 369(P 126)*)  190
         , (*A 370(P 127)*)  189 , (*A 371(P 128)*)  189 , (*A 372(P 129)*)  191
         , (*A 373(P 130)*)  152 , (*A 374(P 131)*)  152 , (*A 375(P 132)*)  152
         , (*A 376(P 133)*)  192 , (*A 377(P 134)*)  129 , (*A 378(P 135)*)  194
         , (*A 379(P 136)*)  194 , (*A 380(P 137)*)  194 , (*A 381(P 138)*)  194
         , (*A 382(P 139)*)  194 , (*A 383(P 140)*)  194 , (*A 384(P 141)*)  128
         , (*A 385(P 142)*)  128 , (*A 386(P 143)*)  196 , (*A 387(P 144)*)  196
         , (*A 388(P 145)*)  193 , (*A 389(P 146)*)  193 , (*A 390(P 147)*)  197
         , (*A 391(P 148)*)  199 , (*A 392(P 149)*)  198 , (*A 393(P 150)*)  200
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   69 , (*:   5*)   69
         , (*:   6*)   70 , (*:   7*)   70 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   19
         , (*:  12*)   95 , (*:  13*)   68 , (*:  14*)   95
         , (*:  15*)   19 , (*:  16*)   69 , (*:  17*)   70
         , (*:  18*)   19 , (*:  19*)   95 , (*:  20*)   95
         , (*:  21*)   52 , (*:  22*)   19 , (*:  23*)   95
         , (*:  24*)   19 , (*:  25*)   19 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   19
         , (*:  30*)   95 , (*:  31*)   19 , (*:  32*)   19
         , (*:  33*)   19 , (*:  34*)   19 , (*:  35*)   19
         , (*:  36*)    6 , (*:  37*)   71 , (*:  38*)   76
         , (*:  39*)   95 , (*:  40*)   95 , (*:  41*)   70
         , (*:  42*)   70 , (*:  43*)   95 , (*:  44*)   66
         , (*:  45*)   66 , (*:  46*)   95 , (*:  47*)   66
         , (*:  48*)   95 , (*:  49*)   66 , (*:  50*)   70
         , (*:  51*)   68 , (*:  52*)   95 , (*:  53*)   66
         , (*:  54*)    9 , (*:  55*)   95 , (*:  56*)   69
         , (*:  57*)   66 , (*:  58*)    9 , (*:  59*)    9
         , (*:  60*)   95 , (*:  61*)   66 , (*:  62*)    9
         , (*:  63*)    9 , (*:  64*)   19 , (*:  65*)   74
         , (*:  66*)   95 , (*:  67*)   19 , (*:  68*)   19
         , (*:  69*)   19 , (*:  70*)    9 , (*:  71*)    9
         , (*:  72*)   66 , (*:  73*)   68 , (*:  74*)   95
         , (*:  75*)   66 , (*:  76*)    9 , (*:  77*)   68
         , (*:  78*)   95 , (*:  79*)    9 , (*:  80*)   66
         , (*:  81*)   66 , (*:  82*)    9 , (*:  83*)    9
         , (*:  84*)   66 , (*:  85*)   66 , (*:  86*)    9
         , (*:  87*)   19 , (*:  88*)   95 , (*:  89*)   67
         , (*:  90*)    9 , (*:  91*)    9 , (*:  92*)   95
         , (*:  93*)   30 , (*:  94*)   95 , (*:  95*)   95
         , (*:  96*)   66 , (*:  97*)   95 , (*:  98*)   66
         , (*:  99*)   95 , (*: 100*)   95 , (*: 101*)   69
         , (*: 102*)   69 , (*: 103*)   66 , (*: 104*)    9
         , (*: 105*)    9 , (*: 106*)   95 , (*: 107*)   67
         , (*: 108*)    0 , (*: 109*)   32 , (*: 110*)   95
         , (*: 111*)   66 , (*: 112*)   66 , (*: 113*)   14
         , (*: 114*)   19 , (*: 115*)   19 , (*: 116*)   95
         , (*: 117*)   67 , (*: 118*)   68 , (*: 119*)   95
         , (*: 120*)   69 , (*: 121*)   70 , (*: 122*)   70
         , (*: 123*)   19 , (*: 124*)   95 , (*: 125*)   67
         , (*: 126*)   95 , (*: 127*)   66 , (*: 128*)   95
         , (*: 129*)   66 , (*: 130*)   66 , (*: 131*)   66
         , (*: 132*)    9 , (*: 133*)    9 , (*: 134*)   95
         , (*: 135*)   67 , (*: 136*)   68 , (*: 137*)   95
         , (*: 138*)   69 , (*: 139*)   19 , (*: 140*)   95
         , (*: 141*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 142)*)  251 (*P7*) , (*RR: 143)*)  299 (*P55*)
         , (*RR: 144)*)  272 (*P28*) , (*RR: 145)*)  340 (*P96*)
         , (*RR: 146)*)  349 (*P105*) , (*RR: 147)*)  345 (*P101*)
         , (*RR: 148)*)  284 (*P40*) , (*RR: 149)*)  285 (*P41*)
         , (*RR: 150)*)  282 (*P38*) , (*RR: 151)*)  275 (*P31*)
         , (*RR: 152)*)  276 (*P32*) , (*RR: 153)*)  374 (*P130*)
         , (*RR: 154)*)  375 (*P131*) , (*RR: 155)*)  346 (*P102*)
         , (*RR: 156)*)  366 (*P122*) , (*RR: 157)*)  367 (*P123*)
         , (*RR: 158)*)  357 (*P113*) , (*RR: 159)*)  355 (*P111*)
         , (*RR: 160)*)  356 (*P112*) , (*RR: 161)*)  350 (*P106*)
         , (*RR: 162)*)  304 (*P60*) , (*RR: 163)*)  370 (*P126*)
         , (*RR: 164)*)  371 (*P127*) , (*RR: 165)*)  319 (*P75*)
         , (*RR: 166)*)  309 (*P65*) , (*RR: 167)*)  326 (*P82*)
         , (*RR: 168)*)  377 (*P133*) , (*RR: 169)*)  270 (*P26*)
         , (*RR: 170)*)  315 (*P71*) , (*RR: 171)*)  314 (*P70*)
         , (*RR: 172)*)  307 (*P63*) , (*RR: 173)*)  308 (*P64*)
         , (*RR: 174)*)  313 (*P69*) , (*RR: 175)*)  317 (*P73*)
         , (*RR: 176)*)  318 (*P74*) , (*RR: 177)*)  324 (*P80*)
         , (*RR: 178)*)  323 (*P79*) , (*RR: 179)*)  331 (*P87*)
         , (*RR: 180)*)  330 (*P86*) , (*RR: 181)*)  263 (*P19*)
         , (*RR: 182)*)  295 (*P51*) , (*RR: 183)*)  292 (*P48*)
         , (*RR: 184)*)  291 (*P47*) , (*RR: 185)*)  293 (*P49*)
         , (*RR: 186)*)  294 (*P50*) , (*RR: 187)*)  264 (*P20*)
         , (*RR: 188)*)  267 (*P23*) , (*RR: 189)*)  261 (*P17*)
         , (*RR: 190)*)  300 (*P56*) , (*RR: 191)*)  265 (*P21*)
         , (*RR: 192)*)  297 (*P53*) , (*RR: 193)*)  262 (*P18*)
         , (*RR: 194)*)  266 (*P22*) , (*RR: 195)*)  277 (*P33*)
         , (*RR: 196)*)  347 (*P103*) , (*RR: 197)*)  283 (*P39*)
         , (*RR: 198)*)  338 (*P94*) , (*RR: 199)*)  339 (*P95*)
         , (*RR: 200)*)  343 (*P99*) , (*RR: 201)*)  334 (*P90*)
         , (*RR: 202)*)  373 (*P129*) , (*RR: 203)*)  332 (*P88*)
         , (*RR: 204)*)  344 (*P100*) , (*RR: 205)*)  342 (*P98*)
         , (*RR: 206)*)  364 (*P120*) , (*RR: 207)*)  279 (*P35*)
         , (*RR: 208)*)  348 (*P104*) , (*RR: 209)*)  352 (*P108*)
         , (*RR: 210)*)  360 (*P116*) , (*RR: 211)*)  358 (*P114*)
         , (*RR: 212)*)  353 (*P109*) , (*RR: 213)*)  305 (*P61*)
         , (*RR: 214)*)  303 (*P59*) , (*RR: 215)*)  302 (*P58*)
         , (*RR: 216)*)  389 (*P145*) , (*RR: 217)*)  390 (*P146*)
         , (*RR: 218)*)  392 (*P148*) , (*RR: 219)*)  378 (*P134*)
         , (*RR: 220)*)  310 (*P66*) , (*RR: 221)*)  316 (*P72*)
         , (*RR: 222)*)  379 (*P135*) , (*RR: 223)*)  325 (*P81*)
         , (*RR: 224)*)  320 (*P76*) , (*RR: 225)*)  383 (*P139*)
         , (*RR: 226)*)  327 (*P83*) , (*RR: 227)*)  381 (*P137*)
         , (*RR: 228)*)  382 (*P138*) , (*RR: 229)*)  386 (*P142*)
         , (*RR: 230)*)  380 (*P136*) , (*RR: 231)*)  387 (*P143*)
         , (*RR: 232)*)  369 (*P125*) , (*RR: 233)*)  286 (*P42*)
         , (*RR: 234)*)  289 (*P45*) , (*RR: 235)*)  296 (*P52*)
         , (*RR: 236)*)  245 (*P1*) , (*RR: 237)*)  246 (*P2*)
         , (*RR: 238)*)  247 (*P3*) , (*RR: 239)*)  248 (*P4*)
         , (*RR: 240)*)  249 (*P5*) , (*RR: 241)*)  250 (*P6*)
         , (*RR: 242)*)  253 (*P9*) , (*RR: 243)*)  254 (*P10*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkReservedId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 70 "FM3Parser.lalr" *)
 TYPE Sk = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Uk = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSUnnestCoord        : LONGINT; 
      yyPrereduceUnnestCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*                     PushUnnestStk (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*              PushUnnestStk (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceUnnestCoord := UnnestCoord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 244 => (* P1 _0000_ (201): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 245,236 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 246,237 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 247,238 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 248,239 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 249,240 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 250,241 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 251,142 => (* P8 UnitId (116): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 116;
                (* line 263 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                
                (* IF FM3ParsePass . DeclIdL2R ( Itk . ItkUnitId , yyAttributeStack^[yyStackPtr+1] )
                       THEN yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       ELSE yySynAttribute . Scan . SaAtom := FM3Base . AtomNull ;
                       END (*IF*) ;
                *)
                       FM3Units . UnitStackTopRef ^ . UntUnitIdAtom := yySynAttribute . Scan . SaAtom ;
                     
              | 252 => (* P9 UnitIdImpliedEXPORTS (117): UnitId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 275 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       (* Synthesize EXPORTS <self>. *) 
                       Push_LIP ( Itk . ItkExportIdListLt , 1 , yyAttributeStack^[yyStackPtr+1] . Scan . Position )  ; 
                       Push_LIP
                         ( Itk . ItkExportIdListLt + Itk . LtToListElem
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                       Push_LIP ( Itk . ItkExportIdListRt , 1 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 253,242 => (* P10 UnitIdAndExports (119): UnitId Exports .*)
                DEC (yyStackPtr, 2); yyNonterminal := 119;
                (* line 287 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
              | 254,243 => (* P11 UnitIdAndExports (119): UnitIdImpliedEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 119;
                (* line 290 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
              | 255 => (* P12 InterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 293 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInterface ; 
              | 256 => (* P13 ModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 296 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkModule ; 
              | 257 => (* P14 GenInterfaceKind (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 299 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenInterface ; 
              | 258 => (* P15 GenModuleKind (123): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 123;
                (* line 302 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenModule ; 
              | 259 => (* P16 InstInterfaceKind (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;
                (* line 305 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstInterface ; 
              | 260 => (* P17 InstModuleKind (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 308 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstModule ; 
              | 261,189 => (* P18 Interface (109): OptUnsafe StkRwINTERFACE UnitId InterfaceKind StkSemicolon Imports BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 109;

              | 262,193 => (* P19 Module (111): OptUnsafe StkRwMODULE UnitIdAndExports ModuleKind StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;

              | 263,181 => (* P20 GenInterface (112): StkRwGENERIC StkRwINTERFACE UnitId GenInterfaceKind GenFormalList StkSemicolon Imports BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 112;

              | 264,187 => (* P21 GenModule (113): StkRwGENERIC StkRwMODULE UnitId GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 113;

              | 265,191 => (* P22 InstInterface (114): OptUnsafe StkRwINTERFACE UnitId InstInterfaceKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 114;

              | 266,194 => (* P23 InstModule (115): OptUnsafe StkRwMODULE UnitIdAndExports InstModuleKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 115;

              | 267,188 => (* P24 OptUnsafe (126): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 126;
                (* line 334 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 268 => (* P25 OptUnsafe (126): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 126;
                (* line 335 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 269 => (* P26 CaptureCoord (132): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 132;
                (* line 338 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 270,169 => (* P27 OptSemicolon (133): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 133;

              | 271 => (* P28 OptSemicolon (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;

              | 272,144 => (* P29 IdentRef (134): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 134;
                (* line 346 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 273 => (* P30 IdPlusList (135): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;
                (* line 350 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 274 => (* P31 IdPlusList (135): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 354 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 275,151 => (* P32 DeclIdListElems (136): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;
                (* line 366 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3ParsePass . DeclIdL2R
                                  ( FM3Decls . TopDeclInfo ( ) . DiIdTok 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 276,152 => (* P33 DeclIdListElems (136): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 377 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . DeclIdL2R
                            ( FM3Decls . TopDeclInfo ( ) . DiIdTok
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 277,195 => (* P34 IdStarList (137): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 390 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 278 => (* P35 IdStarList (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 392 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 279,207 => (* P36 QualIdStarList (138): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 396 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 280 => (* P37 QualIdStarList (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 398 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 281 => (* P38 QualId (139): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;
                (* line 401 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 282,150 => (* P39 QualId (139): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;
                (* line 404 of "FM3Parser.lalr" *)
                 FM3ParsePass . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 283,197 => (* P40 TypeId (140): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;

              | 284,148 => (* P41 TypeId (140): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 413 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 285,149 => (* P42 TypeId (140): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 140;
                (* line 418 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidUNTRACEDROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 286,233 => (* P43 Imports (127): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 425 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 287 => (* P44 ImportsLt (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 428 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 288 => (* P45 ImportsRt (143): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 143;
                (* line 429 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 289,234 => (* P46 ImportsRecurse (142): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 142;
                (* line 431 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 290 => (* P47 ImportsRecurse (142): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 142;
                (* line 435 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 291,184 => (* P48 ImportItem (144): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 441 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 292,183 => (* P49 ImportIntfPlusList (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 445 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 293,185 => (* P50 ImportIntfPlusList (145): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 457 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 294,186 => (* P51 ImportItem (144): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 144;
                (* line 471 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 295,182 => (* P52 FromImportPlusList (146): StkRwFROM IdentRef StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 146;
                (* line 475 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 296,235 => (* P53 FromImportPlusList (146): FromImportPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 498 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 297,192 => (* P54 ExportsLt (147): StkRwEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 541 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* Although an export list is not exactly a scope, we use the scope
                          and DeclInfo mechanisms to check reserved and duplicated idents.
                          ScopeRtL2R will handle the legal ones specially.
                       *)
                       yySynAttribute . PaConstructNo 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkExports , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^Because ScopeLtL2R Pushes a token, thus changing UnnestCoord. *) 
                       yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkNull
                                  , DiIdListTok := Itk . ItkExportIdListLt 
                                  , DiIdTok := Itk . ItkExportIdListLt + Itk . LtToListElem
                                  , DiIdSepTok := Itk . ItkExportIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkExports 
                                  }
                              ) ;
                     
                     
              | 298 => (* P55 Exports (118): ExportsLt DeclIdListElems .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;
                (* line 565 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0 (* Some valid idents. *)
                       THEN 
                         MakeListPos (* The identifier list. *) 
                           ( yySynAttribute
                           , Itk . ItkExportIdListLt
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                           ) ; 
                       END (*IF*) ;
                       <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt (* Scope No. *) *>
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                     
              | 299,143 => (* P56 GenFormalList (130): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 130;
                (* line 582 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 300,190 => (* P57 GenActualList (131): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 588 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 301 => (* P58 ConstDeclGroup (149): StkRwCONST ConstDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 149;

              | 302,215 => (* P59 ConstDecls (148): ConstDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;

              | 303,214 => (* P60 ConstDecls (148): ConstDecls ConstDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;

              | 304,162 => (* P61 ConstDecl (150): StkIdent OptConstType StkEqual Expr StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 150;

              | 305,213 => (* P62 OptConstType (151): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 599 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 306 => (* P63 OptConstType (151): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 151;
                (* line 601 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 307,172 => (* P64 TypeRelation (154): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 605 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 308,173 => (* P65 TypeRelation (154): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 607 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 309,166 => (* P66 TypeDeclGroupLt (155): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 618 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 310,220 => (* P67 TypeDeclGroup (157): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 621 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 311 => (* P68 TypeDeclList (156): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 156;
                (* line 626 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 312 => (* P69 TypeDeclList (156): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 632 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 313,174 => (* P70 TypeDeclPlus (158): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 637 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 314,171 => (* P71 TypeDeclPlus (158): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 642 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 315,170 => (* P72 TypeDeclId (160): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 658 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 316,221 => (* P73 TypeDecl (159): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 665 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         Push_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         Push_LCIri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 317,175 => (* P74 RevelationRelation (161): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 685 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 318,176 => (* P75 RevelationRelation (161): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 687 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 319,165 => (* P76 RevelationGroupLt (162): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 698 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 320,224 => (* P77 RevelationGroup (164): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 164;
                (* line 701 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 321 => (* P78 RevelationList (163): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 163;
                (* line 706 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 322 => (* P79 RevelationList (163): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 712 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 323,178 => (* P80 RevelationPlus (165): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 324,177 => (* P81 RevelationPlus (165): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 165;
                (* line 722 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 325,223 => (* P82 Revelation (166): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 166;
                (* line 738 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       Push_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 326,167 => (* P83 VarDeclGroupLt (167): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 765 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 327,226 => (* P84 VarDeclGroup (169): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 169;
                (* line 779 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 328 => (* P85 VarDeclList (168): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 168;
                (* line 785 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                        (*Push_LIP_rip
                          ( Itk . ItkVarDeclListLt , 0 , FM3Scanner . Attribute . Position ) ;
                        *)
                      
              | 329 => (* P86 VarDeclList (168): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 794 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 330,180 => (* P87 VarDeclPlus (170): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 170;
                (* line 807 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 331,179 => (* P88 VarDeclPlus (170): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 170;
                (* line 812 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 332,203 => (* P89 VarDecl (171): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 171;
                (* line 830 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           Push_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         Push_LCIri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 333 => (* P90 VarDeclIds (172): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 858 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 334,201 => (* P91 OptDeclType (173): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 173;
                (* line 870 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 335 => (* P92 OptDeclType (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 874 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 336 => (* P93 OptDeclValue (174): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 878 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 337 => (* P94 OptDeclValue (174): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 174;
                (* line 882 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 338,198 => (* P95 Type (153): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 339,199 => (* P96 Type (153): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 891 of "FM3Parser.lalr" *)
                 Push_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 340,145 => (* P97 Type (153): StkRwOBJECT StkRwEND .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;

              | 341 => (* P98 FieldDeclList (175): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 175;
                (* line 905 of "FM3Parser.lalr" *)
                 Push_LIP_rip
                          ( Itk . ItkFieldDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                      
              | 342,205 => (* P99 FieldDeclList (175): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 910 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 343,200 => (* P100 FieldDeclPlus (176): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 919 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 344,204 => (* P101 FieldDeclPlus (176): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 922 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       Push_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 345,147 => (* P102 RecTypeLt (177): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 934 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo  
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkRec , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkFieldDeclLt
                                  , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkRecField 
                                  }
                              ) ;
                     
              | 346,155 => (* P103 Type (153): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 951 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCIP_rip
                         ( Itk . ItkRecDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                       <* ASSERT FM3Decls . PopDeclInfo ( )
                                 = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *) *> 
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                     
              | 347,196 => (* P104 Type (153): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 965 of "FM3Parser.lalr" *)
                 Push_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 348,208 => (* P105 Signature (178): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 178;
                (* line 971 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Has result type *) 
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         Push_LCP_rp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 349,146 => (* P106 Formals (179): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 987 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := 0 ; 
                       FM3ParsePass . ScopeEmpty ( Sk . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 350,161 => (* P107 Formals (179): FormalsLt FormalPlus OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 4); yyNonterminal := 179;
                (* line 993 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes. *) 
                     
              | 351 => (* P108 FormalsLt (182): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1001 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaConstructNo 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkFormals , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^ScopeLtL2R Pushes a token and changes UnnestCoord. *) 
                     
              | 352,209 => (* P109 FormalPlus (183): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 183;
                (* line 1009 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       Push_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 353,212 => (* P110 FormalPlus (183): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 183;
                (* line 1018 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 354 => (* P111 FormalLt (185): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 185;
                (* line 1022 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 355,159 => (* P112 FormalLt (185): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 185;
                (* line 1037 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 356,160 => (* P113 FormalLt (185): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 185;
                (* line 1053 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 357,158 => (* P114 FormalLt (185): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 185;
                (* line 1067 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 358,211 => (* P115 Formal (184): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 184;
                (* line 1084 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                       DO (* Do these checks  even if no valid ids. *)
                         VAR LOk := TRUE ; 
                         BEGIN 
                           IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                           THEN
                             IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                             THEN
                               FM3Messages . ErrorArr
                                 ( ARRAY OF REFANY 
                                     { " VAR formal must have a type (2.2.8)." } 
                                 , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                                 ) ;
                               LOk := FALSE ; 
                (* FIXME: Arrange to skip the FormalExpr, if any. *) 
                             END (*IF*) ; 
                             IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                             THEN
                               FM3Messages . ErrorArr
                                 ( ARRAY OF REFANY 
                                     { " VAR formal cannot have a default expression (2.2.8)." }
                                 , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                 ) ;
                               LOk := FALSE ; 
                (* FIXME: Arrange to skip the FormalExpr, if any. *) 
                             END (*IF*) ;
                           ELSE (* VALUE or READONLY *)  
                             LOk := FM3ParsePass . RequireTypeAndOrValue
                                      ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                           END (*IF*) ;
                
                           IF yyAttributeStack^[yyStackPtr+2] . PaInt < 0 (* FormalIds calls for skipping the decl? *)
                           THEN 
                             yySynAttribute . PaInt := 0 ;
                             <* ASSERT FM3ParsePass . StopSkipping0 ( ) = - yyAttributeStack^[yyStackPtr+2] . PaInt *>
                           ELSIF FM3ParsePass . SkipDepth > 0
                                 (* Skipping some containing construct? *)
                           THEN (* No output. *) 
                             yySynAttribute . PaInt := 0 ;
                           ELSIF NOT LOk 
                           THEN (* Everything was empty anyway.  No output. *) 
                             yySynAttribute . PaInt := 0 ;
                           ELSE 
                             yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                             Push_LCP_eCP_zCP_rP 
                               ( WDeclInfo . DiDeclTok 
                               , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                               , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                               ) ;
                           END (*WITH*) 
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 359 => (* P116 FormalIds (186): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;
                (* line 1147 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt = 0 (* No valid ids. *)
                       THEN (* Start skipping this formal. *) 
                         yySynAttribute . PaInt (* Negative Skipping depth. *) 
                           := - FM3ParsePass . StartSkipping0 ( ) ;
                       ELSE
                         yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                         MakeListPos
                           ( yySynAttribute
                           , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                           ) ; 
                       END (*IF*) ;
                     
              | 360,210 => (* P117 FormalType (187): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1165 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       Push_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 361 => (* P118 FormalType (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1174 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 362 => (* P119 FormalExpr (188): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 188;
                (* line 1182 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       Push_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 363 => (* P120 FormalExpr (188): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 188;
                (* line 1191 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 364,206 => (* P121 ResultType (180): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1199 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 365 => (* P122 ResultType (180): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 180;
                (* line 1205 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
                     
              | 366,156 => (* P123 Raises (181): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 181;
                (* line 1214 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkRaisesANY ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 367,157 => (* P124 Raises (181): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 181;
                (* line 1221 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 368 => (* P125 Raises (181): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 181;
                (* line 1226 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *);
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkRaisesSetAbsent , FM3Scanner . Attribute . Position ); 
                     
              | 369,232 => (* P126 ProcDecl (190): StkRwPROCEDURE StkIdent Signature OptBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 190;
                (* line 1235 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Units . UnitStackTopRef ^ . UntKind OF 
                         | Uk . UkInterface 
                         , Uk . UkGenInterface  
                         , Uk . UkInstInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY 
                                  { " A procedure in an interface must not have a body (2.5.2)." }
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                );  
                
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | Uk . UkModule  
                         , Uk . UkGenModule  
                         , Uk . UkInstModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY
                                    { " A procedure in a module must have a body (2.5)." } 
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         END (*CASE*);
                         Push_LCIri ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord, yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ); 
                       END (*Block*) 
                     
              | 370,163 => (* P127 OptBody (189): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 189;
                (* line 1274 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LP ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 371,164 => (* P128 OptBody (189): StkEqual ProcBodyScopeLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 189;
                (* line 1280 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                       yySynAttribute . PaConstructNo := yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkProcBodyLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+2] . PaConstructNo ) ; 
                     
              | 372 => (* P129 ProcBodyScopeLt (191): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 191;
                (* line 1288 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkProcBody , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                    (* ^ScopeLtL2R Pushes a token and changes UnnestCoord. *) 
                     
              | 373,202 => (* P130 Expr (152): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 374,153 => (* P131 Expr (152): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 375,154 => (* P132 Expr (152): Expr StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 152;

              | 376 => (* P133 BlockLt (192): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 192;
                (* line 1307 of "FM3Parser.lalr" *)
                 yySynAttribute . PaConstructNo
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkBlock , FM3Scanner . Attribute . Position ) ;
                       Push_LIP
                         ( Itk . ItkBlockLt
                         , yySynAttribute . PaConstructNo
                         , FM3Scanner . Attribute . Position
                         ); 
                     
              | 377,168 => (* P134 Block (129): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 129;
                (* line 1318 of "FM3Parser.lalr" *)
                 FM3ParsePass . ScopeRtL2R ( yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ; 
                       Push_ECIP_riP
                         ( Itk . ItkBlockLt
                         , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . PaConstructNo 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 378,219 => (* P135 BlockDecl (194): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1331 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 379,222 => (* P136 BlockDecl (194): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1335 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 380,230 => (* P137 BlockDecl (194): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1339 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 381,227 => (* P138 BlockDecl (194): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1343 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 382,228 => (* P139 BlockDecl (194): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1347 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 383,225 => (* P140 BlockDecl (194): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 194;
                (* line 1351 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 384 => (* P141 BlockDeclList (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 1359 of "FM3Parser.lalr" *)
                 Push_LIP_rip
                         ( Itk . ItkBlockDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                     
              | 385 => (* P142 BlockDeclList (128): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 128;
                (* line 1364 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 386,229 => (* P143 BlockDeclPlus (196): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 196;
                (* line 1373 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 387,231 => (* P144 BlockDeclPlus (196): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 196;
                (* line 1378 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 388 => (* P145 StmtList (193): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 193;
                (* line 1397 of "FM3Parser.lalr" *)
                 Push_LIP_rip
                         ( Itk . ItkStmtListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                     
              | 389,216 => (* P146 StmtList (193): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 193;
                (* line 1402 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 390,217 => (* P147 StmtPlus (197): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 197;
                (* line 1410 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 391 => (* P148 StmtPlusList (199): StmtPlusList StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 199;
                (* line 1413 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       Push_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 392,218 => (* P149 Stmt (198): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 198;

              | 393 => (* P150 AssignStmt (200): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 200;
                (* line 1427 of "FM3Parser.lalr" *)
                 Push_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := yyPrereduceUnnestCoord; 
                   ELSE WParsAttr . PaUnnestCoord := yyRHSUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*            PushUnnestStk (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 87 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 90 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

