
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT IntSets;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2025 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 286;
   yyTableMax               = 1416;
   yyNTableMax              = 1437;
   yyFirstReadState         = 1;
   yyLastReadState          = 214;
   yyFirstReadTermState             = 215;
   yyLastReadTermState              = 312;
   yyLastReadNontermState           = 431;
   yyFirstReduceState               = 432;
   yyLastReduceState                = 729;
   yyStartState             = 1;
   yyStopState              = 432;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   1])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   2])
         , (*  12*) ADR (yyTComb [   3]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   4]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   5]) , (*  31*) ADR (yyTComb [   3])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  10]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [   4]) , (*  37*) ADR (yyTComb [   0])
         , (*  38*) ADR (yyTComb [  16]) , (*  39*) ADR (yyTComb [   0])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [  68]) , (*  45*) ADR (yyTComb [   5])
         , (*  46*) ADR (yyTComb [  12]) , (*  47*) ADR (yyTComb [  31])
         , (*  48*) ADR (yyTComb [ 109]) , (*  49*) ADR (yyTComb [   9])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [ 167])
         , (*  52*) ADR (yyTComb [ 239]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [ 311]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [ 383]) , (*  57*) ADR (yyTComb [ 471])
         , (*  58*) ADR (yyTComb [   0]) , (*  59*) ADR (yyTComb [ 559])
         , (*  60*) ADR (yyTComb [ 647]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [ 749]) , (*  63*) ADR (yyTComb [  24])
         , (*  64*) ADR (yyTComb [  56]) , (*  65*) ADR (yyTComb [ 851])
         , (*  66*) ADR (yyTComb [   0]) , (*  67*) ADR (yyTComb [ 953])
         , (*  68*) ADR (yyTComb [   0]) , (*  69*) ADR (yyTComb [  34])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [  47])
         , (*  72*) ADR (yyTComb [  14]) , (*  73*) ADR (yyTComb [  15])
         , (*  74*) ADR (yyTComb [1041]) , (*  75*) ADR (yyTComb [  10])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [  10])
         , (*  78*) ADR (yyTComb [   1]) , (*  79*) ADR (yyTComb [   0])
         , (*  80*) ADR (yyTComb [  43]) , (*  81*) ADR (yyTComb [  49])
         , (*  82*) ADR (yyTComb [  56]) , (*  83*) ADR (yyTComb [ 157])
         , (*  84*) ADR (yyTComb [  25]) , (*  85*) ADR (yyTComb [ 425])
         , (*  86*) ADR (yyTComb [  26]) , (*  87*) ADR (yyTComb [  57])
         , (*  88*) ADR (yyTComb [   0]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [1137]) , (*  91*) ADR (yyTComb [ 846])
         , (*  92*) ADR (yyTComb [   1]) , (*  93*) ADR (yyTComb [   4])
         , (*  94*) ADR (yyTComb [   2]) , (*  95*) ADR (yyTComb [   0])
         , (*  96*) ADR (yyTComb [   0]) , (*  97*) ADR (yyTComb [   0])
         , (*  98*) ADR (yyTComb [  52]) , (*  99*) ADR (yyTComb [  54])
         , (* 100*) ADR (yyTComb [  61]) , (* 101*) ADR (yyTComb [  38])
         , (* 102*) ADR (yyTComb [   1]) , (* 103*) ADR (yyTComb [ 240])
         , (* 104*) ADR (yyTComb [ 257]) , (* 105*) ADR (yyTComb [ 169])
         , (* 106*) ADR (yyTComb [ 282]) , (* 107*) ADR (yyTComb [   0])
         , (* 108*) ADR (yyTComb [   2]) , (* 109*) ADR (yyTComb [ 109])
         , (* 110*) ADR (yyTComb [  11]) , (* 111*) ADR (yyTComb [   3])
         , (* 112*) ADR (yyTComb [   5]) , (* 113*) ADR (yyTComb [1146])
         , (* 114*) ADR (yyTComb [  12]) , (* 115*) ADR (yyTComb [ 188])
         , (* 116*) ADR (yyTComb [   3]) , (* 117*) ADR (yyTComb [ 142])
         , (* 118*) ADR (yyTComb [ 139]) , (* 119*) ADR (yyTComb [  66])
         , (* 120*) ADR (yyTComb [ 168]) , (* 121*) ADR (yyTComb [   4])
         , (* 122*) ADR (yyTComb [ 119]) , (* 123*) ADR (yyTComb [   5])
         , (* 124*) ADR (yyTComb [  68]) , (* 125*) ADR (yyTComb [   0])
         , (* 126*) ADR (yyTComb [   6]) , (* 127*) ADR (yyTComb [ 147])
         , (* 128*) ADR (yyTComb [ 458]) , (* 129*) ADR (yyTComb [ 137])
         , (* 130*) ADR (yyTComb [  63]) , (* 131*) ADR (yyTComb [  65])
         , (* 132*) ADR (yyTComb [ 153]) , (* 133*) ADR (yyTComb [  51])
         , (* 134*) ADR (yyTComb [   7]) , (* 135*) ADR (yyTComb [   0])
         , (* 136*) ADR (yyTComb [  81]) , (* 137*) ADR (yyTComb [ 377])
         , (* 138*) ADR (yyTComb [1175]) , (* 139*) ADR (yyTComb [ 116])
         , (* 140*) ADR (yyTComb [ 146]) , (* 141*) ADR (yyTComb [ 154])
         , (* 142*) ADR (yyTComb [   0]) , (* 143*) ADR (yyTComb [ 122])
         , (* 144*) ADR (yyTComb [ 148]) , (* 145*) ADR (yyTComb [   0])
         , (* 146*) ADR (yyTComb [ 159]) , (* 147*) ADR (yyTComb [ 751])
         , (* 148*) ADR (yyTComb [1178]) , (* 149*) ADR (yyTComb [ 162])
         , (* 150*) ADR (yyTComb [ 171]) , (* 151*) ADR (yyTComb [   0])
         , (* 152*) ADR (yyTComb [ 165]) , (* 153*) ADR (yyTComb [ 753])
         , (* 154*) ADR (yyTComb [   3]) , (* 155*) ADR (yyTComb [ 172])
         , (* 156*) ADR (yyTComb [ 246]) , (* 157*) ADR (yyTComb [ 955])
         , (* 158*) ADR (yyTComb [ 166]) , (* 159*) ADR (yyTComb [ 176])
         , (* 160*) ADR (yyTComb [1208]) , (* 161*) ADR (yyTComb [1225])
         , (* 162*) ADR (yyTComb [ 181]) , (* 163*) ADR (yyTComb [ 183])
         , (* 164*) ADR (yyTComb [ 218]) , (* 165*) ADR (yyTComb [ 749])
         , (* 166*) ADR (yyTComb [   0]) , (* 167*) ADR (yyTComb [ 184])
         , (* 168*) ADR (yyTComb [   0]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [   0]) , (* 171*) ADR (yyTComb [   8])
         , (* 172*) ADR (yyTComb [ 177]) , (* 173*) ADR (yyTComb [   0])
         , (* 174*) ADR (yyTComb [1209]) , (* 175*) ADR (yyTComb [  19])
         , (* 176*) ADR (yyTComb [1236]) , (* 177*) ADR (yyTComb [ 311])
         , (* 178*) ADR (yyTComb [ 236]) , (* 179*) ADR (yyTComb [   0])
         , (* 180*) ADR (yyTComb [ 190]) , (* 181*) ADR (yyTComb [   0])
         , (* 182*) ADR (yyTComb [   0]) , (* 183*) ADR (yyTComb [ 210])
         , (* 184*) ADR (yyTComb [  10]) , (* 185*) ADR (yyTComb [   0])
         , (* 186*) ADR (yyTComb [ 216]) , (* 187*) ADR (yyTComb [ 222])
         , (* 188*) ADR (yyTComb [1289]) , (* 189*) ADR (yyTComb [1308])
         , (* 190*) ADR (yyTComb [   1]) , (* 191*) ADR (yyTComb [   6])
         , (* 192*) ADR (yyTComb [  12]) , (* 193*) ADR (yyTComb [  17])
         , (* 194*) ADR (yyTComb [   0]) , (* 195*) ADR (yyTComb [ 223])
         , (* 196*) ADR (yyTComb [ 222]) , (* 197*) ADR (yyTComb [   0])
         , (* 198*) ADR (yyTComb [ 225]) , (* 199*) ADR (yyTComb [ 262])
         , (* 200*) ADR (yyTComb [ 231]) , (* 201*) ADR (yyTComb [ 569])
         , (* 202*) ADR (yyTComb [ 657]) , (* 203*) ADR (yyTComb [  41])
         , (* 204*) ADR (yyTComb [  43]) , (* 205*) ADR (yyTComb [   0])
         , (* 206*) ADR (yyTComb [ 233]) , (* 207*) ADR (yyTComb [ 234])
         , (* 208*) ADR (yyTComb [ 242]) , (* 209*) ADR (yyTComb [ 249])
         , (* 210*) ADR (yyTComb [ 292]) , (* 211*) ADR (yyTComb [ 328])
         , (* 212*) ADR (yyTComb [ 233]) , (* 213*) ADR (yyTComb [ 252])
         , (* 214*) ADR (yyTComb [ 284])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 114])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 112])
         , (*  16*) ADR (yyNComb [ 114]) , (*  17*) ADR (yyNComb [ 121])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 123])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 125])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 126])
         , (*  24*) ADR (yyNComb [ 127]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 128]) , (*  27*) ADR (yyNComb [ 129])
         , (*  28*) ADR (yyNComb [ 127]) , (*  29*) ADR (yyNComb [ 113])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 132])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 127])
         , (*  36*) ADR (yyNComb [ 109]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 109]) , (*  39*) ADR (yyNComb [ 221])
         , (*  40*) ADR (yyNComb [ 109]) , (*  41*) ADR (yyNComb [ 128])
         , (*  42*) ADR (yyNComb [ 200]) , (*  43*) ADR (yyNComb [ 218])
         , (*  44*) ADR (yyNComb [ 109]) , (*  45*) ADR (yyNComb [ 109])
         , (*  46*) ADR (yyNComb [ 128]) , (*  47*) ADR (yyNComb [ 337])
         , (*  48*) ADR (yyNComb [ 109]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 290]) , (*  51*) ADR (yyNComb [ 109])
         , (*  52*) ADR (yyNComb [ 109]) , (*  53*) ADR (yyNComb [ 252])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 371])
         , (*  56*) ADR (yyNComb [ 109]) , (*  57*) ADR (yyNComb [ 109])
         , (*  58*) ADR (yyNComb [ 182]) , (*  59*) ADR (yyNComb [ 109])
         , (*  60*) ADR (yyNComb [ 110]) , (*  61*) ADR (yyNComb [ 301])
         , (*  62*) ADR (yyNComb [ 110]) , (*  63*) ADR (yyNComb [ 260])
         , (*  64*) ADR (yyNComb [ 133]) , (*  65*) ADR (yyNComb [ 135])
         , (*  66*) ADR (yyNComb [ 137]) , (*  67*) ADR (yyNComb [ 109])
         , (*  68*) ADR (yyNComb [ 409]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 433]) , (*  71*) ADR (yyNComb [ 109])
         , (*  72*) ADR (yyNComb [ 456]) , (*  73*) ADR (yyNComb [ 109])
         , (*  74*) ADR (yyNComb [ 109]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 490]) , (*  77*) ADR (yyNComb [ 109])
         , (*  78*) ADR (yyNComb [ 109]) , (*  79*) ADR (yyNComb [ 111])
         , (*  80*) ADR (yyNComb [ 113]) , (*  81*) ADR (yyNComb [ 109])
         , (*  82*) ADR (yyNComb [ 121]) , (*  83*) ADR (yyNComb [ 117])
         , (*  84*) ADR (yyNComb [ 110]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 109]) , (*  87*) ADR (yyNComb [ 110])
         , (*  88*) ADR (yyNComb [ 575]) , (*  89*) ADR (yyNComb [ 109])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 109])
         , (*  92*) ADR (yyNComb [ 109]) , (*  93*) ADR (yyNComb [ 583])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 660])
         , (*  96*) ADR (yyNComb [ 728]) , (*  97*) ADR (yyNComb [ 796])
         , (*  98*) ADR (yyNComb [ 109]) , (*  99*) ADR (yyNComb [ 109])
         , (* 100*) ADR (yyNComb [ 109]) , (* 101*) ADR (yyNComb [ 110])
         , (* 102*) ADR (yyNComb [ 119]) , (* 103*) ADR (yyNComb [ 113])
         , (* 104*) ADR (yyNComb [ 114]) , (* 105*) ADR (yyNComb [ 114])
         , (* 106*) ADR (yyNComb [ 117]) , (* 107*) ADR (yyNComb [ 645])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 123])
         , (* 110*) ADR (yyNComb [ 122]) , (* 111*) ADR (yyNComb [ 110])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 109])
         , (* 114*) ADR (yyNComb [ 311]) , (* 115*) ADR (yyNComb [ 111])
         , (* 116*) ADR (yyNComb [ 117]) , (* 117*) ADR (yyNComb [ 124])
         , (* 118*) ADR (yyNComb [ 137]) , (* 119*) ADR (yyNComb [ 255])
         , (* 120*) ADR (yyNComb [ 109]) , (* 121*) ADR (yyNComb [ 135])
         , (* 122*) ADR (yyNComb [ 125]) , (* 123*) ADR (yyNComb [ 129])
         , (* 124*) ADR (yyNComb [ 109]) , (* 125*) ADR (yyNComb [ 804])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 122])
         , (* 128*) ADR (yyNComb [ 111]) , (* 129*) ADR (yyNComb [ 109])
         , (* 130*) ADR (yyNComb [ 139]) , (* 131*) ADR (yyNComb [ 109])
         , (* 132*) ADR (yyNComb [ 109]) , (* 133*) ADR (yyNComb [ 344])
         , (* 134*) ADR (yyNComb [ 109]) , (* 135*) ADR (yyNComb [ 145])
         , (* 136*) ADR (yyNComb [ 109]) , (* 137*) ADR (yyNComb [ 373])
         , (* 138*) ADR (yyNComb [ 113]) , (* 139*) ADR (yyNComb [ 109])
         , (* 140*) ADR (yyNComb [ 115]) , (* 141*) ADR (yyNComb [ 115])
         , (* 142*) ADR (yyNComb [ 881]) , (* 143*) ADR (yyNComb [ 120])
         , (* 144*) ADR (yyNComb [ 109]) , (* 145*) ADR (yyNComb [ 866])
         , (* 146*) ADR (yyNComb [ 109]) , (* 147*) ADR (yyNComb [ 399])
         , (* 148*) ADR (yyNComb [ 142]) , (* 149*) ADR (yyNComb [ 109])
         , (* 150*) ADR (yyNComb [ 123]) , (* 151*) ADR (yyNComb [ 949])
         , (* 152*) ADR (yyNComb [ 109]) , (* 153*) ADR (yyNComb [ 464])
         , (* 154*) ADR (yyNComb [ 109]) , (* 155*) ADR (yyNComb [ 119])
         , (* 156*) ADR (yyNComb [1017]) , (* 157*) ADR (yyNComb [ 467])
         , (* 158*) ADR (yyNComb [ 109]) , (* 159*) ADR (yyNComb [ 109])
         , (* 160*) ADR (yyNComb [ 468]) , (* 161*) ADR (yyNComb [ 338])
         , (* 162*) ADR (yyNComb [ 109]) , (* 163*) ADR (yyNComb [ 109])
         , (* 164*) ADR (yyNComb [ 253]) , (* 165*) ADR (yyNComb [ 232])
         , (* 166*) ADR (yyNComb [ 146]) , (* 167*) ADR (yyNComb [ 109])
         , (* 168*) ADR (yyNComb [1076]) , (* 169*) ADR (yyNComb [ 109])
         , (* 170*) ADR (yyNComb [1026]) , (* 171*) ADR (yyNComb [ 109])
         , (* 172*) ADR (yyNComb [ 109]) , (* 173*) ADR (yyNComb [1116])
         , (* 174*) ADR (yyNComb [ 132]) , (* 175*) ADR (yyNComb [1145])
         , (* 176*) ADR (yyNComb [ 109]) , (* 177*) ADR (yyNComb [1144])
         , (* 178*) ADR (yyNComb [ 180]) , (* 179*) ADR (yyNComb [ 352])
         , (* 180*) ADR (yyNComb [ 109]) , (* 181*) ADR (yyNComb [ 288])
         , (* 182*) ADR (yyNComb [ 197]) , (* 183*) ADR (yyNComb [ 196])
         , (* 184*) ADR (yyNComb [ 109]) , (* 185*) ADR (yyNComb [ 200])
         , (* 186*) ADR (yyNComb [ 109]) , (* 187*) ADR (yyNComb [ 109])
         , (* 188*) ADR (yyNComb [ 198]) , (* 189*) ADR (yyNComb [ 405])
         , (* 190*) ADR (yyNComb [1168]) , (* 191*) ADR (yyNComb [ 109])
         , (* 192*) ADR (yyNComb [1212]) , (* 193*) ADR (yyNComb [ 109])
         , (* 194*) ADR (yyNComb [ 206]) , (* 195*) ADR (yyNComb [ 109])
         , (* 196*) ADR (yyNComb [ 109]) , (* 197*) ADR (yyNComb [ 193])
         , (* 198*) ADR (yyNComb [ 193]) , (* 199*) ADR (yyNComb [ 109])
         , (* 200*) ADR (yyNComb [ 109]) , (* 201*) ADR (yyNComb [ 258])
         , (* 202*) ADR (yyNComb [ 433]) , (* 203*) ADR (yyNComb [1260])
         , (* 204*) ADR (yyNComb [ 109]) , (* 205*) ADR (yyNComb [ 265])
         , (* 206*) ADR (yyNComb [ 109]) , (* 207*) ADR (yyNComb [ 109])
         , (* 208*) ADR (yyNComb [ 254]) , (* 209*) ADR (yyNComb [ 109])
         , (* 210*) ADR (yyNComb [ 272]) , (* 211*) ADR (yyNComb [ 452])
         , (* 212*) ADR (yyNComb [ 290]) , (* 213*) ADR (yyNComb [ 310])
         , (* 214*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  213
         , (*   4*)  213 , (*   5*)    0 , (*   6*)    0 , (*   7*)  213
         , (*   8*)    0 , (*   9*)    0 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)  213 , (*  14*)    0 , (*  15*)  201
         , (*  16*)  202 , (*  17*)  213 , (*  18*)    0 , (*  19*)  213
         , (*  20*)    0 , (*  21*)  213 , (*  22*)    0 , (*  23*)  213
         , (*  24*)  213 , (*  25*)    0 , (*  26*)  213 , (*  27*)  213
         , (*  28*)  183 , (*  29*)  198 , (*  30*)  199 , (*  31*)    0
         , (*  32*)    0 , (*  33*)  213 , (*  34*)    0 , (*  35*)  203
         , (*  36*)    0 , (*  37*)  119 , (*  38*)    0 , (*  39*)  156
         , (*  40*)    0 , (*  41*)  175 , (*  42*)   63 , (*  43*)  175
         , (*  44*)   48 , (*  45*)    0 , (*  46*)    0 , (*  47*)   72
         , (*  48*)    0 , (*  49*)    0 , (*  50*)  175 , (*  51*)   73
         , (*  52*)   54 , (*  53*)  175 , (*  54*)    0 , (*  55*)  175
         , (*  56*)   74 , (*  57*)   59 , (*  58*)   63 , (*  59*)    0
         , (*  60*)   62 , (*  61*)   63 , (*  62*)    0 , (*  63*)   64
         , (*  64*)    0 , (*  65*)   46 , (*  66*)  213 , (*  67*)    0
         , (*  68*)  175 , (*  69*)    0 , (*  70*)  175 , (*  71*)    0
         , (*  72*)  175 , (*  73*)    0 , (*  74*)    0 , (*  75*)    0
         , (*  76*)  175 , (*  77*)    0 , (*  78*)    0 , (*  79*)  119
         , (*  80*)   83 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)  156 , (*  89*)  154 , (*  90*)    0 , (*  91*)    0
         , (*  92*)    0 , (*  93*)  175 , (*  94*)    0 , (*  95*)  156
         , (*  96*)  156 , (*  97*)  156 , (*  98*)  101 , (*  99*)    0
         , (* 100*)    0 , (* 101*)    0 , (* 102*)   84 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)  175
         , (* 108*)    0 , (* 109*)  117 , (* 110*)  123 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)  102 , (* 115*)    0
         , (* 116*)  118 , (* 117*)  122 , (* 118*)  123 , (* 119*)    0
         , (* 120*)    0 , (* 121*)   31 , (* 122*)    0 , (* 123*)   84
         , (* 124*)    0 , (* 125*)  175 , (* 126*)    0 , (* 127*)    0
         , (* 128*)    0 , (* 129*)    0 , (* 130*)  133 , (* 131*)    0
         , (* 132*)    0 , (* 133*)    0 , (* 134*)    0 , (* 135*)  213
         , (* 136*)    0 , (* 137*)  138 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)    0 , (* 142*)  156 , (* 143*)    0
         , (* 144*)    0 , (* 145*)  175 , (* 146*)    0 , (* 147*)  148
         , (* 148*)    0 , (* 149*)    0 , (* 150*)    0 , (* 151*)  156
         , (* 152*)    0 , (* 153*)  157 , (* 154*)    0 , (* 155*)    0
         , (* 156*)  133 , (* 157*)  133 , (* 158*)    0 , (* 159*)    0
         , (* 160*)   84 , (* 161*)   84 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)  213 , (* 167*)    0
         , (* 168*)  190 , (* 169*)    0 , (* 170*)  192 , (* 171*)    0
         , (* 172*)    0 , (* 173*)  175 , (* 174*)    0 , (* 175*)   63
         , (* 176*)    0 , (* 177*)    0 , (* 178*)    0 , (* 179*)  213
         , (* 180*)    0 , (* 181*)  213 , (* 182*)  213 , (* 183*)    0
         , (* 184*)    0 , (* 185*)  213 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)  177 , (* 191*)    0
         , (* 192*)  175 , (* 193*)    0 , (* 194*)  213 , (* 195*)    0
         , (* 196*)    0 , (* 197*)  208 , (* 198*)    0 , (* 199*)    0
         , (* 200*)    0 , (* 201*)    0 , (* 202*)    0 , (* 203*)  177
         , (* 204*)    0 , (* 205*)  213 , (* 206*)    0 , (* 207*)    0
         , (* 208*)    0 , (* 209*)    0 , (* 210*)    0 , (* 211*)    0
         , (* 212*)    0 , (* 213*)    0 , (* 214*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  432} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 169,  170}
         , (*  10*) yyTCombType { 190,  718} , (*  11*) yyTCombType {  89,  566}
         , (*  12*) yyTCombType {  92,   93} , (*  13*) yyTCombType {  20,   21}
         , (*  14*) yyTCombType { 111,   93} , (*  15*) yyTCombType { 191,  192}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  32,   33}
         , (*  20*) yyTCombType { 102,  583} , (*  21*) yyTCombType { 108,  279}
         , (*  22*) yyTCombType { 116,  590} , (*  23*) yyTCombType { 121,  597}
         , (*  24*) yyTCombType { 123,  464} , (*  25*) yyTCombType { 126,  282}
         , (*  26*) yyTCombType { 134,  135} , (*  27*) yyTCombType { 171,  306}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 184,  185}
         , (*  30*) yyTCombType {  18,  219} , (*  31*) yyTCombType { 192,  723}
         , (*  32*) yyTCombType {   1,  463} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  38,  628}
         , (*  36*) yyTCombType { 193,  194} , (*  37*) yyTCombType {   1,  463}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,   13}
         , (*  40*) yyTCombType {  40,  227} , (*  41*) yyTCombType {  78,  266}
         , (*  42*) yyTCombType { 111,  603} , (*  43*) yyTCombType {  93,  604}
         , (*  44*) yyTCombType { 112,  280} , (*  45*) yyTCombType { 116,  590}
         , (*  46*) yyTCombType { 110,  464} , (*  47*) yyTCombType { 114,  583}
         , (*  48*) yyTCombType {  89,  566} , (*  49*) yyTCombType {  92,  603}
         , (*  50*) yyTCombType {  94,   95} , (*  51*) yyTCombType {  38,  628}
         , (*  52*) yyTCombType {  93,  604} , (*  53*) yyTCombType { 110,  464}
         , (*  54*) yyTCombType { 114,  583} , (*  55*) yyTCombType { 154,  275}
         , (*  56*) yyTCombType {  73,  242} , (*  57*) yyTCombType { 175,   42}
         , (*  58*) yyTCombType {  38,  628} , (*  59*) yyTCombType {   1,  216}
         , (*  60*) yyTCombType { 203,  718} , (*  61*) yyTCombType {  38,  628}
         , (*  62*) yyTCombType { 204,  205} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,  449} , (*  67*) yyTCombType {   9,  445}
         , (*  68*) yyTCombType {   8,  449} , (*  69*) yyTCombType {   9,  445}
         , (*  70*) yyTCombType {  14,   15} , (*  71*) yyTCombType {  20,  473}
         , (*  72*) yyTCombType {  14,   27} , (*  73*) yyTCombType {  22,  220}
         , (*  74*) yyTCombType {  25,  221} , (*  75*) yyTCombType {  30,  222}
         , (*  76*) yyTCombType {  20,  473} , (*  77*) yyTCombType {  34,  224}
         , (*  78*) yyTCombType {  22,   23} , (*  79*) yyTCombType {  25,   26}
         , (*  80*) yyTCombType {  40,   41} , (*  81*) yyTCombType {  46,   47}
         , (*  82*) yyTCombType {  38,  628} , (*  83*) yyTCombType {  49,   50}
         , (*  84*) yyTCombType {  38,  628} , (*  85*) yyTCombType {  73,  264}
         , (*  86*) yyTCombType {  38,  628} , (*  87*) yyTCombType {  44,  666}
         , (*  88*) yyTCombType {  38,   39} , (*  89*) yyTCombType {  75,   76}
         , (*  90*) yyTCombType {  38,  628} , (*  91*) yyTCombType {  77,  265}
         , (*  92*) yyTCombType {  46,   68} , (*  93*) yyTCombType {   8,  449}
         , (*  94*) yyTCombType {   9,   10} , (*  95*) yyTCombType {  10,   11}
         , (*  96*) yyTCombType {  11,  217} , (*  97*) yyTCombType {  12,  218}
         , (*  98*) yyTCombType {  31,  223} , (*  99*) yyTCombType {  36,   37}
         , (* 100*) yyTCombType {  45,  230} , (* 101*) yyTCombType {  47,  673}
         , (* 102*) yyTCombType {  47,  673} , (* 103*) yyTCombType {  44,  666}
         , (* 104*) yyTCombType {  46,  263} , (* 105*) yyTCombType {  69,  258}
         , (* 106*) yyTCombType {  44,  666} , (* 107*) yyTCombType {  44,  666}
         , (* 108*) yyTCombType {  10,   12} , (* 109*) yyTCombType {  72,   48}
         , (* 110*) yyTCombType {  44,  666} , (* 111*) yyTCombType {  63,  228}
         , (* 112*) yyTCombType {  63,  229} , (* 113*) yyTCombType {  80,  616}
         , (* 114*) yyTCombType {  48,  666} , (* 115*) yyTCombType {  69,  259}
         , (* 116*) yyTCombType {  44,  666} , (* 117*) yyTCombType {  71,  261}
         , (* 118*) yyTCombType {  71,  262} , (* 119*) yyTCombType {  81,  270}
         , (* 120*) yyTCombType {  84,  271} , (* 121*) yyTCombType {  86,  272}
         , (* 122*) yyTCombType {  82,   83} , (* 123*) yyTCombType {  87,  542}
         , (* 124*) yyTCombType {  48,  666} , (* 125*) yyTCombType {  64,   43}
         , (* 126*) yyTCombType {  82,  465} , (* 127*) yyTCombType {  87,  542}
         , (* 128*) yyTCombType {  98,  577} , (* 129*) yyTCombType {  87,   88}
         , (* 130*) yyTCombType {  99,  278} , (* 131*) yyTCombType {  87,  542}
         , (* 132*) yyTCombType { 100,  101} , (* 133*) yyTCombType { 101,  277}
         , (* 134*) yyTCombType {  44,  666} , (* 135*) yyTCombType { 119,  226}
         , (* 136*) yyTCombType { 124,  125} , (* 137*) yyTCombType { 100,  578}
         , (* 138*) yyTCombType { 122,  465} , (* 139*) yyTCombType { 130,  494}
         , (* 140*) yyTCombType {  48,  666} , (* 141*) yyTCombType { 131,  284}
         , (* 142*) yyTCombType {  44,  666} , (* 143*) yyTCombType { 129,  283}
         , (* 144*) yyTCombType { 109,  465} , (* 145*) yyTCombType {  48,  666}
         , (* 146*) yyTCombType { 133,   90} , (* 147*) yyTCombType {  44,  666}
         , (* 148*) yyTCombType { 136,  288} , (* 149*) yyTCombType {  44,  666}
         , (* 150*) yyTCombType {  48,  666} , (* 151*) yyTCombType {  64,   44}
         , (* 152*) yyTCombType {  64,  231} , (* 153*) yyTCombType {  64,  232}
         , (* 154*) yyTCombType {  64,  233} , (* 155*) yyTCombType {  64,  234}
         , (* 156*) yyTCombType {  64,  235} , (* 157*) yyTCombType {  64,  236}
         , (* 158*) yyTCombType {  64,  237} , (* 159*) yyTCombType {  64,  238}
         , (* 160*) yyTCombType {  64,  239} , (* 161*) yyTCombType {  64,  240}
         , (* 162*) yyTCombType {  64,  241} , (* 163*) yyTCombType {  44,  666}
         , (* 164*) yyTCombType {  44,  666} , (* 165*) yyTCombType {  44,  666}
         , (* 166*) yyTCombType {  44,  666} , (* 167*) yyTCombType {  44,  666}
         , (* 168*) yyTCombType {  44,  666} , (* 169*) yyTCombType {  44,  666}
         , (* 170*) yyTCombType {  44,  666} , (* 171*) yyTCombType {  44,  666}
         , (* 172*) yyTCombType {  44,  666} , (* 173*) yyTCombType {  44,  666}
         , (* 174*) yyTCombType {  44,  666} , (* 175*) yyTCombType { 109,  110}
         , (* 176*) yyTCombType {  48,   45} , (* 177*) yyTCombType {  48,  666}
         , (* 178*) yyTCombType {  48,  486} , (* 179*) yyTCombType {  48,  666}
         , (* 180*) yyTCombType {  48,  666} , (* 181*) yyTCombType { 118,  464}
         , (* 182*) yyTCombType { 139,  290} , (* 183*) yyTCombType {  48,  485}
         , (* 184*) yyTCombType { 117,  465} , (* 185*) yyTCombType { 122,  123}
         , (* 186*) yyTCombType {  51,  638} , (* 187*) yyTCombType { 120,  596}
         , (* 188*) yyTCombType { 105,  543} , (* 189*) yyTCombType {  48,  486}
         , (* 190*) yyTCombType { 143,  513} , (* 191*) yyTCombType {  48,  666}
         , (* 192*) yyTCombType {  48,  666} , (* 193*) yyTCombType {  48,  666}
         , (* 194*) yyTCombType {  48,  666} , (* 195*) yyTCombType {  48,  666}
         , (* 196*) yyTCombType {  48,  666} , (* 197*) yyTCombType {  48,  666}
         , (* 198*) yyTCombType {  48,  666} , (* 199*) yyTCombType {  48,  666}
         , (* 200*) yyTCombType {  48,  666} , (* 201*) yyTCombType {  48,  486}
         , (* 202*) yyTCombType {  51,  638} , (* 203*) yyTCombType {  83,  267}
         , (* 204*) yyTCombType { 105,  543} , (* 205*) yyTCombType {  51,  638}
         , (* 206*) yyTCombType {  51,  638} , (* 207*) yyTCombType { 115,  589}
         , (* 208*) yyTCombType { 117,  118} , (* 209*) yyTCombType {  51,  638}
         , (* 210*) yyTCombType { 120,  121} , (* 211*) yyTCombType { 105,  543}
         , (* 212*) yyTCombType { 129,  130} , (* 213*) yyTCombType { 127,  545}
         , (* 214*) yyTCombType { 140,  510} , (* 215*) yyTCombType {  51,  638}
         , (* 216*) yyTCombType { 144,  145} , (* 217*) yyTCombType { 127,  545}
         , (* 218*) yyTCombType { 140,  510} , (* 219*) yyTCombType {  83,  268}
         , (* 220*) yyTCombType {  83,  269} , (* 221*) yyTCombType { 127,  107}
         , (* 222*) yyTCombType { 141,  512} , (* 223*) yyTCombType { 115,  116}
         , (* 224*) yyTCombType { 132,  133} , (* 225*) yyTCombType { 146,  291}
         , (* 226*) yyTCombType { 141,  142} , (* 227*) yyTCombType {  83,  464}
         , (* 228*) yyTCombType { 149,  293} , (* 229*) yyTCombType { 132,  495}
         , (* 230*) yyTCombType { 115,  589} , (* 231*) yyTCombType { 152,  296}
         , (* 232*) yyTCombType { 158,  299} , (* 233*) yyTCombType {  51,  638}
         , (* 234*) yyTCombType { 118,  281} , (* 235*) yyTCombType { 105,  543}
         , (* 236*) yyTCombType {  51,  638} , (* 237*) yyTCombType {  51,  638}
         , (* 238*) yyTCombType {  51,  638} , (* 239*) yyTCombType { 150,  294}
         , (* 240*) yyTCombType { 155,  297} , (* 241*) yyTCombType {  51,  638}
         , (* 242*) yyTCombType { 159,  300} , (* 243*) yyTCombType { 105,  543}
         , (* 244*) yyTCombType { 150,  295} , (* 245*) yyTCombType { 155,  298}
         , (* 246*) yyTCombType {  51,  638} , (* 247*) yyTCombType { 162,  301}
         , (* 248*) yyTCombType {  51,  638} , (* 249*) yyTCombType { 163,  302}
         , (* 250*) yyTCombType { 167,  305} , (* 251*) yyTCombType { 172,  173}
         , (* 252*) yyTCombType {  83,  620} , (* 253*) yyTCombType { 156,   40}
         , (* 254*) yyTCombType {  51,  638} , (* 255*) yyTCombType {  51,  638}
         , (* 256*) yyTCombType { 180,  481} , (* 257*) yyTCombType { 156,  565}
         , (* 258*) yyTCombType {  52,  639} , (* 259*) yyTCombType { 103,  540}
         , (* 260*) yyTCombType { 178,  179} , (* 261*) yyTCombType { 180,  181}
         , (* 262*) yyTCombType {  51,  638} , (* 263*) yyTCombType {  51,  638}
         , (* 264*) yyTCombType {  51,  638} , (* 265*) yyTCombType {  51,  638}
         , (* 266*) yyTCombType {  51,  638} , (* 267*) yyTCombType {  51,  638}
         , (* 268*) yyTCombType {  51,  638} , (* 269*) yyTCombType {  51,  638}
         , (* 270*) yyTCombType {  51,  638} , (* 271*) yyTCombType {  51,  638}
         , (* 272*) yyTCombType {  51,  638} , (* 273*) yyTCombType {  51,  638}
         , (* 274*) yyTCombType {  52,  639} , (* 275*) yyTCombType { 103,  540}
         , (* 276*) yyTCombType { 104,  542} , (* 277*) yyTCombType {  52,  639}
         , (* 278*) yyTCombType {  52,  639} , (* 279*) yyTCombType { 183,   29}
         , (* 280*) yyTCombType {  52,  639} , (* 281*) yyTCombType {  52,  639}
         , (* 282*) yyTCombType { 103,  540} , (* 283*) yyTCombType { 186,  308}
         , (* 284*) yyTCombType { 164,  303} , (* 285*) yyTCombType { 156,  606}
         , (* 286*) yyTCombType { 164,  304} , (* 287*) yyTCombType {  52,  639}
         , (* 288*) yyTCombType { 187,  188} , (* 289*) yyTCombType { 156,   79}
         , (* 290*) yyTCombType { 195,  309} , (* 291*) yyTCombType { 196,  441}
         , (* 292*) yyTCombType { 104,  542} , (* 293*) yyTCombType { 156,  273}
         , (* 294*) yyTCombType { 156,  565} , (* 295*) yyTCombType { 198,  493}
         , (* 296*) yyTCombType { 198,  493} , (* 297*) yyTCombType { 200,  201}
         , (* 298*) yyTCombType { 156,  274} , (* 299*) yyTCombType { 104,  542}
         , (* 300*) yyTCombType { 206,  311} , (* 301*) yyTCombType { 106,  545}
         , (* 302*) yyTCombType { 178,  480} , (* 303*) yyTCombType { 207,  442}
         , (* 304*) yyTCombType { 178,  182} , (* 305*) yyTCombType {  52,  639}
         , (* 306*) yyTCombType { 103,  540} , (* 307*) yyTCombType { 156,   89}
         , (* 308*) yyTCombType {  52,  639} , (* 309*) yyTCombType {  52,  639}
         , (* 310*) yyTCombType {  52,  639} , (* 311*) yyTCombType { 208,  198}
         , (* 312*) yyTCombType { 103,  540} , (* 313*) yyTCombType {  52,  639}
         , (* 314*) yyTCombType { 103,  540} , (* 315*) yyTCombType { 209,  210}
         , (* 316*) yyTCombType {  54,  243} , (* 317*) yyTCombType { 106,  545}
         , (* 318*) yyTCombType {  52,  639} , (* 319*) yyTCombType { 210,  468}
         , (* 320*) yyTCombType {  52,  639} , (* 321*) yyTCombType { 156,  276}
         , (* 322*) yyTCombType { 210,  468} , (* 323*) yyTCombType { 104,  542}
         , (* 324*) yyTCombType { 106,  545} , (* 325*) yyTCombType { 177,  225}
         , (* 326*) yyTCombType {  52,  639} , (* 327*) yyTCombType {  52,  639}
         , (* 328*) yyTCombType { 212,  461} , (* 329*) yyTCombType { 104,   88}
         , (* 330*) yyTCombType {  54,  641} , (* 331*) yyTCombType { 104,  542}
         , (* 332*) yyTCombType { 199,  310} , (* 333*) yyTCombType { 199,   31}
         , (* 334*) yyTCombType {  52,  639} , (* 335*) yyTCombType {  52,  639}
         , (* 336*) yyTCombType {  52,  639} , (* 337*) yyTCombType {  52,  639}
         , (* 338*) yyTCombType {  52,  639} , (* 339*) yyTCombType {  52,  639}
         , (* 340*) yyTCombType {  52,  639} , (* 341*) yyTCombType {  52,  639}
         , (* 342*) yyTCombType {  52,  639} , (* 343*) yyTCombType {  52,  639}
         , (* 344*) yyTCombType {  52,  639} , (* 345*) yyTCombType {  52,  639}
         , (* 346*) yyTCombType {  54,  641} , (* 347*) yyTCombType { 213,  215}
         , (* 348*) yyTCombType { 106,  545} , (* 349*) yyTCombType {  54,  641}
         , (* 350*) yyTCombType {  54,  641} , (* 351*) yyTCombType { 214,  312}
         , (* 352*) yyTCombType {  54,  641} , (* 353*) yyTCombType {  54,  641}
         , (* 354*) yyTCombType { 177,   36} , (* 355*) yyTCombType { 211,   17}
         , (* 356*) yyTCombType { 106,  107} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType { 211,   19} , (* 359*) yyTCombType {  54,  641}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType { 177,  285} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType { 177,  286} , (* 369*) yyTCombType {   0,    0}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {   0,    0}
         , (* 374*) yyTCombType { 177,  287} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType {  54,  641}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {  54,  641} , (* 381*) yyTCombType {  54,  641}
         , (* 382*) yyTCombType {  54,  641} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {  54,  641}
         , (* 386*) yyTCombType { 137,  505} , (* 387*) yyTCombType { 210,  468}
         , (* 388*) yyTCombType {  56,  645} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {  54,  641} , (* 391*) yyTCombType { 137,  505}
         , (* 392*) yyTCombType {  54,  641} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType { 137,  505} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {  54,  641} , (* 399*) yyTCombType {  54,  641}
         , (* 400*) yyTCombType {   0,    0} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {  56,  645} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {  54,  641} , (* 407*) yyTCombType {  54,  641}
         , (* 408*) yyTCombType {  54,  641} , (* 409*) yyTCombType {  54,  641}
         , (* 410*) yyTCombType {  54,  641} , (* 411*) yyTCombType {  54,  641}
         , (* 412*) yyTCombType {  54,  641} , (* 413*) yyTCombType {  54,  641}
         , (* 414*) yyTCombType {  54,  641} , (* 415*) yyTCombType {  54,  641}
         , (* 416*) yyTCombType {  54,  641} , (* 417*) yyTCombType {  54,  641}
         , (* 418*) yyTCombType {  56,  645} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType { 137,  505} , (* 421*) yyTCombType {  56,  645}
         , (* 422*) yyTCombType {  56,  645} , (* 423*) yyTCombType { 211,  479}
         , (* 424*) yyTCombType {  56,  645} , (* 425*) yyTCombType {  56,  645}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType {   0,    0}
         , (* 428*) yyTCombType { 137,  505} , (* 429*) yyTCombType {   0,    0}
         , (* 430*) yyTCombType {   0,    0} , (* 431*) yyTCombType {  56,  645}
         , (* 432*) yyTCombType {   0,    0} , (* 433*) yyTCombType {   0,    0}
         , (* 434*) yyTCombType { 137,  505} , (* 435*) yyTCombType {   0,    0}
         , (* 436*) yyTCombType {   0,    0} , (* 437*) yyTCombType {   0,    0}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {   0,    0}
         , (* 440*) yyTCombType { 137,  505} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {   0,    0}
         , (* 444*) yyTCombType {  85,  547} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {  56,  645}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {   0,    0}
         , (* 452*) yyTCombType {  56,  645} , (* 453*) yyTCombType {  56,  645}
         , (* 454*) yyTCombType {  56,  645} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {  56,  645}
         , (* 458*) yyTCombType {   0,    0} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {  85,  547} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {  56,  645} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType {  56,  645} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {  85,  547}
         , (* 468*) yyTCombType {   0,    0} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {  56,  645} , (* 471*) yyTCombType {  56,  645}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {   0,    0}
         , (* 476*) yyTCombType {  57,  647} , (* 477*) yyTCombType { 128,  629}
         , (* 478*) yyTCombType {  56,  645} , (* 479*) yyTCombType {  56,  645}
         , (* 480*) yyTCombType {  56,  645} , (* 481*) yyTCombType {  56,  645}
         , (* 482*) yyTCombType {  56,  645} , (* 483*) yyTCombType {  56,  645}
         , (* 484*) yyTCombType {  56,  645} , (* 485*) yyTCombType {  56,  645}
         , (* 486*) yyTCombType {  56,  645} , (* 487*) yyTCombType {  56,  645}
         , (* 488*) yyTCombType {  56,  645} , (* 489*) yyTCombType {  56,  645}
         , (* 490*) yyTCombType {  57,  647} , (* 491*) yyTCombType {  85,  547}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType { 128,  629}
         , (* 494*) yyTCombType {   0,    0} , (* 495*) yyTCombType {  85,  547}
         , (* 496*) yyTCombType {  85,   86} , (* 497*) yyTCombType {  85,  547}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  85,  547}
         , (* 500*) yyTCombType { 128,  629} , (* 501*) yyTCombType {   0,    0}
         , (* 502*) yyTCombType {  57,  647} , (* 503*) yyTCombType { 128,  129}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {  57,  647} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType {  57,  647}
         , (* 510*) yyTCombType {  57,  647} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType {  57,  647} , (* 513*) yyTCombType {  57,  647}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {   0,    0}
         , (* 518*) yyTCombType {   0,    0} , (* 519*) yyTCombType {  57,  647}
         , (* 520*) yyTCombType {   0,    0} , (* 521*) yyTCombType {   0,    0}
         , (* 522*) yyTCombType {   0,    0} , (* 523*) yyTCombType {   0,    0}
         , (* 524*) yyTCombType { 128,  629} , (* 525*) yyTCombType {   0,    0}
         , (* 526*) yyTCombType { 128,  629} , (* 527*) yyTCombType {   0,    0}
         , (* 528*) yyTCombType { 128,  629} , (* 529*) yyTCombType {   0,    0}
         , (* 530*) yyTCombType {   0,    0} , (* 531*) yyTCombType {   0,    0}
         , (* 532*) yyTCombType { 128,  629} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType {   0,    0} , (* 537*) yyTCombType {  57,  647}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType {  57,  647}
         , (* 540*) yyTCombType {  57,  647} , (* 541*) yyTCombType {  57,  647}
         , (* 542*) yyTCombType {  57,  647} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType {   0,    0} , (* 545*) yyTCombType {  57,  647}
         , (* 546*) yyTCombType {   0,    0} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {   0,    0} , (* 549*) yyTCombType {   0,    0}
         , (* 550*) yyTCombType {  57,  647} , (* 551*) yyTCombType {   0,    0}
         , (* 552*) yyTCombType {  57,  647} , (* 553*) yyTCombType {  57,  647}
         , (* 554*) yyTCombType {  57,  647} , (* 555*) yyTCombType {  57,  647}
         , (* 556*) yyTCombType {  57,  647} , (* 557*) yyTCombType {  57,  647}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType {   0,    0}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {   0,    0}
         , (* 564*) yyTCombType {  59,  649} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {  57,  647} , (* 567*) yyTCombType {  57,  647}
         , (* 568*) yyTCombType {  57,  647} , (* 569*) yyTCombType {  57,  647}
         , (* 570*) yyTCombType {  57,  647} , (* 571*) yyTCombType {  57,  647}
         , (* 572*) yyTCombType {  57,  647} , (* 573*) yyTCombType {  57,  647}
         , (* 574*) yyTCombType {  57,  647} , (* 575*) yyTCombType {  57,  647}
         , (* 576*) yyTCombType {  57,  647} , (* 577*) yyTCombType {  57,  647}
         , (* 578*) yyTCombType {  59,  649} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType {   0,    0} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType { 201,  468}
         , (* 584*) yyTCombType {   0,    0} , (* 585*) yyTCombType {   0,    0}
         , (* 586*) yyTCombType {   0,    0} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType { 201,  468} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {  59,  649} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType {  59,  649} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType { 201,  468} , (* 597*) yyTCombType {  59,  649}
         , (* 598*) yyTCombType {  59,  649} , (* 599*) yyTCombType { 201,  468}
         , (* 600*) yyTCombType {  59,  649} , (* 601*) yyTCombType {  59,  649}
         , (* 602*) yyTCombType {   0,    0} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType {   0,    0}
         , (* 606*) yyTCombType {   0,    0} , (* 607*) yyTCombType {  59,  649}
         , (* 608*) yyTCombType {   0,    0} , (* 609*) yyTCombType {   0,    0}
         , (* 610*) yyTCombType {   0,    0} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType { 201,  468} , (* 613*) yyTCombType {   0,    0}
         , (* 614*) yyTCombType {   0,    0} , (* 615*) yyTCombType {   0,    0}
         , (* 616*) yyTCombType {   0,    0} , (* 617*) yyTCombType {   0,    0}
         , (* 618*) yyTCombType {   0,    0} , (* 619*) yyTCombType {   0,    0}
         , (* 620*) yyTCombType { 201,  468} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {  59,  649}
         , (* 626*) yyTCombType { 201,  468} , (* 627*) yyTCombType {  59,  649}
         , (* 628*) yyTCombType {  59,  649} , (* 629*) yyTCombType {  59,  649}
         , (* 630*) yyTCombType {  59,  649} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType { 201,  468} , (* 633*) yyTCombType {  59,  649}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType {  59,  649} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {  59,  649} , (* 641*) yyTCombType {  59,  649}
         , (* 642*) yyTCombType {  59,  649} , (* 643*) yyTCombType {  59,  649}
         , (* 644*) yyTCombType {  59,  649} , (* 645*) yyTCombType {  59,  649}
         , (* 646*) yyTCombType {  59,  251} , (* 647*) yyTCombType {  59,  252}
         , (* 648*) yyTCombType {  59,  253} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {  60,  650} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {  59,  649} , (* 655*) yyTCombType {  59,  649}
         , (* 656*) yyTCombType {  59,  649} , (* 657*) yyTCombType {  59,  649}
         , (* 658*) yyTCombType {  59,  649} , (* 659*) yyTCombType {  59,  649}
         , (* 660*) yyTCombType {  59,  649} , (* 661*) yyTCombType {  59,  649}
         , (* 662*) yyTCombType {  59,  649} , (* 663*) yyTCombType {  59,  649}
         , (* 664*) yyTCombType {  59,  649} , (* 665*) yyTCombType {  59,  649}
         , (* 666*) yyTCombType {  60,  650} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {   0,    0} , (* 671*) yyTCombType { 202,  479}
         , (* 672*) yyTCombType {   0,    0} , (* 673*) yyTCombType {   0,    0}
         , (* 674*) yyTCombType {   0,    0} , (* 675*) yyTCombType {   0,    0}
         , (* 676*) yyTCombType { 202,  479} , (* 677*) yyTCombType {   0,    0}
         , (* 678*) yyTCombType {  60,  650} , (* 679*) yyTCombType {   0,    0}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType {   0,    0}
         , (* 682*) yyTCombType {  60,  650} , (* 683*) yyTCombType {   0,    0}
         , (* 684*) yyTCombType { 202,   17} , (* 685*) yyTCombType {  60,  650}
         , (* 686*) yyTCombType {  60,  650} , (* 687*) yyTCombType { 202,   19}
         , (* 688*) yyTCombType {  60,  650} , (* 689*) yyTCombType {  60,  650}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType {   0,    0}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType {   0,    0}
         , (* 694*) yyTCombType {   0,    0} , (* 695*) yyTCombType {  60,  650}
         , (* 696*) yyTCombType {   0,    0} , (* 697*) yyTCombType {   0,    0}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType {   0,    0}
         , (* 700*) yyTCombType { 202,  479} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType {   0,    0} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType { 202,  479} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType {   0,    0} , (* 711*) yyTCombType {   0,    0}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {  60,  650}
         , (* 714*) yyTCombType { 202,  479} , (* 715*) yyTCombType {  60,  650}
         , (* 716*) yyTCombType {  60,  650} , (* 717*) yyTCombType {  60,  650}
         , (* 718*) yyTCombType {  60,  650} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType { 202,  479} , (* 721*) yyTCombType {  60,  650}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {   0,    0} , (* 725*) yyTCombType {   0,    0}
         , (* 726*) yyTCombType {  60,  650} , (* 727*) yyTCombType {   0,    0}
         , (* 728*) yyTCombType {  60,  650} , (* 729*) yyTCombType {  60,  650}
         , (* 730*) yyTCombType {  60,  650} , (* 731*) yyTCombType {  60,  650}
         , (* 732*) yyTCombType {  60,  650} , (* 733*) yyTCombType {  60,  650}
         , (* 734*) yyTCombType {  60,  650} , (* 735*) yyTCombType {  60,  650}
         , (* 736*) yyTCombType {  60,  650} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {   0,    0} , (* 739*) yyTCombType {   0,    0}
         , (* 740*) yyTCombType {   0,    0} , (* 741*) yyTCombType {   0,    0}
         , (* 742*) yyTCombType {  60,  650} , (* 743*) yyTCombType {  60,  650}
         , (* 744*) yyTCombType {  60,  650} , (* 745*) yyTCombType {  60,  650}
         , (* 746*) yyTCombType {  60,  650} , (* 747*) yyTCombType {  60,  650}
         , (* 748*) yyTCombType {  60,  650} , (* 749*) yyTCombType {  60,  650}
         , (* 750*) yyTCombType {  60,  650} , (* 751*) yyTCombType {  60,  650}
         , (* 752*) yyTCombType {  60,  650} , (* 753*) yyTCombType {  60,  650}
         , (* 754*) yyTCombType {  62,  652} , (* 755*) yyTCombType {   0,    0}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType { 165,  710} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType { 147,  519} , (* 761*) yyTCombType {   0,    0}
         , (* 762*) yyTCombType { 153,  529} , (* 763*) yyTCombType { 165,  710}
         , (* 764*) yyTCombType {  62,  254} , (* 765*) yyTCombType { 147,  519}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType { 153,  529}
         , (* 768*) yyTCombType {  62,  652} , (* 769*) yyTCombType {   0,    0}
         , (* 770*) yyTCombType { 147,  519} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType { 153,  529} , (* 773*) yyTCombType {   0,    0}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {   0,    0} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType {   0,    0} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType {  62,  652} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType {  62,  652} , (* 785*) yyTCombType {  62,  255}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType {  62,  652}
         , (* 788*) yyTCombType {  62,  652} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType {  62,  652} , (* 791*) yyTCombType {  62,  652}
         , (* 792*) yyTCombType { 165,  710} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType { 147,  519} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType { 153,  529} , (* 797*) yyTCombType {  62,  652}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType { 165,  710} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType { 147,  519} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType { 153,  529} , (* 805*) yyTCombType {   0,    0}
         , (* 806*) yyTCombType { 165,  710} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType { 147,  519} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType { 153,  529} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType { 165,  710} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType { 147,  519} , (* 815*) yyTCombType {  62,  652}
         , (* 816*) yyTCombType { 153,  529} , (* 817*) yyTCombType {  62,  652}
         , (* 818*) yyTCombType {  62,  652} , (* 819*) yyTCombType {  62,  652}
         , (* 820*) yyTCombType {  62,  652} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType {  62,  652}
         , (* 824*) yyTCombType {   0,    0} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {  62,  652} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType {  62,  652} , (* 831*) yyTCombType {  62,  652}
         , (* 832*) yyTCombType {  62,  652} , (* 833*) yyTCombType {  62,  652}
         , (* 834*) yyTCombType {  62,  652} , (* 835*) yyTCombType {  62,  652}
         , (* 836*) yyTCombType {  62,  652} , (* 837*) yyTCombType {  62,  652}
         , (* 838*) yyTCombType {  62,  652} , (* 839*) yyTCombType {  62,  256}
         , (* 840*) yyTCombType {  62,  257} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {  62,  652} , (* 845*) yyTCombType {  62,  652}
         , (* 846*) yyTCombType {  62,  652} , (* 847*) yyTCombType {  62,  652}
         , (* 848*) yyTCombType {  62,  652} , (* 849*) yyTCombType {  62,  652}
         , (* 850*) yyTCombType {  62,  652} , (* 851*) yyTCombType {  62,  652}
         , (* 852*) yyTCombType {  62,  652} , (* 853*) yyTCombType {  62,  652}
         , (* 854*) yyTCombType {  62,  652} , (* 855*) yyTCombType {  62,  652}
         , (* 856*) yyTCombType {  65,  662} , (* 857*) yyTCombType {  91,  607}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType {   0,    0} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {  91,  548}
         , (* 866*) yyTCombType {  65,  662} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {  65,  662} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {  91,  548}
         , (* 882*) yyTCombType {  65,  662} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {  91,  607}
         , (* 886*) yyTCombType {  65,  662} , (* 887*) yyTCombType {  65,  662}
         , (* 888*) yyTCombType {  91,  548} , (* 889*) yyTCombType {  65,  662}
         , (* 890*) yyTCombType {  65,  662} , (* 891*) yyTCombType {  91,  548}
         , (* 892*) yyTCombType {  65,  662} , (* 893*) yyTCombType {  65,  662}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {  65,  662}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {   0,    0}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType {   0,    0}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {  91,  548} , (* 913*) yyTCombType {   0,    0}
         , (* 914*) yyTCombType {  91,  548} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {  91,  548} , (* 917*) yyTCombType {  65,  662}
         , (* 918*) yyTCombType {  65,   66} , (* 919*) yyTCombType {  65,  662}
         , (* 920*) yyTCombType {  91,  548} , (* 921*) yyTCombType {  65,  662}
         , (* 922*) yyTCombType {  65,  662} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {  65,  662}
         , (* 926*) yyTCombType {   0,    0} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType {   0,    0} , (* 929*) yyTCombType {   0,    0}
         , (* 930*) yyTCombType {  65,  662} , (* 931*) yyTCombType {   0,    0}
         , (* 932*) yyTCombType {  65,  662} , (* 933*) yyTCombType {  65,  662}
         , (* 934*) yyTCombType {  65,  662} , (* 935*) yyTCombType {  65,  662}
         , (* 936*) yyTCombType {  65,  662} , (* 937*) yyTCombType {  65,  662}
         , (* 938*) yyTCombType {  65,  662} , (* 939*) yyTCombType {  65,  662}
         , (* 940*) yyTCombType {  65,  662} , (* 941*) yyTCombType {  65,  662}
         , (* 942*) yyTCombType {  65,  662} , (* 943*) yyTCombType {  65,  260}
         , (* 944*) yyTCombType {   0,    0} , (* 945*) yyTCombType {   0,    0}
         , (* 946*) yyTCombType {  65,  662} , (* 947*) yyTCombType {  65,  662}
         , (* 948*) yyTCombType {  65,  662} , (* 949*) yyTCombType {  65,  662}
         , (* 950*) yyTCombType {  65,  662} , (* 951*) yyTCombType {  65,  662}
         , (* 952*) yyTCombType {  65,  662} , (* 953*) yyTCombType {  65,  662}
         , (* 954*) yyTCombType {  65,  662} , (* 955*) yyTCombType {  65,  662}
         , (* 956*) yyTCombType {  65,  662} , (* 957*) yyTCombType {  65,  662}
         , (* 958*) yyTCombType {  67,  661} , (* 959*) yyTCombType {   0,    0}
         , (* 960*) yyTCombType {   0,    0} , (* 961*) yyTCombType {   0,    0}
         , (* 962*) yyTCombType {   0,    0} , (* 963*) yyTCombType {   0,    0}
         , (* 964*) yyTCombType { 157,  530} , (* 965*) yyTCombType {   0,    0}
         , (* 966*) yyTCombType {   0,    0} , (* 967*) yyTCombType {   0,    0}
         , (* 968*) yyTCombType {  67,  661} , (* 969*) yyTCombType { 157,  530}
         , (* 970*) yyTCombType {   0,    0} , (* 971*) yyTCombType {   0,    0}
         , (* 972*) yyTCombType {  67,  661} , (* 973*) yyTCombType {   0,    0}
         , (* 974*) yyTCombType { 157,  530} , (* 975*) yyTCombType {   0,    0}
         , (* 976*) yyTCombType {   0,    0} , (* 977*) yyTCombType {   0,    0}
         , (* 978*) yyTCombType {   0,    0} , (* 979*) yyTCombType {   0,    0}
         , (* 980*) yyTCombType {   0,    0} , (* 981*) yyTCombType {   0,    0}
         , (* 982*) yyTCombType {   0,    0} , (* 983*) yyTCombType {   0,    0}
         , (* 984*) yyTCombType {  67,  661} , (* 985*) yyTCombType {   0,    0}
         , (* 986*) yyTCombType {   0,    0} , (* 987*) yyTCombType {   0,    0}
         , (* 988*) yyTCombType {  67,  661} , (* 989*) yyTCombType {  67,  661}
         , (* 990*) yyTCombType {   0,    0} , (* 991*) yyTCombType {  67,  661}
         , (* 992*) yyTCombType {  67,  661} , (* 993*) yyTCombType {   0,    0}
         , (* 994*) yyTCombType {  67,  661} , (* 995*) yyTCombType {  67,  661}
         , (* 996*) yyTCombType {   0,    0} , (* 997*) yyTCombType {   0,    0}
         , (* 998*) yyTCombType { 157,  530} , (* 999*) yyTCombType {   0,    0}
         , (*1000*) yyTCombType {   0,    0} , (*1001*) yyTCombType {  67,  661}
         , (*1002*) yyTCombType {   0,    0} , (*1003*) yyTCombType {   0,    0}
         , (*1004*) yyTCombType {   0,    0} , (*1005*) yyTCombType {   0,    0}
         , (*1006*) yyTCombType { 157,  530} , (*1007*) yyTCombType { 157,  274}
         , (*1008*) yyTCombType {   0,    0} , (*1009*) yyTCombType {   0,    0}
         , (*1010*) yyTCombType {   0,    0} , (*1011*) yyTCombType {   0,    0}
         , (*1012*) yyTCombType { 157,  530} , (*1013*) yyTCombType {   0,    0}
         , (*1014*) yyTCombType {   0,    0} , (*1015*) yyTCombType {   0,    0}
         , (*1016*) yyTCombType { 157,  154} , (*1017*) yyTCombType {   0,    0}
         , (*1018*) yyTCombType { 157,  530} , (*1019*) yyTCombType {  67,  661}
         , (*1020*) yyTCombType {  67,  679} , (*1021*) yyTCombType {  67,  661}
         , (*1022*) yyTCombType {  67,  661} , (*1023*) yyTCombType {  67,  661}
         , (*1024*) yyTCombType {  67,  661} , (*1025*) yyTCombType {   0,    0}
         , (*1026*) yyTCombType {   0,    0} , (*1027*) yyTCombType {  67,  661}
         , (*1028*) yyTCombType {   0,    0} , (*1029*) yyTCombType {   0,    0}
         , (*1030*) yyTCombType {   0,    0} , (*1031*) yyTCombType {   0,    0}
         , (*1032*) yyTCombType {  67,  661} , (*1033*) yyTCombType {  67,  679}
         , (*1034*) yyTCombType {  67,  661} , (*1035*) yyTCombType {  67,  661}
         , (*1036*) yyTCombType {  67,  661} , (*1037*) yyTCombType {  67,  661}
         , (*1038*) yyTCombType {  67,  661} , (*1039*) yyTCombType {  67,  661}
         , (*1040*) yyTCombType {  67,  661} , (*1041*) yyTCombType {  67,  661}
         , (*1042*) yyTCombType {  67,  661} , (*1043*) yyTCombType {  67,  661}
         , (*1044*) yyTCombType {  67,  661} , (*1045*) yyTCombType {  67,  679}
         , (*1046*) yyTCombType {  74,  646} , (*1047*) yyTCombType {   0,    0}
         , (*1048*) yyTCombType {  67,  661} , (*1049*) yyTCombType {  67,  661}
         , (*1050*) yyTCombType {  67,  661} , (*1051*) yyTCombType {  67,  661}
         , (*1052*) yyTCombType {  67,  661} , (*1053*) yyTCombType {  67,  661}
         , (*1054*) yyTCombType {  67,  661} , (*1055*) yyTCombType {  67,  661}
         , (*1056*) yyTCombType {  67,  661} , (*1057*) yyTCombType {  67,  661}
         , (*1058*) yyTCombType {  67,  661} , (*1059*) yyTCombType {  67,  661}
         , (*1060*) yyTCombType {  74,  646} , (*1061*) yyTCombType {   0,    0}
         , (*1062*) yyTCombType {   0,    0} , (*1063*) yyTCombType {   0,    0}
         , (*1064*) yyTCombType {   0,    0} , (*1065*) yyTCombType {   0,    0}
         , (*1066*) yyTCombType {   0,    0} , (*1067*) yyTCombType {   0,    0}
         , (*1068*) yyTCombType {   0,    0} , (*1069*) yyTCombType {   0,    0}
         , (*1070*) yyTCombType {   0,    0} , (*1071*) yyTCombType {   0,    0}
         , (*1072*) yyTCombType {  74,  244} , (*1073*) yyTCombType {   0,    0}
         , (*1074*) yyTCombType {   0,    0} , (*1075*) yyTCombType {   0,    0}
         , (*1076*) yyTCombType {  74,  646} , (*1077*) yyTCombType {   0,    0}
         , (*1078*) yyTCombType {   0,    0} , (*1079*) yyTCombType {  74,  646}
         , (*1080*) yyTCombType {  74,  646} , (*1081*) yyTCombType {   0,    0}
         , (*1082*) yyTCombType {  74,  646} , (*1083*) yyTCombType {  74,  646}
         , (*1084*) yyTCombType {   0,    0} , (*1085*) yyTCombType {   0,    0}
         , (*1086*) yyTCombType {   0,    0} , (*1087*) yyTCombType {   0,    0}
         , (*1088*) yyTCombType {   0,    0} , (*1089*) yyTCombType {  74,  646}
         , (*1090*) yyTCombType {   0,    0} , (*1091*) yyTCombType {   0,    0}
         , (*1092*) yyTCombType {   0,    0} , (*1093*) yyTCombType {   0,    0}
         , (*1094*) yyTCombType {   0,    0} , (*1095*) yyTCombType {   0,    0}
         , (*1096*) yyTCombType {   0,    0} , (*1097*) yyTCombType {   0,    0}
         , (*1098*) yyTCombType {   0,    0} , (*1099*) yyTCombType {   0,    0}
         , (*1100*) yyTCombType {   0,    0} , (*1101*) yyTCombType {   0,    0}
         , (*1102*) yyTCombType {   0,    0} , (*1103*) yyTCombType {   0,    0}
         , (*1104*) yyTCombType {   0,    0} , (*1105*) yyTCombType {   0,    0}
         , (*1106*) yyTCombType {   0,    0} , (*1107*) yyTCombType {  74,  646}
         , (*1108*) yyTCombType {   0,    0} , (*1109*) yyTCombType {  74,  245}
         , (*1110*) yyTCombType {  74,  646} , (*1111*) yyTCombType {  74,  646}
         , (*1112*) yyTCombType {  74,  646} , (*1113*) yyTCombType {   0,    0}
         , (*1114*) yyTCombType {   0,    0} , (*1115*) yyTCombType {  74,  646}
         , (*1116*) yyTCombType {   0,    0} , (*1117*) yyTCombType {   0,    0}
         , (*1118*) yyTCombType {   0,    0} , (*1119*) yyTCombType {   0,    0}
         , (*1120*) yyTCombType {  74,  646} , (*1121*) yyTCombType {   0,    0}
         , (*1122*) yyTCombType {  74,  646} , (*1123*) yyTCombType {  74,  246}
         , (*1124*) yyTCombType {  74,  247} , (*1125*) yyTCombType {  74,  248}
         , (*1126*) yyTCombType {  74,  249} , (*1127*) yyTCombType {  74,  250}
         , (*1128*) yyTCombType {  74,  646} , (*1129*) yyTCombType {  74,  646}
         , (*1130*) yyTCombType {   0,    0} , (*1131*) yyTCombType {   0,    0}
         , (*1132*) yyTCombType {   0,    0} , (*1133*) yyTCombType {   0,    0}
         , (*1134*) yyTCombType {   0,    0} , (*1135*) yyTCombType {   0,    0}
         , (*1136*) yyTCombType {  74,  646} , (*1137*) yyTCombType {  74,  646}
         , (*1138*) yyTCombType {  74,  646} , (*1139*) yyTCombType {  74,  646}
         , (*1140*) yyTCombType {  74,  646} , (*1141*) yyTCombType {  74,  646}
         , (*1142*) yyTCombType {  74,  646} , (*1143*) yyTCombType {  74,  646}
         , (*1144*) yyTCombType {  74,  646} , (*1145*) yyTCombType {  74,  646}
         , (*1146*) yyTCombType {  74,  646} , (*1147*) yyTCombType {  74,  646}
         , (*1148*) yyTCombType {  90,  486} , (*1149*) yyTCombType {   0,    0}
         , (*1150*) yyTCombType {   0,    0} , (*1151*) yyTCombType {   0,    0}
         , (*1152*) yyTCombType {   0,    0} , (*1153*) yyTCombType {   0,    0}
         , (*1154*) yyTCombType {   0,    0} , (*1155*) yyTCombType {   0,    0}
         , (*1156*) yyTCombType {  90,  486} , (*1157*) yyTCombType { 113,  608}
         , (*1158*) yyTCombType {   0,    0} , (*1159*) yyTCombType {   0,    0}
         , (*1160*) yyTCombType {   0,    0} , (*1161*) yyTCombType {   0,    0}
         , (*1162*) yyTCombType {   0,    0} , (*1163*) yyTCombType {   0,    0}
         , (*1164*) yyTCombType {   0,    0} , (*1165*) yyTCombType { 113,  611}
         , (*1166*) yyTCombType {   0,    0} , (*1167*) yyTCombType {   0,    0}
         , (*1168*) yyTCombType {   0,    0} , (*1169*) yyTCombType {   0,    0}
         , (*1170*) yyTCombType {   0,    0} , (*1171*) yyTCombType {   0,    0}
         , (*1172*) yyTCombType {  90,  486} , (*1173*) yyTCombType {   0,    0}
         , (*1174*) yyTCombType {   0,    0} , (*1175*) yyTCombType {   0,    0}
         , (*1176*) yyTCombType {  90,  486} , (*1177*) yyTCombType {   0,    0}
         , (*1178*) yyTCombType {   0,    0} , (*1179*) yyTCombType {  90,  486}
         , (*1180*) yyTCombType {   0,    0} , (*1181*) yyTCombType { 113,  611}
         , (*1182*) yyTCombType {  90,  486} , (*1183*) yyTCombType {   0,    0}
         , (*1184*) yyTCombType { 138,  506} , (*1185*) yyTCombType { 113,  608}
         , (*1186*) yyTCombType {   0,    0} , (*1187*) yyTCombType { 148,  520}
         , (*1188*) yyTCombType { 113,  611} , (*1189*) yyTCombType { 138,  506}
         , (*1190*) yyTCombType {   0,    0} , (*1191*) yyTCombType { 113,  611}
         , (*1192*) yyTCombType { 148,  520} , (*1193*) yyTCombType {   0,    0}
         , (*1194*) yyTCombType { 138,  506} , (*1195*) yyTCombType {   0,    0}
         , (*1196*) yyTCombType {   0,    0} , (*1197*) yyTCombType { 148,  520}
         , (*1198*) yyTCombType {   0,    0} , (*1199*) yyTCombType {   0,    0}
         , (*1200*) yyTCombType {   0,    0} , (*1201*) yyTCombType {   0,    0}
         , (*1202*) yyTCombType {   0,    0} , (*1203*) yyTCombType {  90,  486}
         , (*1204*) yyTCombType {  90,   45} , (*1205*) yyTCombType {  90,  486}
         , (*1206*) yyTCombType {   0,    0} , (*1207*) yyTCombType {  90,  486}
         , (*1208*) yyTCombType {  90,  486} , (*1209*) yyTCombType {   0,    0}
         , (*1210*) yyTCombType {  90,  486} , (*1211*) yyTCombType {  90,  486}
         , (*1212*) yyTCombType { 113,  611} , (*1213*) yyTCombType {  90,  486}
         , (*1214*) yyTCombType { 113,  611} , (*1215*) yyTCombType {   0,    0}
         , (*1216*) yyTCombType { 113,  611} , (*1217*) yyTCombType { 160,  536}
         , (*1218*) yyTCombType { 138,  506} , (*1219*) yyTCombType {   0,    0}
         , (*1220*) yyTCombType { 113,  611} , (*1221*) yyTCombType { 148,  520}
         , (*1222*) yyTCombType { 160,  536} , (*1223*) yyTCombType {   0,    0}
         , (*1224*) yyTCombType {   0,    0} , (*1225*) yyTCombType {   0,    0}
         , (*1226*) yyTCombType { 138,  506} , (*1227*) yyTCombType { 160,  536}
         , (*1228*) yyTCombType { 174,  724} , (*1229*) yyTCombType { 148,  520}
         , (*1230*) yyTCombType {   0,    0} , (*1231*) yyTCombType {   0,    0}
         , (*1232*) yyTCombType { 138,  506} , (*1233*) yyTCombType {   0,    0}
         , (*1234*) yyTCombType { 161,  537} , (*1235*) yyTCombType { 148,  520}
         , (*1236*) yyTCombType {   0,    0} , (*1237*) yyTCombType {   0,    0}
         , (*1238*) yyTCombType { 138,  506} , (*1239*) yyTCombType { 161,  537}
         , (*1240*) yyTCombType {   0,    0} , (*1241*) yyTCombType { 148,  520}
         , (*1242*) yyTCombType {   0,    0} , (*1243*) yyTCombType {   0,    0}
         , (*1244*) yyTCombType { 161,  537} , (*1245*) yyTCombType { 176,  719}
         , (*1246*) yyTCombType {   0,    0} , (*1247*) yyTCombType { 174,  465}
         , (*1248*) yyTCombType {   0,    0} , (*1249*) yyTCombType {   0,    0}
         , (*1250*) yyTCombType { 176,  721} , (*1251*) yyTCombType { 160,  536}
         , (*1252*) yyTCombType {   0,    0} , (*1253*) yyTCombType {   0,    0}
         , (*1254*) yyTCombType {   0,    0} , (*1255*) yyTCombType { 176,  719}
         , (*1256*) yyTCombType {   0,    0} , (*1257*) yyTCombType {   0,    0}
         , (*1258*) yyTCombType {   0,    0} , (*1259*) yyTCombType { 160,  536}
         , (*1260*) yyTCombType {   0,    0} , (*1261*) yyTCombType {   0,    0}
         , (*1262*) yyTCombType {   0,    0} , (*1263*) yyTCombType {   0,    0}
         , (*1264*) yyTCombType {   0,    0} , (*1265*) yyTCombType { 160,  536}
         , (*1266*) yyTCombType {   0,    0} , (*1267*) yyTCombType {   0,    0}
         , (*1268*) yyTCombType { 161,  537} , (*1269*) yyTCombType {   0,    0}
         , (*1270*) yyTCombType { 138,  289} , (*1271*) yyTCombType { 160,  536}
         , (*1272*) yyTCombType {   0,    0} , (*1273*) yyTCombType { 148,  292}
         , (*1274*) yyTCombType {   0,    0} , (*1275*) yyTCombType { 174,  307}
         , (*1276*) yyTCombType { 161,  537} , (*1277*) yyTCombType {   0,    0}
         , (*1278*) yyTCombType { 174,  465} , (*1279*) yyTCombType { 176,  721}
         , (*1280*) yyTCombType {   0,    0} , (*1281*) yyTCombType {   0,    0}
         , (*1282*) yyTCombType { 161,  537} , (*1283*) yyTCombType {   0,    0}
         , (*1284*) yyTCombType {   0,    0} , (*1285*) yyTCombType {   0,    0}
         , (*1286*) yyTCombType {   0,    0} , (*1287*) yyTCombType { 176,  721}
         , (*1288*) yyTCombType { 161,  537} , (*1289*) yyTCombType {   0,    0}
         , (*1290*) yyTCombType {   0,    0} , (*1291*) yyTCombType {   0,    0}
         , (*1292*) yyTCombType {   0,    0} , (*1293*) yyTCombType { 176,  721}
         , (*1294*) yyTCombType {   0,    0} , (*1295*) yyTCombType {   0,    0}
         , (*1296*) yyTCombType { 174,  465} , (*1297*) yyTCombType { 174,  465}
         , (*1298*) yyTCombType { 188,  468} , (*1299*) yyTCombType { 176,  721}
         , (*1300*) yyTCombType {   0,    0} , (*1301*) yyTCombType {   0,    0}
         , (*1302*) yyTCombType {   0,    0} , (*1303*) yyTCombType { 188,  468}
         , (*1304*) yyTCombType { 174,  465} , (*1305*) yyTCombType { 174,  465}
         , (*1306*) yyTCombType { 174,  465} , (*1307*) yyTCombType { 174,  465}
         , (*1308*) yyTCombType { 174,  465} , (*1309*) yyTCombType { 174,  465}
         , (*1310*) yyTCombType { 174,  465} , (*1311*) yyTCombType { 174,  465}
         , (*1312*) yyTCombType { 174,  465} , (*1313*) yyTCombType { 174,  465}
         , (*1314*) yyTCombType { 174,  465} , (*1315*) yyTCombType { 174,  465}
         , (*1316*) yyTCombType { 188,  468} , (*1317*) yyTCombType { 189,  479}
         , (*1318*) yyTCombType {   0,    0} , (*1319*) yyTCombType { 188,  468}
         , (*1320*) yyTCombType {   0,    0} , (*1321*) yyTCombType {   0,    0}
         , (*1322*) yyTCombType { 189,  479} , (*1323*) yyTCombType {   0,    0}
         , (*1324*) yyTCombType {   0,    0} , (*1325*) yyTCombType {   0,    0}
         , (*1326*) yyTCombType {   0,    0} , (*1327*) yyTCombType {   0,    0}
         , (*1328*) yyTCombType {   0,    0} , (*1329*) yyTCombType {   0,    0}
         , (*1330*) yyTCombType {   0,    0} , (*1331*) yyTCombType {   0,    0}
         , (*1332*) yyTCombType { 188,  468} , (*1333*) yyTCombType {   0,    0}
         , (*1334*) yyTCombType {   0,    0} , (*1335*) yyTCombType { 189,   17}
         , (*1336*) yyTCombType {   0,    0} , (*1337*) yyTCombType {   0,    0}
         , (*1338*) yyTCombType { 189,   19} , (*1339*) yyTCombType {   0,    0}
         , (*1340*) yyTCombType { 188,  468} , (*1341*) yyTCombType {   0,    0}
         , (*1342*) yyTCombType {   0,    0} , (*1343*) yyTCombType {   0,    0}
         , (*1344*) yyTCombType {   0,    0} , (*1345*) yyTCombType {   0,    0}
         , (*1346*) yyTCombType { 188,  468} , (*1347*) yyTCombType {   0,    0}
         , (*1348*) yyTCombType {   0,    0} , (*1349*) yyTCombType {   0,    0}
         , (*1350*) yyTCombType {   0,    0} , (*1351*) yyTCombType { 189,  479}
         , (*1352*) yyTCombType { 188,  468} , (*1353*) yyTCombType {   0,    0}
         , (*1354*) yyTCombType {   0,    0} , (*1355*) yyTCombType {   0,    0}
         , (*1356*) yyTCombType {   0,    0} , (*1357*) yyTCombType {   0,    0}
         , (*1358*) yyTCombType {   0,    0} , (*1359*) yyTCombType { 189,  479}
         , (*1360*) yyTCombType {   0,    0} , (*1361*) yyTCombType {   0,    0}
         , (*1362*) yyTCombType {   0,    0} , (*1363*) yyTCombType {   0,    0}
         , (*1364*) yyTCombType {   0,    0} , (*1365*) yyTCombType { 189,  479}
         , (*1366*) yyTCombType {   0,    0} , (*1367*) yyTCombType {   0,    0}
         , (*1368*) yyTCombType {   0,    0} , (*1369*) yyTCombType {   0,    0}
         , (*1370*) yyTCombType {   0,    0} , (*1371*) yyTCombType { 189,  479}
         , (*1372*) yyTCombType {   0,    0} , (*1373*) yyTCombType {   0,    0}
         , (*1374*) yyTCombType {   0,    0} , (*1375*) yyTCombType {   0,    0}
         , (*1376*) yyTCombType {   0,    0} , (*1377*) yyTCombType {   0,    0}
         , (*1378*) yyTCombType {   0,    0} , (*1379*) yyTCombType {   0,    0}
         , (*1380*) yyTCombType {   0,    0} , (*1381*) yyTCombType {   0,    0}
         , (*1382*) yyTCombType {   0,    0} , (*1383*) yyTCombType {   0,    0}
         , (*1384*) yyTCombType {   0,    0} , (*1385*) yyTCombType {   0,    0}
         , (*1386*) yyTCombType {   0,    0} , (*1387*) yyTCombType {   0,    0}
         , (*1388*) yyTCombType {   0,    0} , (*1389*) yyTCombType {   0,    0}
         , (*1390*) yyTCombType {   0,    0} , (*1391*) yyTCombType {   0,    0}
         , (*1392*) yyTCombType {   0,    0} , (*1393*) yyTCombType {   0,    0}
         , (*1394*) yyTCombType {   0,    0} , (*1395*) yyTCombType {   0,    0}
         , (*1396*) yyTCombType {   0,    0} , (*1397*) yyTCombType {   0,    0}
         , (*1398*) yyTCombType {   0,    0} , (*1399*) yyTCombType {   0,    0}
         , (*1400*) yyTCombType {   0,    0} , (*1401*) yyTCombType {   0,    0}
         , (*1402*) yyTCombType {   0,    0} , (*1403*) yyTCombType {   0,    0}
         , (*1404*) yyTCombType {   0,    0} , (*1405*) yyTCombType {   0,    0}
         , (*1406*) yyTCombType {   0,    0} , (*1407*) yyTCombType {   0,    0}
         , (*1408*) yyTCombType {   0,    0} , (*1409*) yyTCombType {   0,    0}
         , (*1410*) yyTCombType {   0,    0} , (*1411*) yyTCombType {   0,    0}
         , (*1412*) yyTCombType {   0,    0} , (*1413*) yyTCombType {   0,    0}
         , (*1414*) yyTCombType {   0,    0} , (*1415*) yyTCombType {   0,    0}
         , (*1416*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  315 , (* 110*)    5 , (* 111*)  316 , (* 112*)  317
         , (* 113*)  318 , (* 114*)  319 , (* 115*)  320 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  197 , (* 119*)  208 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  313 , (* 124*)  314
         , (* 125*)   14 , (* 126*)    8 , (* 127*)    9 , (* 128*)  322
         , (* 129*)   35 , (* 130*)   16 , (* 131*)  321 , (* 132*)  178
         , (* 133*)  326 , (* 134*)  190 , (* 135*)   18 , (* 136*)  196
         , (* 137*)   20 , (* 138*)  207 , (* 139*)  323 , (* 140*)   20
         , (* 141*)  328 , (* 142*)  329 , (* 143*)   28 , (* 144*)   32
         , (* 145*)   30 , (* 146*)   34 , (* 147*)  327 , (* 148*)  134
         , (* 149*)  330 , (* 150*)   24 , (* 151*)   67 , (* 152*)  400
         , (* 153*)   85 , (* 154*)  388 , (* 155*)  391 , (* 156*)  395
         , (* 157*)   22 , (* 158*)  325 , (* 159*)  136 , (* 160*)  167
         , (* 161*)  324 , (* 162*)   85 , (* 163*)  420 , (* 164*)   25
         , (* 165*)   85 , (* 166*)  139 , (* 167*)  140 , (* 168*)   46
         , (* 169*)  332 , (* 170*)  141 , (* 171*)  143 , (* 172*)   85
         , (* 173*)   46 , (* 174*)  332 , (* 175*)  393 , (* 176*)  137
         , (* 177*)  144 , (* 178*)  409 , (* 179*)  355 , (* 180*)  356
         , (* 181*)  403 , (* 182*)  151 , (* 183*)  131 , (* 184*)  132
         , (* 185*)  156 , (* 186*)   75 , (* 187*)  147 , (* 188*)  398
         , (* 189*)  412 , (* 190*)  104 , (* 191*)  354 , (* 192*)  105
         , (* 193*)  106 , (* 194*)  153 , (* 195*)  384 , (* 196*)  415
         , (* 197*)  386 , (* 198*)  387 , (* 199*)  160 , (* 200*)  103
         , (* 201*)  417 , (* 202*)  399 , (* 203*)  103 , (* 204*)  187
         , (* 205*)  394 , (* 206*)  149 , (* 207*)  150 , (* 208*)   94
         , (* 209*)  112 , (* 210*)  103 , (* 211*)  183 , (* 212*)   78
         , (* 213*)  184 , (* 214*)  186 , (* 215*)   99 , (* 216*)  189
         , (* 217*)  100 , (* 218*)  382 , (* 219*)  381 , (* 220*)  195
         , (* 221*)  200 , (* 222*)   46 , (* 223*)  332 , (* 224*)  120
         , (* 225*)  199 , (* 226*)  331 , (* 227*)  126 , (* 228*)  352
         , (* 229*)  108 , (* 230*)  109 , (* 231*)  117 , (* 232*)  392
         , (* 233*)  119 , (* 234*)   38 , (* 235*)  128 , (* 236*)   38
         , (* 237*)   80 , (* 238*)  405 , (* 239*)   80 , (* 240*)   46
         , (* 241*)  332 , (* 242*)   81 , (* 243*)   82 , (* 244*)  401
         , (* 245*)   84 , (* 246*)   87 , (* 247*)  127 , (* 248*)  353
         , (* 249*)   84 , (* 250*)   87 , (* 251*)  127 , (* 252*)  389
         , (* 253*)  119 , (* 254*)  122 , (* 255*)  396 , (* 256*)  124
         , (* 257*)  336 , (* 258*)   46 , (* 259*)  332 , (* 260*)  337
         , (* 261*)  355 , (* 262*)  356 , (* 263*)  357 , (* 264*)  338
         , (* 265*)  164 , (* 266*)  424 , (* 267*)   91 , (* 268*)  402
         , (* 269*)   51 , (* 270*)   52 , (* 271*)   53 , (* 272*)  334
         , (* 273*)   55 , (* 274*)   56 , (* 275*)   57 , (* 276*)  202
         , (* 277*)   58 , (* 278*)   60 , (* 279*)  206 , (* 280*)   61
         , (* 281*)  339 , (* 282*)  209 , (* 283*)   63 , (* 284*)  341
         , (* 285*)   64 , (* 286*)   65 , (* 287*)  350 , (* 288*)  351
         , (* 289*)  342 , (* 290*)  211 , (* 291*)   65 , (* 292*)   46
         , (* 293*)  332 , (* 294*)  345 , (* 295*)  346 , (* 296*)  425
         , (* 297*)  426 , (* 298*)  176 , (* 299*)  177 , (* 300*)   46
         , (* 301*)  332 , (* 302*)  428 , (* 303*)  359 , (* 304*)  360
         , (* 305*)  361 , (* 306*)  362 , (* 307*)  363 , (* 308*)  364
         , (* 309*)  365 , (* 310*)  366 , (* 311*)  367 , (* 312*)  368
         , (* 313*)  369 , (* 314*)  370 , (* 315*)  371 , (* 316*)  372
         , (* 317*)  373 , (* 318*)  374 , (* 319*)   92 , (* 320*)  213
         , (* 321*)  377 , (* 322*)   96 , (* 323*)  379 , (* 324*)  214
         , (* 325*)   97 , (* 326*)   98 , (* 327*)  429 , (* 328*)  383
         , (* 329*)   59 , (* 330*)   46 , (* 331*)  332 , (* 332*)   60
         , (* 333*)  102 , (* 334*)   61 , (* 335*)  339 , (* 336*)    0
         , (* 337*)   63 , (* 338*)  341 , (* 339*)   64 , (* 340*)   65
         , (* 341*)   46 , (* 342*)  332 , (* 343*)  111 , (* 344*)  113
         , (* 345*)  114 , (* 346*)   74 , (* 347*)   57 , (* 348*)  333
         , (* 349*)   58 , (* 350*)   60 , (* 351*)   49 , (* 352*)   61
         , (* 353*)  339 , (* 354*)   85 , (* 355*)   63 , (* 356*)  341
         , (* 357*)   64 , (* 358*)   65 , (* 359*)   73 , (* 360*)   52
         , (* 361*)   53 , (* 362*)  334 , (* 363*)   55 , (* 364*)   56
         , (* 365*)   57 , (* 366*)  428 , (* 367*)   58 , (* 368*)   60
         , (* 369*)  166 , (* 370*)   61 , (* 371*)  339 , (* 372*)  390
         , (* 373*)   63 , (* 374*)  341 , (* 375*)   64 , (* 376*)   65
         , (* 377*)   46 , (* 378*)  332 , (* 379*)    0 , (* 380*)   38
         , (* 381*)   85 , (* 382*)    0 , (* 383*)   80 , (* 384*)  355
         , (* 385*)  356 , (* 386*)  404 , (* 387*)  384 , (* 388*)  418
         , (* 389*)  165 , (* 390*)  180 , (* 391*)  430 , (* 392*)  103
         , (* 393*)    0 , (* 394*)   54 , (* 395*)  347 , (* 396*)  334
         , (* 397*)   55 , (* 398*)   56 , (* 399*)   57 , (* 400*)  168
         , (* 401*)   58 , (* 402*)   60 , (* 403*)    0 , (* 404*)   61
         , (* 405*)  339 , (* 406*)    0 , (* 407*)   63 , (* 408*)  341
         , (* 409*)   64 , (* 410*)   65 , (* 411*)   46 , (* 412*)  332
         , (* 413*)  340 , (* 414*)  162 , (* 415*)    0 , (* 416*)  341
         , (* 417*)   64 , (* 418*)   65 , (* 419*)  103 , (* 420*)    0
         , (* 421*)  115 , (* 422*)  109 , (* 423*)  406 , (* 424*)  431
         , (* 425*)  138 , (* 426*)  146 , (* 427*)  140 , (* 428*)    0
         , (* 429*)    0 , (* 430*)    0 , (* 431*)   51 , (* 432*)   52
         , (* 433*)   53 , (* 434*)  334 , (* 435*)   55 , (* 436*)   56
         , (* 437*)   57 , (* 438*)  327 , (* 439*)   58 , (* 440*)   60
         , (* 441*)   24 , (* 442*)   61 , (* 443*)  339 , (* 444*)    0
         , (* 445*)   63 , (* 446*)  341 , (* 447*)   64 , (* 448*)   65
         , (* 449*)   46 , (* 450*)  332 , (* 451*)   62 , (* 452*)  203
         , (* 453*)    0 , (* 454*)  339 , (* 455*)    0 , (* 456*)   63
         , (* 457*)  341 , (* 458*)   64 , (* 459*)   65 , (* 460*)  410
         , (* 461*)    0 , (* 462*)  148 , (* 463*)  152 , (* 464*)  150
         , (* 465*)    0 , (* 466*)  327 , (* 467*)  343 , (* 468*)    0
         , (* 469*)   24 , (* 470*)   49 , (* 471*)  212 , (* 472*)    0
         , (* 473*)   46 , (* 474*)  332 , (* 475*)    0 , (* 476*)    0
         , (* 477*)    0 , (* 478*)   51 , (* 479*)   52 , (* 480*)   53
         , (* 481*)  334 , (* 482*)   55 , (* 483*)   56 , (* 484*)   57
         , (* 485*)  327 , (* 486*)   58 , (* 487*)   60 , (* 488*)   24
         , (* 489*)   61 , (* 490*)  339 , (* 491*)  344 , (* 492*)   63
         , (* 493*)  341 , (* 494*)   64 , (* 495*)   65 , (* 496*)   46
         , (* 497*)  332 , (* 498*)    0 , (* 499*)    0 , (* 500*)   71
         , (* 501*)  348 , (* 502*)   72 , (* 503*)    0 , (* 504*)  355
         , (* 505*)  356 , (* 506*)  357 , (* 507*)  355 , (* 508*)  356
         , (* 509*)  357 , (* 510*)  155 , (* 511*)   85 , (* 512*)    0
         , (* 513*)  155 , (* 514*)  347 , (* 515*)  335 , (* 516*)    0
         , (* 517*)   56 , (* 518*)   57 , (* 519*)    0 , (* 520*)   58
         , (* 521*)   60 , (* 522*)    0 , (* 523*)   61 , (* 524*)  339
         , (* 525*)    0 , (* 526*)   63 , (* 527*)  341 , (* 528*)   64
         , (* 529*)   65 , (* 530*)   46 , (* 531*)  332 , (* 532*)  414
         , (* 533*)    0 , (* 534*)  157 , (* 535*)  159 , (* 536*)    0
         , (* 537*)    0 , (* 538*)  158 , (* 539*)    0 , (* 540*)    0
         , (* 541*)  416 , (* 542*)    0 , (* 543*)  161 , (* 544*)  163
         , (* 545*)    0 , (* 546*)    0 , (* 547*)    0 , (* 548*)   77
         , (* 549*)  103 , (* 550*)   51 , (* 551*)   52 , (* 552*)   53
         , (* 553*)  334 , (* 554*)   55 , (* 555*)   56 , (* 556*)   57
         , (* 557*)    0 , (* 558*)   58 , (* 559*)   60 , (* 560*)    0
         , (* 561*)   61 , (* 562*)  339 , (* 563*)    0 , (* 564*)   63
         , (* 565*)  341 , (* 566*)   64 , (* 567*)   65 , (* 568*)    0
         , (* 569*)    0 , (* 570*)   69 , (* 571*)   70 , (* 572*)    0
         , (* 573*)    0 , (* 574*)   51 , (* 575*)   52 , (* 576*)   53
         , (* 577*)  334 , (* 578*)   55 , (* 579*)   56 , (* 580*)   57
         , (* 581*)    0 , (* 582*)   58 , (* 583*)   60 , (* 584*)    0
         , (* 585*)   61 , (* 586*)  339 , (* 587*)    0 , (* 588*)   63
         , (* 589*)  341 , (* 590*)   64 , (* 591*)   65 , (* 592*)    0
         , (* 593*)    0 , (* 594*)    0 , (* 595*)    0 , (* 596*)    0
         , (* 597*)   51 , (* 598*)   52 , (* 599*)   53 , (* 600*)  334
         , (* 601*)   55 , (* 602*)   56 , (* 603*)   57 , (* 604*)    0
         , (* 605*)   58 , (* 606*)   60 , (* 607*)    0 , (* 608*)   61
         , (* 609*)  339 , (* 610*)    0 , (* 611*)   63 , (* 612*)  341
         , (* 613*)   64 , (* 614*)   65 , (* 615*)  355 , (* 616*)  356
         , (* 617*)  357 , (* 618*)    0 , (* 619*)    0 , (* 620*)  349
         , (* 621*)   91 , (* 622*)  358 , (* 623*)   46 , (* 624*)  332
         , (* 625*)    0 , (* 626*)    0 , (* 627*)    0 , (* 628*)    0
         , (* 629*)    0 , (* 630*)    0 , (* 631*)   51 , (* 632*)   52
         , (* 633*)   53 , (* 634*)  334 , (* 635*)   55 , (* 636*)   56
         , (* 637*)   57 , (* 638*)    0 , (* 639*)   58 , (* 640*)   60
         , (* 641*)  375 , (* 642*)   61 , (* 643*)  339 , (* 644*)    0
         , (* 645*)   63 , (* 646*)  341 , (* 647*)   64 , (* 648*)   65
         , (* 649*)    0 , (* 650*)    0 , (* 651*)    0 , (* 652*)    0
         , (* 653*)    0 , (* 654*)    0 , (* 655*)    0 , (* 656*)    0
         , (* 657*)  359 , (* 658*)  360 , (* 659*)  361 , (* 660*)  362
         , (* 661*)  363 , (* 662*)  364 , (* 663*)  365 , (* 664*)  366
         , (* 665*)  367 , (* 666*)  368 , (* 667*)  369 , (* 668*)  370
         , (* 669*)  371 , (* 670*)  372 , (* 671*)  373 , (* 672*)  374
         , (* 673*)   92 , (* 674*)    0 , (* 675*)  377 , (* 676*)   96
         , (* 677*)  379 , (* 678*)    0 , (* 679*)   97 , (* 680*)   98
         , (* 681*)    0 , (* 682*)  383 , (* 683*)    0 , (* 684*)    0
         , (* 685*)   46 , (* 686*)  332 , (* 687*)  102 , (* 688*)    0
         , (* 689*)    0 , (* 690*)    0 , (* 691*)    0 , (* 692*)    0
         , (* 693*)    0 , (* 694*)    0 , (* 695*)    0 , (* 696*)    0
         , (* 697*)  111 , (* 698*)  113 , (* 699*)  114 , (* 700*)  355
         , (* 701*)  356 , (* 702*)  357 , (* 703*)  385 , (* 704*)    0
         , (* 705*)    0 , (* 706*)   91 , (* 707*)  376 , (* 708*)    0
         , (* 709*)    0 , (* 710*)    0 , (* 711*)    0 , (* 712*)    0
         , (* 713*)    0 , (* 714*)    0 , (* 715*)    0 , (* 716*)    0
         , (* 717*)    0 , (* 718*)    0 , (* 719*)    0 , (* 720*)    0
         , (* 721*)    0 , (* 722*)    0 , (* 723*)    0 , (* 724*)   51
         , (* 725*)   52 , (* 726*)   53 , (* 727*)  334 , (* 728*)   55
         , (* 729*)   56 , (* 730*)   57 , (* 731*)    0 , (* 732*)   58
         , (* 733*)   60 , (* 734*)    0 , (* 735*)   61 , (* 736*)  339
         , (* 737*)    0 , (* 738*)   63 , (* 739*)  341 , (* 740*)   64
         , (* 741*)   65 , (* 742*)  359 , (* 743*)  360 , (* 744*)  361
         , (* 745*)  362 , (* 746*)  363 , (* 747*)  364 , (* 748*)  365
         , (* 749*)  366 , (* 750*)  367 , (* 751*)  368 , (* 752*)  369
         , (* 753*)  370 , (* 754*)  371 , (* 755*)  372 , (* 756*)  373
         , (* 757*)  374 , (* 758*)   92 , (* 759*)    0 , (* 760*)  377
         , (* 761*)   96 , (* 762*)  379 , (* 763*)    0 , (* 764*)   97
         , (* 765*)   98 , (* 766*)    0 , (* 767*)  383 , (* 768*)  355
         , (* 769*)  356 , (* 770*)  357 , (* 771*)    0 , (* 772*)  102
         , (* 773*)    0 , (* 774*)   91 , (* 775*)  378 , (* 776*)    0
         , (* 777*)    0 , (* 778*)    0 , (* 779*)    0 , (* 780*)    0
         , (* 781*)    0 , (* 782*)  111 , (* 783*)  113 , (* 784*)  114
         , (* 785*)    0 , (* 786*)   51 , (* 787*)   52 , (* 788*)   53
         , (* 789*)  334 , (* 790*)   55 , (* 791*)   56 , (* 792*)   57
         , (* 793*)    0 , (* 794*)   58 , (* 795*)   60 , (* 796*)    0
         , (* 797*)   61 , (* 798*)  339 , (* 799*)    0 , (* 800*)   63
         , (* 801*)  341 , (* 802*)   64 , (* 803*)   65 , (* 804*)    0
         , (* 805*)    0 , (* 806*)    0 , (* 807*)    0 , (* 808*)    0
         , (* 809*)    0 , (* 810*)  359 , (* 811*)  360 , (* 812*)  361
         , (* 813*)  362 , (* 814*)  363 , (* 815*)  364 , (* 816*)  365
         , (* 817*)  366 , (* 818*)  367 , (* 819*)  368 , (* 820*)  369
         , (* 821*)  370 , (* 822*)  371 , (* 823*)  372 , (* 824*)  373
         , (* 825*)  374 , (* 826*)   92 , (* 827*)    0 , (* 828*)  377
         , (* 829*)   96 , (* 830*)  379 , (* 831*)    0 , (* 832*)   97
         , (* 833*)   98 , (* 834*)    0 , (* 835*)  383 , (* 836*)  355
         , (* 837*)  356 , (* 838*)  357 , (* 839*)    0 , (* 840*)  102
         , (* 841*)    0 , (* 842*)   91 , (* 843*)  380 , (* 844*)   46
         , (* 845*)  332 , (* 846*)    0 , (* 847*)    0 , (* 848*)    0
         , (* 849*)    0 , (* 850*)  111 , (* 851*)  113 , (* 852*)  114
         , (* 853*)    0 , (* 854*)    0 , (* 855*)    0 , (* 856*)    0
         , (* 857*)    0 , (* 858*)    0 , (* 859*)    0 , (* 860*)    0
         , (* 861*)    0 , (* 862*)  397 , (* 863*)    0 , (* 864*)    0
         , (* 865*)    0 , (* 866*)    0 , (* 867*)    0 , (* 868*)    0
         , (* 869*)    0 , (* 870*)    0 , (* 871*)    0 , (* 872*)    0
         , (* 873*)    0 , (* 874*)    0 , (* 875*)    0 , (* 876*)    0
         , (* 877*)    0 , (* 878*)  359 , (* 879*)  360 , (* 880*)  361
         , (* 881*)  362 , (* 882*)  363 , (* 883*)  364 , (* 884*)  365
         , (* 885*)  366 , (* 886*)  367 , (* 887*)  368 , (* 888*)  369
         , (* 889*)  370 , (* 890*)  371 , (* 891*)  372 , (* 892*)  373
         , (* 893*)  374 , (* 894*)   92 , (* 895*)    0 , (* 896*)  377
         , (* 897*)   96 , (* 898*)  379 , (* 899*)    0 , (* 900*)   97
         , (* 901*)   98 , (* 902*)    0 , (* 903*)  383 , (* 904*)    0
         , (* 905*)    0 , (* 906*)   46 , (* 907*)  332 , (* 908*)  102
         , (* 909*)    0 , (* 910*)    0 , (* 911*)    0 , (* 912*)    0
         , (* 913*)    0 , (* 914*)    0 , (* 915*)    0 , (* 916*)    0
         , (* 917*)    0 , (* 918*)  111 , (* 919*)  113 , (* 920*)  114
         , (* 921*)  355 , (* 922*)  356 , (* 923*)  357 , (* 924*)  408
         , (* 925*)    0 , (* 926*)    0 , (* 927*)   91 , (* 928*)  407
         , (* 929*)    0 , (* 930*)    0 , (* 931*)    0 , (* 932*)    0
         , (* 933*)    0 , (* 934*)    0 , (* 935*)    0 , (* 936*)    0
         , (* 937*)    0 , (* 938*)    0 , (* 939*)    0 , (* 940*)    0
         , (* 941*)    0 , (* 942*)    0 , (* 943*)    0 , (* 944*)    0
         , (* 945*)   51 , (* 946*)   52 , (* 947*)   53 , (* 948*)  334
         , (* 949*)   55 , (* 950*)   56 , (* 951*)   57 , (* 952*)    0
         , (* 953*)   58 , (* 954*)   60 , (* 955*)    0 , (* 956*)   61
         , (* 957*)  339 , (* 958*)    0 , (* 959*)   63 , (* 960*)  341
         , (* 961*)   64 , (* 962*)   65 , (* 963*)  359 , (* 964*)  360
         , (* 965*)  361 , (* 966*)  362 , (* 967*)  363 , (* 968*)  364
         , (* 969*)  365 , (* 970*)  366 , (* 971*)  367 , (* 972*)  368
         , (* 973*)  369 , (* 974*)  370 , (* 975*)  371 , (* 976*)  372
         , (* 977*)  373 , (* 978*)  374 , (* 979*)   92 , (* 980*)    0
         , (* 981*)  377 , (* 982*)   96 , (* 983*)  379 , (* 984*)    0
         , (* 985*)   97 , (* 986*)   98 , (* 987*)    0 , (* 988*)  383
         , (* 989*)  355 , (* 990*)  356 , (* 991*)  357 , (* 992*)    0
         , (* 993*)  102 , (* 994*)    0 , (* 995*)   91 , (* 996*)  411
         , (* 997*)    0 , (* 998*)    0 , (* 999*)    0 , (*1000*)    0
         , (*1001*)    0 , (*1002*)    0 , (*1003*)  111 , (*1004*)  113
         , (*1005*)  114 , (*1006*)    0 , (*1007*)   51 , (*1008*)   52
         , (*1009*)   53 , (*1010*)  334 , (*1011*)   55 , (*1012*)   56
         , (*1013*)   57 , (*1014*)    0 , (*1015*)   58 , (*1016*)   60
         , (*1017*)    0 , (*1018*)   61 , (*1019*)  339 , (*1020*)    0
         , (*1021*)   63 , (*1022*)  341 , (*1023*)   64 , (*1024*)   65
         , (*1025*)    0 , (*1026*)    0 , (*1027*)    0 , (*1028*)    0
         , (*1029*)    0 , (*1030*)    0 , (*1031*)  359 , (*1032*)  360
         , (*1033*)  361 , (*1034*)  362 , (*1035*)  363 , (*1036*)  364
         , (*1037*)  365 , (*1038*)  366 , (*1039*)  367 , (*1040*)  368
         , (*1041*)  369 , (*1042*)  370 , (*1043*)  371 , (*1044*)  372
         , (*1045*)  373 , (*1046*)  374 , (*1047*)   92 , (*1048*)    0
         , (*1049*)  377 , (*1050*)   96 , (*1051*)  379 , (*1052*)  171
         , (*1053*)   97 , (*1054*)   98 , (*1055*)    0 , (*1056*)  383
         , (*1057*)  355 , (*1058*)  356 , (*1059*)  357 , (*1060*)    0
         , (*1061*)  102 , (*1062*)    0 , (*1063*)   91 , (*1064*)  413
         , (*1065*)    0 , (*1066*)   46 , (*1067*)  332 , (*1068*)    0
         , (*1069*)    0 , (*1070*)    0 , (*1071*)  111 , (*1072*)  113
         , (*1073*)  114 , (*1074*)    0 , (*1075*)    0 , (*1076*)    0
         , (*1077*)    0 , (*1078*)    0 , (*1079*)    0 , (*1080*)    0
         , (*1081*)    0 , (*1082*)    0 , (*1083*)    0 , (*1084*)  172
         , (*1085*)    0 , (*1086*)    0 , (*1087*)    0 , (*1088*)    0
         , (*1089*)    0 , (*1090*)    0 , (*1091*)    0 , (*1092*)    0
         , (*1093*)    0 , (*1094*)    0 , (*1095*)    0 , (*1096*)    0
         , (*1097*)  169 , (*1098*)    0 , (*1099*)  359 , (*1100*)  360
         , (*1101*)  361 , (*1102*)  362 , (*1103*)  363 , (*1104*)  364
         , (*1105*)  365 , (*1106*)  366 , (*1107*)  367 , (*1108*)  368
         , (*1109*)  369 , (*1110*)  370 , (*1111*)  371 , (*1112*)  372
         , (*1113*)  373 , (*1114*)  374 , (*1115*)   92 , (*1116*)    0
         , (*1117*)  377 , (*1118*)   96 , (*1119*)  379 , (*1120*)    0
         , (*1121*)   97 , (*1122*)   98 , (*1123*)    0 , (*1124*)  383
         , (*1125*)  137 , (*1126*)    0 , (*1127*)  409 , (*1128*)    0
         , (*1129*)  102 , (*1130*)    0 , (*1131*)    0 , (*1132*)    0
         , (*1133*)    0 , (*1134*)    0 , (*1135*)    0 , (*1136*)  147
         , (*1137*)    0 , (*1138*)  412 , (*1139*)  111 , (*1140*)  113
         , (*1141*)  114 , (*1142*)    0 , (*1143*)  153 , (*1144*)    0
         , (*1145*)  415 , (*1146*)    0 , (*1147*)    0 , (*1148*)  160
         , (*1149*)    0 , (*1150*)  417 , (*1151*)    0 , (*1152*)    0
         , (*1153*)    0 , (*1154*)    0 , (*1155*)    0 , (*1156*)   46
         , (*1157*)  332 , (*1158*)    0 , (*1159*)    0 , (*1160*)    0
         , (*1161*)    0 , (*1162*)    0 , (*1163*)    0 , (*1164*)    0
         , (*1165*)    0 , (*1166*)    0 , (*1167*)   51 , (*1168*)   52
         , (*1169*)   53 , (*1170*)  334 , (*1171*)   55 , (*1172*)   56
         , (*1173*)   57 , (*1174*)  419 , (*1175*)   58 , (*1176*)   60
         , (*1177*)    0 , (*1178*)   61 , (*1179*)  339 , (*1180*)    0
         , (*1181*)   63 , (*1182*)  341 , (*1183*)   64 , (*1184*)   65
         , (*1185*)   46 , (*1186*)  332 , (*1187*)    0 , (*1188*)    0
         , (*1189*)  191 , (*1190*)    0 , (*1191*)    0 , (*1192*)    0
         , (*1193*)  137 , (*1194*)    0 , (*1195*)  409 , (*1196*)    0
         , (*1197*)    0 , (*1198*)    0 , (*1199*)  174 , (*1200*)  421
         , (*1201*)  175 , (*1202*)  423 , (*1203*)  172 , (*1204*)  147
         , (*1205*)    0 , (*1206*)  412 , (*1207*)    0 , (*1208*)    0
         , (*1209*)    0 , (*1210*)    0 , (*1211*)  153 , (*1212*)    0
         , (*1213*)  415 , (*1214*)  164 , (*1215*)  424 , (*1216*)  160
         , (*1217*)  137 , (*1218*)  417 , (*1219*)  409 , (*1220*)    0
         , (*1221*)    0 , (*1222*)    0 , (*1223*)    0 , (*1224*)    0
         , (*1225*)    0 , (*1226*)    0 , (*1227*)    0 , (*1228*)  147
         , (*1229*)    0 , (*1230*)  412 , (*1231*)    0 , (*1232*)    0
         , (*1233*)    0 , (*1234*)    0 , (*1235*)  153 , (*1236*)    0
         , (*1237*)  415 , (*1238*)  193 , (*1239*)    0 , (*1240*)  160
         , (*1241*)    0 , (*1242*)  417 , (*1243*)    0 , (*1244*)    0
         , (*1245*)  425 , (*1246*)  426 , (*1247*)  176 , (*1248*)  177
         , (*1249*)    0 , (*1250*)    0 , (*1251*)    0 , (*1252*)   46
         , (*1253*)  332 , (*1254*)    0 , (*1255*)    0 , (*1256*)    0
         , (*1257*)   51 , (*1258*)   52 , (*1259*)   53 , (*1260*)  334
         , (*1261*)   55 , (*1262*)   56 , (*1263*)   57 , (*1264*)    0
         , (*1265*)   58 , (*1266*)   60 , (*1267*)    0 , (*1268*)   61
         , (*1269*)  339 , (*1270*)  172 , (*1271*)   63 , (*1272*)  341
         , (*1273*)   64 , (*1274*)   65 , (*1275*)    0 , (*1276*)    0
         , (*1277*)    0 , (*1278*)    0 , (*1279*)    0 , (*1280*)    0
         , (*1281*)  204 , (*1282*)  164 , (*1283*)  424 , (*1284*)    0
         , (*1285*)    0 , (*1286*)   51 , (*1287*)   52 , (*1288*)   53
         , (*1289*)  334 , (*1290*)   55 , (*1291*)   56 , (*1292*)   57
         , (*1293*)    0 , (*1294*)   58 , (*1295*)   60 , (*1296*)    0
         , (*1297*)   61 , (*1298*)  339 , (*1299*)    0 , (*1300*)   63
         , (*1301*)  341 , (*1302*)   64 , (*1303*)   65 , (*1304*)    0
         , (*1305*)    0 , (*1306*)  164 , (*1307*)  424 , (*1308*)    0
         , (*1309*)  137 , (*1310*)    0 , (*1311*)  409 , (*1312*)    0
         , (*1313*)  427 , (*1314*)  426 , (*1315*)    0 , (*1316*)    0
         , (*1317*)    0 , (*1318*)    0 , (*1319*)  422 , (*1320*)  147
         , (*1321*)  423 , (*1322*)  412 , (*1323*)    0 , (*1324*)    0
         , (*1325*)    0 , (*1326*)    0 , (*1327*)  153 , (*1328*)    0
         , (*1329*)  415 , (*1330*)    0 , (*1331*)    0 , (*1332*)  160
         , (*1333*)    0 , (*1334*)  417 , (*1335*)    0 , (*1336*)    0
         , (*1337*)  425 , (*1338*)  426 , (*1339*)  176 , (*1340*)  177
         , (*1341*)    0 , (*1342*)    0 , (*1343*)    0 , (*1344*)    0
         , (*1345*)    0 , (*1346*)    0 , (*1347*)    0 , (*1348*)    0
         , (*1349*)    0 , (*1350*)    0 , (*1351*)    0 , (*1352*)    0
         , (*1353*)   51 , (*1354*)   52 , (*1355*)   53 , (*1356*)  334
         , (*1357*)   55 , (*1358*)   56 , (*1359*)   57 , (*1360*)    0
         , (*1361*)   58 , (*1362*)   60 , (*1363*)    0 , (*1364*)   61
         , (*1365*)  339 , (*1366*)    0 , (*1367*)   63 , (*1368*)  341
         , (*1369*)   64 , (*1370*)   65 , (*1371*)    0 , (*1372*)    0
         , (*1373*)    0 , (*1374*)    0 , (*1375*)    0 , (*1376*)    0
         , (*1377*)    0 , (*1378*)    0 , (*1379*)    0 , (*1380*)    0
         , (*1381*)    0 , (*1382*)    0 , (*1383*)    0 , (*1384*)    0
         , (*1385*)  174 , (*1386*)  421 , (*1387*)  175 , (*1388*)  423
         , (*1389*)    0 , (*1390*)    0 , (*1391*)    0 , (*1392*)    0
         , (*1393*)    0 , (*1394*)    0 , (*1395*)    0 , (*1396*)    0
         , (*1397*)    0 , (*1398*)  164 , (*1399*)  424 , (*1400*)    0
         , (*1401*)    0 , (*1402*)    0 , (*1403*)    0 , (*1404*)    0
         , (*1405*)    0 , (*1406*)    0 , (*1407*)    0 , (*1408*)    0
         , (*1409*)    0 , (*1410*)    0 , (*1411*)    0 , (*1412*)    0
         , (*1413*)    0 , (*1414*)    0 , (*1415*)    0 , (*1416*)    0
         , (*1417*)    0 , (*1418*)    0 , (*1419*)    0 , (*1420*)    0
         , (*1421*)    0 , (*1422*)    0 , (*1423*)    0 , (*1424*)    0
         , (*1425*)    0 , (*1426*)    0 , (*1427*)    0 , (*1428*)    0
         , (*1429*)  425 , (*1430*)  426 , (*1431*)  176 , (*1432*)  177
         , (*1433*)    0 , (*1434*)    0 , (*1435*)    0 , (*1436*)    0
         , (*1437*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 432(P   1)*)    2 , (*A 433(P   2)*)    1 , (*A 434(P   3)*)    1
         , (*A 435(P   4)*)    1 , (*A 436(P   5)*)    1 , (*A 437(P   6)*)    1
         , (*A 438(P   7)*)    1 , (*A 439(P   8)*)    0 , (*A 440(P   9)*)    0
         , (*A 441(P  10)*)    0 , (*A 442(P  11)*)    0 , (*A 443(P  12)*)    0
         , (*A 444(P  13)*)    0 , (*A 445(P  14)*)    4 , (*A 446(P  15)*)    7
         , (*A 447(P  16)*)    4 , (*A 448(P  17)*)    5 , (*A 449(P  18)*)    0
         , (*A 450(P  19)*)    2 , (*A 451(P  20)*)    3 , (*A 452(P  21)*)    3
         , (*A 453(P  22)*)    3 , (*A 454(P  23)*)    7 , (*A 455(P  24)*)    5
         , (*A 456(P  25)*)    7 , (*A 457(P  26)*)    3 , (*A 458(P  27)*)   10
         , (*A 459(P  28)*)    3 , (*A 460(P  29)*)    9 , (*A 461(P  30)*)    0
         , (*A 462(P  31)*)    1 , (*A 463(P  32)*)    0 , (*A 464(P  33)*)    1
         , (*A 465(P  34)*)    0 , (*A 466(P  35)*)    3 , (*A 467(P  36)*)    3
         , (*A 468(P  37)*)    0 , (*A 469(P  38)*)    2 , (*A 470(P  39)*)    3
         , (*A 471(P  40)*)    1 , (*A 472(P  41)*)    3 , (*A 473(P  42)*)    1
         , (*A 474(P  43)*)    3 , (*A 475(P  44)*)    3 , (*A 476(P  45)*)    3
         , (*A 477(P  46)*)    1 , (*A 478(P  47)*)    3 , (*A 479(P  48)*)    0
         , (*A 480(P  49)*)    0 , (*A 481(P  50)*)    2 , (*A 482(P  51)*)    1
         , (*A 483(P  52)*)    3 , (*A 484(P  53)*)    1 , (*A 485(P  54)*)    1
         , (*A 486(P  55)*)    1 , (*A 487(P  56)*)    3 , (*A 488(P  57)*)    1
         , (*A 489(P  58)*)    1 , (*A 490(P  59)*)    1 , (*A 491(P  60)*)    3
         , (*A 492(P  61)*)    3 , (*A 493(P  62)*)    0 , (*A 494(P  63)*)    0
         , (*A 495(P  64)*)    1 , (*A 496(P  65)*)    1 , (*A 497(P  66)*)    3
         , (*A 498(P  67)*)    1 , (*A 499(P  68)*)    1 , (*A 500(P  69)*)    2
         , (*A 501(P  70)*)    2 , (*A 502(P  71)*)    0 , (*A 503(P  72)*)    1
         , (*A 504(P  73)*)    2 , (*A 505(P  74)*)    0 , (*A 506(P  75)*)    1
         , (*A 507(P  76)*)    2 , (*A 508(P  77)*)    3 , (*A 509(P  78)*)    1
         , (*A 510(P  79)*)    0 , (*A 511(P  80)*)    2 , (*A 512(P  81)*)    0
         , (*A 513(P  82)*)    0 , (*A 514(P  83)*)    6 , (*A 515(P  84)*)    1
         , (*A 516(P  85)*)    1 , (*A 517(P  86)*)    1 , (*A 518(P  87)*)    2
         , (*A 519(P  88)*)    0 , (*A 520(P  89)*)    1 , (*A 521(P  90)*)    2
         , (*A 522(P  91)*)    3 , (*A 523(P  92)*)    1 , (*A 524(P  93)*)    3
         , (*A 525(P  94)*)    1 , (*A 526(P  95)*)    1 , (*A 527(P  96)*)    1
         , (*A 528(P  97)*)    2 , (*A 529(P  98)*)    0 , (*A 530(P  99)*)    1
         , (*A 531(P 100)*)    2 , (*A 532(P 101)*)    3 , (*A 533(P 102)*)    3
         , (*A 534(P 103)*)    1 , (*A 535(P 104)*)    2 , (*A 536(P 105)*)    0
         , (*A 537(P 106)*)    1 , (*A 538(P 107)*)    2 , (*A 539(P 108)*)    3
         , (*A 540(P 109)*)    0 , (*A 541(P 110)*)    2 , (*A 542(P 111)*)    0
         , (*A 543(P 112)*)    0 , (*A 544(P 113)*)    2 , (*A 545(P 114)*)    0
         , (*A 546(P 115)*)    5 , (*A 547(P 116)*)    1 , (*A 548(P 117)*)    1
         , (*A 549(P 118)*)    1 , (*A 550(P 119)*)    1 , (*A 551(P 120)*)    1
         , (*A 552(P 121)*)    1 , (*A 553(P 122)*)    1 , (*A 554(P 123)*)    1
         , (*A 555(P 124)*)    1 , (*A 556(P 125)*)    1 , (*A 557(P 126)*)    1
         , (*A 558(P 127)*)    1 , (*A 559(P 128)*)    1 , (*A 560(P 129)*)    1
         , (*A 561(P 130)*)    1 , (*A 562(P 131)*)    1 , (*A 563(P 132)*)    1
         , (*A 564(P 133)*)    1 , (*A 565(P 134)*)    0 , (*A 566(P 135)*)    1
         , (*A 567(P 136)*)    4 , (*A 568(P 137)*)    1 , (*A 569(P 138)*)    2
         , (*A 570(P 139)*)    2 , (*A 571(P 140)*)    1 , (*A 572(P 141)*)    3
         , (*A 573(P 142)*)    2 , (*A 574(P 143)*)    5 , (*A 575(P 144)*)    1
         , (*A 576(P 145)*)    3 , (*A 577(P 146)*)    0 , (*A 578(P 147)*)    1
         , (*A 579(P 148)*)    1 , (*A 580(P 149)*)    3 , (*A 581(P 150)*)    1
         , (*A 582(P 151)*)    1 , (*A 583(P 152)*)    0 , (*A 584(P 153)*)    2
         , (*A 585(P 154)*)    1 , (*A 586(P 155)*)    3 , (*A 587(P 156)*)    1
         , (*A 588(P 157)*)    3 , (*A 589(P 158)*)    0 , (*A 590(P 159)*)    1
         , (*A 591(P 160)*)    3 , (*A 592(P 161)*)    1 , (*A 593(P 162)*)    3
         , (*A 594(P 163)*)    1 , (*A 595(P 164)*)    2 , (*A 596(P 165)*)    0
         , (*A 597(P 166)*)    1 , (*A 598(P 167)*)    3 , (*A 599(P 168)*)    1
         , (*A 600(P 169)*)    3 , (*A 601(P 170)*)    1 , (*A 602(P 171)*)    3
         , (*A 603(P 172)*)    0 , (*A 604(P 173)*)    1 , (*A 605(P 174)*)    2
         , (*A 606(P 175)*)    0 , (*A 607(P 176)*)    1 , (*A 608(P 177)*)    1
         , (*A 609(P 178)*)    3 , (*A 610(P 179)*)    5 , (*A 611(P 180)*)    1
         , (*A 612(P 181)*)    2 , (*A 613(P 182)*)    3 , (*A 614(P 183)*)    1
         , (*A 615(P 184)*)    3 , (*A 616(P 185)*)    0 , (*A 617(P 186)*)    2
         , (*A 618(P 187)*)    1 , (*A 619(P 188)*)    3 , (*A 620(P 189)*)    0
         , (*A 621(P 190)*)    1 , (*A 622(P 191)*)    1 , (*A 623(P 192)*)    1
         , (*A 624(P 193)*)    2 , (*A 625(P 194)*)    2 , (*A 626(P 195)*)    2
         , (*A 627(P 196)*)    2 , (*A 628(P 197)*)    0 , (*A 629(P 198)*)    0
         , (*A 630(P 199)*)    2 , (*A 631(P 200)*)    4 , (*A 632(P 201)*)    1
         , (*A 633(P 202)*)    1 , (*A 634(P 203)*)    4 , (*A 635(P 204)*)    3
         , (*A 636(P 205)*)    2 , (*A 637(P 206)*)    0 , (*A 638(P 207)*)    1
         , (*A 639(P 208)*)    1 , (*A 640(P 209)*)    2 , (*A 641(P 210)*)    2
         , (*A 642(P 211)*)    1 , (*A 643(P 212)*)    2 , (*A 644(P 213)*)    2
         , (*A 645(P 214)*)    1 , (*A 646(P 215)*)    2 , (*A 647(P 216)*)    1
         , (*A 648(P 217)*)    2 , (*A 649(P 218)*)    2 , (*A 650(P 219)*)    1
         , (*A 651(P 220)*)    2 , (*A 652(P 221)*)    2 , (*A 653(P 222)*)    1
         , (*A 654(P 223)*)    2 , (*A 655(P 224)*)    2 , (*A 656(P 225)*)    1
         , (*A 657(P 226)*)    2 , (*A 658(P 227)*)    2 , (*A 659(P 228)*)    2
         , (*A 660(P 229)*)    2 , (*A 661(P 230)*)    3 , (*A 662(P 231)*)    1
         , (*A 663(P 232)*)    2 , (*A 664(P 233)*)    2 , (*A 665(P 234)*)    2
         , (*A 666(P 235)*)    1 , (*A 667(P 236)*)    1 , (*A 668(P 237)*)    3
         , (*A 669(P 238)*)    1 , (*A 670(P 239)*)    2 , (*A 671(P 240)*)    2
         , (*A 672(P 241)*)    3 , (*A 673(P 242)*)    0 , (*A 674(P 243)*)    1
         , (*A 675(P 244)*)    2 , (*A 676(P 245)*)    2 , (*A 677(P 246)*)    1
         , (*A 678(P 247)*)    3 , (*A 679(P 248)*)    3 , (*A 680(P 249)*)    1
         , (*A 681(P 250)*)    1 , (*A 682(P 251)*)    1 , (*A 683(P 252)*)    1
         , (*A 684(P 253)*)    1 , (*A 685(P 254)*)    1 , (*A 686(P 255)*)    1
         , (*A 687(P 256)*)    1 , (*A 688(P 257)*)    1 , (*A 689(P 258)*)    1
         , (*A 690(P 259)*)    1 , (*A 691(P 260)*)    3 , (*A 692(P 261)*)    1
         , (*A 693(P 262)*)    1 , (*A 694(P 263)*)    1 , (*A 695(P 264)*)    1
         , (*A 696(P 265)*)    1 , (*A 697(P 266)*)    1 , (*A 698(P 267)*)    1
         , (*A 699(P 268)*)    1 , (*A 700(P 269)*)    1 , (*A 701(P 270)*)    1
         , (*A 702(P 271)*)    1 , (*A 703(P 272)*)    1 , (*A 704(P 273)*)    1
         , (*A 705(P 274)*)    1 , (*A 706(P 275)*)    1 , (*A 707(P 276)*)    1
         , (*A 708(P 277)*)    0 , (*A 709(P 278)*)    5 , (*A 710(P 279)*)    0
         , (*A 711(P 280)*)    5 , (*A 712(P 281)*)    1 , (*A 713(P 282)*)    1
         , (*A 714(P 283)*)    1 , (*A 715(P 284)*)    1 , (*A 716(P 285)*)    1
         , (*A 717(P 286)*)    1 , (*A 718(P 287)*)    0 , (*A 719(P 288)*)    1
         , (*A 720(P 289)*)    1 , (*A 721(P 290)*)    1 , (*A 722(P 291)*)    2
         , (*A 723(P 292)*)    0 , (*A 724(P 293)*)    1 , (*A 725(P 294)*)    1
         , (*A 726(P 295)*)    2 , (*A 727(P 296)*)    2 , (*A 728(P 297)*)    1
         , (*A 729(P 298)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 432(P   1)*)  286 , (*A 433(P   2)*)  110 , (*A 434(P   3)*)  110
         , (*A 435(P   4)*)  110 , (*A 436(P   5)*)  110 , (*A 437(P   6)*)  110
         , (*A 438(P   7)*)  110 , (*A 439(P   8)*)  116 , (*A 440(P   9)*)  117
         , (*A 441(P  10)*)  118 , (*A 442(P  11)*)  119 , (*A 443(P  12)*)  120
         , (*A 444(P  13)*)  121 , (*A 445(P  14)*)  125 , (*A 446(P  15)*)  114
         , (*A 447(P  16)*)  129 , (*A 448(P  17)*)  109 , (*A 449(P  18)*)  124
         , (*A 450(P  19)*)  124 , (*A 451(P  20)*)  131 , (*A 452(P  21)*)  131
         , (*A 453(P  22)*)  132 , (*A 454(P  23)*)  115 , (*A 455(P  24)*)  134
         , (*A 456(P  25)*)  111 , (*A 457(P  26)*)  136 , (*A 458(P  27)*)  112
         , (*A 459(P  28)*)  138 , (*A 460(P  29)*)  113 , (*A 461(P  30)*)  139
         , (*A 462(P  31)*)  122 , (*A 463(P  32)*)  122 , (*A 464(P  33)*)  140
         , (*A 465(P  34)*)  140 , (*A 466(P  35)*)  137 , (*A 467(P  36)*)  126
         , (*A 468(P  37)*)  127 , (*A 469(P  38)*)  127 , (*A 470(P  39)*)  142
         , (*A 471(P  40)*)  143 , (*A 472(P  41)*)  143 , (*A 473(P  42)*)  144
         , (*A 474(P  43)*)  144 , (*A 475(P  44)*)  145 , (*A 476(P  45)*)  142
         , (*A 477(P  46)*)  146 , (*A 478(P  47)*)  146 , (*A 479(P  48)*)  128
         , (*A 480(P  49)*)  133 , (*A 481(P  50)*)  133 , (*A 482(P  51)*)  147
         , (*A 483(P  52)*)  147 , (*A 484(P  53)*)  148 , (*A 485(P  54)*)  123
         , (*A 486(P  55)*)  149 , (*A 487(P  56)*)  150 , (*A 488(P  57)*)  151
         , (*A 489(P  58)*)  151 , (*A 490(P  59)*)  152 , (*A 491(P  60)*)  152
         , (*A 492(P  61)*)  141 , (*A 493(P  62)*)  141 , (*A 494(P  63)*)  153
         , (*A 495(P  64)*)  153 , (*A 496(P  65)*)  154 , (*A 497(P  66)*)  154
         , (*A 498(P  67)*)  155 , (*A 499(P  68)*)  155 , (*A 500(P  69)*)  155
         , (*A 501(P  70)*)  157 , (*A 502(P  71)*)  157 , (*A 503(P  72)*)  158
         , (*A 504(P  73)*)  160 , (*A 505(P  74)*)  159 , (*A 506(P  75)*)  159
         , (*A 507(P  76)*)  161 , (*A 508(P  77)*)  161 , (*A 509(P  78)*)  163
         , (*A 510(P  79)*)  164 , (*A 511(P  80)*)  165 , (*A 512(P  81)*)  165
         , (*A 513(P  82)*)  166 , (*A 514(P  83)*)  162 , (*A 515(P  84)*)  168
         , (*A 516(P  85)*)  168 , (*A 517(P  86)*)  169 , (*A 518(P  87)*)  171
         , (*A 519(P  88)*)  170 , (*A 520(P  89)*)  170 , (*A 521(P  90)*)  172
         , (*A 522(P  91)*)  172 , (*A 523(P  92)*)  174 , (*A 524(P  93)*)  173
         , (*A 525(P  94)*)  175 , (*A 526(P  95)*)  175 , (*A 527(P  96)*)  176
         , (*A 528(P  97)*)  178 , (*A 529(P  98)*)  177 , (*A 530(P  99)*)  177
         , (*A 531(P 100)*)  179 , (*A 532(P 101)*)  179 , (*A 533(P 102)*)  180
         , (*A 534(P 103)*)  181 , (*A 535(P 104)*)  183 , (*A 536(P 105)*)  182
         , (*A 537(P 106)*)  182 , (*A 538(P 107)*)  184 , (*A 539(P 108)*)  184
         , (*A 540(P 109)*)  186 , (*A 541(P 110)*)  187 , (*A 542(P 111)*)  187
         , (*A 543(P 112)*)  188 , (*A 544(P 113)*)  189 , (*A 545(P 114)*)  189
         , (*A 546(P 115)*)  185 , (*A 547(P 116)*)  190 , (*A 548(P 117)*)  156
         , (*A 549(P 118)*)  156 , (*A 550(P 119)*)  156 , (*A 551(P 120)*)  156
         , (*A 552(P 121)*)  156 , (*A 553(P 122)*)  156 , (*A 554(P 123)*)  156
         , (*A 555(P 124)*)  156 , (*A 556(P 125)*)  156 , (*A 557(P 126)*)  156
         , (*A 558(P 127)*)  156 , (*A 559(P 128)*)  156 , (*A 560(P 129)*)  156
         , (*A 561(P 130)*)  156 , (*A 562(P 131)*)  156 , (*A 563(P 132)*)  156
         , (*A 564(P 133)*)  156 , (*A 565(P 134)*)  207 , (*A 566(P 135)*)  207
         , (*A 567(P 136)*)  156 , (*A 568(P 137)*)  156 , (*A 569(P 138)*)  210
         , (*A 570(P 139)*)  209 , (*A 571(P 140)*)  156 , (*A 572(P 141)*)  213
         , (*A 573(P 142)*)  211 , (*A 574(P 143)*)  212 , (*A 575(P 144)*)  214
         , (*A 576(P 145)*)  216 , (*A 577(P 146)*)  215 , (*A 578(P 147)*)  215
         , (*A 579(P 148)*)  217 , (*A 580(P 149)*)  217 , (*A 581(P 150)*)  218
         , (*A 582(P 151)*)  156 , (*A 583(P 152)*)  219 , (*A 584(P 153)*)  219
         , (*A 585(P 154)*)  220 , (*A 586(P 155)*)  220 , (*A 587(P 156)*)  221
         , (*A 588(P 157)*)  156 , (*A 589(P 158)*)  222 , (*A 590(P 159)*)  222
         , (*A 591(P 160)*)  222 , (*A 592(P 161)*)  223 , (*A 593(P 162)*)  223
         , (*A 594(P 163)*)  225 , (*A 595(P 164)*)  224 , (*A 596(P 165)*)  227
         , (*A 597(P 166)*)  227 , (*A 598(P 167)*)  227 , (*A 599(P 168)*)  228
         , (*A 600(P 169)*)  228 , (*A 601(P 170)*)  230 , (*A 602(P 171)*)  229
         , (*A 603(P 172)*)  208 , (*A 604(P 173)*)  208 , (*A 605(P 174)*)  208
         , (*A 606(P 175)*)  231 , (*A 607(P 176)*)  231 , (*A 608(P 177)*)  231
         , (*A 609(P 178)*)  233 , (*A 610(P 179)*)  232 , (*A 611(P 180)*)  156
         , (*A 612(P 181)*)  156 , (*A 613(P 182)*)  226 , (*A 614(P 183)*)  237
         , (*A 615(P 184)*)  234 , (*A 616(P 185)*)  238 , (*A 617(P 186)*)  238
         , (*A 618(P 187)*)  239 , (*A 619(P 188)*)  239 , (*A 620(P 189)*)  241
         , (*A 621(P 190)*)  241 , (*A 622(P 191)*)  241 , (*A 623(P 192)*)  241
         , (*A 624(P 193)*)  242 , (*A 625(P 194)*)  243 , (*A 626(P 195)*)  240
         , (*A 627(P 196)*)  235 , (*A 628(P 197)*)  235 , (*A 629(P 198)*)  236
         , (*A 630(P 199)*)  236 , (*A 631(P 200)*)  236 , (*A 632(P 201)*)  244
         , (*A 633(P 202)*)  245 , (*A 634(P 203)*)  244 , (*A 635(P 204)*)  247
         , (*A 636(P 205)*)  248 , (*A 637(P 206)*)  249 , (*A 638(P 207)*)  167
         , (*A 639(P 208)*)  250 , (*A 640(P 209)*)  252 , (*A 641(P 210)*)  250
         , (*A 642(P 211)*)  251 , (*A 643(P 212)*)  254 , (*A 644(P 213)*)  251
         , (*A 645(P 214)*)  253 , (*A 646(P 215)*)  253 , (*A 647(P 216)*)  255
         , (*A 648(P 217)*)  258 , (*A 649(P 218)*)  255 , (*A 650(P 219)*)  256
         , (*A 651(P 220)*)  261 , (*A 652(P 221)*)  256 , (*A 653(P 222)*)  259
         , (*A 654(P 223)*)  264 , (*A 655(P 224)*)  259 , (*A 656(P 225)*)  262
         , (*A 657(P 226)*)  262 , (*A 658(P 227)*)  265 , (*A 659(P 228)*)  265
         , (*A 660(P 229)*)  265 , (*A 661(P 230)*)  265 , (*A 662(P 231)*)  265
         , (*A 663(P 232)*)  265 , (*A 664(P 233)*)  265 , (*A 665(P 234)*)  265
         , (*A 666(P 235)*)  265 , (*A 667(P 236)*)  265 , (*A 668(P 237)*)  268
         , (*A 669(P 238)*)  270 , (*A 670(P 239)*)  271 , (*A 671(P 240)*)  270
         , (*A 672(P 241)*)  269 , (*A 673(P 242)*)  272 , (*A 674(P 243)*)  272
         , (*A 675(P 244)*)  274 , (*A 676(P 245)*)  272 , (*A 677(P 246)*)  273
         , (*A 678(P 247)*)  273 , (*A 679(P 248)*)  267 , (*A 680(P 249)*)  267
         , (*A 681(P 250)*)  267 , (*A 682(P 251)*)  267 , (*A 683(P 252)*)  267
         , (*A 684(P 253)*)  267 , (*A 685(P 254)*)  267 , (*A 686(P 255)*)  267
         , (*A 687(P 256)*)  267 , (*A 688(P 257)*)  267 , (*A 689(P 258)*)  267
         , (*A 690(P 259)*)  267 , (*A 691(P 260)*)  267 , (*A 692(P 261)*)  257
         , (*A 693(P 262)*)  257 , (*A 694(P 263)*)  257 , (*A 695(P 264)*)  257
         , (*A 696(P 265)*)  257 , (*A 697(P 266)*)  257 , (*A 698(P 267)*)  257
         , (*A 699(P 268)*)  260 , (*A 700(P 269)*)  260 , (*A 701(P 270)*)  260
         , (*A 702(P 271)*)  263 , (*A 703(P 272)*)  263 , (*A 704(P 273)*)  263
         , (*A 705(P 274)*)  263 , (*A 706(P 275)*)  266 , (*A 707(P 276)*)  266
         , (*A 708(P 277)*)  275 , (*A 709(P 278)*)  276 , (*A 710(P 279)*)  277
         , (*A 711(P 280)*)  246 , (*A 712(P 281)*)  278 , (*A 713(P 282)*)  278
         , (*A 714(P 283)*)  278 , (*A 715(P 284)*)  278 , (*A 716(P 285)*)  278
         , (*A 717(P 286)*)  278 , (*A 718(P 287)*)  130 , (*A 719(P 288)*)  130
         , (*A 720(P 289)*)  280 , (*A 721(P 290)*)  281 , (*A 722(P 291)*)  280
         , (*A 723(P 292)*)  135 , (*A 724(P 293)*)  135 , (*A 725(P 294)*)  282
         , (*A 726(P 295)*)  284 , (*A 727(P 296)*)  282 , (*A 728(P 297)*)  283
         , (*A 729(P 298)*)  285
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   37
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   66 , (*:  10*)  108 , (*:  11*)   94
         , (*:  12*)   94 , (*:  13*)   95 , (*:  14*)   66
         , (*:  15*)   14 , (*:  16*)   14 , (*:  17*)   95
         , (*:  18*)   30 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   95 , (*:  25*)   66 , (*:  26*)   95
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   70 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)   19
         , (*:  36*)   95 , (*:  37*)   69 , (*:  38*)   19
         , (*:  39*)   95 , (*:  40*)   40 , (*:  41*)   96
         , (*:  42*)   96 , (*:  43*)   96 , (*:  44*)    5
         , (*:  45*)   95 , (*:  46*)   92 , (*:  47*)   70
         , (*:  48*)    5 , (*:  49*)   74 , (*:  50*)   96
         , (*:  51*)   19 , (*:  52*)   19 , (*:  53*)   96
         , (*:  54*)   19 , (*:  55*)   96 , (*:  56*)    5
         , (*:  57*)    5 , (*:  58*)   96 , (*:  59*)    5
         , (*:  60*)    5 , (*:  61*)   96 , (*:  62*)    5
         , (*:  63*)   96 , (*:  64*)   96 , (*:  65*)    5
         , (*:  66*)   95 , (*:  67*)   67 , (*:  68*)   96
         , (*:  69*)   81 , (*:  70*)   96 , (*:  71*)   70
         , (*:  72*)   96 , (*:  73*)   70 , (*:  74*)    5
         , (*:  75*)   79 , (*:  76*)   96 , (*:  77*)   81
         , (*:  78*)   40 , (*:  79*)   69 , (*:  80*)   70
         , (*:  81*)   70 , (*:  82*)   70 , (*:  83*)   70
         , (*:  84*)   95 , (*:  85*)   19 , (*:  86*)   95
         , (*:  87*)   66 , (*:  88*)   95 , (*:  89*)   52
         , (*:  90*)   11 , (*:  91*)   19 , (*:  92*)   48
         , (*:  93*)   39 , (*:  94*)   48 , (*:  95*)   95
         , (*:  96*)   95 , (*:  97*)   95 , (*:  98*)   76
         , (*:  99*)   76 , (*: 100*)   76 , (*: 101*)   95
         , (*: 102*)   19 , (*: 103*)   19 , (*: 104*)   19
         , (*: 105*)   19 , (*: 106*)   19 , (*: 107*)   96
         , (*: 108*)   19 , (*: 109*)   19 , (*: 110*)   19
         , (*: 111*)   39 , (*: 112*)   39 , (*: 113*)   19
         , (*: 114*)   19 , (*: 115*)   19 , (*: 116*)   19
         , (*: 117*)   19 , (*: 118*)   19 , (*: 119*)   69
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   19 , (*: 124*)   68 , (*: 125*)   96
         , (*: 126*)   19 , (*: 127*)   66 , (*: 128*)   19
         , (*: 129*)    6 , (*: 130*)   76 , (*: 131*)   76
         , (*: 132*)   76 , (*: 133*)   95 , (*: 134*)   19
         , (*: 135*)   95 , (*: 136*)   67 , (*: 137*)    9
         , (*: 138*)    9 , (*: 139*)   66 , (*: 140*)   68
         , (*: 141*)   68 , (*: 142*)   95 , (*: 143*)   68
         , (*: 144*)   68 , (*: 145*)   96 , (*: 146*)   66
         , (*: 147*)    9 , (*: 148*)    9 , (*: 149*)   66
         , (*: 150*)   68 , (*: 151*)   95 , (*: 152*)   66
         , (*: 153*)    9 , (*: 154*)   52 , (*: 155*)   68
         , (*: 156*)   95 , (*: 157*)    9 , (*: 158*)   66
         , (*: 159*)   66 , (*: 160*)    9 , (*: 161*)    9
         , (*: 162*)   66 , (*: 163*)   66 , (*: 164*)   66
         , (*: 165*)    9 , (*: 166*)   95 , (*: 167*)   66
         , (*: 168*)    9 , (*: 169*)    9 , (*: 170*)   19
         , (*: 171*)   19 , (*: 172*)   74 , (*: 173*)   96
         , (*: 174*)   19 , (*: 175*)   96 , (*: 176*)    9
         , (*: 177*)   14 , (*: 178*)   66 , (*: 179*)   95
         , (*: 180*)   66 , (*: 181*)   95 , (*: 182*)   95
         , (*: 183*)   69 , (*: 184*)   19 , (*: 185*)   95
         , (*: 186*)   67 , (*: 187*)   66 , (*: 188*)    9
         , (*: 189*)    9 , (*: 190*)    9 , (*: 191*)    9
         , (*: 192*)   19 , (*: 193*)   19 , (*: 194*)   95
         , (*: 195*)   67 , (*: 196*)   69 , (*: 197*)   69
         , (*: 198*)   70 , (*: 199*)   70 , (*: 200*)   66
         , (*: 201*)   14 , (*: 202*)   14 , (*: 203*)   19
         , (*: 204*)   19 , (*: 205*)   95 , (*: 206*)   67
         , (*: 207*)   69 , (*: 208*)   69 , (*: 209*)   66
         , (*: 210*)   27 , (*: 211*)   95 , (*: 212*)   95
         , (*: 213*)   95 , (*: 214*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 215)*)  485 (*P53*) , (*RR: 216)*)  462 (*P30*)
         , (*RR: 217)*)  452 (*P20*) , (*RR: 218)*)  451 (*P19*)
         , (*RR: 219)*)  475 (*P43*) , (*RR: 220)*)  470 (*P38*)
         , (*RR: 221)*)  476 (*P44*) , (*RR: 222)*)  467 (*P35*)
         , (*RR: 223)*)  486 (*P54*) , (*RR: 224)*)  446 (*P14*)
         , (*RR: 225)*)  503 (*P71*) , (*RR: 226)*)  614 (*P182*)
         , (*RR: 227)*)  569 (*P137*) , (*RR: 228)*)  706 (*P274*)
         , (*RR: 229)*)  707 (*P275*) , (*RR: 230)*)  487 (*P55*)
         , (*RR: 231)*)  680 (*P248*) , (*RR: 232)*)  681 (*P249*)
         , (*RR: 233)*)  682 (*P250*) , (*RR: 234)*)  683 (*P251*)
         , (*RR: 235)*)  684 (*P252*) , (*RR: 236)*)  685 (*P253*)
         , (*RR: 237)*)  686 (*P254*) , (*RR: 238)*)  689 (*P257*)
         , (*RR: 239)*)  690 (*P258*) , (*RR: 240)*)  687 (*P255*)
         , (*RR: 241)*)  688 (*P256*) , (*RR: 242)*)  640 (*P208*)
         , (*RR: 243)*)  643 (*P211*) , (*RR: 244)*)  698 (*P266*)
         , (*RR: 245)*)  692 (*P260*) , (*RR: 246)*)  693 (*P261*)
         , (*RR: 247)*)  694 (*P262*) , (*RR: 248)*)  695 (*P263*)
         , (*RR: 249)*)  696 (*P264*) , (*RR: 250)*)  697 (*P265*)
         , (*RR: 251)*)  699 (*P267*) , (*RR: 252)*)  700 (*P268*)
         , (*RR: 253)*)  701 (*P269*) , (*RR: 254)*)  704 (*P272*)
         , (*RR: 255)*)  705 (*P273*) , (*RR: 256)*)  702 (*P270*)
         , (*RR: 257)*)  703 (*P271*) , (*RR: 258)*)  670 (*P238*)
         , (*RR: 259)*)  668 (*P236*) , (*RR: 260)*)  658 (*P226*)
         , (*RR: 261)*)  672 (*P240*) , (*RR: 262)*)  675 (*P243*)
         , (*RR: 263)*)  663 (*P231*) , (*RR: 264)*)  691 (*P259*)
         , (*RR: 265)*)  574 (*P142*) , (*RR: 266)*)  572 (*P140*)
         , (*RR: 267)*)  623 (*P191*) , (*RR: 268)*)  621 (*P189*)
         , (*RR: 269)*)  622 (*P190*) , (*RR: 270)*)  615 (*P183*)
         , (*RR: 271)*)  490 (*P58*) , (*RR: 272)*)  491 (*P59*)
         , (*RR: 273)*)  587 (*P155*) , (*RR: 274)*)  499 (*P67*)
         , (*RR: 275)*)  500 (*P68*) , (*RR: 276)*)  575 (*P143*)
         , (*RR: 277)*)  581 (*P149*) , (*RR: 278)*)  576 (*P144*)
         , (*RR: 279)*)  588 (*P156*) , (*RR: 280)*)  609 (*P177*)
         , (*RR: 281)*)  594 (*P162*) , (*RR: 282)*)  610 (*P178*)
         , (*RR: 283)*)  630 (*P198*) , (*RR: 284)*)  631 (*P199*)
         , (*RR: 285)*)  527 (*P95*) , (*RR: 286)*)  517 (*P85*)
         , (*RR: 287)*)  534 (*P102*) , (*RR: 288)*)  448 (*P16*)
         , (*RR: 289)*)  509 (*P77*) , (*RR: 290)*)  508 (*P76*)
         , (*RR: 291)*)  507 (*P75*) , (*RR: 292)*)  523 (*P91*)
         , (*RR: 293)*)  522 (*P90*) , (*RR: 294)*)  515 (*P83*)
         , (*RR: 295)*)  516 (*P84*) , (*RR: 296)*)  521 (*P89*)
         , (*RR: 297)*)  525 (*P93*) , (*RR: 298)*)  526 (*P94*)
         , (*RR: 299)*)  532 (*P100*) , (*RR: 300)*)  531 (*P99*)
         , (*RR: 301)*)  539 (*P107*) , (*RR: 302)*)  538 (*P106*)
         , (*RR: 303)*)  632 (*P200*) , (*RR: 304)*)  633 (*P201*)
         , (*RR: 305)*)  634 (*P202*) , (*RR: 306)*)  711 (*P279*)
         , (*RR: 307)*)  464 (*P32*) , (*RR: 308)*)  454 (*P22*)
         , (*RR: 309)*)  456 (*P24*) , (*RR: 310)*)  466 (*P34*)
         , (*RR: 311)*)  458 (*P26*) , (*RR: 312)*)  460 (*P28*)
         , (*RR: 313)*)  457 (*P25*) , (*RR: 314)*)  459 (*P27*)
         , (*RR: 315)*)  433 (*P1*) , (*RR: 316)*)  434 (*P2*)
         , (*RR: 317)*)  435 (*P3*) , (*RR: 318)*)  436 (*P4*)
         , (*RR: 319)*)  437 (*P5*) , (*RR: 320)*)  438 (*P6*)
         , (*RR: 321)*)  450 (*P18*) , (*RR: 322)*)  453 (*P21*)
         , (*RR: 323)*)  474 (*P42*) , (*RR: 324)*)  472 (*P40*)
         , (*RR: 325)*)  471 (*P39*) , (*RR: 326)*)  447 (*P15*)
         , (*RR: 327)*)  469 (*P37*) , (*RR: 328)*)  477 (*P45*)
         , (*RR: 329)*)  478 (*P46*) , (*RR: 330)*)  492 (*P60*)
         , (*RR: 331)*)  635 (*P203*) , (*RR: 332)*)  667 (*P235*)
         , (*RR: 333)*)  678 (*P246*) , (*RR: 334)*)  642 (*P210*)
         , (*RR: 335)*)  644 (*P212*) , (*RR: 336)*)  648 (*P216*)
         , (*RR: 337)*)  651 (*P219*) , (*RR: 338)*)  654 (*P222*)
         , (*RR: 339)*)  653 (*P221*) , (*RR: 340)*)  655 (*P223*)
         , (*RR: 341)*)  656 (*P224*) , (*RR: 342)*)  657 (*P225*)
         , (*RR: 343)*)  669 (*P237*) , (*RR: 344)*)  671 (*P239*)
         , (*RR: 345)*)  659 (*P227*) , (*RR: 346)*)  660 (*P228*)
         , (*RR: 347)*)  677 (*P245*) , (*RR: 348)*)  674 (*P242*)
         , (*RR: 349)*)  676 (*P244*) , (*RR: 350)*)  664 (*P232*)
         , (*RR: 351)*)  665 (*P233*) , (*RR: 352)*)  612 (*P180*)
         , (*RR: 353)*)  619 (*P187*) , (*RR: 354)*)  624 (*P192*)
         , (*RR: 355)*)  488 (*P56*) , (*RR: 356)*)  489 (*P57*)
         , (*RR: 357)*)  498 (*P66*) , (*RR: 358)*)  541 (*P109*)
         , (*RR: 359)*)  549 (*P117*) , (*RR: 360)*)  550 (*P118*)
         , (*RR: 361)*)  551 (*P119*) , (*RR: 362)*)  552 (*P120*)
         , (*RR: 363)*)  553 (*P121*) , (*RR: 364)*)  554 (*P122*)
         , (*RR: 365)*)  555 (*P123*) , (*RR: 366)*)  556 (*P124*)
         , (*RR: 367)*)  557 (*P125*) , (*RR: 368)*)  558 (*P126*)
         , (*RR: 369)*)  559 (*P127*) , (*RR: 370)*)  560 (*P128*)
         , (*RR: 371)*)  561 (*P129*) , (*RR: 372)*)  562 (*P130*)
         , (*RR: 373)*)  563 (*P131*) , (*RR: 374)*)  564 (*P132*)
         , (*RR: 375)*)  605 (*P173*) , (*RR: 376)*)  567 (*P135*)
         , (*RR: 377)*)  568 (*P136*) , (*RR: 378)*)  570 (*P138*)
         , (*RR: 379)*)  571 (*P139*) , (*RR: 380)*)  573 (*P141*)
         , (*RR: 381)*)  580 (*P148*) , (*RR: 382)*)  579 (*P147*)
         , (*RR: 383)*)  582 (*P150*) , (*RR: 384)*)  585 (*P153*)
         , (*RR: 385)*)  544 (*P112*) , (*RR: 386)*)  546 (*P114*)
         , (*RR: 387)*)  586 (*P154*) , (*RR: 388)*)  584 (*P152*)
         , (*RR: 389)*)  593 (*P161*) , (*RR: 390)*)  595 (*P163*)
         , (*RR: 391)*)  591 (*P159*) , (*RR: 392)*)  592 (*P160*)
         , (*RR: 393)*)  601 (*P169*) , (*RR: 394)*)  600 (*P168*)
         , (*RR: 395)*)  598 (*P166*) , (*RR: 396)*)  599 (*P167*)
         , (*RR: 397)*)  602 (*P170*) , (*RR: 398)*)  625 (*P193*)
         , (*RR: 399)*)  626 (*P194*) , (*RR: 400)*)  617 (*P185*)
         , (*RR: 401)*)  618 (*P186*) , (*RR: 402)*)  627 (*P195*)
         , (*RR: 403)*)  496 (*P64*) , (*RR: 404)*)  497 (*P65*)
         , (*RR: 405)*)  613 (*P181*) , (*RR: 406)*)  504 (*P72*)
         , (*RR: 407)*)  511 (*P79*) , (*RR: 408)*)  514 (*P82*)
         , (*RR: 409)*)  712 (*P280*) , (*RR: 410)*)  518 (*P86*)
         , (*RR: 411)*)  524 (*P92*) , (*RR: 412)*)  713 (*P281*)
         , (*RR: 413)*)  533 (*P101*) , (*RR: 414)*)  528 (*P96*)
         , (*RR: 415)*)  717 (*P285*) , (*RR: 416)*)  535 (*P103*)
         , (*RR: 417)*)  715 (*P283*) , (*RR: 418)*)  636 (*P204*)
         , (*RR: 419)*)  729 (*P297*) , (*RR: 420)*)  726 (*P294*)
         , (*RR: 421)*)  725 (*P293*) , (*RR: 422)*)  727 (*P295*)
         , (*RR: 423)*)  728 (*P296*) , (*RR: 424)*)  716 (*P284*)
         , (*RR: 425)*)  720 (*P288*) , (*RR: 426)*)  714 (*P282*)
         , (*RR: 427)*)  722 (*P290*) , (*RR: 428)*)  484 (*P52*)
         , (*RR: 429)*)  483 (*P51*) , (*RR: 430)*)  482 (*P50*)
         , (*RR: 431)*)  455 (*P23*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 72 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 432 => (* P1 _0000_ (286): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 433,315 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 434,316 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 435,317 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 436,318 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 437,319 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 438,320 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 439 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 286 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 440 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 289 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 441 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 292 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 442 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 295 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 443 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 298 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 444 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 301 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 445 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE NonreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 304 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         (* Default Coord. *) 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntKind := Ukt . UkInterface ; 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 446,224 => (* P15 InstInterface (114): InterfaceLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 328 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 447,326 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 335 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         <* ASSERT LScopeRef ^ . ScpKind = Skt . SkInterface *>
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 448,288 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 346 of "FM3Parser.lalr" *)
                 VAR LScopeRefOpen , LScopeRefDecl : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ;
                         <* ASSERT LScopeRefOpen . ScpKind = Skt . SkInterface *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                           
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                           
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefOpen ) ;
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . CheckStdUnitPragma ( FM3Units . UnitStackTopRef ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       END ; 
                     
              | 449 => (* P18 IntfPragmas (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 450,321 => (* P19 IntfPragmas (124): IntfPragmas IntfPragma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 451,218 => (* P20 IntfPragma (131): StkOpenPragma StkPragmaId StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 377 of "FM3Parser.lalr" *)
                 FM3Pass1 . RecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 452,217 => (* P21 IntfPragma (131): StkOpenPragma StkIdent StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 380 of "FM3Parser.lalr" *)
                 FM3Pass1 . UnrecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 453,322 => (* P22 ModuleLt (132): OptUnsafe StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 383 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         (* Default Coord. *) 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 454,308 => (* P23 InstModule (115): ModuleLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 406 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 455,431 => (* P24 ModuleMiddle (134): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 413 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 456,309 => (* P25 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 426 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl , LScopeRefOpen : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         (* Default Position & Coord. *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ;
                         <* ASSERT LScopeRefOpen . ScpKind = Skt . SkModule *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                           
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ; 
                         
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRefDecl ) ;
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 457,313 => (* P26 GenInterfaceLt (136): StkRwGENERIC StkRwINTERFACE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 455 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 458,311 => (* P27 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 476 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_TI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 459,314 => (* P28 GenModuleLt (138): StkRwGENERIC StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 484 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 460,312 => (* P29 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 504 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_TI ( Itk . ItkDeclScopeRt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 461 => (* P30 Block (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 462,216 => (* P31 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 515 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 463 => (* P32 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 517 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe? *) := FALSE (* Safe. *) ; 
              | 464,307 => (* P33 OptSemicolon (140): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 519 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
              | 465 => (* P34 OptSemicolon (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;
                (* line 521 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       (* If semicolon is absent, right end of item to left. *) 
                     
              | 466,310 => (* P35 GenFormalList (137): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 529 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 467,222 => (* P36 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 535 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 468 => (* P37 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 469,327 => (* P38 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 470,220 => (* P39 Import (142): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 471,325 => (* P40 ImportItemPlusList (143): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 472,324 => (* P41 ImportItemPlusList (143): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 473 => (* P42 ImportItem (144): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 554 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 474,323 => (* P43 ImportItem (144): NonreservedIdent StkRwAS NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 557 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 475,219 => (* P44 FromImportLt (145): StkRwFROM NonreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 561 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 476,221 => (* P45 Import (142): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 477,328 => (* P46 FromImportIdPlusList (146): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 572 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 478,329 => (* P47 FromImportIdPlusList (146): FromImportIdPlusList StkComma NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 577 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 479 => (* P48 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 582 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 480 => (* P49 Exports (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 589 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos 
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 481 => (* P50 Exports (133): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;

              | 482,430 => (* P51 ExportIdPlusList (147): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 483,429 => (* P52 ExportIdPlusList (147): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;

              | 484,428 => (* P53 ExportIdent (148): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 609 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 485,215 => (* P54 NonreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 624 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                (* FIXME: emit error if it's reserved. *) 
                     
              | 486,223 => (* P55 IdentRef (149): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 631 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 487,230 => (* P56 QualIdentRef (150): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 638 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . QualIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 488,355 => (* P57 IdentOrQualRef (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 647 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 489,356 => (* P58 IdentOrQualRef (151): QualIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 652 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 490,271 => (* P59 DeclIdListElems (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 665 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 491,272 => (* P60 DeclIdListElems (152): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 677 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 492,330 => (* P61 IdStarList (141): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 693 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 493 => (* P62 IdStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 695 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 494 => (* P63 IdentOrQualRefStarList (153): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 153;
                (* line 699 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 495 => (* P64 IdentOrQualRefStarList (153): IdentOrQualRefPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 701 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 496,403 => (* P65 IdentOrQualRefPlusList (154): IdentOrQualRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 703 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 497,404 => (* P66 IdentOrQualRefPlusList (154): IdentOrQualRefPlusList StkComma IdentOrQualRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 705 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 498,357 => (* P67 TypeId (155): IdentOrQualRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 499,274 => (* P68 TypeId (155): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 715 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . PaPos ) ; 
                     
              | 500,275 => (* P69 TypeId (155): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 720 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . PaPos
                         ) ; 
                     
              | 501 => (* P70 OptConstType (157): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 730 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 502 => (* P71 OptConstType (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 732 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 503,225 => (* P72 ConstDeclGroupLt (158): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 741 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
              | 504,406 => (* P73 ConstDeclGroup (160): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 744 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 505 => (* P74 ConstDeclList (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 749 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 506 => (* P75 ConstDeclList (159): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 159;
                (* line 755 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 507,291 => (* P76 ConstDeclPlus (161): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 161;
                (* line 760 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 508,290 => (* P77 ConstDeclPlus (161): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 161;
                (* line 765 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 509,289 => (* P78 ConstDeclId (163): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 782 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . PaInt (* Ident count, 0 if error, else 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkConst , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 510 => (* P79 ConstDeclTypeTok (164): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 164;
                (* line 788 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP 
                         ( Itk . ItkConstDeclType , FM3Scanner . Attribute . Position ) ;
                     
              | 511,407 => (* P80 OptConstDeclType (165): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 793 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                     
              | 512 => (* P81 OptConstDeclType (165): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 165;
                (* line 798 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 513 => (* P82 ConstDeclValueTok (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 805 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP 
                         ( Itk . ItkConstDeclValue , FM3Scanner . Attribute . Position ) ;
                     
              | 514,408 => (* P83 ConstDecl (162): ConstDeclId ConstDeclTypeTok OptConstDeclType ConstDeclValueTok StkEqual Expr .*)
                DEC (yyStackPtr, 6); yyNonterminal := 162;
                (* line 811 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkConstDeclLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 515,294 => (* P84 TypeRelation (168): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 825 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 516,295 => (* P85 TypeRelation (168): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 827 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 517,286 => (* P86 TypeDeclGroupLt (169): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 518,410 => (* P87 TypeDeclGroup (171): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 841 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 519 => (* P88 TypeDeclList (170): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 170;
                (* line 846 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 520 => (* P89 TypeDeclList (170): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 852 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 521,296 => (* P90 TypeDeclPlus (172): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 857 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 522,293 => (* P91 TypeDeclPlus (172): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 172;
                (* line 862 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 523,292 => (* P92 TypeDeclId (174): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 878 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . PaInt (* Ident count, 0 if error, else 1. *)
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkType , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ; 
                     
              | 524,411 => (* P93 TypeDecl (173): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 884 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 525,297 => (* P94 RevelationRelation (175): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 906 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 526,298 => (* P95 RevelationRelation (175): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 908 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 527,285 => (* P96 RevelationGroupLt (176): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 919 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 528,414 => (* P97 RevelationGroup (178): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 922 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 529 => (* P98 RevelationList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 927 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 530 => (* P99 RevelationList (177): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 933 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 531,300 => (* P100 RevelationPlus (179): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 938 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 532,299 => (* P101 RevelationPlus (179): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 943 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 533,413 => (* P102 Revelation (180): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 959 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 534,287 => (* P103 VarDeclGroupLt (181): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 987 of "FM3Parser.lalr" *)
                 yySynAttribute . PaDeclDepth 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 535,416 => (* P104 VarDeclGroup (183): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1000 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *)  ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *>
                      
              | 536 => (* P105 VarDeclList (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 1006 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 537 => (* P106 VarDeclList (182): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1012 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 538,302 => (* P107 VarDeclPlus (184): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1025 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 539,301 => (* P108 VarDeclPlus (184): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 184;
                (* line 1030 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 540 => (* P109 DeclType (186): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 186;
                (* line 1048 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_EP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , yyAttributeStack^[yyStackPtr] . Scan . Position 
                         ) ;
                     
              | 541,358 => (* P110 OptDeclType (187): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1056 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;
                     
              | 542 => (* P111 OptDeclType (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1061 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
                     
              | 543 => (* P112 DeclValue (188): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 188;
                (* line 1068 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ;
                       FM3Pass1 . PutBwd_ZP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , yyAttributeStack^[yyStackPtr] . Scan . Position 
                         ) ;
                     
              | 544,385 => (* P113 OptDeclValue (189): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 189;
                (* line 1076 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;
                      
              | 545 => (* P114 OptDeclValue (189): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 189;
                (* line 1081 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
                     
              | 546,386 => (* P115 VarDecl (185): VarDeclIds DeclType OptDeclType DeclValue OptDeclValue .*)
                DEC (yyStackPtr, 5); yyNonterminal := 185;
                (* line 1088 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                            ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+5] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         FM3Pass1 . PutBwd_LCP_rp (* The whole declaration. *) 
                           ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       ELSE (* Skip the entire decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 547 => (* P116 VarDeclIds (190): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 190;
                (* line 1108 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 548 => (* P117 Type (156): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 1121 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; (* Needed? *) 
              | 549,359 => (* P118 Type (156): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 550,360 => (* P119 Type (156): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 551,361 => (* P120 Type (156): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 552,362 => (* P121 Type (156): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 553,363 => (* P122 Type (156): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 554,364 => (* P123 Type (156): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 555,365 => (* P124 Type (156): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 556,366 => (* P125 Type (156): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 557,367 => (* P126 Type (156): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 558,368 => (* P127 Type (156): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 559,369 => (* P128 Type (156): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 560,370 => (* P129 Type (156): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 561,371 => (* P130 Type (156): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 562,372 => (* P131 Type (156): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 563,373 => (* P132 Type (156): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 564,374 => (* P133 Type (156): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 565 => (* P134 RefTypeOptUntraced (207): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 207;
                (* line 1145 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := FALSE (* Not UNTRACED. *) 
              | 566 => (* P135 RefTypeOptUntraced (207): StkRwUNTRACED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1148 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := TRUE (* UNTRACED. *) 
              | 567,376 => (* P136 Type (156): RefTypeOptUntraced Brand StkRwREF Type .*)
                DEC (yyStackPtr, 4); yyNonterminal := 156;
                (* line 1153 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_eCP_rbP
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaBool (* IsUntraced. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 568,377 => (* P137 Type (156): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 569,227 => (* P138 OpenArrayTypeLt (210): StkRwARRAY StkRwOF .*)
                DEC (yyStackPtr, 2); yyNonterminal := 210;
                (* line 1171 of "FM3Parser.lalr" *)
                 (* Default coord, position. *)
                       FM3Pass1 . PutBwd_TP
                         ( Itk .ItkSubscriptTypeAbsent , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                       FM3Pass1 . PutBwd_TBP 
                         ( Itk . ItkArrayTypeElmt , TRUE , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 570,378 => (* P139 OpenArrayType (209): OpenArrayTypeLt Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 209;
                (* line 1179 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_rbp
                         ( Itk . ItkArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , TRUE (* Open. *)  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 571,379 => (* P140 Type (156): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 572,266 => (* P141 FixedArrayTypeLt (213): StkRwARRAY SubrType StkRwOF .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1190 of "FM3Parser.lalr" *)
                 (* Default coord, position. *)
                       FM3Pass1 . PutBwd_TBP 
                         ( Itk . ItkArrayTypeElmt , FALSE , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                     
              | 573,380 => (* P142 FixedArrayType (211): FixedArrayTypeLt Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 211;
                (* line 1196 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_rbp
                         ( Itk . ItkArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , FALSE (* Open. *)  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 574,265 => (* P143 SubrType (212): StkOpenBracket Expr StkEllipsis Expr StkCloseBracket .*)
                DEC (yyStackPtr, 5); yyNonterminal := 212;
                (* line 1205 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( Itk . ItkSubrTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+3] .  PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 575,276 => (* P144 EnumTypeLt (214): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1220 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 576,278 => (* P145 EnumType (216): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1235 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         <* ASSERT LScopeRef . ScpKind = Skt . SkEnum *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 577 => (* P146 EnumLitList (215): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 215;
                (* line 1253 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 578 => (* P147 EnumLitList (215): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1256 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 579,382 => (* P148 EnumLitPlus (217): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1259 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 580,381 => (* P149 EnumLitPlus (217): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 217;
                (* line 1262 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 581,277 => (* P150 EnumLit (218): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1265 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Dkt . DkEnumLit
                                    , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 582,383 => (* P151 Type (156): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 583 => (* P152 FieldDeclList (219): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 219;
                (* line 1287 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ;
                      
              | 584,388 => (* P153 FieldDeclList (219): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 219;
                (* line 1295 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 585,384 => (* P154 FieldDeclPlus (220): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1304 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 586,387 => (* P155 FieldDeclPlus (220): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1307 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 587,273 => (* P156 RecTypeLt (221): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1319 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaDeclDepth (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 588,279 => (* P157 Type (156): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 1346 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         <* ASSERT LScopeRef . ScpKind = Skt . SkRec *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 589 => (* P158 MethodDeclList (222): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 222;
                (* line 1369 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 590 => (* P159 MethodDeclList (222): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 222;
                (* line 1377 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 591,391 => (* P160 MethodDeclList (222): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1382 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 592,392 => (* P161 MethodDeclPlus (223): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 223;
                (* line 1391 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 593,389 => (* P162 MethodDeclPlus (223): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 223;
                (* line 1394 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 594,281 => (* P163 MethodDeclLt (225): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1406 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkMethod , IdAttribute := yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 595,390 => (* P164 MethodDecl (224): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1412 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) ; 
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRef . ScpKind = Skt . SkFormals *>
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*) 
                     
              | 596 => (* P165 OverrideList (227): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 227;
                (* line 1438 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 597 => (* P166 OverrideList (227): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1446 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 598,395 => (* P167 OverrideList (227): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 227;
                (* line 1451 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 599,396 => (* P168 OverridePlus (228): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1460 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 600,394 => (* P169 OverridePlus (228): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 228;
                (* line 1463 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 601,393 => (* P170 OverrideLt (230): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 230;
                (* line 1475 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . CheckIdentNotReserved
                                    ( yyAttributeStack^[yyStackPtr+1]
                                    , yyAttributeStack^[yyStackPtr+1] . Scan .Position
                                    , "denote an overridable method."
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN FM3Pass1 . PutBwd_TIP
                              ( Itk . ItkIdRefAtom , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position )
                       END (*IF*) ; 
                     
              | 602,397 => (* P171 Override (229): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1489 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaInt < 1
                       THEN (* Skip the whole override. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       ELSE
                         yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( Itk . ItkOverrideLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*IF*) 
                     
              | 603 => (* P172 Brand (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1512 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkBrandAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 604 => (* P173 Brand (208): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1517 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 605,375 => (* P174 Brand (208): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 208;
                (* line 1522 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPass1Coord := yyAttributeStack^[yyStackPtr+2] . PaPass1Coord ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position
                       (* Just let the presence of Expr speak for itself. *) 
                     
              | 606 => (* P175 Supertype (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1530 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkSupertypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 607 => (* P176 Supertype (231): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1536 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 608 => (* P177 Supertype (231): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1545 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 609,280 => (* P178 ObjTypeLt (233): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 233;
                (* line 1556 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaDeclDepth (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 610,282 => (* P179 ObjType (232): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 232;
                (* line 1583 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRef . ScpKind = Skt . SkObj *>
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *> 
                       END; 
                     
              | 611 => (* P180 Type (156): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;

              | 612,352 => (* P181 Type (156): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 1605 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRef . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*Block*)
                     
              | 613,405 => (* P182 Signature (226): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 226;
                (* line 1620 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*Block*) 
                     
              | 614,226 => (* P183 FormalsLt (237): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1637 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END ;
                     
              | 615,270 => (* P184 Formals (234): FormalsLt FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 234;
                (* line 1652 of "FM3Parser.lalr" *)
                 FM3Pass1 . DeclScopeRtL2R ( FM3Scopes . DeclScopeStackTopRef ) ;
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ Maybe different tokens for different formal modes? *)
                     
              | 616 => (* P185 FormalsList (238): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 238;
                (* line 1659 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Formals count. *) ; 
              | 617,400 => (* P186 FormalsList (238): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1662 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Formals count. *) ; 
              | 618,401 => (* P187 FormalPlus (239): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1665 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Formals count. *) ; 
              | 619,353 => (* P188 FormalPlus (239): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 239;
                (* line 1668 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt (* Formals count. *);
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt (* Number of formals to left. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 620 => (* P189 FormalLt (241): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 241;
                (* line 1679 of "FM3Parser.lalr" *)
                 (* Default coord. *)
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVALUEFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 621,268 => (* P190 FormalLt (241): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1695 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVALUEFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 622,269 => (* P191 FormalLt (241): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1712 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkVARFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 623,267 => (* P192 FormalLt (241): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1728 of "FM3Parser.lalr" *)
                 (* Default position and cooord. *)
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaTok2 := Itk . ItkROFormalLt ; 
                       yySynAttribute . PaDeclDepth (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 624,354 => (* P193 FormalType (242): FormalLt VarDeclIds .*)
                DEC (yyStackPtr, 2); yyNonterminal := 242;
                (* line 1744 of "FM3Parser.lalr" *)
                 (* Default position and coord. *)
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                       FM3Pass1 . PutBwd_EP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , FM3Scanner . Attribute . Position
                         ) ;
                     
              | 625,398 => (* P194 FormalValue (243): FormalType OptDeclType .*)
                DEC (yyStackPtr, 2); yyNonterminal := 243;
                (* line 1756 of "FM3Parser.lalr" *)
                 (* Default position and coord. *)
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+2] . PaBool (* Type is present. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal AND NOT yyAttributeStack^[yyStackPtr+2] . PaBool 
                       THEN
                         FM3Messages . ErrorArr
                           ( ARRAY OF REFANY 
                               { "VAR formal must have a type (2.2.8)." } 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           ) ;
                       END (*IF*) ; 
                       FM3Pass1 . PutBwd_ZP 
                         ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok
                         , FM3Scanner . Attribute . Position
                         ) ;
                     
              | 626,399 => (* P195 Formal (240): FormalValue OptDeclValue .*)
                DEC (yyStackPtr, 2); yyNonterminal := 240;
                (* line 1777 of "FM3Parser.lalr" *)
                 (* Default position. *) 
                       yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* Decl kind. *) ; 
                       yySynAttribute . PaTok2 := yyAttributeStack^[yyStackPtr+1] . PaTok2 (* Lt tok of formal. *) ;
                       yySynAttribute . PaDeclDepth := yyAttributeStack^[yyStackPtr+1] . PaDeclDepth (* DeclParseInfoDepth. *) ;
                       yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool OR yyAttributeStack^[yyStackPtr+2] . PaBool (* Type or val is present. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                
                       IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                       THEN 
                         yySynAttribute . PaBool (* OK. *) := yyAttributeStack^[yyStackPtr+1] . PaBool AND NOT yyAttributeStack^[yyStackPtr+2] . PaBool ; 
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* value is present? *) 
                         THEN
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { "VAR formal cannot have a default (2.2.8)." }
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             ) ;
                         END (*IF*) ;
                       ELSE (* VALUE or READONLY *)
                         yySynAttribute . PaBool (* OK. *) := yyAttributeStack^[yyStackPtr+1] . PaBool OR yyAttributeStack^[yyStackPtr+2] . PaBool ; 
                         IF NOT yySynAttribute . PaBool (* Has type and/or value. *)
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { FM3Pass1 . VarLabel [ VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) ] 
                                 , " must have a type and/or a default "
                                 , FM3Pass1 . VarSection [ VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) ]
                                 , "." 
                                 } 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ; 
                         END (*IF*)
                       END (*IF*) ;  
                       IF yySynAttribute . PaBool    
                       THEN 
                         FM3Pass1 . PutBwd_LCP_rp 
                           ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       ELSE (* Skip the whole decl, including possibly multiple idents. *)
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                       <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaDeclDepth *>
                     
              | 627,402 => (* P196 ResultType (235): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 235;
                (* line 1827 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 628 => (* P197 ResultType (235): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 235;
                (* line 1835 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 629 => (* P198 Raises (236): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 236;
                (* line 1845 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 630,283 => (* P199 Raises (236): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 236;
                (* line 1851 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 631,284 => (* P200 Raises (236): StkRwRAISES StkOpenBrace IdentOrQualRefStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 236;
                (* line 1858 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 632,303 => (* P201 OptProcBody (244): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 1866 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl : FM3Scopes . ScopeRefTyp ;
                       BEGIN 
                         yySynAttribute . PaTok1 := Itk . ItkProcDeclLt ;  
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY
                                 { "A procedure in a module must have a body (2.5)." } 
                             , yyAttributeStack^[yyStackPtr] . Scan . Position
                             ) ;
                         END (*IF*) ;  
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) (* Formals. *) ;
                         <* ASSERT LScopeRefDecl ^ . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_TIP
                           ( Itk . ItkProcDeclRt , yyAttributeStack^[yyStackPtr] . Scan . SaAtom , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                       END (*Block*) 
                     
              | 633,304 => (* P202 ProcBodyLt (245): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 1887 of "FM3Parser.lalr" *)
                 VAR LFormalsScopeRef : FM3Scopes . ScopeRefTyp ; 
                       VAR LBodyScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         (* Default Coord and Position. *) 
                         yySynAttribute . PaTok1 := Itk . ItkProcDefLt ; 
                         FM3Pass1 . PutBwd_TP
                           ( Itk . ItkProcDefBody , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         (* Make formals (decl)scope also open. *) 
                         LFormalsScopeRef := FM3Scopes . DeclScopeStackTopRef (* Formals. *) ; 
                         FM3Scopes . PushOpenScopeRef ( LFormalsScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LFormalsScopeRef ^ . ScpSelfScopeNo ) ;
                         (* Create Body scope, for both decls and refs:*)
                         LBodyScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkProcBody  
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LBodyScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeLt , LBodyScopeRef ^ . ScpSelfScopeNo ) ; 
                         FM3Scopes . PushOpenScopeRef ( LBodyScopeRef ) ;
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeLt , LBodyScopeRef ^ . ScpSelfScopeNo ) ;
                           
                         (* Go ahead and do pass1 handling of the body, to parse and find its end. *) 
                       END (*Block*) ; 
                     
              | 634,305 => (* P203 OptProcBody (244): ProcBodyLt ProcBlock NonreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 244;
                (* line 1919 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl : FM3Scopes . ScopeRefTyp ; 
                       VAR LScopeRefOpen : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         (* Default Coord and position. *) 
                         yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+1] . PaTok1 ;
                         (* Body Scope: *) 
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                         <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkProcBody *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *>
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                           
                         (* Formals scope: *)
                         LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                         <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkFormals *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo ) ;
                
                         IF NOT FM3Units . CurrentUnitIsModule ( )
                         THEN 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                               { "A procedure in an interface must not have a body (2.5.2)." }
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ;
                
                           FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) ; 
                         
                         (* Don't skip popping formals scope from DeclScopeStack. It was pushed
                            there regardless of skipping the extraneous body.
                         *)
                         LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                         <* ASSERT LScopeRefDecl . ScpKind = Skt . SkFormals *> 
                         <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                         FM3Pass1 . PutBwd_TI
                           ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo ) ;
                         FM3Pass1 . PutBwd_TIP
                           ( Itk . ItkProcDefRt , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                             
                       END (*Block*) ;
                     
              | 635,331 => (* P204 ProcDeclLt (247): StkRwPROCEDURE StkIdent Signature .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1969 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         (* Default coord and position. *) 
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkProc , IdAttribute := yyAttributeStack^[yyStackPtr+2] ) ) ;
                       END (*Block*) 
                     
              | 636,418 => (* P205 ProcDecl (248): ProcDeclLt OptProcBody .*)
                DEC (yyStackPtr, 2); yyNonterminal := 248;
                (* line 1980 of "FM3Parser.lalr" *)
                 (* Default coord and position. *)
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         FM3Pass1 . PutBwd_LCIP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 637 => (* P206 BinOpOp (249): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 249;
                (* line 1995 of "FM3Parser.lalr" *)
                 
              | 638 => (* P207 Expr (167): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 1997 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 639 => (* P208 E0 (250): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 1999 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 640,242 => (* P209 E0Lt (252): E0 StkRwOR .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2002 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator , Stk . StkRwOR , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 641 => (* P210 E0 (250): E0Lt E1 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2008 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 642,334 => (* P211 E1 (251): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2017 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 643,243 => (* P212 E1Lt (254): E1 StkRwAND .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2020 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator , Stk . StkRwAND , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 644,335 => (* P213 E1 (251): E1Lt E2 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 251;
                (* line 2026 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , Stk . StkRwAND
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 645 => (* P214 E2 (253): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2035 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 646 => (* P215 E2 (253): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 253;
                (* line 2038 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , Stk . StkRwNOT 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 647 => (* P216 E3 (255): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2047 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 648,336 => (* P217 E3Lt (258): E3 ExprRelOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 258;
                (* line 2050 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 649 => (* P218 E3 (255): E3Lt E4 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 255;
                (* line 2060 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 650 => (* P219 E4 (256): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2069 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 651,337 => (* P220 E4Lt (261): E4 ExprAddOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 261;
                (* line 2072 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 652 => (* P221 E4 (256): E4Lt E5 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2082 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 653,339 => (* P222 E5 (259): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 259;
                (* line 2091 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 654,338 => (* P223 E5Lt (264): E5 ExprMulOp .*)
                DEC (yyStackPtr, 2); yyNonterminal := 264;
                (* line 2094 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       yySynAttribute . PaTok1 := yyAttributeStack^[yyStackPtr+2] . PaTok1 ;
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkBinaryOpOperator
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1  
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         ) ; 
                     
              | 655,340 => (* P224 E5 (259): E5Lt E6 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 259;
                (* line 2104 of "FM3Parser.lalr" *)
                 (*Default position and coordinate. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) 
                     
              | 656,341 => (* P225 E6 (262): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2113 of "FM3Parser.lalr" *)
                 (* Default position and coordinate. *) 
              | 657,342 => (* P226 E6 (262): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 262;
                (* line 2116 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 658,260 => (* P227 E7 (265): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2135 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 659,345 => (* P228 E7 (265): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2140 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 660,346 => (* P229 E7 (265): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2151 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ; 
                     
              | 661 => (* P230 E7 (265): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 265;
                (* line 2162 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 662 => (* P231 E7 (265): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;

              | 663,263 => (* P232 E7 (265): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2173 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be dereferenced" ) 
                       THEN (* OK *) 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*IF*) ; 
                     
              | 664,350 => (* P233 E7 (265): IdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2187 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be subscripted" ) 
                       THEN (* OK *)
                         FM3Pass1 . PutBwd_LCIP_eCip_rip
                           ( Itk . ItkSubscriptLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+2] . PaInt 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       END (*IF*) ; 
                     
              | 665,351 => (* P234 E7 (265): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2207 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckReservedActualsCt ( ActualsAttr := yyAttributeStack^[yyStackPtr+2] , TokAttr := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Actuals non problematic.  Handle it here *)
                         FM3Pass1 . PutBwd_LCIP_eCip_rip
                           ( Itk . ItkCallLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+2] . PaInt 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           ) ; 
                       END (*IF*) ; 
                     
              | 666 => (* P235 E7 (265): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2220 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefLone ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 667,332 => (* P236 E7 (265): QualIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;

              | 668,259 => (* P237 Subscripts (268): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 268;
                (* line 2231 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 669,343 => (* P238 SsPlusList (270): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 270;
                (* line 2240 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 670,258 => (* P239 SsPlusListLt (271): SsPlusList StkComma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 271;
                (* line 2246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkSubscriptsPlusListSep
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 671,344 => (* P240 SsPlusList (270): SsPlusListLt Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 270;
                (* line 2257 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 672,261 => (* P241 Actuals (269): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 269;
                (* line 2268 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                     
              | 673 => (* P242 ActualList (272): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 272;
                (* line 2278 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 674,348 => (* P243 ActualList (272): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 272;
                (* line 2284 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 675,262 => (* P244 ActualListLt (274): ActualList StkComma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 274;
                (* line 2290 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkActualsListSep
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 676,349 => (* P245 ActualList (272): ActualListLt Actual .*)
                DEC (yyStackPtr, 2); yyNonterminal := 272;
                (* line 2301 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                     
              | 677,347 => (* P246 Actual (273): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 273;
                (* line 2307 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 678,333 => (* P247 Actual (273): NonreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 273;
                (* line 2314 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *)
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 679 => (* P248 E8WOId (267): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 267;
                (* line 2331 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         )
                     
              | 680,231 => (* P249 E8WOId (267): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2342 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 681,232 => (* P250 E8WOId (267): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2349 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 682,233 => (* P251 E8WOId (267): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2356 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 683,234 => (* P252 E8WOId (267): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2366 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 684,235 => (* P253 E8WOId (267): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2376 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 685,236 => (* P254 E8WOId (267): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2383 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 686,237 => (* P255 E8WOId (267): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2390 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 687,240 => (* P256 E8WOId (267): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2398 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 688,241 => (* P257 E8WOId (267): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2405 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 689,238 => (* P258 E8WOId (267): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2412 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 690,239 => (* P259 E8WOId (267): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;
                (* line 2414 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 691,264 => (* P260 E8WOId (267): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 267;

              | 692,245 => (* P261 ExprRelOp (257): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2418 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 693,246 => (* P262 ExprRelOp (257): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2419 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 694,247 => (* P263 ExprRelOp (257): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2420 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 695,248 => (* P264 ExprRelOp (257): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2421 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 696,249 => (* P265 ExprRelOp (257): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2422 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 697,250 => (* P266 ExprRelOp (257): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2423 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 698,244 => (* P267 ExprRelOp (257): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2424 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 699,251 => (* P268 ExprAddOp (260): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2427 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 700,252 => (* P269 ExprAddOp (260): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2428 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 701,253 => (* P270 ExprAddOp (260): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2429 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 702,256 => (* P271 ExprMulOp (263): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2431 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 703,257 => (* P272 ExprMulOp (263): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2432 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 704,254 => (* P273 ExprMulOp (263): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2433 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 705,255 => (* P274 ExprMulOp (263): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2434 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 706,228 => (* P275 ExprUnaryAddOp (266): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2437 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 707,229 => (* P276 ExprUnaryAddOp (266): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2438 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 708 => (* P277 AnonBlockLt (275): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 275;
                (* line 2443 of "FM3Parser.lalr" *)
                
                     
              | 709 => (* P278 AnonBlock (276): AnonBlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 276;
                (* line 2447 of "FM3Parser.lalr" *)
                
                     
              | 710 => (* P279 ProcBlockLt (277): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 277;
                (* line 2451 of "FM3Parser.lalr" *)
                
                     
              | 711,306 => (* P280 ProcBlock (246): ProcBlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 246;
                (* line 2455 of "FM3Parser.lalr" *)
                
                     
              | 712,409 => (* P281 BlockDecl (278): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2461 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 713,412 => (* P282 BlockDecl (278): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2465 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 714,426 => (* P283 BlockDecl (278): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2469 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 715,417 => (* P284 BlockDecl (278): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2473 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 716,424 => (* P285 BlockDecl (278): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2477 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 717,415 => (* P286 BlockDecl (278): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 278;
                (* line 2481 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 718 => (* P287 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2492 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 719 => (* P288 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2500 of "FM3Parser.lalr" *)
                 (* Default PaPos. *) 
                       (* Default PaPass1Coord. *) 
                       MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 720,425 => (* P289 BlockDeclPlus (280): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 280;
                (* line 2511 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *) 
                       (* Default PaPass1Coord. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . PaPos2 ;
                     
              | 721 => (* P290 BlockDeclPlusSepLt (281): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 281;
                (* line 2518 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+1] . PaPos2 ;
                       (* Default PaPass1Coord. *) 
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt > 0
                       THEN
                         FM3Pass1 . PutBwd_TIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListSep
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       END (*IF*) ; 
                     
              | 722,427 => (* P291 BlockDeclPlus (280): BlockDeclPlusSepLt BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 280;
                (* line 2533 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                     
              | 723 => (* P292 StmtList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 2545 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 724 => (* P293 StmtList (135): StmtPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;
                (* line 2553 of "FM3Parser.lalr" *)
                 (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                       MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 725,421 => (* P294 StmtPlus (282): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 282;
                (* line 2564 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                     
              | 726,420 => (* P295 StmtPlusSepLt (284): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 284;
                (* line 2570 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Count of stmts to left. *) ;
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                
                       FM3Pass1 . PutBwd_TIP (* Internal separator. *)
                         ( Itk . ItkStmtListSep 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 727,422 => (* P296 StmtPlus (282): StmtPlusSepLt Stmt .*)
                DEC (yyStackPtr, 2); yyNonterminal := 282;
                (* line 2583 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       yySynAttribute . PaPos2 := yyAttributeStack^[yyStackPtr+2] . PaPos2 ;
                       (* Default PaPos. *)
                       (* Default PaPass1Coord. *) 
                     
              | 728,423 => (* P297 Stmt (283): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 283;

              | 729,419 => (* P298 AssignStmt (285): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 285;
                (* line 2594 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 89 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 92 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

