
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 38 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3ParsePass;
    IMPORT FM3Extern; 
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCP_rp , Push_LCP_eCP_rP ,
      Push_LCPeCprp , Push_LIP , Push_LIP_rip , Push_EIP , Push_ECIP , 
      Push_ECIP_riP , Push_LCBr , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Push_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 239;
   yyTableMax               = 480;
   yyNTableMax              = 657;
   yyFirstReadState         = 1;
   yyLastReadState          = 161;
   yyFirstReadTermState             = 162;
   yyLastReadTermState              = 234;
   yyLastReadNontermState           = 308;
   yyFirstReduceState               = 309;
   yyLastReduceState                = 522;
   yyStartState             = 1;
   yyStopState              = 309;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   1])
         , (*   8*) ADR (yyTComb [   2]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [  22]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   5]) , (*  15*) ADR (yyTComb [   3])
         , (*  16*) ADR (yyTComb [   4]) , (*  17*) ADR (yyTComb [   1])
         , (*  18*) ADR (yyTComb [   5]) , (*  19*) ADR (yyTComb [   3])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   6])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   7])
         , (*  26*) ADR (yyTComb [   1]) , (*  27*) ADR (yyTComb [   8])
         , (*  28*) ADR (yyTComb [   4]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   9]) , (*  31*) ADR (yyTComb [   2])
         , (*  32*) ADR (yyTComb [  10]) , (*  33*) ADR (yyTComb [   8])
         , (*  34*) ADR (yyTComb [  67]) , (*  35*) ADR (yyTComb [  68])
         , (*  36*) ADR (yyTComb [  12]) , (*  37*) ADR (yyTComb [  12])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [   0])
         , (*  40*) ADR (yyTComb [   1]) , (*  41*) ADR (yyTComb [  98])
         , (*  42*) ADR (yyTComb [  11]) , (*  43*) ADR (yyTComb [ 109])
         , (*  44*) ADR (yyTComb [   3]) , (*  45*) ADR (yyTComb [ 110])
         , (*  46*) ADR (yyTComb [  12]) , (*  47*) ADR (yyTComb [ 120])
         , (*  48*) ADR (yyTComb [ 138]) , (*  49*) ADR (yyTComb [   0])
         , (*  50*) ADR (yyTComb [ 166]) , (*  51*) ADR (yyTComb [   4])
         , (*  52*) ADR (yyTComb [  23]) , (*  53*) ADR (yyTComb [   5])
         , (*  54*) ADR (yyTComb [   5]) , (*  55*) ADR (yyTComb [   3])
         , (*  56*) ADR (yyTComb [  16]) , (*  57*) ADR (yyTComb [   6])
         , (*  58*) ADR (yyTComb [ 176]) , (*  59*) ADR (yyTComb [  19])
         , (*  60*) ADR (yyTComb [ 107]) , (*  61*) ADR (yyTComb [   6])
         , (*  62*) ADR (yyTComb [  22]) , (*  63*) ADR (yyTComb [  18])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [  13])
         , (*  66*) ADR (yyTComb [  20]) , (*  67*) ADR (yyTComb [  46])
         , (*  68*) ADR (yyTComb [ 143]) , (*  69*) ADR (yyTComb [  19])
         , (*  70*) ADR (yyTComb [ 153]) , (*  71*) ADR (yyTComb [ 156])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [   0])
         , (*  74*) ADR (yyTComb [ 198]) , (*  75*) ADR (yyTComb [   0])
         , (*  76*) ADR (yyTComb [ 210]) , (*  77*) ADR (yyTComb [  18])
         , (*  78*) ADR (yyTComb [  15]) , (*  79*) ADR (yyTComb [  16])
         , (*  80*) ADR (yyTComb [  51]) , (*  81*) ADR (yyTComb [  20])
         , (*  82*) ADR (yyTComb [ 133]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [  66]) , (*  85*) ADR (yyTComb [ 104])
         , (*  86*) ADR (yyTComb [  43]) , (*  87*) ADR (yyTComb [  28])
         , (*  88*) ADR (yyTComb [   7]) , (*  89*) ADR (yyTComb [  53])
         , (*  90*) ADR (yyTComb [   0]) , (*  91*) ADR (yyTComb [ 122])
         , (*  92*) ADR (yyTComb [  10]) , (*  93*) ADR (yyTComb [  66])
         , (*  94*) ADR (yyTComb [   0]) , (*  95*) ADR (yyTComb [  69])
         , (*  96*) ADR (yyTComb [  81]) , (*  97*) ADR (yyTComb [ 222])
         , (*  98*) ADR (yyTComb [ 239]) , (*  99*) ADR (yyTComb [  84])
         , (* 100*) ADR (yyTComb [  85]) , (* 101*) ADR (yyTComb [   0])
         , (* 102*) ADR (yyTComb [  90]) , (* 103*) ADR (yyTComb [ 240])
         , (* 104*) ADR (yyTComb [ 123]) , (* 105*) ADR (yyTComb [ 266])
         , (* 106*) ADR (yyTComb [ 279]) , (* 107*) ADR (yyTComb [  93])
         , (* 108*) ADR (yyTComb [  94]) , (* 109*) ADR (yyTComb [ 292])
         , (* 110*) ADR (yyTComb [ 301]) , (* 111*) ADR (yyTComb [ 101])
         , (* 112*) ADR (yyTComb [ 104]) , (* 113*) ADR (yyTComb [ 109])
         , (* 114*) ADR (yyTComb [ 132]) , (* 115*) ADR (yyTComb [   0])
         , (* 116*) ADR (yyTComb [  98]) , (* 117*) ADR (yyTComb [ 131])
         , (* 118*) ADR (yyTComb [   0]) , (* 119*) ADR (yyTComb [   1])
         , (* 120*) ADR (yyTComb [   0]) , (* 121*) ADR (yyTComb [  27])
         , (* 122*) ADR (yyTComb [ 128]) , (* 123*) ADR (yyTComb [ 269])
         , (* 124*) ADR (yyTComb [ 190]) , (* 125*) ADR (yyTComb [ 191])
         , (* 126*) ADR (yyTComb [  31]) , (* 127*) ADR (yyTComb [ 228])
         , (* 128*) ADR (yyTComb [ 251]) , (* 129*) ADR (yyTComb [ 119])
         , (* 130*) ADR (yyTComb [ 168]) , (* 131*) ADR (yyTComb [ 121])
         , (* 132*) ADR (yyTComb [ 140]) , (* 133*) ADR (yyTComb [ 182])
         , (* 134*) ADR (yyTComb [  37]) , (* 135*) ADR (yyTComb [ 165])
         , (* 136*) ADR (yyTComb [ 194]) , (* 137*) ADR (yyTComb [ 196])
         , (* 138*) ADR (yyTComb [   0]) , (* 139*) ADR (yyTComb [ 290])
         , (* 140*) ADR (yyTComb [   2]) , (* 141*) ADR (yyTComb [ 244])
         , (* 142*) ADR (yyTComb [ 248]) , (* 143*) ADR (yyTComb [ 174])
         , (* 144*) ADR (yyTComb [ 204]) , (* 145*) ADR (yyTComb [ 205])
         , (* 146*) ADR (yyTComb [   0]) , (* 147*) ADR (yyTComb [ 216])
         , (* 148*) ADR (yyTComb [ 224]) , (* 149*) ADR (yyTComb [ 215])
         , (* 150*) ADR (yyTComb [ 362]) , (* 151*) ADR (yyTComb [ 337])
         , (* 152*) ADR (yyTComb [ 270]) , (* 153*) ADR (yyTComb [ 197])
         , (* 154*) ADR (yyTComb [ 233]) , (* 155*) ADR (yyTComb [ 238])
         , (* 156*) ADR (yyTComb [ 239]) , (* 157*) ADR (yyTComb [ 246])
         , (* 158*) ADR (yyTComb [ 369]) , (* 159*) ADR (yyTComb [ 373])
         , (* 160*) ADR (yyTComb [ 221]) , (* 161*) ADR (yyTComb [ 254])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 108]) , (*  19*) ADR (yyNComb [ 108])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 110])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 110])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 110])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 163])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 108])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 133]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 114])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 116])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 137])
         , (*  54*) ADR (yyNComb [ 108]) , (*  55*) ADR (yyNComb [ 118])
         , (*  56*) ADR (yyNComb [ 108]) , (*  57*) ADR (yyNComb [ 108])
         , (*  58*) ADR (yyNComb [ 108]) , (*  59*) ADR (yyNComb [ 145])
         , (*  60*) ADR (yyNComb [ 108]) , (*  61*) ADR (yyNComb [ 124])
         , (*  62*) ADR (yyNComb [ 113]) , (*  63*) ADR (yyNComb [ 126])
         , (*  64*) ADR (yyNComb [ 156]) , (*  65*) ADR (yyNComb [ 146])
         , (*  66*) ADR (yyNComb [ 108]) , (*  67*) ADR (yyNComb [ 114])
         , (*  68*) ADR (yyNComb [ 116]) , (*  69*) ADR (yyNComb [ 147])
         , (*  70*) ADR (yyNComb [ 108]) , (*  71*) ADR (yyNComb [ 111])
         , (*  72*) ADR (yyNComb [ 229]) , (*  73*) ADR (yyNComb [ 163])
         , (*  74*) ADR (yyNComb [ 125]) , (*  75*) ADR (yyNComb [ 284])
         , (*  76*) ADR (yyNComb [ 125]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 241]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 108]) , (*  81*) ADR (yyNComb [ 132])
         , (*  82*) ADR (yyNComb [ 138]) , (*  83*) ADR (yyNComb [ 227])
         , (*  84*) ADR (yyNComb [ 108]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 178]) , (*  87*) ADR (yyNComb [ 145])
         , (*  88*) ADR (yyNComb [ 251]) , (*  89*) ADR (yyNComb [ 108])
         , (*  90*) ADR (yyNComb [ 236]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 237]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 108]) , (*  97*) ADR (yyNComb [ 225])
         , (*  98*) ADR (yyNComb [ 120]) , (*  99*) ADR (yyNComb [ 108])
         , (* 100*) ADR (yyNComb [ 120]) , (* 101*) ADR (yyNComb [ 339])
         , (* 102*) ADR (yyNComb [ 108]) , (* 103*) ADR (yyNComb [ 261])
         , (* 104*) ADR (yyNComb [ 141]) , (* 105*) ADR (yyNComb [ 394])
         , (* 106*) ADR (yyNComb [ 259]) , (* 107*) ADR (yyNComb [ 108])
         , (* 108*) ADR (yyNComb [ 108]) , (* 109*) ADR (yyNComb [ 268])
         , (* 110*) ADR (yyNComb [ 270]) , (* 111*) ADR (yyNComb [ 108])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 191])
         , (* 114*) ADR (yyNComb [ 173]) , (* 115*) ADR (yyNComb [ 260])
         , (* 116*) ADR (yyNComb [ 108]) , (* 117*) ADR (yyNComb [ 108])
         , (* 118*) ADR (yyNComb [ 336]) , (* 119*) ADR (yyNComb [ 108])
         , (* 120*) ADR (yyNComb [ 411]) , (* 121*) ADR (yyNComb [ 108])
         , (* 122*) ADR (yyNComb [ 108]) , (* 123*) ADR (yyNComb [ 294])
         , (* 124*) ADR (yyNComb [ 108]) , (* 125*) ADR (yyNComb [ 175])
         , (* 126*) ADR (yyNComb [ 397]) , (* 127*) ADR (yyNComb [ 439])
         , (* 128*) ADR (yyNComb [ 108]) , (* 129*) ADR (yyNComb [ 172])
         , (* 130*) ADR (yyNComb [ 108]) , (* 131*) ADR (yyNComb [ 108])
         , (* 132*) ADR (yyNComb [ 108]) , (* 133*) ADR (yyNComb [ 114])
         , (* 134*) ADR (yyNComb [ 108]) , (* 135*) ADR (yyNComb [ 108])
         , (* 136*) ADR (yyNComb [ 108]) , (* 137*) ADR (yyNComb [ 108])
         , (* 138*) ADR (yyNComb [ 313]) , (* 139*) ADR (yyNComb [ 447])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 414])
         , (* 142*) ADR (yyNComb [ 108]) , (* 143*) ADR (yyNComb [ 108])
         , (* 144*) ADR (yyNComb [ 108]) , (* 145*) ADR (yyNComb [ 108])
         , (* 146*) ADR (yyNComb [ 108]) , (* 147*) ADR (yyNComb [ 255])
         , (* 148*) ADR (yyNComb [ 108]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 314]) , (* 151*) ADR (yyNComb [ 526])
         , (* 152*) ADR (yyNComb [ 108]) , (* 153*) ADR (yyNComb [ 108])
         , (* 154*) ADR (yyNComb [ 108]) , (* 155*) ADR (yyNComb [ 108])
         , (* 156*) ADR (yyNComb [ 110]) , (* 157*) ADR (yyNComb [ 108])
         , (* 158*) ADR (yyNComb [ 320]) , (* 159*) ADR (yyNComb [ 274])
         , (* 160*) ADR (yyNComb [ 108]) , (* 161*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    4
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  150 , (*  11*)    0
         , (*  12*)    0 , (*  13*)   25 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)   25 , (*  21*)    0 , (*  22*)  133 , (*  23*)  147
         , (*  24*)  148 , (*  25*)    0 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)  151 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)   35 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)  105 , (*  39*)  105
         , (*  40*)    0 , (*  41*)    0 , (*  42*)    0 , (*  43*)    0
         , (*  44*)   69 , (*  45*)    0 , (*  46*)    0 , (*  47*)    0
         , (*  48*)    0 , (*  49*)  123 , (*  50*)   95 , (*  51*)    0
         , (*  52*)   62 , (*  53*)   88 , (*  54*)    0 , (*  55*)  123
         , (*  56*)    0 , (*  57*)    0 , (*  58*)    0 , (*  59*)   44
         , (*  60*)    0 , (*  61*)   63 , (*  62*)  125 , (*  63*)   88
         , (*  64*)  113 , (*  65*)   68 , (*  66*)    0 , (*  67*)    0
         , (*  68*)    0 , (*  69*)    0 , (*  70*)    0 , (*  71*)    0
         , (*  72*)  105 , (*  73*)  113 , (*  74*)    0 , (*  75*)  105
         , (*  76*)    0 , (*  77*)    0 , (*  78*)   81 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)  123
         , (*  84*)   95 , (*  85*)    0 , (*  86*)    0 , (*  87*)  125
         , (*  88*)   69 , (*  89*)    0 , (*  90*)  123 , (*  91*)   95
         , (*  92*)    0 , (*  93*)    0 , (*  94*)  123 , (*  95*)    0
         , (*  96*)    0 , (*  97*)   98 , (*  98*)    0 , (*  99*)    0
         , (* 100*)    0 , (* 101*)  105 , (* 102*)    0 , (* 103*)  106
         , (* 104*)    0 , (* 105*)   81 , (* 106*)   81 , (* 107*)    0
         , (* 108*)    0 , (* 109*)   69 , (* 110*)   69 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)  159
         , (* 116*)    0 , (* 117*)    0 , (* 118*)  139 , (* 119*)    0
         , (* 120*)  141 , (* 121*)    0 , (* 122*)    0 , (* 123*)   81
         , (* 124*)   95 , (* 125*)    0 , (* 126*)  123 , (* 127*)  151
         , (* 128*)    0 , (* 129*)    0 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)    0 , (* 134*)    0 , (* 135*)    0
         , (* 136*)    0 , (* 137*)    0 , (* 138*)  158 , (* 139*)    0
         , (* 140*)    0 , (* 141*)  123 , (* 142*)    0 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)  156 , (* 147*)    0
         , (* 148*)    0 , (* 149*)    0 , (* 150*)    0 , (* 151*)    0
         , (* 152*)    0 , (* 153*)    0 , (* 154*)    0 , (* 155*)    0
         , (* 156*)    0 , (* 157*)    0 , (* 158*)    0 , (* 159*)    0
         , (* 160*)    0 , (* 161*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  309} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  11,  363}
         , (*  10*) yyTCombType { 119,  120} , (*  11*) yyTCombType { 140,  141}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  11,  363} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {  54,   55} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  11,  363}
         , (*  20*) yyTCombType {  26,   27} , (*  21*) yyTCombType {  31,   32}
         , (*  22*) yyTCombType {  44,  435} , (*  23*) yyTCombType {  51,  201}
         , (*  24*) yyTCombType {  77,  208} , (*  25*) yyTCombType {  61,  442}
         , (*  26*) yyTCombType {  88,  341} , (*  27*) yyTCombType {  11,  363}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType {  92,  211}
         , (*  30*) yyTCombType {  11,  363} , (*  31*) yyTCombType {  12,  361}
         , (*  32*) yyTCombType {   1,  339} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  14,   15}
         , (*  36*) yyTCombType {  12,  361} , (*  37*) yyTCombType {   1,  339}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  53,  341} , (*  41*) yyTCombType {  12,  361}
         , (*  42*) yyTCombType {  55,  456} , (*  43*) yyTCombType {  11,  363}
         , (*  44*) yyTCombType {  54,  455} , (*  45*) yyTCombType {  57,  202}
         , (*  46*) yyTCombType { 121,  227} , (*  47*) yyTCombType {  53,  341}
         , (*  48*) yyTCombType {  61,  442} , (*  49*) yyTCombType {  12,   13}
         , (*  50*) yyTCombType { 126,  341} , (*  51*) yyTCombType {  11,  363}
         , (*  52*) yyTCombType {  12,   16} , (*  53*) yyTCombType {  40,  185}
         , (*  54*) yyTCombType {  59,  435} , (*  55*) yyTCombType {  56,  457}
         , (*  56*) yyTCombType { 134,  135} , (*  57*) yyTCombType {  11,  363}
         , (*  58*) yyTCombType {  52,  342} , (*  59*) yyTCombType {   1,  163}
         , (*  60*) yyTCombType {  63,  341} , (*  61*) yyTCombType {  59,  435}
         , (*  62*) yyTCombType {  86,  449} , (*  63*) yyTCombType {  11,  363}
         , (*  64*) yyTCombType {  62,  342} , (*  65*) yyTCombType {  12,  361}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  17,  169}
         , (*  68*) yyTCombType {   9,   21} , (*  69*) yyTCombType {  19,  171}
         , (*  70*) yyTCombType {  24,  172} , (*  71*) yyTCombType {  28,  173}
         , (*  72*) yyTCombType {  17,   18} , (*  73*) yyTCombType {  12,  361}
         , (*  74*) yyTCombType {  19,   20} , (*  75*) yyTCombType {  33,  179}
         , (*  76*) yyTCombType {  34,  380} , (*  77*) yyTCombType {  35,  381}
         , (*  78*) yyTCombType {  36,  181} , (*  79*) yyTCombType {  12,  361}
         , (*  80*) yyTCombType {  37,  414} , (*  81*) yyTCombType {  34,  380}
         , (*  82*) yyTCombType {  35,  381} , (*  83*) yyTCombType {  65,  468}
         , (*  84*) yyTCombType {  37,   38} , (*  85*) yyTCombType {  12,  361}
         , (*  86*) yyTCombType {  34,  380} , (*  87*) yyTCombType {  35,  381}
         , (*  88*) yyTCombType {  62,   63} , (*  89*) yyTCombType {  52,   53}
         , (*  90*) yyTCombType {  66,  207} , (*  91*) yyTCombType {  78,  350}
         , (*  92*) yyTCombType {  79,  209} , (*  93*) yyTCombType {  77,   78}
         , (*  94*) yyTCombType {  87,   88} , (*  95*) yyTCombType {   4,  162}
         , (*  96*) yyTCombType {   7,  164} , (*  97*) yyTCombType {   8,  165}
         , (*  98*) yyTCombType {  15,  167} , (*  99*) yyTCombType {  16,  168}
         , (* 100*) yyTCombType {  18,  170} , (* 101*) yyTCombType {  21,   22}
         , (* 102*) yyTCombType {  25,  166} , (* 103*) yyTCombType {  27,   28}
         , (* 104*) yyTCombType {  30,  175} , (* 105*) yyTCombType {  32,   33}
         , (* 106*) yyTCombType {  42,  186} , (* 107*) yyTCombType {  46,  188}
         , (* 108*) yyTCombType {  56,  200} , (* 109*) yyTCombType {  41,  354}
         , (* 110*) yyTCombType {  34,  380} , (* 111*) yyTCombType {  35,  381}
         , (* 112*) yyTCombType {  67,   68} , (* 113*) yyTCombType {  63,  203}
         , (* 114*) yyTCombType {  69,  187} , (* 115*) yyTCombType {  81,   41}
         , (* 116*) yyTCombType {  67,  342} , (* 117*) yyTCombType {  41,  354}
         , (* 118*) yyTCombType {  34,  380} , (* 119*) yyTCombType {  35,  381}
         , (* 120*) yyTCombType {  43,  459} , (* 121*) yyTCombType {  89,   90}
         , (* 122*) yyTCombType {  80,   81} , (* 123*) yyTCombType {  85,  448}
         , (* 124*) yyTCombType {  34,  380} , (* 125*) yyTCombType {  35,  381}
         , (* 126*) yyTCombType {  60,  441} , (* 127*) yyTCombType {  80,  351}
         , (* 128*) yyTCombType {  43,  417} , (* 129*) yyTCombType {  45,  412}
         , (* 130*) yyTCombType {  34,  380} , (* 131*) yyTCombType {  35,  381}
         , (* 132*) yyTCombType {  84,  480} , (* 133*) yyTCombType {  41,  354}
         , (* 134*) yyTCombType {  93,   94} , (* 135*) yyTCombType {  95,  385}
         , (* 136*) yyTCombType {  84,  480} , (* 137*) yyTCombType {  41,  354}
         , (* 138*) yyTCombType {  86,  210} , (* 139*) yyTCombType {  47,  414}
         , (* 140*) yyTCombType {  41,  354} , (* 141*) yyTCombType {  91,  454}
         , (* 142*) yyTCombType {  60,   61} , (* 143*) yyTCombType {  41,  354}
         , (* 144*) yyTCombType {  43,  417} , (* 145*) yyTCombType {  45,  412}
         , (* 146*) yyTCombType {  85,   86} , (* 147*) yyTCombType {  96,  212}
         , (* 148*) yyTCombType {  43,  459} , (* 149*) yyTCombType {  60,  441}
         , (* 150*) yyTCombType {  99,  214} , (* 151*) yyTCombType {  43,  417}
         , (* 152*) yyTCombType {  45,  412} , (* 153*) yyTCombType { 100,  215}
         , (* 154*) yyTCombType {  43,  417} , (* 155*) yyTCombType {  47,  414}
         , (* 156*) yyTCombType { 102,  217} , (* 157*) yyTCombType {  48,  416}
         , (* 158*) yyTCombType { 100,  216} , (* 159*) yyTCombType { 107,  220}
         , (* 160*) yyTCombType { 108,  221} , (* 161*) yyTCombType {  95,  200}
         , (* 162*) yyTCombType {  47,  414} , (* 163*) yyTCombType {  35,  180}
         , (* 164*) yyTCombType {  41,  354} , (* 165*) yyTCombType {  41,   42}
         , (* 166*) yyTCombType {  41,  354} , (* 167*) yyTCombType { 111,  222}
         , (* 168*) yyTCombType {  41,  354} , (* 169*) yyTCombType {  41,  354}
         , (* 170*) yyTCombType { 112,  223} , (* 171*) yyTCombType {  41,  354}
         , (* 172*) yyTCombType {  41,  354} , (* 173*) yyTCombType {  48,  416}
         , (* 174*) yyTCombType {  41,  354} , (* 175*) yyTCombType {  43,  417}
         , (* 176*) yyTCombType {  45,  412} , (* 177*) yyTCombType {  43,  417}
         , (* 178*) yyTCombType { 113,   65} , (* 179*) yyTCombType {  43,  417}
         , (* 180*) yyTCombType {  48,  416} , (* 181*) yyTCombType {  45,   46}
         , (* 182*) yyTCombType {  45,  412} , (* 183*) yyTCombType {  43,  417}
         , (* 184*) yyTCombType {  45,  412} , (* 185*) yyTCombType {  50,  415}
         , (* 186*) yyTCombType {  47,  414} , (* 187*) yyTCombType {  58,  460}
         , (* 188*) yyTCombType {  91,  454} , (* 189*) yyTCombType {  68,  204}
         , (* 190*) yyTCombType {  41,  354} , (* 191*) yyTCombType { 104,  218}
         , (* 192*) yyTCombType {  47,   38} , (* 193*) yyTCombType { 116,  117}
         , (* 194*) yyTCombType {  47,  414} , (* 195*) yyTCombType {  58,  463}
         , (* 196*) yyTCombType { 104,  219} , (* 197*) yyTCombType { 117,  226}
         , (* 198*) yyTCombType { 114,  224} , (* 199*) yyTCombType {  82,  481}
         , (* 200*) yyTCombType { 114,  225} , (* 201*) yyTCombType {  50,  415}
         , (* 202*) yyTCombType { 122,  123} , (* 203*) yyTCombType {  82,  481}
         , (* 204*) yyTCombType {  48,  416} , (* 205*) yyTCombType {  68,  205}
         , (* 206*) yyTCombType {  68,  206} , (* 207*) yyTCombType {  82,   83}
         , (* 208*) yyTCombType {  50,  415} , (* 209*) yyTCombType { 124,  522}
         , (* 210*) yyTCombType { 125,  342} , (* 211*) yyTCombType {  58,  463}
         , (* 212*) yyTCombType {  48,   49} , (* 213*) yyTCombType {  68,  341}
         , (* 214*) yyTCombType { 129,  228} , (* 215*) yyTCombType {  58,  460}
         , (* 216*) yyTCombType { 131,  229} , (* 217*) yyTCombType {  74,  483}
         , (* 218*) yyTCombType {  58,  463} , (* 219*) yyTCombType {  70,  477}
         , (* 220*) yyTCombType { 122,  200} , (* 221*) yyTCombType {  58,  463}
         , (* 222*) yyTCombType {  71,  479} , (* 223*) yyTCombType {  70,  477}
         , (* 224*) yyTCombType {  70,   46} , (* 225*) yyTCombType {  70,  477}
         , (* 226*) yyTCombType {  71,  479} , (* 227*) yyTCombType {  70,  477}
         , (* 228*) yyTCombType {  71,   72} , (* 229*) yyTCombType {  76,  484}
         , (* 230*) yyTCombType {  71,  479} , (* 231*) yyTCombType {  97,  390}
         , (* 232*) yyTCombType {  50,  415} , (* 233*) yyTCombType {  74,  483}
         , (* 234*) yyTCombType { 130,  371} , (* 235*) yyTCombType { 132,  133}
         , (* 236*) yyTCombType {  97,  390} , (* 237*) yyTCombType { 127,  514}
         , (* 238*) yyTCombType {  68,  472} , (* 239*) yyTCombType { 130,  131}
         , (* 240*) yyTCombType {  74,  483} , (* 241*) yyTCombType {  97,  390}
         , (* 242*) yyTCombType {  58,  463} , (* 243*) yyTCombType {  74,  483}
         , (* 244*) yyTCombType {  58,  463} , (* 245*) yyTCombType {  76,  484}
         , (* 246*) yyTCombType {  58,  463} , (* 247*) yyTCombType { 127,  514}
         , (* 248*) yyTCombType {  98,  391} , (* 249*) yyTCombType { 103,  400}
         , (* 250*) yyTCombType {  58,  463} , (* 251*) yyTCombType { 133,   23}
         , (* 252*) yyTCombType {  76,  484} , (* 253*) yyTCombType {  98,  391}
         , (* 254*) yyTCombType { 103,  400} , (* 255*) yyTCombType {  76,   77}
         , (* 256*) yyTCombType { 124,  522} , (* 257*) yyTCombType { 125,  126}
         , (* 258*) yyTCombType {  98,  391} , (* 259*) yyTCombType { 103,  400}
         , (* 260*) yyTCombType { 135,  136} , (* 261*) yyTCombType { 136,  230}
         , (* 262*) yyTCombType { 137,  138} , (* 263*) yyTCombType { 141,  517}
         , (* 264*) yyTCombType {  74,  483} , (* 265*) yyTCombType {  97,  390}
         , (* 266*) yyTCombType {  74,  483} , (* 267*) yyTCombType { 142,  143}
         , (* 268*) yyTCombType {  74,  483} , (* 269*) yyTCombType { 143,  144}
         , (* 270*) yyTCombType {  74,   75} , (* 271*) yyTCombType { 144,  231}
         , (* 272*) yyTCombType {  74,  483} , (* 273*) yyTCombType {  97,  390}
         , (* 274*) yyTCombType { 145,  322} , (* 275*) yyTCombType { 128,  129}
         , (* 276*) yyTCombType {  76,  484} , (* 277*) yyTCombType { 105,  458}
         , (* 278*) yyTCombType {  76,  484} , (* 279*) yyTCombType {  97,  390}
         , (* 280*) yyTCombType {  76,  484} , (* 281*) yyTCombType { 149,  150}
         , (* 282*) yyTCombType {  98,  391} , (* 283*) yyTCombType { 103,  400}
         , (* 284*) yyTCombType {  76,  484} , (* 285*) yyTCombType {  97,  390}
         , (* 286*) yyTCombType { 147,  349} , (* 287*) yyTCombType { 147,  349}
         , (* 288*) yyTCombType { 106,  401} , (* 289*) yyTCombType { 152,  153}
         , (* 290*) yyTCombType {  98,  391} , (* 291*) yyTCombType { 103,  400}
         , (* 292*) yyTCombType { 153,  154} , (* 293*) yyTCombType { 106,  401}
         , (* 294*) yyTCombType { 148,  232} , (* 295*) yyTCombType { 148,   25}
         , (* 296*) yyTCombType {  98,  391} , (* 297*) yyTCombType { 103,  400}
         , (* 298*) yyTCombType { 106,  401} , (* 299*) yyTCombType { 139,  513}
         , (* 300*) yyTCombType { 154,  233} , (* 301*) yyTCombType { 109,  407}
         , (* 302*) yyTCombType {  98,  391} , (* 303*) yyTCombType { 103,  400}
         , (* 304*) yyTCombType { 139,  174} , (* 305*) yyTCombType { 105,  458}
         , (* 306*) yyTCombType { 109,  407} , (* 307*) yyTCombType { 155,  323}
         , (* 308*) yyTCombType { 156,  147} , (* 309*) yyTCombType { 105,  182}
         , (* 310*) yyTCombType { 110,  408} , (* 311*) yyTCombType { 109,  407}
         , (* 312*) yyTCombType { 157,  158} , (* 313*) yyTCombType { 105,  183}
         , (* 314*) yyTCombType { 105,   39} , (* 315*) yyTCombType { 110,  408}
         , (* 316*) yyTCombType { 160,  161} , (* 317*) yyTCombType { 128,  370}
         , (* 318*) yyTCombType { 105,  184} , (* 319*) yyTCombType { 128,  132}
         , (* 320*) yyTCombType { 110,  408} , (* 321*) yyTCombType { 161,  234}
         , (* 322*) yyTCombType { 106,  401} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {   0,    0} , (* 325*) yyTCombType {   0,    0}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType { 105,   40}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType { 106,  401} , (* 331*) yyTCombType { 106,  184}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType { 139,   30}
         , (* 334*) yyTCombType {  98,  213} , (* 335*) yyTCombType { 109,  407}
         , (* 336*) yyTCombType { 106,  401} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType { 106,   40} , (* 341*) yyTCombType { 139,  176}
         , (* 342*) yyTCombType { 106,  401} , (* 343*) yyTCombType { 109,  407}
         , (* 344*) yyTCombType { 110,  408} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType {   0,    0} , (* 347*) yyTCombType { 139,  177}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType { 109,  407}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType { 151,  174}
         , (* 352*) yyTCombType { 110,  408} , (* 353*) yyTCombType { 139,  178}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType { 109,  407}
         , (* 356*) yyTCombType { 151,  513} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType { 110,  408} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType { 110,  408} , (* 365*) yyTCombType { 123,  189}
         , (* 366*) yyTCombType { 123,  190} , (* 367*) yyTCombType { 123,  191}
         , (* 368*) yyTCombType { 123,  192} , (* 369*) yyTCombType { 123,  193}
         , (* 370*) yyTCombType { 123,  194} , (* 371*) yyTCombType { 123,  195}
         , (* 372*) yyTCombType { 123,  196} , (* 373*) yyTCombType { 123,  197}
         , (* 374*) yyTCombType { 123,  198} , (* 375*) yyTCombType { 123,  199}
         , (* 376*) yyTCombType { 150,  360} , (* 377*) yyTCombType {   0,    0}
         , (* 378*) yyTCombType { 158,  360} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType { 151,   30} , (* 381*) yyTCombType { 150,  360}
         , (* 382*) yyTCombType { 159,  505} , (* 383*) yyTCombType { 158,  360}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType { 159,  505}
         , (* 388*) yyTCombType { 151,  176} , (* 389*) yyTCombType { 150,  360}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType { 150,  360} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType { 151,  177} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType { 158,  360} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType { 158,  360}
         , (* 400*) yyTCombType { 151,  178} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType { 150,  360}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType {   0,    0}
         , (* 408*) yyTCombType {   0,    0} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {   0,    0} , (* 411*) yyTCombType {   0,    0}
         , (* 412*) yyTCombType { 158,  360} , (* 413*) yyTCombType { 150,  360}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType { 159,  505} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {   0,    0} , (* 419*) yyTCombType { 150,  360}
         , (* 420*) yyTCombType { 158,  360} , (* 421*) yyTCombType {   0,    0}
         , (* 422*) yyTCombType {   0,    0} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType { 159,  505} , (* 425*) yyTCombType { 150,  360}
         , (* 426*) yyTCombType { 158,  360} , (* 427*) yyTCombType {   0,    0}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType {   0,    0}
         , (* 430*) yyTCombType { 159,  505} , (* 431*) yyTCombType {   0,    0}
         , (* 432*) yyTCombType { 158,  360} , (* 433*) yyTCombType {   0,    0}
         , (* 434*) yyTCombType {   0,    0} , (* 435*) yyTCombType {   0,    0}
         , (* 436*) yyTCombType { 159,  505} , (* 437*) yyTCombType {   0,    0}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {   0,    0}
         , (* 440*) yyTCombType {   0,    0} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {   0,    0}
         , (* 444*) yyTCombType {   0,    0} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {   0,    0}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType {   0,    0} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {   0,    0}
         , (* 468*) yyTCombType {   0,    0} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {   0,    0} , (* 471*) yyTCombType {   0,    0}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {   0,    0}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {   0,    0}
         , (* 480*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  237 , (* 109*)    5 , (* 110*)  238 , (* 111*)  239
         , (* 112*)  240 , (* 113*)  241 , (* 114*)  242 , (* 115*)  235
         , (* 116*)  236 , (* 117*)    0 , (* 118*)  137 , (* 119*)    0
         , (* 120*)    0 , (* 121*)  146 , (* 122*)  156 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    6 , (* 126*)    9 , (* 127*)   26
         , (* 128*)  243 , (* 129*)   29 , (* 130*)   31 , (* 131*)  128
         , (* 132*)  139 , (* 133*)  134 , (* 134*)  145 , (* 135*)  149
         , (* 136*)  155 , (* 137*)  157 , (* 138*)    0 , (* 139*)  271
         , (* 140*)   14 , (* 141*)  246 , (* 142*)  247 , (* 143*)   24
         , (* 144*)  284 , (* 145*)  281 , (* 146*)  249 , (* 147*)   43
         , (* 148*)   11 , (* 149*)   12 , (* 150*)  244 , (* 151*)  245
         , (* 152*)   17 , (* 153*)   19 , (* 154*)  268 , (* 155*)  289
         , (* 156*)  268 , (* 157*)   34 , (* 158*)  248 , (* 159*)  290
         , (* 160*)   35 , (* 161*)   96 , (* 162*)   37 , (* 163*)   36
         , (* 164*)   37 , (* 165*)   93 , (* 166*)   97 , (* 167*)   45
         , (* 168*)  293 , (* 169*)   48 , (* 170*)  277 , (* 171*)   45
         , (* 172*)   50 , (* 173*)  103 , (* 174*)   56 , (* 175*)  296
         , (* 176*)  287 , (* 177*)  101 , (* 178*)  109 , (* 179*)   45
         , (* 180*)  298 , (* 181*)   70 , (* 182*)   99 , (* 183*)  100
         , (* 184*)  269 , (* 185*)  251 , (* 186*)  252 , (* 187*)  253
         , (* 188*)  254 , (* 189*)  255 , (* 190*)  256 , (* 191*)  257
         , (* 192*)  258 , (* 193*)  259 , (* 194*)  260 , (* 195*)  261
         , (* 196*)  262 , (* 197*)  263 , (* 198*)  264 , (* 199*)  265
         , (* 200*)  266 , (* 201*)  249 , (* 202*)   43 , (* 203*)   44
         , (* 204*)   85 , (* 205*)  105 , (* 206*)  302 , (* 207*)  267
         , (* 208*)   47 , (* 209*)   92 , (* 210*)  250 , (* 211*)  270
         , (* 212*)   47 , (* 213*)   57 , (* 214*)   54 , (* 215*)   58
         , (* 216*)   59 , (* 217*)   73 , (* 218*)  130 , (* 219*)  267
         , (* 220*)   47 , (* 221*)   62 , (* 222*)  285 , (* 223*)   64
         , (* 224*)  272 , (* 225*)   64 , (* 226*)   51 , (* 227*)   52
         , (* 228*)  113 , (* 229*)   82 , (* 230*)  304 , (* 231*)  273
         , (* 232*)   69 , (* 233*)  305 , (* 234*)  306 , (* 235*)  127
         , (* 236*)   76 , (* 237*)  279 , (* 238*)   60 , (* 239*)   52
         , (* 240*)  251 , (* 241*)  252 , (* 242*)  253 , (* 243*)  254
         , (* 244*)  255 , (* 245*)  256 , (* 246*)  257 , (* 247*)  258
         , (* 248*)  259 , (* 249*)  260 , (* 250*)  261 , (* 251*)  262
         , (* 252*)  263 , (* 253*)  264 , (* 254*)  265 , (* 255*)  266
         , (* 256*)  283 , (* 257*)  280 , (* 258*)   44 , (* 259*)   66
         , (* 260*)   67 , (* 261*)  282 , (* 262*)   69 , (* 263*)  275
         , (* 264*)   71 , (* 265*)  268 , (* 266*)   74 , (* 267*)  249
         , (* 268*)   43 , (* 269*)   54 , (* 270*)   58 , (* 271*)   59
         , (* 272*)   73 , (* 273*)   74 , (* 274*)  268 , (* 275*)  268
         , (* 276*)  274 , (* 277*)   79 , (* 278*)   80 , (* 279*)  278
         , (* 280*)   87 , (* 281*)  288 , (* 282*)   89 , (* 283*)   84
         , (* 284*)  291 , (* 285*)   45 , (* 286*)   98 , (* 287*)  102
         , (* 288*)  100 , (* 289*)  116 , (* 290*)  148 , (* 291*)  114
         , (* 292*)   91 , (* 293*)   95 , (* 294*)  299 , (* 295*)    0
         , (* 296*)  115 , (* 297*)  249 , (* 298*)  104 , (* 299*)  249
         , (* 300*)  104 , (* 301*)   74 , (* 302*)   45 , (* 303*)  160
         , (* 304*)   45 , (* 305*)    0 , (* 306*)  251 , (* 307*)  252
         , (* 308*)  253 , (* 309*)  254 , (* 310*)  255 , (* 311*)  256
         , (* 312*)  257 , (* 313*)  258 , (* 314*)  259 , (* 315*)  260
         , (* 316*)  261 , (* 317*)  262 , (* 318*)  263 , (* 319*)  264
         , (* 320*)  265 , (* 321*)  266 , (* 322*)  249 , (* 323*)   43
         , (* 324*)   44 , (* 325*)  286 , (* 326*)   47 , (* 327*)  295
         , (* 328*)  107 , (* 329*)  106 , (* 330*)  108 , (* 331*)  276
         , (* 332*)  268 , (* 333*)  308 , (* 334*)  151 , (* 335*)   54
         , (* 336*)   58 , (* 337*)   59 , (* 338*)   73 , (* 339*)  297
         , (* 340*)  159 , (* 341*)  110 , (* 342*)  112 , (* 343*)   47
         , (* 344*)  111 , (* 345*)   47 , (* 346*)    0 , (* 347*)    0
         , (* 348*)    0 , (* 349*)    0 , (* 350*)  124 , (* 351*)    0
         , (* 352*)    0 , (* 353*)   11 , (* 354*)   11 , (* 355*)    0
         , (* 356*)    0 , (* 357*)    0 , (* 358*)  119 , (* 359*)    0
         , (* 360*)   11 , (* 361*)  251 , (* 362*)  252 , (* 363*)  253
         , (* 364*)  254 , (* 365*)  255 , (* 366*)  256 , (* 367*)  257
         , (* 368*)  258 , (* 369*)  259 , (* 370*)  260 , (* 371*)  261
         , (* 372*)  262 , (* 373*)  263 , (* 374*)  264 , (* 375*)  265
         , (* 376*)  266 , (* 377*)  249 , (* 378*)   43 , (* 379*)   44
         , (* 380*)    0 , (* 381*)    0 , (* 382*)    0 , (* 383*)    0
         , (* 384*)  118 , (* 385*)   34 , (* 386*)  292 , (* 387*)  290
         , (* 388*)    0 , (* 389*)    0 , (* 390*)   54 , (* 391*)   58
         , (* 392*)   59 , (* 393*)   73 , (* 394*)   97 , (* 395*)    0
         , (* 396*)  293 , (* 397*)    0 , (* 398*)  118 , (* 399*)    0
         , (* 400*)    0 , (* 401*)  103 , (* 402*)    0 , (* 403*)  296
         , (* 404*)    0 , (* 405*)    0 , (* 406*)  109 , (* 407*)    0
         , (* 408*)  298 , (* 409*)    0 , (* 410*)    0 , (* 411*)    0
         , (* 412*)    0 , (* 413*)    0 , (* 414*)    0 , (* 415*)    0
         , (* 416*)  251 , (* 417*)  252 , (* 418*)  253 , (* 419*)  254
         , (* 420*)  255 , (* 421*)  256 , (* 422*)  257 , (* 423*)  258
         , (* 424*)  259 , (* 425*)  260 , (* 426*)  261 , (* 427*)  262
         , (* 428*)  263 , (* 429*)  264 , (* 430*)  265 , (* 431*)  266
         , (* 432*)  249 , (* 433*)   43 , (* 434*)   44 , (* 435*)  268
         , (* 436*)  121 , (* 437*)    0 , (* 438*)    0 , (* 439*)  142
         , (* 440*)    0 , (* 441*)  294 , (* 442*)    0 , (* 443*)    0
         , (* 444*)    0 , (* 445*)   54 , (* 446*)   58 , (* 447*)   59
         , (* 448*)   73 , (* 449*)  268 , (* 450*)    0 , (* 451*)    0
         , (* 452*)  268 , (* 453*)  122 , (* 454*)    0 , (* 455*)    0
         , (* 456*)  113 , (* 457*)    0 , (* 458*)  304 , (* 459*)    0
         , (* 460*)    0 , (* 461*)  305 , (* 462*)  306 , (* 463*)  127
         , (* 464*)    0 , (* 465*)    0 , (* 466*)    0 , (* 467*)  122
         , (* 468*)    0 , (* 469*)  140 , (* 470*)  122 , (* 471*)  251
         , (* 472*)  252 , (* 473*)  253 , (* 474*)  254 , (* 475*)  255
         , (* 476*)  256 , (* 477*)  257 , (* 478*)  258 , (* 479*)  259
         , (* 480*)  260 , (* 481*)  261 , (* 482*)  262 , (* 483*)  263
         , (* 484*)  264 , (* 485*)  265 , (* 486*)  266 , (* 487*)    0
         , (* 488*)   34 , (* 489*)   44 , (* 490*)  290 , (* 491*)    0
         , (* 492*)    0 , (* 493*)    0 , (* 494*)    0 , (* 495*)    0
         , (* 496*)   34 , (* 497*)   97 , (* 498*)  290 , (* 499*)  293
         , (* 500*)   54 , (* 501*)   58 , (* 502*)   59 , (* 503*)   73
         , (* 504*)  103 , (* 505*)   97 , (* 506*)  296 , (* 507*)  293
         , (* 508*)    0 , (* 509*)  109 , (* 510*)    0 , (* 511*)  298
         , (* 512*)  103 , (* 513*)    0 , (* 514*)  296 , (* 515*)    0
         , (* 516*)    0 , (* 517*)  109 , (* 518*)    0 , (* 519*)  298
         , (* 520*)    0 , (* 521*)    0 , (* 522*)    0 , (* 523*)    0
         , (* 524*)    0 , (* 525*)    0 , (* 526*)  300 , (* 527*)  301
         , (* 528*)    0 , (* 529*)    0 , (* 530*)    0 , (* 531*)    0
         , (* 532*)    0 , (* 533*)    0 , (* 534*)    0 , (* 535*)    0
         , (* 536*)    0 , (* 537*)    0 , (* 538*)    0 , (* 539*)  125
         , (* 540*)  303 , (* 541*)  301 , (* 542*)  125 , (* 543*)  303
         , (* 544*)  301 , (* 545*)    0 , (* 546*)    0 , (* 547*)    0
         , (* 548*)  152 , (* 549*)    0 , (* 550*)    0 , (* 551*)    0
         , (* 552*)    0 , (* 553*)    0 , (* 554*)    0 , (* 555*)    0
         , (* 556*)    0 , (* 557*)    0 , (* 558*)    0 , (* 559*)  113
         , (* 560*)    0 , (* 561*)  304 , (* 562*)    0 , (* 563*)    0
         , (* 564*)  307 , (* 565*)  306 , (* 566*)    0 , (* 567*)  113
         , (* 568*)    0 , (* 569*)  304 , (* 570*)    0 , (* 571*)    0
         , (* 572*)  305 , (* 573*)  306 , (* 574*)  127 , (* 575*)   34
         , (* 576*)    0 , (* 577*)  290 , (* 578*)    0 , (* 579*)    0
         , (* 580*)    0 , (* 581*)    0 , (* 582*)    0 , (* 583*)    0
         , (* 584*)   97 , (* 585*)    0 , (* 586*)  293 , (* 587*)    0
         , (* 588*)    0 , (* 589*)    0 , (* 590*)    0 , (* 591*)  103
         , (* 592*)    0 , (* 593*)  296 , (* 594*)    0 , (* 595*)    0
         , (* 596*)  109 , (* 597*)    0 , (* 598*)  298 , (* 599*)    0
         , (* 600*)    0 , (* 601*)    0 , (* 602*)    0 , (* 603*)    0
         , (* 604*)    0 , (* 605*)    0 , (* 606*)    0 , (* 607*)    0
         , (* 608*)    0 , (* 609*)    0 , (* 610*)    0 , (* 611*)    0
         , (* 612*)    0 , (* 613*)    0 , (* 614*)    0 , (* 615*)    0
         , (* 616*)    0 , (* 617*)    0 , (* 618*)    0 , (* 619*)    0
         , (* 620*)    0 , (* 621*)    0 , (* 622*)    0 , (* 623*)    0
         , (* 624*)    0 , (* 625*)    0 , (* 626*)    0 , (* 627*)    0
         , (* 628*)    0 , (* 629*)    0 , (* 630*)    0 , (* 631*)    0
         , (* 632*)    0 , (* 633*)    0 , (* 634*)    0 , (* 635*)    0
         , (* 636*)    0 , (* 637*)    0 , (* 638*)    0 , (* 639*)    0
         , (* 640*)    0 , (* 641*)    0 , (* 642*)    0 , (* 643*)    0
         , (* 644*)    0 , (* 645*)    0 , (* 646*)  113 , (* 647*)    0
         , (* 648*)  304 , (* 649*)    0 , (* 650*)    0 , (* 651*)  305
         , (* 652*)  306 , (* 653*)  127 , (* 654*)    0 , (* 655*)    0
         , (* 656*)    0 , (* 657*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 309(P   1)*)    2 , (*A 310(P   2)*)    1 , (*A 311(P   3)*)    1
         , (*A 312(P   4)*)    1 , (*A 313(P   5)*)    1 , (*A 314(P   6)*)    1
         , (*A 315(P   7)*)    1 , (*A 316(P   8)*)    1 , (*A 317(P   9)*)    1
         , (*A 318(P  10)*)    1 , (*A 319(P  11)*)    2 , (*A 320(P  12)*)    0
         , (*A 321(P  13)*)    0 , (*A 322(P  14)*)    0 , (*A 323(P  15)*)    0
         , (*A 324(P  16)*)    0 , (*A 325(P  17)*)    0 , (*A 326(P  18)*)    3
         , (*A 327(P  19)*)    7 , (*A 328(P  20)*)    3 , (*A 329(P  21)*)    5
         , (*A 330(P  22)*)    3 , (*A 331(P  23)*)    7 , (*A 332(P  24)*)    4
         , (*A 333(P  25)*)    7 , (*A 334(P  26)*)    3 , (*A 335(P  27)*)    9
         , (*A 336(P  28)*)    3 , (*A 337(P  29)*)    8 , (*A 338(P  30)*)    1
         , (*A 339(P  31)*)    0 , (*A 340(P  32)*)    0 , (*A 341(P  33)*)    1
         , (*A 342(P  34)*)    0 , (*A 343(P  35)*)    1 , (*A 344(P  36)*)    1
         , (*A 345(P  37)*)    3 , (*A 346(P  38)*)    1 , (*A 347(P  39)*)    3
         , (*A 348(P  40)*)    3 , (*A 349(P  41)*)    0 , (*A 350(P  42)*)    0
         , (*A 351(P  43)*)    1 , (*A 352(P  44)*)    1 , (*A 353(P  45)*)    3
         , (*A 354(P  46)*)    1 , (*A 355(P  47)*)    3 , (*A 356(P  48)*)    1
         , (*A 357(P  49)*)    1 , (*A 358(P  50)*)    2 , (*A 359(P  51)*)    3
         , (*A 360(P  52)*)    0 , (*A 361(P  53)*)    0 , (*A 362(P  54)*)    2
         , (*A 363(P  55)*)    0 , (*A 364(P  56)*)    3 , (*A 365(P  57)*)    1
         , (*A 366(P  58)*)    3 , (*A 367(P  59)*)    2 , (*A 368(P  60)*)    4
         , (*A 369(P  61)*)    3 , (*A 370(P  62)*)    0 , (*A 371(P  63)*)    2
         , (*A 372(P  64)*)    1 , (*A 373(P  65)*)    3 , (*A 374(P  66)*)    3
         , (*A 375(P  67)*)    3 , (*A 376(P  68)*)    2 , (*A 377(P  69)*)    0
         , (*A 378(P  70)*)    1 , (*A 379(P  71)*)    2 , (*A 380(P  72)*)    0
         , (*A 381(P  73)*)    1 , (*A 382(P  74)*)    2 , (*A 383(P  75)*)    3
         , (*A 384(P  76)*)    1 , (*A 385(P  77)*)    4 , (*A 386(P  78)*)    1
         , (*A 387(P  79)*)    1 , (*A 388(P  80)*)    1 , (*A 389(P  81)*)    2
         , (*A 390(P  82)*)    0 , (*A 391(P  83)*)    1 , (*A 392(P  84)*)    2
         , (*A 393(P  85)*)    3 , (*A 394(P  86)*)    1 , (*A 395(P  87)*)    3
         , (*A 396(P  88)*)    1 , (*A 397(P  89)*)    1 , (*A 398(P  90)*)    1
         , (*A 399(P  91)*)    2 , (*A 400(P  92)*)    0 , (*A 401(P  93)*)    1
         , (*A 402(P  94)*)    2 , (*A 403(P  95)*)    3 , (*A 404(P  96)*)    3
         , (*A 405(P  97)*)    1 , (*A 406(P  98)*)    2 , (*A 407(P  99)*)    0
         , (*A 408(P 100)*)    1 , (*A 409(P 101)*)    2 , (*A 410(P 102)*)    3
         , (*A 411(P 103)*)    3 , (*A 412(P 104)*)    1 , (*A 413(P 105)*)    2
         , (*A 414(P 106)*)    0 , (*A 415(P 107)*)    2 , (*A 416(P 108)*)    0
         , (*A 417(P 109)*)    1 , (*A 418(P 110)*)    2 , (*A 419(P 111)*)    1
         , (*A 420(P 112)*)    1 , (*A 421(P 113)*)    1 , (*A 422(P 114)*)    1
         , (*A 423(P 115)*)    1 , (*A 424(P 116)*)    1 , (*A 425(P 117)*)    1
         , (*A 426(P 118)*)    1 , (*A 427(P 119)*)    1 , (*A 428(P 120)*)    1
         , (*A 429(P 121)*)    1 , (*A 430(P 122)*)    1 , (*A 431(P 123)*)    1
         , (*A 432(P 124)*)    1 , (*A 433(P 125)*)    1 , (*A 434(P 126)*)    1
         , (*A 435(P 127)*)    0 , (*A 436(P 128)*)    2 , (*A 437(P 129)*)    1
         , (*A 438(P 130)*)    3 , (*A 439(P 131)*)    1 , (*A 440(P 132)*)    3
         , (*A 441(P 133)*)    0 , (*A 442(P 134)*)    1 , (*A 443(P 135)*)    3
         , (*A 444(P 136)*)    1 , (*A 445(P 137)*)    3 , (*A 446(P 138)*)    1
         , (*A 447(P 139)*)    2 , (*A 448(P 140)*)    0 , (*A 449(P 141)*)    1
         , (*A 450(P 142)*)    3 , (*A 451(P 143)*)    1 , (*A 452(P 144)*)    3
         , (*A 453(P 145)*)    1 , (*A 454(P 146)*)    3 , (*A 455(P 147)*)    0
         , (*A 456(P 148)*)    1 , (*A 457(P 149)*)    2 , (*A 458(P 150)*)    0
         , (*A 459(P 151)*)    1 , (*A 460(P 152)*)    1 , (*A 461(P 153)*)    3
         , (*A 462(P 154)*)    5 , (*A 463(P 155)*)    1 , (*A 464(P 156)*)    1
         , (*A 465(P 157)*)    2 , (*A 466(P 158)*)    3 , (*A 467(P 159)*)    3
         , (*A 468(P 160)*)    0 , (*A 469(P 161)*)    2 , (*A 470(P 162)*)    3
         , (*A 471(P 163)*)    1 , (*A 472(P 164)*)    0 , (*A 473(P 165)*)    1
         , (*A 474(P 166)*)    1 , (*A 475(P 167)*)    1 , (*A 476(P 168)*)    4
         , (*A 477(P 169)*)    1 , (*A 478(P 170)*)    2 , (*A 479(P 171)*)    0
         , (*A 480(P 172)*)    2 , (*A 481(P 173)*)    0 , (*A 482(P 174)*)    2
         , (*A 483(P 175)*)    0 , (*A 484(P 176)*)    0 , (*A 485(P 177)*)    2
         , (*A 486(P 178)*)    4 , (*A 487(P 179)*)    2 , (*A 488(P 180)*)    3
         , (*A 489(P 181)*)    1 , (*A 490(P 182)*)    1 , (*A 491(P 183)*)    4
         , (*A 492(P 184)*)    1 , (*A 493(P 185)*)    1 , (*A 494(P 186)*)    1
         , (*A 495(P 187)*)    1 , (*A 496(P 188)*)    1 , (*A 497(P 189)*)    1
         , (*A 498(P 190)*)    1 , (*A 499(P 191)*)    1 , (*A 500(P 192)*)    1
         , (*A 501(P 193)*)    1 , (*A 502(P 194)*)    1 , (*A 503(P 195)*)    1
         , (*A 504(P 196)*)    2 , (*A 505(P 197)*)    0 , (*A 506(P 198)*)    5
         , (*A 507(P 199)*)    1 , (*A 508(P 200)*)    1 , (*A 509(P 201)*)    1
         , (*A 510(P 202)*)    1 , (*A 511(P 203)*)    1 , (*A 512(P 204)*)    1
         , (*A 513(P 205)*)    0 , (*A 514(P 206)*)    1 , (*A 515(P 207)*)    1
         , (*A 516(P 208)*)    2 , (*A 517(P 209)*)    0 , (*A 518(P 210)*)    2
         , (*A 519(P 211)*)    1 , (*A 520(P 212)*)    3 , (*A 521(P 213)*)    1
         , (*A 522(P 214)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 309(P   1)*)  239 , (*A 310(P   2)*)  109 , (*A 311(P   3)*)  109
         , (*A 312(P   4)*)  109 , (*A 313(P   5)*)  109 , (*A 314(P   6)*)  109
         , (*A 315(P   7)*)  109 , (*A 316(P   8)*)  115 , (*A 317(P   9)*)  116
         , (*A 318(P  10)*)  117 , (*A 319(P  11)*)  117 , (*A 320(P  12)*)  119
         , (*A 321(P  13)*)  120 , (*A 322(P  14)*)  121 , (*A 323(P  15)*)  122
         , (*A 324(P  16)*)  123 , (*A 325(P  17)*)  124 , (*A 326(P  18)*)  126
         , (*A 327(P  19)*)  113 , (*A 328(P  20)*)  129 , (*A 329(P  21)*)  108
         , (*A 330(P  22)*)  131 , (*A 331(P  23)*)  114 , (*A 332(P  24)*)  132
         , (*A 333(P  25)*)  110 , (*A 334(P  26)*)  134 , (*A 335(P  27)*)  111
         , (*A 336(P  28)*)  136 , (*A 337(P  29)*)  112 , (*A 338(P  30)*)  125
         , (*A 339(P  31)*)  125 , (*A 340(P  32)*)  138 , (*A 341(P  33)*)  139
         , (*A 342(P  34)*)  139 , (*A 343(P  35)*)  140 , (*A 344(P  36)*)  141
         , (*A 345(P  37)*)  141 , (*A 346(P  38)*)  142 , (*A 347(P  39)*)  142
         , (*A 348(P  40)*)  143 , (*A 349(P  41)*)  143 , (*A 350(P  42)*)  144
         , (*A 351(P  43)*)  144 , (*A 352(P  44)*)  145 , (*A 353(P  45)*)  145
         , (*A 354(P  46)*)  146 , (*A 355(P  47)*)  146 , (*A 356(P  48)*)  147
         , (*A 357(P  49)*)  147 , (*A 358(P  50)*)  147 , (*A 359(P  51)*)  128
         , (*A 360(P  52)*)  148 , (*A 361(P  53)*)  150 , (*A 362(P  54)*)  149
         , (*A 363(P  55)*)  149 , (*A 364(P  56)*)  151 , (*A 365(P  57)*)  152
         , (*A 366(P  58)*)  152 , (*A 367(P  59)*)  151 , (*A 368(P  60)*)  153
         , (*A 369(P  61)*)  153 , (*A 370(P  62)*)  118 , (*A 371(P  63)*)  118
         , (*A 372(P  64)*)  154 , (*A 373(P  65)*)  154 , (*A 374(P  66)*)  135
         , (*A 375(P  67)*)  127 , (*A 376(P  68)*)  156 , (*A 377(P  69)*)  156
         , (*A 378(P  70)*)  157 , (*A 379(P  71)*)  159 , (*A 380(P  72)*)  158
         , (*A 381(P  73)*)  158 , (*A 382(P  74)*)  160 , (*A 383(P  75)*)  160
         , (*A 384(P  76)*)  162 , (*A 385(P  77)*)  161 , (*A 386(P  78)*)  165
         , (*A 387(P  79)*)  165 , (*A 388(P  80)*)  166 , (*A 389(P  81)*)  168
         , (*A 390(P  82)*)  167 , (*A 391(P  83)*)  167 , (*A 392(P  84)*)  169
         , (*A 393(P  85)*)  169 , (*A 394(P  86)*)  171 , (*A 395(P  87)*)  170
         , (*A 396(P  88)*)  172 , (*A 397(P  89)*)  172 , (*A 398(P  90)*)  173
         , (*A 399(P  91)*)  175 , (*A 400(P  92)*)  174 , (*A 401(P  93)*)  174
         , (*A 402(P  94)*)  176 , (*A 403(P  95)*)  176 , (*A 404(P  96)*)  177
         , (*A 405(P  97)*)  178 , (*A 406(P  98)*)  180 , (*A 407(P  99)*)  179
         , (*A 408(P 100)*)  179 , (*A 409(P 101)*)  181 , (*A 410(P 102)*)  181
         , (*A 411(P 103)*)  182 , (*A 412(P 104)*)  183 , (*A 413(P 105)*)  163
         , (*A 414(P 106)*)  163 , (*A 415(P 107)*)  184 , (*A 416(P 108)*)  184
         , (*A 417(P 109)*)  155 , (*A 418(P 110)*)  155 , (*A 419(P 111)*)  155
         , (*A 420(P 112)*)  155 , (*A 421(P 113)*)  155 , (*A 422(P 114)*)  155
         , (*A 423(P 115)*)  155 , (*A 424(P 116)*)  155 , (*A 425(P 117)*)  155
         , (*A 426(P 118)*)  155 , (*A 427(P 119)*)  155 , (*A 428(P 120)*)  155
         , (*A 429(P 121)*)  155 , (*A 430(P 122)*)  155 , (*A 431(P 123)*)  155
         , (*A 432(P 124)*)  155 , (*A 433(P 125)*)  155 , (*A 434(P 126)*)  155
         , (*A 435(P 127)*)  201 , (*A 436(P 128)*)  201 , (*A 437(P 129)*)  202
         , (*A 438(P 130)*)  202 , (*A 439(P 131)*)  203 , (*A 440(P 132)*)  155
         , (*A 441(P 133)*)  204 , (*A 442(P 134)*)  204 , (*A 443(P 135)*)  204
         , (*A 444(P 136)*)  205 , (*A 445(P 137)*)  205 , (*A 446(P 138)*)  207
         , (*A 447(P 139)*)  206 , (*A 448(P 140)*)  209 , (*A 449(P 141)*)  209
         , (*A 450(P 142)*)  209 , (*A 451(P 143)*)  210 , (*A 452(P 144)*)  210
         , (*A 453(P 145)*)  212 , (*A 454(P 146)*)  211 , (*A 455(P 147)*)  213
         , (*A 456(P 148)*)  213 , (*A 457(P 149)*)  213 , (*A 458(P 150)*)  214
         , (*A 459(P 151)*)  214 , (*A 460(P 152)*)  214 , (*A 461(P 153)*)  216
         , (*A 462(P 154)*)  215 , (*A 463(P 155)*)  155 , (*A 464(P 156)*)  217
         , (*A 465(P 157)*)  155 , (*A 466(P 158)*)  208 , (*A 467(P 159)*)  218
         , (*A 468(P 160)*)  221 , (*A 469(P 161)*)  221 , (*A 470(P 162)*)  222
         , (*A 471(P 163)*)  222 , (*A 472(P 164)*)  224 , (*A 473(P 165)*)  224
         , (*A 474(P 166)*)  224 , (*A 475(P 167)*)  224 , (*A 476(P 168)*)  223
         , (*A 477(P 169)*)  225 , (*A 478(P 170)*)  226 , (*A 479(P 171)*)  226
         , (*A 480(P 172)*)  227 , (*A 481(P 173)*)  227 , (*A 482(P 174)*)  219
         , (*A 483(P 175)*)  219 , (*A 484(P 176)*)  220 , (*A 485(P 177)*)  220
         , (*A 486(P 178)*)  220 , (*A 487(P 179)*)  228 , (*A 488(P 180)*)  230
         , (*A 489(P 181)*)  229 , (*A 490(P 182)*)  231 , (*A 491(P 183)*)  229
         , (*A 492(P 184)*)  164 , (*A 493(P 185)*)  164 , (*A 494(P 186)*)  164
         , (*A 495(P 187)*)  164 , (*A 496(P 188)*)  164 , (*A 497(P 189)*)  164
         , (*A 498(P 190)*)  164 , (*A 499(P 191)*)  164 , (*A 500(P 192)*)  164
         , (*A 501(P 193)*)  164 , (*A 502(P 194)*)  164 , (*A 503(P 195)*)  164
         , (*A 504(P 196)*)  164 , (*A 505(P 197)*)  232 , (*A 506(P 198)*)  137
         , (*A 507(P 199)*)  233 , (*A 508(P 200)*)  233 , (*A 509(P 201)*)  233
         , (*A 510(P 202)*)  233 , (*A 511(P 203)*)  233 , (*A 512(P 204)*)  233
         , (*A 513(P 205)*)  130 , (*A 514(P 206)*)  130 , (*A 515(P 207)*)  235
         , (*A 516(P 208)*)  235 , (*A 517(P 209)*)  133 , (*A 518(P 210)*)  133
         , (*A 519(P 211)*)  236 , (*A 520(P 212)*)  236 , (*A 521(P 213)*)  237
         , (*A 522(P 214)*)  238
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)    9
         , (*:  12*)    9 , (*:  13*)   95 , (*:  14*)   30
         , (*:  15*)   95 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   66 , (*:  20*)   95
         , (*:  21*)   95 , (*:  22*)   69 , (*:  23*)   70
         , (*:  24*)   70 , (*:  25*)   95 , (*:  26*)   19
         , (*:  27*)   95 , (*:  28*)   67 , (*:  29*)   19
         , (*:  30*)   95 , (*:  31*)   19 , (*:  32*)   95
         , (*:  33*)   67 , (*:  34*)    9 , (*:  35*)    9
         , (*:  36*)   66 , (*:  37*)   68 , (*:  38*)   95
         , (*:  39*)   95 , (*:  40*)   52 , (*:  41*)   11
         , (*:  42*)   95 , (*:  43*)   19 , (*:  44*)   19
         , (*:  45*)   19 , (*:  46*)   95 , (*:  47*)   19
         , (*:  48*)   19 , (*:  49*)   95 , (*:  50*)   19
         , (*:  51*)   19 , (*:  52*)   19 , (*:  53*)   19
         , (*:  54*)   39 , (*:  55*)   39 , (*:  56*)   39
         , (*:  57*)   39 , (*:  58*)   19 , (*:  59*)   19
         , (*:  60*)   19 , (*:  61*)   19 , (*:  62*)   19
         , (*:  63*)   19 , (*:  64*)   69 , (*:  65*)   70
         , (*:  66*)   70 , (*:  67*)   70 , (*:  68*)   70
         , (*:  69*)   95 , (*:  70*)   66 , (*:  71*)   66
         , (*:  72*)   95 , (*:  73*)   69 , (*:  74*)   19
         , (*:  75*)   95 , (*:  76*)   19 , (*:  77*)    6
         , (*:  78*)   76 , (*:  79*)   76 , (*:  80*)   76
         , (*:  81*)   95 , (*:  82*)   66 , (*:  83*)   95
         , (*:  84*)   66 , (*:  85*)   19 , (*:  86*)   19
         , (*:  87*)   19 , (*:  88*)   19 , (*:  89*)   68
         , (*:  90*)   95 , (*:  91*)   19 , (*:  92*)   19
         , (*:  93*)   68 , (*:  94*)   95 , (*:  95*)   66
         , (*:  96*)   66 , (*:  97*)    9 , (*:  98*)    9
         , (*:  99*)   66 , (*: 100*)   68 , (*: 101*)   95
         , (*: 102*)   66 , (*: 103*)    9 , (*: 104*)   68
         , (*: 105*)   95 , (*: 106*)    9 , (*: 107*)   66
         , (*: 108*)   66 , (*: 109*)    9 , (*: 110*)    9
         , (*: 111*)   66 , (*: 112*)   66 , (*: 113*)   69
         , (*: 114*)   66 , (*: 115*)    9 , (*: 116*)   95
         , (*: 117*)   66 , (*: 118*)    9 , (*: 119*)    9
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   74
         , (*: 123*)   95 , (*: 124*)   19 , (*: 125*)   19
         , (*: 126*)   19 , (*: 127*)    9 , (*: 128*)   66
         , (*: 129*)   95 , (*: 130*)   66 , (*: 131*)   95
         , (*: 132*)   95 , (*: 133*)   69 , (*: 134*)   19
         , (*: 135*)   95 , (*: 136*)   67 , (*: 137*)   66
         , (*: 138*)    9 , (*: 139*)    9 , (*: 140*)    9
         , (*: 141*)   19 , (*: 142*)   19 , (*: 143*)   95
         , (*: 144*)   67 , (*: 145*)   69 , (*: 146*)   69
         , (*: 147*)   70 , (*: 148*)   70 , (*: 149*)   66
         , (*: 150*)   14 , (*: 151*)   19 , (*: 152*)   19
         , (*: 153*)   95 , (*: 154*)   67 , (*: 155*)   69
         , (*: 156*)   69 , (*: 157*)   66 , (*: 158*)    9
         , (*: 159*)    9 , (*: 160*)   95 , (*: 161*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 162)*)  316 (*P7*) , (*RR: 163)*)  338 (*P29*)
         , (*RR: 164)*)  326 (*P17*) , (*RR: 165)*)  330 (*P21*)
         , (*RR: 166)*)  343 (*P34*) , (*RR: 167)*)  368 (*P59*)
         , (*RR: 168)*)  365 (*P56*) , (*RR: 169)*)  364 (*P55*)
         , (*RR: 170)*)  366 (*P57*) , (*RR: 171)*)  367 (*P58*)
         , (*RR: 172)*)  375 (*P66*) , (*RR: 173)*)  327 (*P18*)
         , (*RR: 174)*)  378 (*P69*) , (*RR: 175)*)  487 (*P178*)
         , (*RR: 176)*)  398 (*P89*) , (*RR: 177)*)  388 (*P79*)
         , (*RR: 178)*)  405 (*P96*) , (*RR: 179)*)  329 (*P20*)
         , (*RR: 180)*)  384 (*P75*) , (*RR: 181)*)  383 (*P74*)
         , (*RR: 182)*)  464 (*P155*) , (*RR: 183)*)  439 (*P130*)
         , (*RR: 184)*)  357 (*P48*) , (*RR: 185)*)  358 (*P49*)
         , (*RR: 186)*)  355 (*P46*) , (*RR: 187)*)  346 (*P37*)
         , (*RR: 188)*)  347 (*P38*) , (*RR: 189)*)  493 (*P184*)
         , (*RR: 190)*)  494 (*P185*) , (*RR: 191)*)  495 (*P186*)
         , (*RR: 192)*)  496 (*P187*) , (*RR: 193)*)  497 (*P188*)
         , (*RR: 194)*)  498 (*P189*) , (*RR: 195)*)  499 (*P190*)
         , (*RR: 196)*)  500 (*P191*) , (*RR: 197)*)  501 (*P192*)
         , (*RR: 198)*)  502 (*P193*) , (*RR: 199)*)  503 (*P194*)
         , (*RR: 200)*)  504 (*P195*) , (*RR: 201)*)  440 (*P131*)
         , (*RR: 202)*)  461 (*P152*) , (*RR: 203)*)  446 (*P137*)
         , (*RR: 204)*)  475 (*P166*) , (*RR: 205)*)  473 (*P164*)
         , (*RR: 206)*)  474 (*P165*) , (*RR: 207)*)  467 (*P158*)
         , (*RR: 208)*)  485 (*P176*) , (*RR: 209)*)  486 (*P177*)
         , (*RR: 210)*)  453 (*P144*) , (*RR: 211)*)  462 (*P153*)
         , (*RR: 212)*)  382 (*P73*) , (*RR: 213)*)  394 (*P85*)
         , (*RR: 214)*)  393 (*P84*) , (*RR: 215)*)  386 (*P77*)
         , (*RR: 216)*)  387 (*P78*) , (*RR: 217)*)  392 (*P83*)
         , (*RR: 218)*)  396 (*P87*) , (*RR: 219)*)  397 (*P88*)
         , (*RR: 220)*)  403 (*P94*) , (*RR: 221)*)  402 (*P93*)
         , (*RR: 222)*)  410 (*P101*) , (*RR: 223)*)  409 (*P100*)
         , (*RR: 224)*)  489 (*P180*) , (*RR: 225)*)  490 (*P181*)
         , (*RR: 226)*)  491 (*P182*) , (*RR: 227)*)  506 (*P197*)
         , (*RR: 228)*)  372 (*P63*) , (*RR: 229)*)  373 (*P64*)
         , (*RR: 230)*)  331 (*P22*) , (*RR: 231)*)  333 (*P24*)
         , (*RR: 232)*)  374 (*P65*) , (*RR: 233)*)  335 (*P26*)
         , (*RR: 234)*)  337 (*P28*) , (*RR: 235)*)  334 (*P25*)
         , (*RR: 236)*)  336 (*P27*) , (*RR: 237)*)  310 (*P1*)
         , (*RR: 238)*)  311 (*P2*) , (*RR: 239)*)  312 (*P3*)
         , (*RR: 240)*)  313 (*P4*) , (*RR: 241)*)  314 (*P5*)
         , (*RR: 242)*)  315 (*P6*) , (*RR: 243)*)  328 (*P19*)
         , (*RR: 244)*)  359 (*P50*) , (*RR: 245)*)  362 (*P53*)
         , (*RR: 246)*)  369 (*P60*) , (*RR: 247)*)  348 (*P39*)
         , (*RR: 248)*)  379 (*P70*) , (*RR: 249)*)  356 (*P47*)
         , (*RR: 250)*)  418 (*P109*) , (*RR: 251)*)  419 (*P110*)
         , (*RR: 252)*)  420 (*P111*) , (*RR: 253)*)  421 (*P112*)
         , (*RR: 254)*)  422 (*P113*) , (*RR: 255)*)  423 (*P114*)
         , (*RR: 256)*)  424 (*P115*) , (*RR: 257)*)  425 (*P116*)
         , (*RR: 258)*)  426 (*P117*) , (*RR: 259)*)  427 (*P118*)
         , (*RR: 260)*)  428 (*P119*) , (*RR: 261)*)  429 (*P120*)
         , (*RR: 262)*)  430 (*P121*) , (*RR: 263)*)  431 (*P122*)
         , (*RR: 264)*)  432 (*P123*) , (*RR: 265)*)  433 (*P124*)
         , (*RR: 266)*)  434 (*P125*) , (*RR: 267)*)  437 (*P128*)
         , (*RR: 268)*)  492 (*P183*) , (*RR: 269)*)  411 (*P102*)
         , (*RR: 270)*)  438 (*P129*) , (*RR: 271)*)  436 (*P127*)
         , (*RR: 272)*)  445 (*P136*) , (*RR: 273)*)  470 (*P161*)
         , (*RR: 274)*)  478 (*P169*) , (*RR: 275)*)  465 (*P156*)
         , (*RR: 276)*)  482 (*P173*) , (*RR: 277)*)  353 (*P44*)
         , (*RR: 278)*)  352 (*P43*) , (*RR: 279)*)  466 (*P157*)
         , (*RR: 280)*)  476 (*P167*) , (*RR: 281)*)  469 (*P160*)
         , (*RR: 282)*)  471 (*P162*) , (*RR: 283)*)  447 (*P138*)
         , (*RR: 284)*)  443 (*P134*) , (*RR: 285)*)  444 (*P135*)
         , (*RR: 286)*)  452 (*P143*) , (*RR: 287)*)  450 (*P141*)
         , (*RR: 288)*)  451 (*P142*) , (*RR: 289)*)  413 (*P104*)
         , (*RR: 290)*)  507 (*P198*) , (*RR: 291)*)  389 (*P80*)
         , (*RR: 292)*)  395 (*P86*) , (*RR: 293)*)  508 (*P199*)
         , (*RR: 294)*)  404 (*P95*) , (*RR: 295)*)  399 (*P90*)
         , (*RR: 296)*)  512 (*P203*) , (*RR: 297)*)  406 (*P97*)
         , (*RR: 298)*)  510 (*P201*) , (*RR: 299)*)  488 (*P179*)
         , (*RR: 300)*)  520 (*P211*) , (*RR: 301)*)  521 (*P212*)
         , (*RR: 302)*)  518 (*P209*) , (*RR: 303)*)  519 (*P210*)
         , (*RR: 304)*)  511 (*P202*) , (*RR: 305)*)  515 (*P206*)
         , (*RR: 306)*)  509 (*P200*) , (*RR: 307)*)  516 (*P207*)
         , (*RR: 308)*)  332 (*P23*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 72 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSUnnestCoord        : LONGINT; 
      yyPrereduceUnnestCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*                     PushUnnestStk (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*              PushUnnestStk (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceUnnestCoord := UnnestCoord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 309 => (* P1 _0000_ (239): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 310,237 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 311,238 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 312,239 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 313,240 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 314,241 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 315,242 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 316,162 => (* P8 UnitId (115): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 115;
                (* line 269 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Units . UnitStackTopRef ^ . UntUnitIdentAtom := yySynAttribute . Scan . SaAtom ;
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 317 => (* P9 UnitIdImpliedEXPORTS (116): UnitId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 116;
                (* line 285 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position;
                       EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ; 
                     
              | 318 => (* P10 UnitIdAndExports (117): UnitIdImpliedEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 291 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . SaAtom (* Unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                         yySynAttribute . Scan . Position (* Of unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ;  
                     
              | 319 => (* P11 UnitIdAndExports (117): UnitId Exports .*)
                DEC (yyStackPtr, 2); yyNonterminal := 117;
                (* line 306 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                     
              | 320 => (* P12 InterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 313 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 321 => (* P13 ModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 316 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 322 => (* P14 GenInterfaceKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 319 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 323 => (* P15 GenModuleKind (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 322 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 324 => (* P16 InstInterfaceKind (123): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 123;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 325 => (* P17 InstModuleKind (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;
                (* line 328 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 326,164 => (* P18 InterfaceLt (126): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 331 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3ParsePass . InterfaceId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeNo := LScopeRef ^ . ScpScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 327,173 => (* P19 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 351 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 328,243 => (* P20 InterfaceMiddle (129): InterfaceLt StkSemicolon Imports .*)
                DEC (yyStackPtr, 3); yyNonterminal := 129;
                (* line 354 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 329,179 => (* P21 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 365 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3ParsePass . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                           , Ukt . UkInterface
                           , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                           ) ; 
                         FM3ParsePass . Push_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 330,165 => (* P22 ModuleLt (131): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 392 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         LUnitRef ^ . UntKind := Ukt . UkModule
                           (* ^Could change, if it turns out to be an instantiation. *) ; 
                         FM3ParsePass . ModuleId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 331,230 => (* P23 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 414 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 332,308 => (* P24 ModuleMiddle (132): ModuleLt Exports StkSemicolon Imports .*)
                DEC (yyStackPtr, 4); yyNonterminal := 132;
                (* line 417 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 333,231 => (* P25 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 428 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3ParsePass . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+6] . Scan . SaAtom
                           , Ukt . UkModule
                           , yyAttributeStack^[yyStackPtr+6] . Scan . Position 
                           ) ;
                         FM3ParsePass . Push_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , LUnitRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 334,235 => (* P26 GenInterfaceLt (134): StkRwGENERIC StkRwINTERFACE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 460 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 335,233 => (* P27 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon Imports BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;
                (* line 477 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 336,236 => (* P28 GenModuleLt (136): StkRwGENERIC StkRwMODULE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 483 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 337,234 => (* P29 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 8); yyNonterminal := 112;
                (* line 500 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 338,163 => (* P30 OptUnsafe (125): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 125;
                (* line 506 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 339 => (* P31 OptUnsafe (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 507 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 340 => (* P32 CaptureCoord (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 510 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 341 => (* P33 OptSemicolon (139): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 342 => (* P34 OptSemicolon (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 343,166 => (* P35 IdentRef (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 518 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 344 => (* P36 IdPlusList (141): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 522 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 345 => (* P37 IdPlusList (141): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 526 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 346,187 => (* P38 DeclIdListElems (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 538 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3ParsePass . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 347,188 => (* P39 DeclIdListElems (142): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 549 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 348,247 => (* P40 IdStarList (143): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 562 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 349 => (* P41 IdStarList (143): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 143;
                (* line 564 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 350 => (* P42 QualIdStarList (144): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 144;
                (* line 568 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 351 => (* P43 QualIdStarList (144): QualIdPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 570 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 352,278 => (* P44 QualIdPlusList (145): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 572 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 353,277 => (* P45 QualIdPlusList (145): QualIdPlusList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 574 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 354 => (* P46 QualId (146): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 577 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 355,186 => (* P47 QualId (146): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 580 of "FM3Parser.lalr" *)
                 FM3ParsePass . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 356,249 => (* P48 TypeId (147): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 357,184 => (* P49 TypeId (147): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 589 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 358,185 => (* P50 TypeId (147): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 147;
                (* line 594 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidUNTRACEDROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 359,244 => (* P51 Imports (128): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 601 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 360 => (* P52 ImportsLt (148): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 148;
                (* line 604 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 361 => (* P53 ImportsRt (150): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 150;
                (* line 605 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 362,245 => (* P54 ImportsRecurse (149): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 149;
                (* line 607 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 363 => (* P55 ImportsRecurse (149): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 149;
                (* line 611 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 364,169 => (* P56 ImportItem (151): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 617 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 365,168 => (* P57 ImportIntfPlusList (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 621 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 366,170 => (* P58 ImportIntfPlusList (152): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 633 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       FM3ParsePass . Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 367,171 => (* P59 ImportItem (151): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 647 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 368,167 => (* P60 FromImportPlusList (153): StkRwFROM IdentRef StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 153;
                (* line 651 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       FM3ParsePass . Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 369,246 => (* P61 FromImportPlusList (153): FromImportPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 674 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       FM3ParsePass . Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 370 => (* P62 Exports (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 715 of "FM3Parser.lalr" *)
                
                
                       (* FM3Extern . GetExternInterface
                            ( 1 . Scan . SaAtom , IsImport := FALSE ) ;
                       *) 
                     
              | 371 => (* P63 Exports (118): StkRwEXPORTS ExportPlus .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;

              | 372,228 => (* P64 ExportPlus (154): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 725 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 373,229 => (* P65 ExportPlus (154): ExportPlus StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 730 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 374,232 => (* P66 GenFormalList (135): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 738 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 375,172 => (* P67 GenActualList (127): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 744 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 376 => (* P68 OptConstType (156): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 753 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 377 => (* P69 OptConstType (156): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 156;
                (* line 755 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 378,174 => (* P70 ConstDeclGroupLt (157): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 764 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 379,248 => (* P71 ConstDeclGroup (159): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 767 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 380 => (* P72 ConstDeclList (158): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 158;
                (* line 772 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 381 => (* P73 ConstDeclList (158): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 778 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 382,212 => (* P74 ConstDeclPlus (160): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 383,181 => (* P75 ConstDeclPlus (160): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 160;
                (* line 788 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 384,180 => (* P76 ConstDeclId (162): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 806 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 385 => (* P77 ConstDecl (161): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 161;
                (* line 813 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3ParsePass . Push_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 386,215 => (* P78 TypeRelation (165): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 839 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 387,216 => (* P79 TypeRelation (165): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 841 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 388,177 => (* P80 TypeDeclGroupLt (166): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 852 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 389,291 => (* P81 TypeDeclGroup (168): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 855 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 390 => (* P82 TypeDeclList (167): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 167;
                (* line 860 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 391 => (* P83 TypeDeclList (167): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 866 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 392,217 => (* P84 TypeDeclPlus (169): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 169;
                (* line 871 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 393,214 => (* P85 TypeDeclPlus (169): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 876 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 394,213 => (* P86 TypeDeclId (171): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 892 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 395,292 => (* P87 TypeDecl (170): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 170;
                (* line 899 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3ParsePass . Push_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 396,218 => (* P88 RevelationRelation (172): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 919 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 397,219 => (* P89 RevelationRelation (172): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 921 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 398,176 => (* P90 RevelationGroupLt (173): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 932 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 399,295 => (* P91 RevelationGroup (175): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 935 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 400 => (* P92 RevelationList (174): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 174;
                (* line 940 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 401 => (* P93 RevelationList (174): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 946 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 402,221 => (* P94 RevelationPlus (176): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 176;
                (* line 951 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 403,220 => (* P95 RevelationPlus (176): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 956 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3ParsePass . Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 404,294 => (* P96 Revelation (177): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 177;
                (* line 972 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3ParsePass . Push_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 405,178 => (* P97 VarDeclGroupLt (178): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 999 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 406,297 => (* P98 VarDeclGroup (180): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1013 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 407 => (* P99 VarDeclList (179): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 179;
                (* line 1019 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 408 => (* P100 VarDeclList (179): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 179;
                (* line 1025 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 409,223 => (* P101 VarDeclPlus (181): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 181;
                (* line 1038 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 410,222 => (* P102 VarDeclPlus (181): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1043 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3ParsePass . Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 411,269 => (* P103 VarDecl (182): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 182;
                (* line 1061 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3ParsePass . Push_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 412 => (* P104 VarDeclIds (183): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 183;
                (* line 1089 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 413,289 => (* P105 OptDeclType (163): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 1101 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 414 => (* P106 OptDeclType (163): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 163;
                (* line 1105 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3ParsePass . Push_L ( Itk . ItkDeclTypeAbsent ) ; 
                     
              | 415 => (* P107 OptDeclValue (184): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1110 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 416 => (* P108 OptDeclValue (184): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 184;
                (* line 1114 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3ParsePass . Push_L ( Itk . ItkDeclValAbsent ) ; 
                     
              | 417 => (* P109 Type (155): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 418,250 => (* P110 Type (155): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 1124 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 419,251 => (* P111 Type (155): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 420,252 => (* P112 Type (155): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 421,253 => (* P113 Type (155): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 422,254 => (* P114 Type (155): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 423,255 => (* P115 Type (155): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 424,256 => (* P116 Type (155): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 425,257 => (* P117 Type (155): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 426,258 => (* P118 Type (155): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 427,259 => (* P119 Type (155): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 428,260 => (* P120 Type (155): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 429,261 => (* P121 Type (155): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 430,262 => (* P122 Type (155): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 431,263 => (* P123 Type (155): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 432,264 => (* P124 Type (155): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 433,265 => (* P125 Type (155): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 434,266 => (* P126 Type (155): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 435 => (* P127 FieldDeclList (201): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 201;
                (* line 1153 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 436,271 => (* P128 FieldDeclList (201): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 201;
                (* line 1161 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 437,267 => (* P129 FieldDeclPlus (202): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 202;
                (* line 1170 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 438,270 => (* P130 FieldDeclPlus (202): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 202;
                (* line 1173 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 439,183 => (* P131 RecTypeLt (203): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 203;
                (* line 1185 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 440,201 => (* P132 Type (155): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 155;
                (* line 1213 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3ParsePass . Push_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 441 => (* P133 MethodDeclList (204): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 204;
                (* line 1235 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 442 => (* P134 MethodDeclList (204): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1243 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 443,284 => (* P135 MethodDeclList (204): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 204;
                (* line 1248 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 444,285 => (* P136 MethodDeclPlus (205): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 205;
                (* line 1257 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 445,272 => (* P137 MethodDeclPlus (205): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1260 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 446,203 => (* P138 MethodDeclLt (207): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1272 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3ParsePass . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3ParsePass . Push_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 447,283 => (* P139 MethodDecl (206): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 206;
                (* line 1295 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3ParsePass . Push_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3ParsePass . Push_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3ParsePass . Push_LCI_ri
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , FM3Globals . NextSkipNo
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 448 => (* P140 OverrideList (209): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 209;
                (* line 1328 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 449 => (* P141 OverrideList (209): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1336 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 450,287 => (* P142 OverrideList (209): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1341 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 451,288 => (* P143 OverridePlus (210): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1350 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 452,286 => (* P144 OverridePlus (210): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1353 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 453,210 => (* P145 OverrideLt (212): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1365 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 454 => (* P146 Override (211): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 211;
                (* line 1371 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3ParsePass . Push_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         ) ;
                     
              | 455 => (* P147 Brand (213): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 213;
                (* line 1383 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 456 => (* P148 Brand (213): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1388 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 457 => (* P149 Brand (213): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 213;
                (* line 1393 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 458 => (* P150 Supertype (214): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 214;
                (* line 1400 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3ParsePass . Push_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 459 => (* P151 Supertype (214): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1406 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 460 => (* P152 Supertype (214): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1415 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 461,202 => (* P153 ObjTypeLt (216): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1426 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 462,211 => (* P154 ObjType (215): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 215;
                (* line 1454 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3ParsePass . Push_LCP_rp
                           ( Itk . ItkObjDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 463 => (* P155 Type (155): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 464,182 => (* P156 ProcTypeLt (217): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1478 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END (*Block*)
                     
              | 465,275 => (* P157 Type (155): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 1493 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 466,279 => (* P158 Signature (208): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 208;
                (* line 1501 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3ParsePass . Push_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 467,207 => (* P159 Formals (218): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 218;
                (* line 1521 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3ParsePass . Push_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 468 => (* P160 FormalsList (221): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 221;
                (* line 1540 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 469,281 => (* P161 FormalsList (221): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 221;

              | 470,273 => (* P162 FormalPlus (222): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1545 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 471,282 => (* P163 FormalPlus (222): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 222;
                (* line 1555 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 472 => (* P164 FormalLt (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1559 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 473,205 => (* P165 FormalLt (224): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1574 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 474,206 => (* P166 FormalLt (224): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1590 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 475,204 => (* P167 FormalLt (224): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1604 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 476,280 => (* P168 Formal (223): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 223;
                (* line 1621 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3ParsePass . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3ParsePass . Push_LCI_ri
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , FM3Globals . NextSkipNo
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3ParsePass . Push_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 477 => (* P169 FormalIds (225): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1679 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 478,274 => (* P170 FormalType (226): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 226;
                (* line 1691 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 479 => (* P171 FormalType (226): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 226;
                (* line 1700 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 480 => (* P172 FormalExpr (227): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 227;
                (* line 1708 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3ParsePass . Push_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 481 => (* P173 FormalExpr (227): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 227;
                (* line 1717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 482,276 => (* P174 ResultType (219): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 219;
                (* line 1725 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3ParsePass . Push_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 483 => (* P175 ResultType (219): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 219;
                (* line 1732 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
                     
              | 484 => (* P176 Raises (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1742 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3ParsePass . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 485,208 => (* P177 Raises (220): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 220;
                (* line 1748 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . Push_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position) ; 
                     
              | 486,209 => (* P178 Raises (220): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 220;
                (* line 1755 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 487,175 => (* P179 ProcDeclLt (228): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 228;
                (* line 1762 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3ParsePass . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentlyInModule ( )
                         THEN LScopeKind  := Skt . SkFormalsAndBody ; 
                         ELSE LScopeKind  := Skt . SkFormals ;
                         END (*IF*) ; 
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , LScopeKind 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END (*Block*) 
                     
              | 488,299 => (* P180 ProcDecl (230): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 230;
                (* line 1787 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentlyInModule ( )
                         THEN (* => will have a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => will have no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3ParsePass . Push_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3ParsePass . Push_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 489,224 => (* P181 OptProcBody (229): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1831 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 490,225 => (* P182 ProcBodyLt (231): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1840 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3ParsePass . Push_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 491,226 => (* P183 OptProcBody (229): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 229;
                (* line 1853 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         FM3ParsePass . Push_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 492,268 => (* P184 Expr (164): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 493,189 => (* P185 Expr (164): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 494,190 => (* P186 Expr (164): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 495,191 => (* P187 Expr (164): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 496,192 => (* P188 Expr (164): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 497,193 => (* P189 Expr (164): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 498,194 => (* P190 Expr (164): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 499,195 => (* P191 Expr (164): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 500,196 => (* P192 Expr (164): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 501,197 => (* P193 Expr (164): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 502,198 => (* P194 Expr (164): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 503,199 => (* P195 Expr (164): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 504,200 => (* P196 Expr (164): Expr StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 164;

              | 505 => (* P197 BlockLt (232): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 232;
                (* line 1886 of "FM3Parser.lalr" *)
                
                     
              | 506,227 => (* P198 Block (137): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 137;
                (* line 1890 of "FM3Parser.lalr" *)
                
                     
              | 507,290 => (* P199 BlockDecl (233): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1896 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 508,293 => (* P200 BlockDecl (233): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1900 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 509,306 => (* P201 BlockDecl (233): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1904 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 510,298 => (* P202 BlockDecl (233): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1908 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 511,304 => (* P203 BlockDecl (233): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1912 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 512,296 => (* P204 BlockDecl (233): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1916 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 513 => (* P205 BlockDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 1924 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 514 => (* P206 BlockDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 1932 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 515,305 => (* P207 BlockDeclPlus (235): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1941 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 516,307 => (* P208 BlockDeclPlus (235): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 235;
                (* line 1946 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 517 => (* P209 StmtList (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 1965 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 518,302 => (* P210 StmtList (133): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;
                (* line 1973 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 519,303 => (* P211 StmtPlus (236): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;
                (* line 1981 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 520,300 => (* P212 StmtPlus (236): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 236;
                (* line 1984 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3ParsePass . Push_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 521,301 => (* P213 Stmt (237): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;

              | 522 => (* P214 AssignStmt (238): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1998 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := yyPrereduceUnnestCoord; 
                   ELSE WParsAttr . PaUnnestCoord := yyRHSUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*            PushUnnestStk (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 89 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 92 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

