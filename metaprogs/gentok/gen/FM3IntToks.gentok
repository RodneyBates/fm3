
(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

(* Input file FM3IntToks.gentok, to metaprogram GenTok. *)

UNITNAME FM3IntToks

(* Internal tokens for FM3 Modula-3 compiler, 
   used in intermediate token streams.  
*)

(* WARNING: Do not use single quotes inside a comment in this file. *) 

ABS 160
(* ^Be sure not to overlap the source tokens! *) 

(* Being low-numbered, these will read and write either forward
   or backward, without value change.
*) 
LONE
     ItkNull .
     ItkBOF .
     ItkEOF .
     ItkLeftEnd .
     ItkRightEnd . 
     ItkLeftEndIncomplete . 
     ItkRightEndIncomplete .

FIXED ItkSkip INT (* Unique Pair number. *) .

FIXED
ItkInterface INT POS 3 (* UnitNo, Position. *) . 

ItkModule INT POS 3 (* UnitNo, Position. *)
        Begin INT POS 
. 


LONE
ItkUnitId IDENT POS 3 (* IdAtom, Line, Column. *) . 
ItkImport IDENT POS 3 (* IdAtom, Line, Column. *) .
ItkFromImport IDENT POS IDENT POS 6 (* (IdAtom, Line, Column) for interface, decl. *) .
ItkImportAs IDENT POS IDENT POS 6 (* (IdAtom, Line, Column) for interface, as. *) .
ItkFormalsListEmpty . 
ItkFormalTypeAbsent POS 2 (* Position. *).
ItkFormalExprAbsent POS 2 (* Position. *).
ItkRaisesSetAbsent POS 2 (* Position. *).
ItkRaisesANY POS 2 (* Position. *) .
ItkResultTypeAbsent POS 2 (* Position. *). 
ItkProcBodyAbsent POS 2 (* Position. *).

(* Scopes and declarations within. *) 
LONE
ItkScopeEmpty INT (* ScopeNo. *) .
ItkDeclScopeLt INT (* ScopeNo. *) .
ItkDeclScopeRt INT (* ScopeNo. *) . 
ItkLookupScopeLt INT (* ScopeNo. *) .
ItkLookupScopeRt INT (* ScopeNo. *) . 
ItkReservedId IDENT POS 3 (* Rid*, Position. *). 
ItkDuplDeclId IDENT POS 3 (* IdAtom, position *) . 
ItkDeclId INT IDENT POS 4 (* DeclKind, IdAtom, position *) .
ItkDeclNo DECL POS 3 (* DeclNo, position *) .

(* Identifier references. *) 

ItkIdRefAtom IDENT POS 3 (* IdAtom, position. Occurs before unnest. *). 
ItkIdRefDeclNo DECL POS (* DeclNo, position. Occurs after unnest. *) . 

ItkQualIdAtoms      IDENT IDENT POS POS (* Lt & Rt Id atoms. *) .
ItkQualIdDeclNoAtom DECL  IDENT POS POS (* Lt decl no, Rt id atom. *) .
ItkQualIdDeclNos    DECL  DECL  POS POS (* Lt & Rt decl nos. *) .

ItkInvalidRef POS .

FIXED   
ItkFuncSignature POS 2 (* Position. *) .
ItkProcSignature POS 2 (* Position. *).
ItkFormalType POS 2 (* Position of colon. *) . 
ItkFormalExpr POS 2 (* Position of ":=" *).
ItkResultType POS 2 (* Position of colon. *).
ItkRaisesSet POS 2 (* Position of RAISES. *). 
ItkProcNoBody 1 (* Atom of signature. *) .
ItkProcWBody 1 (* Atom of signature. *) .
ItkProcBody POS 2 (* Position of equal sign. *) .
ItkProcType POS 2 (* Position of "(". *) .

FIXED
ItkBlock INT POS 3 (* Construct no., Position of LM declaration. *)
  BEGIN INT POS 3 (* Construct no.,Position of BEGIN. *) . 

(* Type decls. *)

(* All replaced by ItkDeclId:  
LONE
ItkTypeDeclId IDENT POS 3 .
ItkRevealId IDENT POS 3 . 
ItkConstId IDENT POS 3 . 
*) 

FIXED
ItkConstDecl POS
  Colon POS BOOL 
  Equals POS . 
 
ItkTypeDecl POS 2 (* Position of ident. *)
  Equals POS 2 . 
ItkSubtypeDecl POS 2 (* Position of ident (Lt). *)
  Subtype POS 2 . 

ItkFullReveal POS 2 (* Position of ident. *)
  Equals POS 2 . 
ItkPartialReveal POS 2 (* Position of ident. *)
  Subtype POS 2 .

LONE
ItkInvalidType POS (* To suppress derived errors. *) . 

(*
LONE
ItkVarDeclId     IDENT POS . 
ItkRecFieldId    IDENT POS . 
ItkVALUEFormalId IDENT POS . 
ItkVARFormalId   IDENT POS . 
ItkROFormalId    IDENT POS . 
*)
FIXED 
ItkREFDef POS 2 . 

(* Record type definitions. *) 
FIXED
ItkRecDef INT POS 3 (* field count, Position of RECORD, field count. *) .
ItkRecField POS 2 (* Position of LM ident (Lt) or position of semicolon (Rt). *)
  Type POS 2      (* Position of colon. *) 
  Val POS 2       (* Position of becomes. *)
.

LIST
ItkFieldDeclList .
ItkVarDeclList .
ItkTypeDeclList .

FIXED
(* One field decl, with possibly multiple idents. *) 
ItkFieldDecl POS 2 (* Position of LM ident (Lt) or position of semicolon (Rt). *)
  Type POS 2     (* Position of colon. *) 
  Val POS 2      (* Position of becomes. *)
. 

(* One variable decl, with possibly multiple idents. *) 
ItkVarDecl POS 2 (* Position of LM ident (Lt) or position of semicolon (Rt). *)
  Type POS 2     (* Position of colon. *) 
  Val POS 2      (* Position of becomes. *) 
.

(* One formal, with possibly multiple idents. *) 
ItkVALUEFormal POS 2 (* Position of LM ident (Lt) or of semicolon (Rt). *)
  Type POS 2     (* Position of colon. *) 
  Val POS 2      (* Position of becomes. *) 
.

(* One formal, with possibly multiple idents. *) 
ItkVARFormal POS 2 (* Position of LM ident (Lt) or of semicolon (Rt). *)
  Type POS 2     (* Position of colon. *) 
  Val POS 2      (* Position of becomes. *) 
.

(* One formal, with possibly multiple idents. *) 
ItkROFormal POS 2 (* Position of LM ident (Lt) or of semicolon (Rt). *)
  Type POS 2     (* Position of colon. *) 
  Val POS 2      (* Position of becomes, *) 
.

LIST

(* GenTok implicitly gives list tokens:
     The usual patch coordinate, if it's a patch token.
     One integer operand for element count (Lt & Rt tokens)
       or, for separator tokens, number of elements to left.  
     Position.  For Lt & Rt, of what source token  depends on the list.
       For separators, of the source separator, or if none, beginning
       of element to right.
*) 
 
ItkExportIdList (* Position is EXPORTS. *) . 
ItkGenFormalIdList (* Position is "(" *) .
ItkGenActualIdList (* Position is "(" *) .
ItkVarDeclIdList (* Position is is LM ident. *) .
ItkTypeDeclIdList (* Position is LM ident . *) .
ItkRevealIdList (* Position is LM ident . *) .
ItkFieldDeclIdList (* Position is "RECORD" *) .
ItkFormalsList (* Position is "(" *) .
ItkVALUEFormalIdList (* Position is VALUE or LM ident, if no mode. *). 
ItkVARFormalIdList (* Position is VAR. *) . 
ItkROFormalIdList (* Position is READONLY. *). 

(* NOTE: As of 2024-01030, FM3 is not numbering the ItkBlockDeclSep
         tokens separators in a flattened way, when decls are in
         2-level nested lists.  This affects only the separators.
         Totals in left and right tokens are correct.
         
         Doing the separators via parsing semantic attributes could be
         done, but it is very fragile.  It involves propagating info
         left-to-right and knowing the left context of a RHS being
         reduced.  Without formal analysis, this is very error-prone.
   `
         It could more safely be coded via a field in a block object,
         but that's some work, and it's unclear whether this would
         ever be needed anyway.

         So it's left undone for now.
*) 
ItkBlockDeclList . 

(* Statements *)

LIST ItkStmtList . 

FIXED ItkBecomes POS 2 Infix POS 2 (* Position of infix token, x3. *) .  

(*

FIXED ItkModule INT POS 3 (* UnitNo, Position. *)
        Begin INT POS 
. 

LIST ItkExportsList
       (* Element Count, Element No. *) 
.

LIST ItkIdPlusList
       (* Element Count, Element No. *) 
.

FIXED ItkExport (* Ident, Unit No. *) . 
*)



(* End of FM3IntToks. *) 


