
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 266;
   yyTableMax               = 930;
   yyNTableMax              = 1288;
   yyFirstReadState         = 1;
   yyLastReadState          = 195;
   yyFirstReadTermState             = 196;
   yyLastReadTermState              = 294;
   yyLastReadNontermState           = 398;
   yyFirstReduceState               = 399;
   yyLastReduceState                = 676;
   yyStartState             = 1;
   yyStopState              = 399;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   1]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   2])
         , (*   8*) ADR (yyTComb [   3]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   5]) , (*  17*) ADR (yyTComb [   3])
         , (*  18*) ADR (yyTComb [   6]) , (*  19*) ADR (yyTComb [   7])
         , (*  20*) ADR (yyTComb [   4]) , (*  21*) ADR (yyTComb [   8])
         , (*  22*) ADR (yyTComb [   9]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   1])
         , (*  26*) ADR (yyTComb [  10]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [  11]) , (*  29*) ADR (yyTComb [   6])
         , (*  30*) ADR (yyTComb [   0]) , (*  31*) ADR (yyTComb [  12])
         , (*  32*) ADR (yyTComb [   1]) , (*  33*) ADR (yyTComb [  13])
         , (*  34*) ADR (yyTComb [   9]) , (*  35*) ADR (yyTComb [  68])
         , (*  36*) ADR (yyTComb [  69]) , (*  37*) ADR (yyTComb [  13])
         , (*  38*) ADR (yyTComb [  12]) , (*  39*) ADR (yyTComb [  74])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [  99]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [   5])
         , (*  48*) ADR (yyTComb [   9]) , (*  49*) ADR (yyTComb [  15])
         , (*  50*) ADR (yyTComb [  18]) , (*  51*) ADR (yyTComb [   2])
         , (*  52*) ADR (yyTComb [ 104]) , (*  53*) ADR (yyTComb [  19])
         , (*  54*) ADR (yyTComb [ 105]) , (*  55*) ADR (yyTComb [ 108])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [   0]) , (*  59*) ADR (yyTComb [ 114])
         , (*  60*) ADR (yyTComb [  20]) , (*  61*) ADR (yyTComb [ 178])
         , (*  62*) ADR (yyTComb [  19]) , (*  63*) ADR (yyTComb [ 206])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [ 264])
         , (*  66*) ADR (yyTComb [   0]) , (*  67*) ADR (yyTComb [ 266])
         , (*  68*) ADR (yyTComb [   0]) , (*  69*) ADR (yyTComb [ 307])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 324])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 345])
         , (*  74*) ADR (yyTComb [  34]) , (*  75*) ADR (yyTComb [ 127])
         , (*  76*) ADR (yyTComb [ 420]) , (*  77*) ADR (yyTComb [  22])
         , (*  78*) ADR (yyTComb [   0]) , (*  79*) ADR (yyTComb [ 458])
         , (*  80*) ADR (yyTComb [ 511]) , (*  81*) ADR (yyTComb [ 571])
         , (*  82*) ADR (yyTComb [ 658]) , (*  83*) ADR (yyTComb [  64])
         , (*  84*) ADR (yyTComb [   0]) , (*  85*) ADR (yyTComb [  58])
         , (*  86*) ADR (yyTComb [  35]) , (*  87*) ADR (yyTComb [  22])
         , (*  88*) ADR (yyTComb [ 731]) , (*  89*) ADR (yyTComb [   3])
         , (*  90*) ADR (yyTComb [ 102]) , (*  91*) ADR (yyTComb [   0])
         , (*  92*) ADR (yyTComb [   2]) , (*  93*) ADR (yyTComb [   4])
         , (*  94*) ADR (yyTComb [   5]) , (*  95*) ADR (yyTComb [ 401])
         , (*  96*) ADR (yyTComb [  11]) , (*  97*) ADR (yyTComb [  12])
         , (*  98*) ADR (yyTComb [   7]) , (*  99*) ADR (yyTComb [  94])
         , (* 100*) ADR (yyTComb [ 109]) , (* 101*) ADR (yyTComb [   0])
         , (* 102*) ADR (yyTComb [  24]) , (* 103*) ADR (yyTComb [  82])
         , (* 104*) ADR (yyTComb [  88]) , (* 105*) ADR (yyTComb [ 140])
         , (* 106*) ADR (yyTComb [  60]) , (* 107*) ADR (yyTComb [ 243])
         , (* 108*) ADR (yyTComb [ 115]) , (* 109*) ADR (yyTComb [  87])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 402])
         , (* 112*) ADR (yyTComb [ 114]) , (* 113*) ADR (yyTComb [ 447])
         , (* 114*) ADR (yyTComb [ 166]) , (* 115*) ADR (yyTComb [   0])
         , (* 116*) ADR (yyTComb [  86]) , (* 117*) ADR (yyTComb [ 124])
         , (* 118*) ADR (yyTComb [   0]) , (* 119*) ADR (yyTComb [   8])
         , (* 120*) ADR (yyTComb [ 144]) , (* 121*) ADR (yyTComb [ 100])
         , (* 122*) ADR (yyTComb [   4]) , (* 123*) ADR (yyTComb [ 123])
         , (* 124*) ADR (yyTComb [   0]) , (* 125*) ADR (yyTComb [   5])
         , (* 126*) ADR (yyTComb [ 124]) , (* 127*) ADR (yyTComb [   0])
         , (* 128*) ADR (yyTComb [ 133]) , (* 129*) ADR (yyTComb [ 517])
         , (* 130*) ADR (yyTComb [ 621]) , (* 131*) ADR (yyTComb [ 134])
         , (* 132*) ADR (yyTComb [ 133]) , (* 133*) ADR (yyTComb [   0])
         , (* 134*) ADR (yyTComb [ 139]) , (* 135*) ADR (yyTComb [ 624])
         , (* 136*) ADR (yyTComb [ 139]) , (* 137*) ADR (yyTComb [ 659])
         , (* 138*) ADR (yyTComb [ 767]) , (* 139*) ADR (yyTComb [ 142])
         , (* 140*) ADR (yyTComb [ 149]) , (* 141*) ADR (yyTComb [ 784])
         , (* 142*) ADR (yyTComb [ 812]) , (* 143*) ADR (yyTComb [ 150])
         , (* 144*) ADR (yyTComb [ 152]) , (* 145*) ADR (yyTComb [ 165])
         , (* 146*) ADR (yyTComb [ 170]) , (* 147*) ADR (yyTComb [   0])
         , (* 148*) ADR (yyTComb [ 145]) , (* 149*) ADR (yyTComb [ 177])
         , (* 150*) ADR (yyTComb [   0]) , (* 151*) ADR (yyTComb [   1])
         , (* 152*) ADR (yyTComb [   0]) , (* 153*) ADR (yyTComb [   6])
         , (* 154*) ADR (yyTComb [ 171]) , (* 155*) ADR (yyTComb [   7])
         , (* 156*) ADR (yyTComb [ 234]) , (* 157*) ADR (yyTComb [  10])
         , (* 158*) ADR (yyTComb [  42]) , (* 159*) ADR (yyTComb [ 254])
         , (* 160*) ADR (yyTComb [   0]) , (* 161*) ADR (yyTComb [ 184])
         , (* 162*) ADR (yyTComb [ 156]) , (* 163*) ADR (yyTComb [ 159])
         , (* 164*) ADR (yyTComb [ 187]) , (* 165*) ADR (yyTComb [  17])
         , (* 166*) ADR (yyTComb [ 162]) , (* 167*) ADR (yyTComb [ 204])
         , (* 168*) ADR (yyTComb [ 206]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [   0]) , (* 171*) ADR (yyTComb [ 558])
         , (* 172*) ADR (yyTComb [   2]) , (* 173*) ADR (yyTComb [  36])
         , (* 174*) ADR (yyTComb [  37]) , (* 175*) ADR (yyTComb [ 184])
         , (* 176*) ADR (yyTComb [ 214]) , (* 177*) ADR (yyTComb [ 213])
         , (* 178*) ADR (yyTComb [   0]) , (* 179*) ADR (yyTComb [ 240])
         , (* 180*) ADR (yyTComb [ 248]) , (* 181*) ADR (yyTComb [ 218])
         , (* 182*) ADR (yyTComb [ 508]) , (* 183*) ADR (yyTComb [ 737])
         , (* 184*) ADR (yyTComb [ 506]) , (* 185*) ADR (yyTComb [  38])
         , (* 186*) ADR (yyTComb [ 192]) , (* 187*) ADR (yyTComb [ 235])
         , (* 188*) ADR (yyTComb [ 235]) , (* 189*) ADR (yyTComb [ 247])
         , (* 190*) ADR (yyTComb [ 255]) , (* 191*) ADR (yyTComb [ 795])
         , (* 192*) ADR (yyTComb [ 823]) , (* 193*) ADR (yyTComb [ 797])
         , (* 194*) ADR (yyTComb [ 228]) , (* 195*) ADR (yyTComb [ 257])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 110]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 110]) , (*  37*) ADR (yyNComb [ 108])
         , (*  38*) ADR (yyNComb [ 110]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 189])
         , (*  42*) ADR (yyNComb [ 248]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 307]) , (*  47*) ADR (yyNComb [ 109])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 108])
         , (*  50*) ADR (yyNComb [ 110]) , (*  51*) ADR (yyNComb [ 140])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 108])
         , (*  54*) ADR (yyNComb [ 112]) , (*  55*) ADR (yyNComb [ 108])
         , (*  56*) ADR (yyNComb [ 314]) , (*  57*) ADR (yyNComb [ 110])
         , (*  58*) ADR (yyNComb [ 175]) , (*  59*) ADR (yyNComb [ 108])
         , (*  60*) ADR (yyNComb [ 108]) , (*  61*) ADR (yyNComb [ 110])
         , (*  62*) ADR (yyNComb [ 369]) , (*  63*) ADR (yyNComb [ 108])
         , (*  64*) ADR (yyNComb [ 388]) , (*  65*) ADR (yyNComb [ 108])
         , (*  66*) ADR (yyNComb [ 329]) , (*  67*) ADR (yyNComb [ 108])
         , (*  68*) ADR (yyNComb [ 402]) , (*  69*) ADR (yyNComb [ 110])
         , (*  70*) ADR (yyNComb [ 339]) , (*  71*) ADR (yyNComb [ 110])
         , (*  72*) ADR (yyNComb [ 418]) , (*  73*) ADR (yyNComb [ 110])
         , (*  74*) ADR (yyNComb [ 443]) , (*  75*) ADR (yyNComb [ 447])
         , (*  76*) ADR (yyNComb [ 113]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 492]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 110]) , (*  81*) ADR (yyNComb [ 110])
         , (*  82*) ADR (yyNComb [ 117]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 511]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 527]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 110]) , (*  89*) ADR (yyNComb [ 108])
         , (*  90*) ADR (yyNComb [ 108]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 551])
         , (*  94*) ADR (yyNComb [ 108]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 334]) , (*  97*) ADR (yyNComb [ 112])
         , (*  98*) ADR (yyNComb [ 123]) , (*  99*) ADR (yyNComb [ 116])
         , (* 100*) ADR (yyNComb [ 113]) , (* 101*) ADR (yyNComb [ 125])
         , (* 102*) ADR (yyNComb [ 175]) , (* 103*) ADR (yyNComb [ 108])
         , (* 104*) ADR (yyNComb [ 121]) , (* 105*) ADR (yyNComb [ 121])
         , (* 106*) ADR (yyNComb [ 113]) , (* 107*) ADR (yyNComb [ 108])
         , (* 108*) ADR (yyNComb [ 108]) , (* 109*) ADR (yyNComb [ 655])
         , (* 110*) ADR (yyNComb [ 199]) , (* 111*) ADR (yyNComb [ 121])
         , (* 112*) ADR (yyNComb [ 714]) , (* 113*) ADR (yyNComb [ 145])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 160])
         , (* 116*) ADR (yyNComb [ 108]) , (* 117*) ADR (yyNComb [ 162])
         , (* 118*) ADR (yyNComb [ 574]) , (* 119*) ADR (yyNComb [ 108])
         , (* 120*) ADR (yyNComb [ 190]) , (* 121*) ADR (yyNComb [ 140])
         , (* 122*) ADR (yyNComb [ 281]) , (* 123*) ADR (yyNComb [ 108])
         , (* 124*) ADR (yyNComb [ 721]) , (* 125*) ADR (yyNComb [ 108])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 776])
         , (* 128*) ADR (yyNComb [ 108]) , (* 129*) ADR (yyNComb [ 317])
         , (* 130*) ADR (yyNComb [ 108]) , (* 131*) ADR (yyNComb [ 108])
         , (* 132*) ADR (yyNComb [ 115]) , (* 133*) ADR (yyNComb [ 848])
         , (* 134*) ADR (yyNComb [ 108]) , (* 135*) ADR (yyNComb [ 373])
         , (* 136*) ADR (yyNComb [ 110]) , (* 137*) ADR (yyNComb [ 907])
         , (* 138*) ADR (yyNComb [ 391]) , (* 139*) ADR (yyNComb [ 108])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 426])
         , (* 142*) ADR (yyNComb [ 477]) , (* 143*) ADR (yyNComb [ 108])
         , (* 144*) ADR (yyNComb [ 108]) , (* 145*) ADR (yyNComb [ 240])
         , (* 146*) ADR (yyNComb [ 183]) , (* 147*) ADR (yyNComb [ 265])
         , (* 148*) ADR (yyNComb [ 108]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 551]) , (* 151*) ADR (yyNComb [ 108])
         , (* 152*) ADR (yyNComb [ 923]) , (* 153*) ADR (yyNComb [ 108])
         , (* 154*) ADR (yyNComb [ 108]) , (* 155*) ADR (yyNComb [ 969])
         , (* 156*) ADR (yyNComb [ 147]) , (* 157*) ADR (yyNComb [ 988])
         , (* 158*) ADR (yyNComb [1024]) , (* 159*) ADR (yyNComb [ 108])
         , (* 160*) ADR (yyNComb [ 323]) , (* 161*) ADR (yyNComb [ 108])
         , (* 162*) ADR (yyNComb [ 140]) , (* 163*) ADR (yyNComb [ 108])
         , (* 164*) ADR (yyNComb [ 116]) , (* 165*) ADR (yyNComb [ 108])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 108])
         , (* 168*) ADR (yyNComb [ 108]) , (* 169*) ADR (yyNComb [ 117])
         , (* 170*) ADR (yyNComb [ 396]) , (* 171*) ADR (yyNComb [1077])
         , (* 172*) ADR (yyNComb [ 108]) , (* 173*) ADR (yyNComb [1027])
         , (* 174*) ADR (yyNComb [ 108]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 108]) , (* 177*) ADR (yyNComb [ 108])
         , (* 178*) ADR (yyNComb [ 110]) , (* 179*) ADR (yyNComb [ 149])
         , (* 180*) ADR (yyNComb [ 108]) , (* 181*) ADR (yyNComb [ 108])
         , (* 182*) ADR (yyNComb [ 168]) , (* 183*) ADR (yyNComb [ 457])
         , (* 184*) ADR (yyNComb [1130]) , (* 185*) ADR (yyNComb [ 108])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 108])
         , (* 188*) ADR (yyNComb [ 108]) , (* 189*) ADR (yyNComb [ 185])
         , (* 190*) ADR (yyNComb [ 108]) , (* 191*) ADR (yyNComb [ 205])
         , (* 192*) ADR (yyNComb [ 461]) , (* 193*) ADR (yyNComb [ 319])
         , (* 194*) ADR (yyNComb [ 108]) , (* 195*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  182 , (*  11*)  183
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   18 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)    0 , (*  23*)  164
         , (*  24*)  179 , (*  25*)  180 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)  184 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)   36
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)  137
         , (*  40*)    0 , (*  41*)  112 , (*  42*)  112 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)  112 , (*  47*)   50
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)  106
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)    0
         , (*  56*)  155 , (*  57*)   74 , (*  58*)  155 , (*  59*)   63
         , (*  60*)    0 , (*  61*)   82 , (*  62*)   86 , (*  63*)    0
         , (*  64*)  155 , (*  65*)   87 , (*  66*)  155 , (*  67*)   79
         , (*  68*)  155 , (*  69*)   88 , (*  70*)   74 , (*  71*)   80
         , (*  72*)   74 , (*  73*)   81 , (*  74*)   75 , (*  75*)    0
         , (*  76*)   61 , (*  77*)    0 , (*  78*)  155 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)  155 , (*  85*)    0 , (*  86*)  155 , (*  87*)    0
         , (*  88*)    0 , (*  89*)    0 , (*  90*)   99 , (*  91*)  122
         , (*  92*)    0 , (*  93*)  155 , (*  94*)    0 , (*  95*)    0
         , (*  96*)   51 , (*  97*)    0 , (*  98*)  100 , (*  99*)  156
         , (* 100*)  122 , (* 101*)  145 , (* 102*)  105 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)  137 , (* 110*)  145 , (* 111*)    0
         , (* 112*)   39 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)  155 , (* 119*)    0
         , (* 120*)    0 , (* 121*)  156 , (* 122*)  106 , (* 123*)    0
         , (* 124*)  155 , (* 125*)    0 , (* 126*)    0 , (* 127*)  155
         , (* 128*)    0 , (* 129*)  130 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)  137 , (* 134*)    0 , (* 135*)  138
         , (* 136*)    0 , (* 137*)    0 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)  106 , (* 142*)  106 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)  193
         , (* 148*)    0 , (* 149*)    0 , (* 150*)  171 , (* 151*)    0
         , (* 152*)  173 , (* 153*)    0 , (* 154*)    0 , (* 155*)   74
         , (* 156*)    0 , (* 157*)  155 , (* 158*)  184 , (* 159*)    0
         , (* 160*)  162 , (* 161*)    0 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)    0 , (* 169*)  191 , (* 170*)  192 , (* 171*)    0
         , (* 172*)    0 , (* 173*)  155 , (* 174*)    0 , (* 175*)    0
         , (* 176*)    0 , (* 177*)    0 , (* 178*)  189 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0 , (* 195*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  399} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  15,   16}
         , (*  10*) yyTCombType { 151,  152} , (*  11*) yyTCombType { 172,  173}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {  92,   93}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  27,   28}
         , (*  20*) yyTCombType {  32,   33} , (*  21*) yyTCombType {  51,  537}
         , (*  22*) yyTCombType {  89,  262} , (*  23*) yyTCombType { 122,  426}
         , (*  24*) yyTCombType { 125,  272} , (*  25*) yyTCombType { 153,  288}
         , (*  26*) yyTCombType {  98,  544} , (*  27*) yyTCombType { 119,  550}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 157,  426}
         , (*  30*) yyTCombType {  13,  201} , (*  31*) yyTCombType {  97,  543}
         , (*  32*) yyTCombType {   1,  425} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  91,  426}
         , (*  36*) yyTCombType { 165,  166} , (*  37*) yyTCombType {   1,  425}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  40,   41} , (*  41*) yyTCombType {  92,  557}
         , (*  42*) yyTCombType {  91,  426} , (*  43*) yyTCombType {  93,  558}
         , (*  44*) yyTCombType {  94,  263} , (*  45*) yyTCombType { 155,   57}
         , (*  46*) yyTCombType {  96,  537} , (*  47*) yyTCombType {  97,   98}
         , (*  48*) yyTCombType {  45,   46} , (*  49*) yyTCombType {  98,  544}
         , (*  50*) yyTCombType { 119,  120} , (*  51*) yyTCombType { 158,  668}
         , (*  52*) yyTCombType {  43,  221} , (*  53*) yyTCombType {  96,  537}
         , (*  54*) yyTCombType {  97,  543} , (*  55*) yyTCombType { 173,  671}
         , (*  56*) yyTCombType { 174,  175} , (*  57*) yyTCombType { 185,  186}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  198}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType { 158,  668}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  87,   66}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  15,  435}
         , (*  68*) yyTCombType {   9,   22} , (*  69*) yyTCombType {  17,  203}
         , (*  70*) yyTCombType {  20,  205} , (*  71*) yyTCombType {  25,  207}
         , (*  72*) yyTCombType {  15,  435} , (*  73*) yyTCombType {  29,  209}
         , (*  74*) yyTCombType {  17,   18} , (*  75*) yyTCombType {  20,   21}
         , (*  76*) yyTCombType {  34,  215} , (*  77*) yyTCombType {  35,  469}
         , (*  78*) yyTCombType {  36,  470} , (*  79*) yyTCombType {  37,  217}
         , (*  80*) yyTCombType {  38,  503} , (*  81*) yyTCombType {  47,  531}
         , (*  82*) yyTCombType {  35,  469} , (*  83*) yyTCombType {  36,  470}
         , (*  84*) yyTCombType {  38,   39} , (*  85*) yyTCombType {  48,  225}
         , (*  86*) yyTCombType {  49,   50} , (*  87*) yyTCombType {  35,  469}
         , (*  88*) yyTCombType {  36,  470} , (*  89*) yyTCombType {  62,  625}
         , (*  90*) yyTCombType {  62,  625} , (*  91*) yyTCombType {  49,  532}
         , (*  92*) yyTCombType {  87,  261} , (*  93*) yyTCombType {  39,  528}
         , (*  94*) yyTCombType { 102,  570} , (*  95*) yyTCombType {   3,  196}
         , (*  96*) yyTCombType {   4,  197} , (*  97*) yyTCombType {   7,  199}
         , (*  98*) yyTCombType {   8,  200} , (*  99*) yyTCombType {  12,   13}
         , (* 100*) yyTCombType {  16,  202} , (* 101*) yyTCombType {  18,   15}
         , (* 102*) yyTCombType {  19,  204} , (* 103*) yyTCombType {  21,  206}
         , (* 104*) yyTCombType {  22,   23} , (* 105*) yyTCombType {  26,  208}
         , (* 106*) yyTCombType {  28,   29} , (* 107*) yyTCombType {  31,  211}
         , (* 108*) yyTCombType {  33,   34} , (* 109*) yyTCombType {  39,  528}
         , (* 110*) yyTCombType {  44,  561} , (* 111*) yyTCombType {  35,  469}
         , (* 112*) yyTCombType {  36,  470} , (* 113*) yyTCombType {  50,  224}
         , (* 114*) yyTCombType {  53,  227} , (* 115*) yyTCombType {  60,  230}
         , (* 116*) yyTCombType {  39,  528} , (* 117*) yyTCombType {  77,  256}
         , (* 118*) yyTCombType {  44,  506} , (* 119*) yyTCombType {  35,  469}
         , (* 120*) yyTCombType {  36,  470} , (* 121*) yyTCombType {  74,  228}
         , (* 122*) yyTCombType {  74,  229} , (* 123*) yyTCombType {  52,  501}
         , (* 124*) yyTCombType {  54,  503} , (* 125*) yyTCombType {  35,  469}
         , (* 126*) yyTCombType {  36,  470} , (* 127*) yyTCombType {  55,  505}
         , (* 128*) yyTCombType {  85,  259} , (* 129*) yyTCombType {  85,   86}
         , (* 130*) yyTCombType {  86,   63} , (* 131*) yyTCombType {  35,  469}
         , (* 132*) yyTCombType {  36,  470} , (* 133*) yyTCombType {  59,  447}
         , (* 134*) yyTCombType {  44,  506} , (* 135*) yyTCombType {  83,   84}
         , (* 136*) yyTCombType {  99,  427} , (* 137*) yyTCombType {  90,  427}
         , (* 138*) yyTCombType {  44,  561} , (* 139*) yyTCombType {  52,  501}
         , (* 140*) yyTCombType {  54,  503} , (* 141*) yyTCombType {  44,  506}
         , (* 142*) yyTCombType {  39,  528} , (* 143*) yyTCombType {  55,  505}
         , (* 144*) yyTCombType {  44,  506} , (* 145*) yyTCombType {  83,  257}
         , (* 146*) yyTCombType {  52,  501} , (* 147*) yyTCombType {  54,  503}
         , (* 148*) yyTCombType {  39,  528} , (* 149*) yyTCombType {  59,  447}
         , (* 150*) yyTCombType {  55,  505} , (* 151*) yyTCombType { 100,  426}
         , (* 152*) yyTCombType { 103,  268} , (* 153*) yyTCombType {  59,  447}
         , (* 154*) yyTCombType { 104,  105} , (* 155*) yyTCombType { 106,  226}
         , (* 156*) yyTCombType {  59,  447} , (* 157*) yyTCombType { 109,  528}
         , (* 158*) yyTCombType { 104,  427} , (* 159*) yyTCombType { 112,  528}
         , (* 160*) yyTCombType {  99,  100} , (* 161*) yyTCombType { 109,  528}
         , (* 162*) yyTCombType { 116,  270} , (* 163*) yyTCombType { 120,  551}
         , (* 164*) yyTCombType {  36,  216} , (* 165*) yyTCombType {  44,  506}
         , (* 166*) yyTCombType { 121,  122} , (* 167*) yyTCombType {  44,  506}
         , (* 168*) yyTCombType {  90,   91} , (* 169*) yyTCombType {  44,  506}
         , (* 170*) yyTCombType {  52,  501} , (* 171*) yyTCombType {  54,  503}
         , (* 172*) yyTCombType { 114,  269} , (* 173*) yyTCombType {  44,  506}
         , (* 174*) yyTCombType {  55,  505} , (* 175*) yyTCombType {  52,   53}
         , (* 176*) yyTCombType {  52,  501} , (* 177*) yyTCombType {  54,   39}
         , (* 178*) yyTCombType {  52,  501} , (* 179*) yyTCombType {  54,  503}
         , (* 180*) yyTCombType {  59,  447} , (* 181*) yyTCombType { 108,  581}
         , (* 182*) yyTCombType {  55,   56} , (* 183*) yyTCombType {  61,  617}
         , (* 184*) yyTCombType { 112,  528} , (* 185*) yyTCombType { 108,  581}
         , (* 186*) yyTCombType { 105,  265} , (* 187*) yyTCombType { 108,  109}
         , (* 188*) yyTCombType {  59,  447} , (* 189*) yyTCombType { 108,  581}
         , (* 190*) yyTCombType { 117,  583} , (* 191*) yyTCombType { 123,  124}
         , (* 192*) yyTCombType { 126,  127} , (* 193*) yyTCombType {  61,  617}
         , (* 194*) yyTCombType { 117,  583} , (* 195*) yyTCombType {  59,  447}
         , (* 196*) yyTCombType {  75,   58} , (* 197*) yyTCombType {  61,  617}
         , (* 198*) yyTCombType { 117,  118} , (* 199*) yyTCombType { 128,  273}
         , (* 200*) yyTCombType { 131,  275} , (* 201*) yyTCombType { 132,  276}
         , (* 202*) yyTCombType { 105,  266} , (* 203*) yyTCombType { 105,  267}
         , (* 204*) yyTCombType { 100,  264} , (* 205*) yyTCombType { 134,  278}
         , (* 206*) yyTCombType { 132,  277} , (* 207*) yyTCombType { 136,  279}
         , (* 208*) yyTCombType { 139,  281} , (* 209*) yyTCombType {  61,  617}
         , (* 210*) yyTCombType { 105,  426} , (* 211*) yyTCombType {  63,  447}
         , (* 212*) yyTCombType { 136,  280} , (* 213*) yyTCombType {  61,  617}
         , (* 214*) yyTCombType {  61,  617} , (* 215*) yyTCombType { 140,  282}
         , (* 216*) yyTCombType { 143,  283} , (* 217*) yyTCombType {  61,  617}
         , (* 218*) yyTCombType { 144,  284} , (* 219*) yyTCombType {  61,  617}
         , (* 220*) yyTCombType {  61,  617} , (* 221*) yyTCombType {  63,  447}
         , (* 222*) yyTCombType {  75,   59} , (* 223*) yyTCombType {  75,  231}
         , (* 224*) yyTCombType {  75,  232} , (* 225*) yyTCombType {  75,  233}
         , (* 226*) yyTCombType {  75,  234} , (* 227*) yyTCombType {  75,  235}
         , (* 228*) yyTCombType {  75,  236} , (* 229*) yyTCombType {  75,  237}
         , (* 230*) yyTCombType {  75,  238} , (* 231*) yyTCombType {  75,  239}
         , (* 232*) yyTCombType {  75,  240} , (* 233*) yyTCombType {  75,  241}
         , (* 234*) yyTCombType { 145,  102} , (* 235*) yyTCombType { 105,  574}
         , (* 236*) yyTCombType { 146,  285} , (* 237*) yyTCombType {  63,  447}
         , (* 238*) yyTCombType { 146,  286} , (* 239*) yyTCombType { 120,  271}
         , (* 240*) yyTCombType { 148,  149} , (* 241*) yyTCombType { 114,  115}
         , (* 242*) yyTCombType {  63,  447} , (* 243*) yyTCombType { 149,  287}
         , (* 244*) yyTCombType {  61,  617} , (* 245*) yyTCombType { 154,  155}
         , (* 246*) yyTCombType {  61,  617} , (* 247*) yyTCombType {  63,  447}
         , (* 248*) yyTCombType {  61,  617} , (* 249*) yyTCombType {  61,  617}
         , (* 250*) yyTCombType { 161,  443} , (* 251*) yyTCombType { 162,  289}
         , (* 252*) yyTCombType {  61,  617} , (* 253*) yyTCombType { 156,  427}
         , (* 254*) yyTCombType { 163,  164} , (* 255*) yyTCombType { 161,  162}
         , (* 256*) yyTCombType { 164,   24} , (* 257*) yyTCombType { 166,  167}
         , (* 258*) yyTCombType {  61,   78} , (* 259*) yyTCombType {  61,  617}
         , (* 260*) yyTCombType {  61,  617} , (* 261*) yyTCombType {  61,  617}
         , (* 262*) yyTCombType {  61,  617} , (* 263*) yyTCombType {  61,  617}
         , (* 264*) yyTCombType {  61,  617} , (* 265*) yyTCombType {  61,  617}
         , (* 266*) yyTCombType {  61,  617} , (* 267*) yyTCombType {  61,  617}
         , (* 268*) yyTCombType {  61,  617} , (* 269*) yyTCombType {  61,  617}
         , (* 270*) yyTCombType {  61,  260} , (* 271*) yyTCombType { 167,  290}
         , (* 272*) yyTCombType { 168,  169} , (* 273*) yyTCombType {  63,   60}
         , (* 274*) yyTCombType {  63,  447} , (* 275*) yyTCombType {  63,  447}
         , (* 276*) yyTCombType {  63,  447} , (* 277*) yyTCombType {  63,  447}
         , (* 278*) yyTCombType { 159,  160} , (* 279*) yyTCombType { 175,  176}
         , (* 280*) yyTCombType {  63,   64} , (* 281*) yyTCombType { 176,  291}
         , (* 282*) yyTCombType { 177,  408} , (* 283*) yyTCombType {  65,  594}
         , (* 284*) yyTCombType { 181,  182} , (* 285*) yyTCombType {  67,  596}
         , (* 286*) yyTCombType {  63,  447} , (* 287*) yyTCombType { 186,  187}
         , (* 288*) yyTCombType {  63,  447} , (* 289*) yyTCombType {  63,  447}
         , (* 290*) yyTCombType {  63,  447} , (* 291*) yyTCombType {  63,  447}
         , (* 292*) yyTCombType {  63,  447} , (* 293*) yyTCombType {  63,  447}
         , (* 294*) yyTCombType {  63,  447} , (* 295*) yyTCombType {  63,  447}
         , (* 296*) yyTCombType {  63,  447} , (* 297*) yyTCombType {  63,  447}
         , (* 298*) yyTCombType {  63,  447} , (* 299*) yyTCombType {  65,  594}
         , (* 300*) yyTCombType { 156,  157} , (* 301*) yyTCombType {  67,  596}
         , (* 302*) yyTCombType { 187,  293} , (* 303*) yyTCombType {  65,  594}
         , (* 304*) yyTCombType { 188,  409} , (* 305*) yyTCombType {  67,  596}
         , (* 306*) yyTCombType {  65,  594} , (* 307*) yyTCombType {  67,  596}
         , (* 308*) yyTCombType {  67,  596} , (* 309*) yyTCombType { 107,  579}
         , (* 310*) yyTCombType { 179,  454} , (* 311*) yyTCombType { 179,  454}
         , (* 312*) yyTCombType {  69,  599} , (* 313*) yyTCombType { 107,  579}
         , (* 314*) yyTCombType { 107,   53} , (* 315*) yyTCombType { 107,  579}
         , (* 316*) yyTCombType { 189,  179} , (* 317*) yyTCombType { 107,  579}
         , (* 318*) yyTCombType { 180,  292} , (* 319*) yyTCombType { 180,   26}
         , (* 320*) yyTCombType { 159,  442} , (* 321*) yyTCombType { 190,  191}
         , (* 322*) yyTCombType { 159,  163} , (* 323*) yyTCombType { 194,  195}
         , (* 324*) yyTCombType { 195,  294} , (* 325*) yyTCombType {   0,    0}
         , (* 326*) yyTCombType {  69,  599} , (* 327*) yyTCombType {   0,    0}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {  71,  602}
         , (* 330*) yyTCombType {  65,  594} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {  67,  596} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {  65,  594} , (* 335*) yyTCombType {  65,  594}
         , (* 336*) yyTCombType {  67,  596} , (* 337*) yyTCombType {  67,  596}
         , (* 338*) yyTCombType {  65,  594} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType {  67,  596} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {  69,  599} , (* 343*) yyTCombType {  71,  602}
         , (* 344*) yyTCombType {   0,    0} , (* 345*) yyTCombType {  65,  594}
         , (* 346*) yyTCombType {  69,  599} , (* 347*) yyTCombType {  67,  596}
         , (* 348*) yyTCombType {  69,  599} , (* 349*) yyTCombType {  69,  599}
         , (* 350*) yyTCombType {  73,  604} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  71,  602}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {  71,  602}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {  71,  602}
         , (* 364*) yyTCombType {  73,  604} , (* 365*) yyTCombType {  71,  602}
         , (* 366*) yyTCombType {  71,  602} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {   0,    0}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {  69,  599}
         , (* 374*) yyTCombType {   0,    0} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {  73,  604} , (* 377*) yyTCombType {  69,  599}
         , (* 378*) yyTCombType {  69,  599} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {  73,  604} , (* 381*) yyTCombType {  69,  599}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {  73,  604} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {  73,  604} , (* 387*) yyTCombType {  73,  604}
         , (* 388*) yyTCombType {  69,  599} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {  71,  602} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {  71,  602} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {  71,  602} , (* 395*) yyTCombType {  71,  602}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {  71,  602} , (* 399*) yyTCombType {   0,    0}
         , (* 400*) yyTCombType {   0,    0} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {  71,  602}
         , (* 406*) yyTCombType {  71,  602} , (* 407*) yyTCombType {  71,  602}
         , (* 408*) yyTCombType {  71,  602} , (* 409*) yyTCombType {  71,  602}
         , (* 410*) yyTCombType {  71,  602} , (* 411*) yyTCombType {  73,  604}
         , (* 412*) yyTCombType {  95,  562} , (* 413*) yyTCombType {  73,  604}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {  73,  604}
         , (* 416*) yyTCombType {  73,  604} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {   0,    0} , (* 419*) yyTCombType {  73,  604}
         , (* 420*) yyTCombType {  95,  565} , (* 421*) yyTCombType { 111,  585}
         , (* 422*) yyTCombType {   0,    0} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {  76,  613}
         , (* 426*) yyTCombType {  73,  604} , (* 427*) yyTCombType {  73,  604}
         , (* 428*) yyTCombType {  73,  604} , (* 429*) yyTCombType {  73,  604}
         , (* 430*) yyTCombType {  73,  604} , (* 431*) yyTCombType {  73,  604}
         , (* 432*) yyTCombType {  73,  604} , (* 433*) yyTCombType {  73,  604}
         , (* 434*) yyTCombType {  73,  604} , (* 435*) yyTCombType {  76,  613}
         , (* 436*) yyTCombType {  95,  565} , (* 437*) yyTCombType { 111,  585}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {  76,  613}
         , (* 440*) yyTCombType {  95,  562} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {  95,  565}
         , (* 444*) yyTCombType { 111,  585} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {  95,  565} , (* 447*) yyTCombType { 111,  585}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {  76,  613}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {  76,  613}
         , (* 456*) yyTCombType {  76,  613} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType {   0,    0} , (* 459*) yyTCombType {  76,  613}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {  76,  613}
         , (* 462*) yyTCombType {  76,  613} , (* 463*) yyTCombType {  79,   68}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType { 113,  586} , (* 467*) yyTCombType {  95,  565}
         , (* 468*) yyTCombType { 111,  585} , (* 469*) yyTCombType {  95,  565}
         , (* 470*) yyTCombType { 111,  585} , (* 471*) yyTCombType {  95,  565}
         , (* 472*) yyTCombType { 111,  585} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType { 111,  112} , (* 475*) yyTCombType {  95,  565}
         , (* 476*) yyTCombType { 111,  585} , (* 477*) yyTCombType {  79,  595}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {   0,    0}
         , (* 480*) yyTCombType {   0,    0} , (* 481*) yyTCombType {   0,    0}
         , (* 482*) yyTCombType { 113,  586} , (* 483*) yyTCombType {   0,    0}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType {  76,  613} , (* 487*) yyTCombType {  76,   77}
         , (* 488*) yyTCombType {  76,  613} , (* 489*) yyTCombType { 113,  586}
         , (* 490*) yyTCombType {  76,  613} , (* 491*) yyTCombType {  76,  613}
         , (* 492*) yyTCombType { 113,  114} , (* 493*) yyTCombType {  79,  595}
         , (* 494*) yyTCombType {  76,  613} , (* 495*) yyTCombType {   0,    0}
         , (* 496*) yyTCombType {   0,    0} , (* 497*) yyTCombType {  79,  595}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  79,  595}
         , (* 500*) yyTCombType {  79,  595} , (* 501*) yyTCombType {  76,  613}
         , (* 502*) yyTCombType {  76,  613} , (* 503*) yyTCombType {  76,  613}
         , (* 504*) yyTCombType {  76,  613} , (* 505*) yyTCombType {  76,  613}
         , (* 506*) yyTCombType {  76,  613} , (* 507*) yyTCombType {  76,  613}
         , (* 508*) yyTCombType {  76,  613} , (* 509*) yyTCombType {  76,  613}
         , (* 510*) yyTCombType {  76,  613} , (* 511*) yyTCombType {  76,  613}
         , (* 512*) yyTCombType {  76,  258} , (* 513*) yyTCombType { 113,  586}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType { 113,  586}
         , (* 516*) yyTCombType {  80,  601} , (* 517*) yyTCombType { 113,  586}
         , (* 518*) yyTCombType {   0,    0} , (* 519*) yyTCombType {   0,    0}
         , (* 520*) yyTCombType { 184,  210} , (* 521*) yyTCombType { 113,  586}
         , (* 522*) yyTCombType { 182,  430} , (* 523*) yyTCombType {   0,    0}
         , (* 524*) yyTCombType {  79,  595} , (* 525*) yyTCombType { 184,  667}
         , (* 526*) yyTCombType { 129,  479} , (* 527*) yyTCombType { 182,  430}
         , (* 528*) yyTCombType {  79,  595} , (* 529*) yyTCombType {  79,  595}
         , (* 530*) yyTCombType {  80,  601} , (* 531*) yyTCombType { 129,  479}
         , (* 532*) yyTCombType {  79,  595} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType { 182,  430}
         , (* 536*) yyTCombType { 129,  479} , (* 537*) yyTCombType {   0,    0}
         , (* 538*) yyTCombType { 182,  430} , (* 539*) yyTCombType {  79,  595}
         , (* 540*) yyTCombType {   0,    0} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {  80,  601} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType {   0,    0} , (* 545*) yyTCombType {   0,    0}
         , (* 546*) yyTCombType {  80,  601} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {   0,    0} , (* 549*) yyTCombType { 184,   31}
         , (* 550*) yyTCombType {  80,  601} , (* 551*) yyTCombType { 182,  430}
         , (* 552*) yyTCombType {  80,  601} , (* 553*) yyTCombType {  80,  601}
         , (* 554*) yyTCombType {   0,    0} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {   0,    0} , (* 557*) yyTCombType { 184,  212}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType { 182,  430}
         , (* 560*) yyTCombType { 129,  479} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType { 184,  213}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType { 182,  430}
         , (* 566*) yyTCombType {   0,    0} , (* 567*) yyTCombType { 171,  667}
         , (* 568*) yyTCombType { 129,  479} , (* 569*) yyTCombType { 184,  214}
         , (* 570*) yyTCombType {   0,    0} , (* 571*) yyTCombType { 182,  430}
         , (* 572*) yyTCombType { 171,  210} , (* 573*) yyTCombType {   0,    0}
         , (* 574*) yyTCombType { 129,  479} , (* 575*) yyTCombType {   0,    0}
         , (* 576*) yyTCombType {  81,  603} , (* 577*) yyTCombType {  80,  601}
         , (* 578*) yyTCombType {   0,    0} , (* 579*) yyTCombType {  80,  601}
         , (* 580*) yyTCombType { 129,  479} , (* 581*) yyTCombType {  80,  601}
         , (* 582*) yyTCombType {  80,  601} , (* 583*) yyTCombType {   0,    0}
         , (* 584*) yyTCombType {   0,    0} , (* 585*) yyTCombType {  80,  601}
         , (* 586*) yyTCombType {  81,  252} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {  81,  603} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {  80,  601} , (* 593*) yyTCombType {  80,  601}
         , (* 594*) yyTCombType {  80,  601} , (* 595*) yyTCombType {  80,  601}
         , (* 596*) yyTCombType {  80,  601} , (* 597*) yyTCombType {  80,  601}
         , (* 598*) yyTCombType {  80,  249} , (* 599*) yyTCombType {  80,  250}
         , (* 600*) yyTCombType {  80,  251} , (* 601*) yyTCombType { 171,   31}
         , (* 602*) yyTCombType {  81,  603} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType {   0,    0}
         , (* 606*) yyTCombType {  81,  603} , (* 607*) yyTCombType {  81,  253}
         , (* 608*) yyTCombType {   0,    0} , (* 609*) yyTCombType { 171,  212}
         , (* 610*) yyTCombType {  81,  603} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType {  81,  603} , (* 613*) yyTCombType {  81,  603}
         , (* 614*) yyTCombType {   0,    0} , (* 615*) yyTCombType { 171,  213}
         , (* 616*) yyTCombType {   0,    0} , (* 617*) yyTCombType {   0,    0}
         , (* 618*) yyTCombType {   0,    0} , (* 619*) yyTCombType {   0,    0}
         , (* 620*) yyTCombType {   0,    0} , (* 621*) yyTCombType { 171,  214}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {   0,    0} , (* 627*) yyTCombType {   0,    0}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType {   0,    0}
         , (* 630*) yyTCombType { 130,  480} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType {   0,    0} , (* 633*) yyTCombType { 135,  489}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType { 130,  480}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType {  81,  603}
         , (* 638*) yyTCombType { 135,  489} , (* 639*) yyTCombType {  81,  603}
         , (* 640*) yyTCombType { 130,  480} , (* 641*) yyTCombType {  81,  603}
         , (* 642*) yyTCombType {  81,  603} , (* 643*) yyTCombType { 135,  489}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {  81,  603}
         , (* 646*) yyTCombType {   0,    0} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {   0,    0} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {  81,  603} , (* 653*) yyTCombType {  81,  603}
         , (* 654*) yyTCombType {  81,  603} , (* 655*) yyTCombType {  81,  603}
         , (* 656*) yyTCombType {  81,  603} , (* 657*) yyTCombType {  81,  603}
         , (* 658*) yyTCombType {  81,  603} , (* 659*) yyTCombType {  81,  603}
         , (* 660*) yyTCombType {  81,  603} , (* 661*) yyTCombType {  81,  254}
         , (* 662*) yyTCombType {  81,  255} , (* 663*) yyTCombType {  82,  619}
         , (* 664*) yyTCombType { 130,  480} , (* 665*) yyTCombType {   0,    0}
         , (* 666*) yyTCombType { 137,   40} , (* 667*) yyTCombType { 135,  489}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType { 137,  560} , (* 671*) yyTCombType {   0,    0}
         , (* 672*) yyTCombType { 130,  480} , (* 673*) yyTCombType {  82,  619}
         , (* 674*) yyTCombType {   0,    0} , (* 675*) yyTCombType { 135,  489}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType {  82,  619}
         , (* 678*) yyTCombType { 130,  480} , (* 679*) yyTCombType {   0,    0}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType { 135,  489}
         , (* 682*) yyTCombType {   0,    0} , (* 683*) yyTCombType {   0,    0}
         , (* 684*) yyTCombType { 130,  480} , (* 685*) yyTCombType {   0,    0}
         , (* 686*) yyTCombType {   0,    0} , (* 687*) yyTCombType { 135,  489}
         , (* 688*) yyTCombType {   0,    0} , (* 689*) yyTCombType {  82,  619}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType {   0,    0}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType {  82,  619}
         , (* 694*) yyTCombType {  82,  619} , (* 695*) yyTCombType {   0,    0}
         , (* 696*) yyTCombType {   0,    0} , (* 697*) yyTCombType {  82,  619}
         , (* 698*) yyTCombType { 137,  560} , (* 699*) yyTCombType {  82,  619}
         , (* 700*) yyTCombType {  82,  619} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType { 137,  218} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType { 137,  219} , (* 707*) yyTCombType { 137,   42}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType {   0,    0} , (* 711*) yyTCombType { 137,  220}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {   0,    0}
         , (* 714*) yyTCombType {   0,    0} , (* 715*) yyTCombType {   0,    0}
         , (* 716*) yyTCombType { 130,  274} , (* 717*) yyTCombType {   0,    0}
         , (* 718*) yyTCombType {   0,    0} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType { 137,   43} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {  82,  619} , (* 725*) yyTCombType { 137,  528}
         , (* 726*) yyTCombType {  82,  619} , (* 727*) yyTCombType {  82,   62}
         , (* 728*) yyTCombType {  82,  619} , (* 729*) yyTCombType {  82,  619}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {   0,    0}
         , (* 732*) yyTCombType {  82,  619} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType { 137,  222} , (* 735*) yyTCombType {   0,    0}
         , (* 736*) yyTCombType {  88,  600} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {   0,    0} , (* 739*) yyTCombType {  82,  619}
         , (* 740*) yyTCombType {  82,  619} , (* 741*) yyTCombType {  82,  619}
         , (* 742*) yyTCombType {  82,  619} , (* 743*) yyTCombType {  82,  619}
         , (* 744*) yyTCombType {  82,  619} , (* 745*) yyTCombType {  82,  619}
         , (* 746*) yyTCombType {  82,  619} , (* 747*) yyTCombType {  82,  619}
         , (* 748*) yyTCombType {  82,  619} , (* 749*) yyTCombType {  82,  619}
         , (* 750*) yyTCombType {  88,  600} , (* 751*) yyTCombType { 183,  441}
         , (* 752*) yyTCombType {   0,    0} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType { 137,  223} , (* 755*) yyTCombType {   0,    0}
         , (* 756*) yyTCombType { 183,  441} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType {   0,    0}
         , (* 762*) yyTCombType {  88,  242} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType { 183,   12} , (* 765*) yyTCombType {   0,    0}
         , (* 766*) yyTCombType {  88,  600} , (* 767*) yyTCombType { 183,   14}
         , (* 768*) yyTCombType {   0,    0} , (* 769*) yyTCombType {   0,    0}
         , (* 770*) yyTCombType {  88,  600} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType {  88,  600} , (* 773*) yyTCombType {  88,  600}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType { 138,  490} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType {   0,    0} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType { 183,  441} , (* 781*) yyTCombType { 138,  490}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType {   0,    0} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType { 138,  490} , (* 787*) yyTCombType {   0,    0}
         , (* 788*) yyTCombType { 183,  441} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType { 141,  496}
         , (* 794*) yyTCombType { 183,  441} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType {  88,  600}
         , (* 798*) yyTCombType { 141,  496} , (* 799*) yyTCombType {  88,  243}
         , (* 800*) yyTCombType { 183,  441} , (* 801*) yyTCombType {  88,  600}
         , (* 802*) yyTCombType {  88,  600} , (* 803*) yyTCombType { 141,  496}
         , (* 804*) yyTCombType { 191,  430} , (* 805*) yyTCombType {  88,  600}
         , (* 806*) yyTCombType { 193,  659} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType {   0,    0} , (* 809*) yyTCombType { 191,  430}
         , (* 810*) yyTCombType { 138,  490} , (* 811*) yyTCombType { 193,  659}
         , (* 812*) yyTCombType {  88,  600} , (* 813*) yyTCombType {  88,  244}
         , (* 814*) yyTCombType {  88,  245} , (* 815*) yyTCombType {  88,  246}
         , (* 816*) yyTCombType {  88,  247} , (* 817*) yyTCombType {  88,  248}
         , (* 818*) yyTCombType { 138,  490} , (* 819*) yyTCombType { 138,  220}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType { 142,  497}
         , (* 822*) yyTCombType { 191,  430} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType { 138,  490} , (* 825*) yyTCombType { 191,  430}
         , (* 826*) yyTCombType { 142,  497} , (* 827*) yyTCombType { 141,  496}
         , (* 828*) yyTCombType { 138,   43} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType { 138,  490} , (* 831*) yyTCombType { 142,  497}
         , (* 832*) yyTCombType { 192,  441} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType {   0,    0} , (* 835*) yyTCombType { 141,  496}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType { 192,  441}
         , (* 838*) yyTCombType { 191,  430} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType { 193,  659} , (* 841*) yyTCombType { 141,  496}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType { 191,  430} , (* 847*) yyTCombType { 141,  496}
         , (* 848*) yyTCombType { 193,  659} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType { 192,   12} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType { 191,  430} , (* 853*) yyTCombType { 192,   14}
         , (* 854*) yyTCombType { 193,  659} , (* 855*) yyTCombType { 142,  497}
         , (* 856*) yyTCombType {   0,    0} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType { 191,  430} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType { 193,  659} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType { 138,  223} , (* 863*) yyTCombType { 142,  497}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType { 192,  441} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType { 142,  497}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType { 192,  441} , (* 875*) yyTCombType { 142,  497}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType { 192,  441} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType { 192,  441} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType {   0,    0}
         , (* 890*) yyTCombType {   0,    0} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {   0,    0}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType {   0,    0}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType {   0,    0}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType {   0,    0} , (* 919*) yyTCombType {   0,    0}
         , (* 920*) yyTCombType {   0,    0} , (* 921*) yyTCombType {   0,    0}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {   0,    0}
         , (* 926*) yyTCombType {   0,    0} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType {   0,    0} , (* 929*) yyTCombType {   0,    0}
         , (* 930*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  295 , (* 109*)    5 , (* 110*)  296 , (* 111*)  297
         , (* 112*)  298 , (* 113*)  299 , (* 114*)  300 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  178 , (* 118*)  189 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    6 , (* 122*)    9 , (* 123*)   27
         , (* 124*)   11 , (* 125*)  303 , (* 126*)   30 , (* 127*)   32
         , (* 128*)  159 , (* 129*)  168 , (* 130*)  171 , (* 131*)  165
         , (* 132*)  177 , (* 133*)  170 , (* 134*)  188 , (* 135*)  181
         , (* 136*)  355 , (* 137*)   25 , (* 138*)  304 , (* 139*)   17
         , (* 140*)  302 , (* 141*)   19 , (* 142*)  301 , (* 143*)   20
         , (* 144*)  368 , (* 145*)  305 , (* 146*)  307 , (* 147*)   61
         , (* 148*)   52 , (* 149*)  365 , (* 150*)  308 , (* 151*)  309
         , (* 152*)  334 , (* 153*)  107 , (* 154*)   44 , (* 155*)  375
         , (* 156*)   35 , (* 157*)  306 , (* 158*)  377 , (* 159*)   36
         , (* 160*)  128 , (* 161*)   38 , (* 162*)   37 , (* 163*)   38
         , (* 164*)  126 , (* 165*)  129 , (* 166*)   55 , (* 167*)  380
         , (* 168*)  371 , (* 169*)  131 , (* 170*)  132 , (* 171*)  133
         , (* 172*)  135 , (* 173*)  137 , (* 174*)  383 , (* 175*)  390
         , (* 176*)  396 , (* 177*)  141 , (* 178*)  180 , (* 179*)  385
         , (* 180*)   52 , (* 181*)  354 , (* 182*)   54 , (* 183*)  353
         , (* 184*)  183 , (* 185*)  311 , (* 186*)  312 , (* 187*)  313
         , (* 188*)  314 , (* 189*)  315 , (* 190*)  316 , (* 191*)  317
         , (* 192*)  318 , (* 193*)  319 , (* 194*)  320 , (* 195*)  321
         , (* 196*)  322 , (* 197*)  323 , (* 198*)  324 , (* 199*)  325
         , (* 200*)  326 , (* 201*)   45 , (* 202*)  328 , (* 203*)  329
         , (* 204*)   47 , (* 205*)   48 , (* 206*)  332 , (* 207*)   49
         , (* 208*)  331 , (* 209*)  330 , (* 210*)  190 , (* 211*)   51
         , (* 212*)   61 , (* 213*)  333 , (* 214*)   54 , (* 215*)  119
         , (* 216*)  125 , (* 217*)  334 , (* 218*)  357 , (* 219*)  101
         , (* 220*)   94 , (* 221*)  192 , (* 222*)   92 , (* 223*)   95
         , (* 224*)   96 , (* 225*)  110 , (* 226*)  307 , (* 227*)   99
         , (* 228*)  369 , (* 229*)  101 , (* 230*)  308 , (* 231*)  309
         , (* 232*)  367 , (* 233*)  117 , (* 234*)   44 , (* 235*)  374
         , (* 236*)  145 , (* 237*)  108 , (* 238*)  392 , (* 239*)  113
         , (* 240*)   89 , (* 241*)   90 , (* 242*)  111 , (* 243*)  358
         , (* 244*)  106 , (* 245*)   88 , (* 246*)   80 , (* 247*)   70
         , (* 248*)   81 , (* 249*)   72 , (* 250*)  342 , (* 251*)   74
         , (* 252*)  338 , (* 253*)   75 , (* 254*)   76 , (* 255*)  350
         , (* 256*)  351 , (* 257*)   82 , (* 258*)  345 , (* 259*)  346
         , (* 260*)  393 , (* 261*)  394 , (* 262*)  158 , (* 263*)  343
         , (* 264*)  362 , (* 265*)  311 , (* 266*)  312 , (* 267*)  313
         , (* 268*)  314 , (* 269*)  315 , (* 270*)  316 , (* 271*)  317
         , (* 272*)  318 , (* 273*)  319 , (* 274*)  320 , (* 275*)  321
         , (* 276*)  322 , (* 277*)  323 , (* 278*)  324 , (* 279*)  325
         , (* 280*)  326 , (* 281*)   45 , (* 282*)  328 , (* 283*)  329
         , (* 284*)   47 , (* 285*)  307 , (* 286*)  332 , (* 287*)  116
         , (* 288*)  364 , (* 289*)  308 , (* 290*)  309 , (* 291*)   51
         , (* 292*)  148 , (* 293*)   44 , (* 294*)  310 , (* 295*)  103
         , (* 296*)  104 , (* 297*)  366 , (* 298*)  106 , (* 299*)  121
         , (* 300*)  372 , (* 301*)  123 , (* 302*)   92 , (* 303*)   95
         , (* 304*)   96 , (* 305*)  110 , (* 306*)  360 , (* 307*)   87
         , (* 308*)   79 , (* 309*)  341 , (* 310*)   69 , (* 311*)   80
         , (* 312*)  386 , (* 313*)   81 , (* 314*)  147 , (* 315*)  342
         , (* 316*)  111 , (* 317*)  338 , (* 318*)   75 , (* 319*)   76
         , (* 320*)    0 , (* 321*)   52 , (* 322*)   82 , (* 323*)    0
         , (* 324*)  311 , (* 325*)  312 , (* 326*)  313 , (* 327*)  314
         , (* 328*)  315 , (* 329*)  316 , (* 330*)  317 , (* 331*)  318
         , (* 332*)  319 , (* 333*)  320 , (* 334*)  321 , (* 335*)  322
         , (* 336*)  323 , (* 337*)  324 , (* 338*)  325 , (* 339*)  326
         , (* 340*)   45 , (* 341*)  328 , (* 342*)  329 , (* 343*)   47
         , (* 344*)  307 , (* 345*)  332 , (* 346*)  194 , (* 347*)  146
         , (* 348*)  308 , (* 349*)  309 , (* 350*)   51 , (* 351*)   61
         , (* 352*)   44 , (* 353*)  327 , (* 354*)  370 , (* 355*)   54
         , (* 356*)  334 , (* 357*)  111 , (* 358*)  161 , (* 359*)  397
         , (* 360*)    0 , (* 361*)   92 , (* 362*)   95 , (* 363*)   96
         , (* 364*)  110 , (* 365*)    0 , (* 366*)   61 , (* 367*)    0
         , (* 368*)    0 , (* 369*)  352 , (* 370*)    0 , (* 371*)  334
         , (* 372*)    0 , (* 373*)    0 , (* 374*)   52 , (* 375*)  378
         , (* 376*)   61 , (* 377*)  130 , (* 378*)  134 , (* 379*)  132
         , (* 380*)    0 , (* 381*)  334 , (* 382*)    0 , (* 383*)  311
         , (* 384*)  312 , (* 385*)  313 , (* 386*)  314 , (* 387*)  315
         , (* 388*)  316 , (* 389*)  317 , (* 390*)  318 , (* 391*)  319
         , (* 392*)  320 , (* 393*)  321 , (* 394*)  322 , (* 395*)  323
         , (* 396*)  324 , (* 397*)  325 , (* 398*)  326 , (* 399*)   45
         , (* 400*)  328 , (* 401*)  329 , (* 402*)   47 , (* 403*)    0
         , (* 404*)  332 , (* 405*)    0 , (* 406*)   61 , (* 407*)  333
         , (* 408*)   54 , (* 409*)   51 , (* 410*)  307 , (* 411*)  334
         , (* 412*)    0 , (* 413*)  398 , (* 414*)  308 , (* 415*)  309
         , (* 416*)  150 , (* 417*)    0 , (* 418*)  136 , (* 419*)    0
         , (* 420*)   92 , (* 421*)   95 , (* 422*)   96 , (* 423*)  110
         , (* 424*)  347 , (* 425*)   61 , (* 426*)  304 , (* 427*)    0
         , (* 428*)  307 , (* 429*)   19 , (* 430*)  334 , (* 431*)    0
         , (* 432*)  308 , (* 433*)  309 , (* 434*)   97 , (* 435*)   90
         , (* 436*)  136 , (* 437*)    0 , (* 438*)  382 , (* 439*)   61
         , (* 440*)  138 , (* 441*)  140 , (* 442*)    0 , (* 443*)  335
         , (* 444*)  334 , (* 445*)    0 , (* 446*)   65 , (* 447*)   79
         , (* 448*)  341 , (* 449*)   69 , (* 450*)   80 , (* 451*)    0
         , (* 452*)   81 , (* 453*)    0 , (* 454*)  342 , (* 455*)   61
         , (* 456*)  338 , (* 457*)   75 , (* 458*)   76 , (* 459*)  139
         , (* 460*)  334 , (* 461*)   82 , (* 462*)   67 , (* 463*)  341
         , (* 464*)   69 , (* 465*)   80 , (* 466*)   52 , (* 467*)   81
         , (* 468*)    0 , (* 469*)  342 , (* 470*)  150 , (* 471*)  338
         , (* 472*)   75 , (* 473*)   76 , (* 474*)  184 , (* 475*)   71
         , (* 476*)   82 , (* 477*)   81 , (* 478*)  193 , (* 479*)  342
         , (* 480*)   61 , (* 481*)  338 , (* 482*)   75 , (* 483*)   76
         , (* 484*)   61 , (* 485*)  334 , (* 486*)   82 , (* 487*)  304
         , (* 488*)    0 , (* 489*)  334 , (* 490*)   19 , (* 491*)  304
         , (* 492*)    0 , (* 493*)    0 , (* 494*)   19 , (* 495*)    0
         , (* 496*)  384 , (* 497*)    0 , (* 498*)  142 , (* 499*)  144
         , (* 500*)   54 , (* 501*)   65 , (* 502*)   79 , (* 503*)  341
         , (* 504*)   69 , (* 505*)   80 , (* 506*)    0 , (* 507*)   81
         , (* 508*)    0 , (* 509*)  342 , (* 510*)    0 , (* 511*)  338
         , (* 512*)   75 , (* 513*)   76 , (* 514*)    0 , (* 515*)    0
         , (* 516*)   82 , (* 517*)   52 , (* 518*)   85 , (* 519*)  349
         , (* 520*)   65 , (* 521*)   79 , (* 522*)  341 , (* 523*)   69
         , (* 524*)   80 , (* 525*)    0 , (* 526*)   81 , (* 527*)    0
         , (* 528*)  342 , (* 529*)   61 , (* 530*)  338 , (* 531*)   75
         , (* 532*)   76 , (* 533*)    0 , (* 534*)  334 , (* 535*)   82
         , (* 536*)  336 , (* 537*)   69 , (* 538*)   80 , (* 539*)    0
         , (* 540*)   81 , (* 541*)    0 , (* 542*)  342 , (* 543*)    0
         , (* 544*)  338 , (* 545*)   75 , (* 546*)   76 , (* 547*)  340
         , (* 548*)   61 , (* 549*)   82 , (* 550*)  143 , (* 551*)   54
         , (* 552*)    0 , (* 553*)  334 , (* 554*)    0 , (* 555*)    0
         , (* 556*)   73 , (* 557*)    0 , (* 558*)  342 , (* 559*)    0
         , (* 560*)  338 , (* 561*)   75 , (* 562*)   76 , (* 563*)    0
         , (* 564*)   61 , (* 565*)   82 , (* 566*)  344 , (* 567*)    0
         , (* 568*)    0 , (* 569*)  334 , (* 570*)  151 , (* 571*)    0
         , (* 572*)    0 , (* 573*)    0 , (* 574*)    0 , (* 575*)    0
         , (* 576*)    0 , (* 577*)    0 , (* 578*)    0 , (* 579*)    0
         , (* 580*)    0 , (* 581*)    0 , (* 582*)  347 , (* 583*)  337
         , (* 584*)    0 , (* 585*)  338 , (* 586*)   75 , (* 587*)   76
         , (* 588*)   61 , (* 589*)  339 , (* 590*)   82 , (* 591*)   76
         , (* 592*)    0 , (* 593*)  334 , (* 594*)   82 , (* 595*)    0
         , (* 596*)    0 , (* 597*)    0 , (* 598*)    0 , (* 599*)   35
         , (* 600*)    0 , (* 601*)  377 , (* 602*)    0 , (* 603*)    0
         , (* 604*)    0 , (* 605*)    0 , (* 606*)  356 , (* 607*)    0
         , (* 608*)  129 , (* 609*)    0 , (* 610*)  380 , (* 611*)   61
         , (* 612*)    0 , (* 613*)    0 , (* 614*)    0 , (* 615*)  135
         , (* 616*)  334 , (* 617*)  383 , (* 618*)    0 , (* 619*)    0
         , (* 620*)  141 , (* 621*)    0 , (* 622*)  385 , (* 623*)    0
         , (* 624*)   65 , (* 625*)   79 , (* 626*)  341 , (* 627*)   69
         , (* 628*)   80 , (* 629*)  363 , (* 630*)   81 , (* 631*)    0
         , (* 632*)  342 , (* 633*)    0 , (* 634*)  338 , (* 635*)   75
         , (* 636*)   76 , (* 637*)    0 , (* 638*)    0 , (* 639*)   82
         , (* 640*)   83 , (* 641*)    0 , (* 642*)    0 , (* 643*)   65
         , (* 644*)   79 , (* 645*)  341 , (* 646*)   69 , (* 647*)   80
         , (* 648*)    0 , (* 649*)   81 , (* 650*)    0 , (* 651*)  342
         , (* 652*)    0 , (* 653*)  338 , (* 654*)   75 , (* 655*)   76
         , (* 656*)    0 , (* 657*)    0 , (* 658*)   82 , (* 659*)   65
         , (* 660*)   79 , (* 661*)  341 , (* 662*)   69 , (* 663*)   80
         , (* 664*)    0 , (* 665*)   81 , (* 666*)    0 , (* 667*)  342
         , (* 668*)    0 , (* 669*)  338 , (* 670*)   75 , (* 671*)   76
         , (* 672*)    0 , (* 673*)    0 , (* 674*)   82 , (* 675*)    0
         , (* 676*)    0 , (* 677*)  348 , (* 678*)    0 , (* 679*)  145
         , (* 680*)    0 , (* 681*)  392 , (* 682*)    0 , (* 683*)   65
         , (* 684*)   79 , (* 685*)  341 , (* 686*)   69 , (* 687*)   80
         , (* 688*)    0 , (* 689*)   81 , (* 690*)    0 , (* 691*)  342
         , (* 692*)  307 , (* 693*)  338 , (* 694*)   75 , (* 695*)   76
         , (* 696*)  308 , (* 697*)  309 , (* 698*)   82 , (* 699*)    0
         , (* 700*)   44 , (* 701*)  359 , (* 702*)    0 , (* 703*)  393
         , (* 704*)  394 , (* 705*)  158 , (* 706*)   65 , (* 707*)   79
         , (* 708*)  341 , (* 709*)   69 , (* 710*)   80 , (* 711*)    0
         , (* 712*)   81 , (* 713*)    0 , (* 714*)  342 , (* 715*)    0
         , (* 716*)  338 , (* 717*)   75 , (* 718*)   76 , (* 719*)    0
         , (* 720*)    0 , (* 721*)   82 , (* 722*)    0 , (* 723*)    0
         , (* 724*)    0 , (* 725*)    0 , (* 726*)    0 , (* 727*)    0
         , (* 728*)    0 , (* 729*)    0 , (* 730*)    0 , (* 731*)  311
         , (* 732*)  312 , (* 733*)  313 , (* 734*)  314 , (* 735*)  315
         , (* 736*)  316 , (* 737*)  317 , (* 738*)  318 , (* 739*)  319
         , (* 740*)  320 , (* 741*)  321 , (* 742*)  322 , (* 743*)  323
         , (* 744*)  324 , (* 745*)  325 , (* 746*)  326 , (* 747*)   45
         , (* 748*)  328 , (* 749*)  329 , (* 750*)   47 , (* 751*)  307
         , (* 752*)  332 , (* 753*)    0 , (* 754*)    0 , (* 755*)  308
         , (* 756*)  309 , (* 757*)   51 , (* 758*)   61 , (* 759*)   44
         , (* 760*)  361 , (* 761*)    0 , (* 762*)    0 , (* 763*)  334
         , (* 764*)    0 , (* 765*)    0 , (* 766*)    0 , (* 767*)    0
         , (* 768*)   92 , (* 769*)   95 , (* 770*)   96 , (* 771*)  110
         , (* 772*)    0 , (* 773*)    0 , (* 774*)    0 , (* 775*)    0
         , (* 776*)  373 , (* 777*)    0 , (* 778*)    0 , (* 779*)    0
         , (* 780*)    0 , (* 781*)    0 , (* 782*)    0 , (* 783*)    0
         , (* 784*)    0 , (* 785*)    0 , (* 786*)    0 , (* 787*)    0
         , (* 788*)    0 , (* 789*)    0 , (* 790*)  311 , (* 791*)  312
         , (* 792*)  313 , (* 793*)  314 , (* 794*)  315 , (* 795*)  316
         , (* 796*)  317 , (* 797*)  318 , (* 798*)  319 , (* 799*)  320
         , (* 800*)  321 , (* 801*)  322 , (* 802*)  323 , (* 803*)  324
         , (* 804*)  325 , (* 805*)  326 , (* 806*)   45 , (* 807*)  328
         , (* 808*)  329 , (* 809*)   47 , (* 810*)    0 , (* 811*)  332
         , (* 812*)    0 , (* 813*)   61 , (* 814*)    0 , (* 815*)    0
         , (* 816*)   51 , (* 817*)    0 , (* 818*)  334 , (* 819*)    0
         , (* 820*)    0 , (* 821*)    0 , (* 822*)    0 , (* 823*)    0
         , (* 824*)    0 , (* 825*)    0 , (* 826*)    0 , (* 827*)   92
         , (* 828*)   95 , (* 829*)   96 , (* 830*)  110 , (* 831*)  376
         , (* 832*)    0 , (* 833*)    0 , (* 834*)    0 , (* 835*)    0
         , (* 836*)    0 , (* 837*)    0 , (* 838*)    0 , (* 839*)    0
         , (* 840*)    0 , (* 841*)    0 , (* 842*)    0 , (* 843*)    0
         , (* 844*)    0 , (* 845*)    0 , (* 846*)    0 , (* 847*)    0
         , (* 848*)    0 , (* 849*)    0 , (* 850*)    0 , (* 851*)    0
         , (* 852*)    0 , (* 853*)   65 , (* 854*)   79 , (* 855*)  341
         , (* 856*)   69 , (* 857*)   80 , (* 858*)    0 , (* 859*)   81
         , (* 860*)    0 , (* 861*)  342 , (* 862*)    0 , (* 863*)  338
         , (* 864*)   75 , (* 865*)   76 , (* 866*)    0 , (* 867*)    0
         , (* 868*)   82 , (* 869*)    0 , (* 870*)    0 , (* 871*)    0
         , (* 872*)    0 , (* 873*)    0 , (* 874*)    0 , (* 875*)    0
         , (* 876*)    0 , (* 877*)    0 , (* 878*)    0 , (* 879*)    0
         , (* 880*)    0 , (* 881*)    0 , (* 882*)    0 , (* 883*)    0
         , (* 884*)    0 , (* 885*)  307 , (* 886*)    0 , (* 887*)    0
         , (* 888*)    0 , (* 889*)  308 , (* 890*)  309 , (* 891*)    0
         , (* 892*)    0 , (* 893*)   44 , (* 894*)  379 , (* 895*)    0
         , (* 896*)    0 , (* 897*)    0 , (* 898*)    0 , (* 899*)    0
         , (* 900*)    0 , (* 901*)    0 , (* 902*)    0 , (* 903*)    0
         , (* 904*)    0 , (* 905*)    0 , (* 906*)    0 , (* 907*)    0
         , (* 908*)   65 , (* 909*)   79 , (* 910*)  341 , (* 911*)   69
         , (* 912*)   80 , (* 913*)    0 , (* 914*)   81 , (* 915*)    0
         , (* 916*)  342 , (* 917*)    0 , (* 918*)  338 , (* 919*)   75
         , (* 920*)   76 , (* 921*)    0 , (* 922*)    0 , (* 923*)   82
         , (* 924*)  311 , (* 925*)  312 , (* 926*)  313 , (* 927*)  314
         , (* 928*)  315 , (* 929*)  316 , (* 930*)  317 , (* 931*)  318
         , (* 932*)  319 , (* 933*)  320 , (* 934*)  321 , (* 935*)  322
         , (* 936*)  323 , (* 937*)  324 , (* 938*)  325 , (* 939*)  326
         , (* 940*)   45 , (* 941*)  328 , (* 942*)  329 , (* 943*)   47
         , (* 944*)  307 , (* 945*)  332 , (* 946*)  153 , (* 947*)    0
         , (* 948*)  308 , (* 949*)  309 , (* 950*)   51 , (* 951*)    0
         , (* 952*)   44 , (* 953*)  381 , (* 954*)    0 , (* 955*)    0
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)    0
         , (* 960*)   61 , (* 961*)   92 , (* 962*)   95 , (* 963*)   96
         , (* 964*)  110 , (* 965*)  334 , (* 966*)    0 , (* 967*)    0
         , (* 968*)    0 , (* 969*)    0 , (* 970*)    0 , (* 971*)    0
         , (* 972*)    0 , (* 973*)    0 , (* 974*)    0 , (* 975*)    0
         , (* 976*)    0 , (* 977*)    0 , (* 978*)  154 , (* 979*)    0
         , (* 980*)    0 , (* 981*)    0 , (* 982*)    0 , (* 983*)  311
         , (* 984*)  312 , (* 985*)  313 , (* 986*)  314 , (* 987*)  315
         , (* 988*)  316 , (* 989*)  317 , (* 990*)  318 , (* 991*)  319
         , (* 992*)  320 , (* 993*)  321 , (* 994*)  322 , (* 995*)  323
         , (* 996*)  324 , (* 997*)  325 , (* 998*)  326 , (* 999*)   45
         , (*1000*)  328 , (*1001*)  329 , (*1002*)   47 , (*1003*)    0
         , (*1004*)  332 , (*1005*)    0 , (*1006*)   61 , (*1007*)    0
         , (*1008*)    0 , (*1009*)   51 , (*1010*)    0 , (*1011*)  334
         , (*1012*)    0 , (*1013*)    0 , (*1014*)    0 , (*1015*)    0
         , (*1016*)    0 , (*1017*)    0 , (*1018*)    0 , (*1019*)    0
         , (*1020*)   92 , (*1021*)   95 , (*1022*)   96 , (*1023*)  110
         , (*1024*)  387 , (*1025*)   61 , (*1026*)    0 , (*1027*)    0
         , (*1028*)    0 , (*1029*)    0 , (*1030*)  334 , (*1031*)    0
         , (*1032*)    0 , (*1033*)    0 , (*1034*)    0 , (*1035*)    0
         , (*1036*)    0 , (*1037*)    0 , (*1038*)    0 , (*1039*)    0
         , (*1040*)    0 , (*1041*)    0 , (*1042*)    0 , (*1043*)  154
         , (*1044*)    0 , (*1045*)    0 , (*1046*)    0 , (*1047*)    0
         , (*1048*)    0 , (*1049*)    0 , (*1050*)  174 , (*1051*)    0
         , (*1052*)    0 , (*1053*)    0 , (*1054*)    0 , (*1055*)   65
         , (*1056*)   79 , (*1057*)  341 , (*1058*)   69 , (*1059*)   80
         , (*1060*)    0 , (*1061*)   81 , (*1062*)    0 , (*1063*)  342
         , (*1064*)   61 , (*1065*)  338 , (*1066*)   75 , (*1067*)   76
         , (*1068*)    0 , (*1069*)  334 , (*1070*)   82 , (*1071*)    0
         , (*1072*)   35 , (*1073*)    0 , (*1074*)  377 , (*1075*)    0
         , (*1076*)    0 , (*1077*)    0 , (*1078*)  156 , (*1079*)  391
         , (*1080*)  389 , (*1081*)  129 , (*1082*)  154 , (*1083*)  380
         , (*1084*)    0 , (*1085*)    0 , (*1086*)    0 , (*1087*)    0
         , (*1088*)  135 , (*1089*)    0 , (*1090*)  383 , (*1091*)    0
         , (*1092*)    0 , (*1093*)  141 , (*1094*)    0 , (*1095*)  385
         , (*1096*)  172 , (*1097*)    0 , (*1098*)    0 , (*1099*)    0
         , (*1100*)    0 , (*1101*)   65 , (*1102*)   79 , (*1103*)  341
         , (*1104*)   69 , (*1105*)   80 , (*1106*)    0 , (*1107*)   81
         , (*1108*)    0 , (*1109*)  342 , (*1110*)    0 , (*1111*)  338
         , (*1112*)   75 , (*1113*)   76 , (*1114*)    0 , (*1115*)    0
         , (*1116*)   82 , (*1117*)    0 , (*1118*)    0 , (*1119*)    0
         , (*1120*)   65 , (*1121*)   79 , (*1122*)  341 , (*1123*)   69
         , (*1124*)   80 , (*1125*)   35 , (*1126*)   81 , (*1127*)  377
         , (*1128*)  342 , (*1129*)    0 , (*1130*)  338 , (*1131*)   75
         , (*1132*)   76 , (*1133*)    0 , (*1134*)  129 , (*1135*)   82
         , (*1136*)  380 , (*1137*)    0 , (*1138*)    0 , (*1139*)    0
         , (*1140*)    0 , (*1141*)  135 , (*1142*)    0 , (*1143*)  383
         , (*1144*)  388 , (*1145*)  389 , (*1146*)  141 , (*1147*)    0
         , (*1148*)  385 , (*1149*)  185 , (*1150*)    0 , (*1151*)    0
         , (*1152*)  145 , (*1153*)    0 , (*1154*)  392 , (*1155*)    0
         , (*1156*)    0 , (*1157*)    0 , (*1158*)    0 , (*1159*)   65
         , (*1160*)   79 , (*1161*)  341 , (*1162*)   69 , (*1163*)   80
         , (*1164*)    0 , (*1165*)   81 , (*1166*)    0 , (*1167*)  342
         , (*1168*)    0 , (*1169*)  338 , (*1170*)   75 , (*1171*)   76
         , (*1172*)    0 , (*1173*)    0 , (*1174*)   82 , (*1175*)    0
         , (*1176*)  395 , (*1177*)  394 , (*1178*)   35 , (*1179*)    0
         , (*1180*)  377 , (*1181*)    0 , (*1182*)  156 , (*1183*)  391
         , (*1184*)  389 , (*1185*)    0 , (*1186*)    0 , (*1187*)  129
         , (*1188*)    0 , (*1189*)  380 , (*1190*)    0 , (*1191*)    0
         , (*1192*)    0 , (*1193*)    0 , (*1194*)  135 , (*1195*)    0
         , (*1196*)  383 , (*1197*)    0 , (*1198*)    0 , (*1199*)  141
         , (*1200*)    0 , (*1201*)  385 , (*1202*)    0 , (*1203*)    0
         , (*1204*)    0 , (*1205*)  145 , (*1206*)    0 , (*1207*)  392
         , (*1208*)    0 , (*1209*)    0 , (*1210*)    0 , (*1211*)    0
         , (*1212*)    0 , (*1213*)    0 , (*1214*)    0 , (*1215*)    0
         , (*1216*)    0 , (*1217*)    0 , (*1218*)    0 , (*1219*)    0
         , (*1220*)    0 , (*1221*)    0 , (*1222*)    0 , (*1223*)    0
         , (*1224*)    0 , (*1225*)    0 , (*1226*)    0 , (*1227*)    0
         , (*1228*)    0 , (*1229*)  393 , (*1230*)  394 , (*1231*)  158
         , (*1232*)    0 , (*1233*)    0 , (*1234*)    0 , (*1235*)    0
         , (*1236*)    0 , (*1237*)    0 , (*1238*)    0 , (*1239*)    0
         , (*1240*)    0 , (*1241*)    0 , (*1242*)    0 , (*1243*)    0
         , (*1244*)    0 , (*1245*)    0 , (*1246*)    0 , (*1247*)    0
         , (*1248*)    0 , (*1249*)    0 , (*1250*)    0 , (*1251*)    0
         , (*1252*)    0 , (*1253*)    0 , (*1254*)    0 , (*1255*)    0
         , (*1256*)    0 , (*1257*)    0 , (*1258*)  145 , (*1259*)    0
         , (*1260*)  392 , (*1261*)    0 , (*1262*)    0 , (*1263*)    0
         , (*1264*)    0 , (*1265*)    0 , (*1266*)    0 , (*1267*)    0
         , (*1268*)    0 , (*1269*)    0 , (*1270*)    0 , (*1271*)    0
         , (*1272*)    0 , (*1273*)    0 , (*1274*)    0 , (*1275*)    0
         , (*1276*)    0 , (*1277*)    0 , (*1278*)    0 , (*1279*)    0
         , (*1280*)    0 , (*1281*)    0 , (*1282*)  393 , (*1283*)  394
         , (*1284*)  158 , (*1285*)    0 , (*1286*)    0 , (*1287*)    0
         , (*1288*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 399(P   1)*)    2 , (*A 400(P   2)*)    1 , (*A 401(P   3)*)    1
         , (*A 402(P   4)*)    1 , (*A 403(P   5)*)    1 , (*A 404(P   6)*)    1
         , (*A 405(P   7)*)    1 , (*A 406(P   8)*)    0 , (*A 407(P   9)*)    0
         , (*A 408(P  10)*)    0 , (*A 409(P  11)*)    0 , (*A 410(P  12)*)    0
         , (*A 411(P  13)*)    0 , (*A 412(P  14)*)    3 , (*A 413(P  15)*)    7
         , (*A 414(P  16)*)    4 , (*A 415(P  17)*)    5 , (*A 416(P  18)*)    3
         , (*A 417(P  19)*)    7 , (*A 418(P  20)*)    5 , (*A 419(P  21)*)    7
         , (*A 420(P  22)*)    3 , (*A 421(P  23)*)   10 , (*A 422(P  24)*)    3
         , (*A 423(P  25)*)    9 , (*A 424(P  26)*)    1 , (*A 425(P  27)*)    0
         , (*A 426(P  28)*)    1 , (*A 427(P  29)*)    0 , (*A 428(P  30)*)    3
         , (*A 429(P  31)*)    3 , (*A 430(P  32)*)    0 , (*A 431(P  33)*)    2
         , (*A 432(P  34)*)    3 , (*A 433(P  35)*)    1 , (*A 434(P  36)*)    3
         , (*A 435(P  37)*)    1 , (*A 436(P  38)*)    3 , (*A 437(P  39)*)    3
         , (*A 438(P  40)*)    3 , (*A 439(P  41)*)    1 , (*A 440(P  42)*)    3
         , (*A 441(P  43)*)    0 , (*A 442(P  44)*)    0 , (*A 443(P  45)*)    2
         , (*A 444(P  46)*)    1 , (*A 445(P  47)*)    3 , (*A 446(P  48)*)    1
         , (*A 447(P  49)*)    1 , (*A 448(P  50)*)    3 , (*A 449(P  51)*)    1
         , (*A 450(P  52)*)    3 , (*A 451(P  53)*)    1 , (*A 452(P  54)*)    3
         , (*A 453(P  55)*)    3 , (*A 454(P  56)*)    0 , (*A 455(P  57)*)    1
         , (*A 456(P  58)*)    1 , (*A 457(P  59)*)    1 , (*A 458(P  60)*)    0
         , (*A 459(P  61)*)    1 , (*A 460(P  62)*)    1 , (*A 461(P  63)*)    3
         , (*A 462(P  64)*)    1 , (*A 463(P  65)*)    1 , (*A 464(P  66)*)    2
         , (*A 465(P  67)*)    2 , (*A 466(P  68)*)    0 , (*A 467(P  69)*)    1
         , (*A 468(P  70)*)    2 , (*A 469(P  71)*)    0 , (*A 470(P  72)*)    1
         , (*A 471(P  73)*)    2 , (*A 472(P  74)*)    3 , (*A 473(P  75)*)    1
         , (*A 474(P  76)*)    4 , (*A 475(P  77)*)    1 , (*A 476(P  78)*)    1
         , (*A 477(P  79)*)    1 , (*A 478(P  80)*)    2 , (*A 479(P  81)*)    0
         , (*A 480(P  82)*)    1 , (*A 481(P  83)*)    2 , (*A 482(P  84)*)    3
         , (*A 483(P  85)*)    1 , (*A 484(P  86)*)    3 , (*A 485(P  87)*)    1
         , (*A 486(P  88)*)    1 , (*A 487(P  89)*)    1 , (*A 488(P  90)*)    2
         , (*A 489(P  91)*)    0 , (*A 490(P  92)*)    1 , (*A 491(P  93)*)    2
         , (*A 492(P  94)*)    3 , (*A 493(P  95)*)    3 , (*A 494(P  96)*)    1
         , (*A 495(P  97)*)    2 , (*A 496(P  98)*)    0 , (*A 497(P  99)*)    1
         , (*A 498(P 100)*)    2 , (*A 499(P 101)*)    3 , (*A 500(P 102)*)    3
         , (*A 501(P 103)*)    1 , (*A 502(P 104)*)    2 , (*A 503(P 105)*)    0
         , (*A 504(P 106)*)    2 , (*A 505(P 107)*)    0 , (*A 506(P 108)*)    1
         , (*A 507(P 109)*)    1 , (*A 508(P 110)*)    1 , (*A 509(P 111)*)    1
         , (*A 510(P 112)*)    1 , (*A 511(P 113)*)    1 , (*A 512(P 114)*)    1
         , (*A 513(P 115)*)    1 , (*A 514(P 116)*)    1 , (*A 515(P 117)*)    1
         , (*A 516(P 118)*)    1 , (*A 517(P 119)*)    1 , (*A 518(P 120)*)    1
         , (*A 519(P 121)*)    1 , (*A 520(P 122)*)    1 , (*A 521(P 123)*)    1
         , (*A 522(P 124)*)    1 , (*A 523(P 125)*)    2 , (*A 524(P 126)*)    3
         , (*A 525(P 127)*)    1 , (*A 526(P 128)*)    3 , (*A 527(P 129)*)    1
         , (*A 528(P 130)*)    0 , (*A 529(P 131)*)    1 , (*A 530(P 132)*)    3
         , (*A 531(P 133)*)    0 , (*A 532(P 134)*)    1 , (*A 533(P 135)*)    1
         , (*A 534(P 136)*)    3 , (*A 535(P 137)*)    1 , (*A 536(P 138)*)    1
         , (*A 537(P 139)*)    0 , (*A 538(P 140)*)    2 , (*A 539(P 141)*)    1
         , (*A 540(P 142)*)    3 , (*A 541(P 143)*)    1 , (*A 542(P 144)*)    3
         , (*A 543(P 145)*)    0 , (*A 544(P 146)*)    1 , (*A 545(P 147)*)    3
         , (*A 546(P 148)*)    1 , (*A 547(P 149)*)    3 , (*A 548(P 150)*)    1
         , (*A 549(P 151)*)    2 , (*A 550(P 152)*)    0 , (*A 551(P 153)*)    1
         , (*A 552(P 154)*)    3 , (*A 553(P 155)*)    1 , (*A 554(P 156)*)    3
         , (*A 555(P 157)*)    1 , (*A 556(P 158)*)    3 , (*A 557(P 159)*)    0
         , (*A 558(P 160)*)    1 , (*A 559(P 161)*)    2 , (*A 560(P 162)*)    0
         , (*A 561(P 163)*)    1 , (*A 562(P 164)*)    1 , (*A 563(P 165)*)    3
         , (*A 564(P 166)*)    5 , (*A 565(P 167)*)    1 , (*A 566(P 168)*)    1
         , (*A 567(P 169)*)    2 , (*A 568(P 170)*)    3 , (*A 569(P 171)*)    3
         , (*A 570(P 172)*)    0 , (*A 571(P 173)*)    2 , (*A 572(P 174)*)    3
         , (*A 573(P 175)*)    1 , (*A 574(P 176)*)    0 , (*A 575(P 177)*)    1
         , (*A 576(P 178)*)    1 , (*A 577(P 179)*)    1 , (*A 578(P 180)*)    4
         , (*A 579(P 181)*)    1 , (*A 580(P 182)*)    2 , (*A 581(P 183)*)    0
         , (*A 582(P 184)*)    2 , (*A 583(P 185)*)    0 , (*A 584(P 186)*)    2
         , (*A 585(P 187)*)    0 , (*A 586(P 188)*)    0 , (*A 587(P 189)*)    2
         , (*A 588(P 190)*)    4 , (*A 589(P 191)*)    2 , (*A 590(P 192)*)    3
         , (*A 591(P 193)*)    1 , (*A 592(P 194)*)    1 , (*A 593(P 195)*)    4
         , (*A 594(P 196)*)    1 , (*A 595(P 197)*)    1 , (*A 596(P 198)*)    3
         , (*A 597(P 199)*)    1 , (*A 598(P 200)*)    3 , (*A 599(P 201)*)    1
         , (*A 600(P 202)*)    2 , (*A 601(P 203)*)    1 , (*A 602(P 204)*)    3
         , (*A 603(P 205)*)    1 , (*A 604(P 206)*)    3 , (*A 605(P 207)*)    1
         , (*A 606(P 208)*)    3 , (*A 607(P 209)*)    1 , (*A 608(P 210)*)    2
         , (*A 609(P 211)*)    2 , (*A 610(P 212)*)    2 , (*A 611(P 213)*)    2
         , (*A 612(P 214)*)    3 , (*A 613(P 215)*)    1 , (*A 614(P 216)*)    2
         , (*A 615(P 217)*)    2 , (*A 616(P 218)*)    2 , (*A 617(P 219)*)    1
         , (*A 618(P 220)*)    2 , (*A 619(P 221)*)    1 , (*A 620(P 222)*)    1
         , (*A 621(P 223)*)    3 , (*A 622(P 224)*)    1 , (*A 623(P 225)*)    3
         , (*A 624(P 226)*)    3 , (*A 625(P 227)*)    0 , (*A 626(P 228)*)    1
         , (*A 627(P 229)*)    3 , (*A 628(P 230)*)    1 , (*A 629(P 231)*)    3
         , (*A 630(P 232)*)    3 , (*A 631(P 233)*)    1 , (*A 632(P 234)*)    1
         , (*A 633(P 235)*)    1 , (*A 634(P 236)*)    1 , (*A 635(P 237)*)    1
         , (*A 636(P 238)*)    1 , (*A 637(P 239)*)    1 , (*A 638(P 240)*)    1
         , (*A 639(P 241)*)    1 , (*A 640(P 242)*)    1 , (*A 641(P 243)*)    1
         , (*A 642(P 244)*)    3 , (*A 643(P 245)*)    1 , (*A 644(P 246)*)    1
         , (*A 645(P 247)*)    1 , (*A 646(P 248)*)    1 , (*A 647(P 249)*)    1
         , (*A 648(P 250)*)    1 , (*A 649(P 251)*)    1 , (*A 650(P 252)*)    1
         , (*A 651(P 253)*)    1 , (*A 652(P 254)*)    1 , (*A 653(P 255)*)    1
         , (*A 654(P 256)*)    1 , (*A 655(P 257)*)    1 , (*A 656(P 258)*)    1
         , (*A 657(P 259)*)    1 , (*A 658(P 260)*)    1 , (*A 659(P 261)*)    0
         , (*A 660(P 262)*)    5 , (*A 661(P 263)*)    1 , (*A 662(P 264)*)    1
         , (*A 663(P 265)*)    1 , (*A 664(P 266)*)    1 , (*A 665(P 267)*)    1
         , (*A 666(P 268)*)    1 , (*A 667(P 269)*)    0 , (*A 668(P 270)*)    1
         , (*A 669(P 271)*)    1 , (*A 670(P 272)*)    2 , (*A 671(P 273)*)    0
         , (*A 672(P 274)*)    2 , (*A 673(P 275)*)    1 , (*A 674(P 276)*)    3
         , (*A 675(P 277)*)    1 , (*A 676(P 278)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 399(P   1)*)  266 , (*A 400(P   2)*)  109 , (*A 401(P   3)*)  109
         , (*A 402(P   4)*)  109 , (*A 403(P   5)*)  109 , (*A 404(P   6)*)  109
         , (*A 405(P   7)*)  109 , (*A 406(P   8)*)  115 , (*A 407(P   9)*)  116
         , (*A 408(P  10)*)  117 , (*A 409(P  11)*)  118 , (*A 410(P  12)*)  119
         , (*A 411(P  13)*)  120 , (*A 412(P  14)*)  122 , (*A 413(P  15)*)  113
         , (*A 414(P  16)*)  126 , (*A 415(P  17)*)  108 , (*A 416(P  18)*)  128
         , (*A 417(P  19)*)  114 , (*A 418(P  20)*)  130 , (*A 419(P  21)*)  110
         , (*A 420(P  22)*)  132 , (*A 421(P  23)*)  111 , (*A 422(P  24)*)  134
         , (*A 423(P  25)*)  112 , (*A 424(P  26)*)  121 , (*A 425(P  27)*)  121
         , (*A 426(P  28)*)  136 , (*A 427(P  29)*)  136 , (*A 428(P  30)*)  133
         , (*A 429(P  31)*)  123 , (*A 430(P  32)*)  124 , (*A 431(P  33)*)  124
         , (*A 432(P  34)*)  138 , (*A 433(P  35)*)  139 , (*A 434(P  36)*)  139
         , (*A 435(P  37)*)  140 , (*A 436(P  38)*)  140 , (*A 437(P  39)*)  141
         , (*A 438(P  40)*)  138 , (*A 439(P  41)*)  142 , (*A 440(P  42)*)  142
         , (*A 441(P  43)*)  125 , (*A 442(P  44)*)  129 , (*A 443(P  45)*)  129
         , (*A 444(P  46)*)  143 , (*A 445(P  47)*)  143 , (*A 446(P  48)*)  144
         , (*A 447(P  49)*)  145 , (*A 448(P  50)*)  146 , (*A 449(P  51)*)  147
         , (*A 450(P  52)*)  147 , (*A 451(P  53)*)  148 , (*A 452(P  54)*)  148
         , (*A 453(P  55)*)  137 , (*A 454(P  56)*)  137 , (*A 455(P  57)*)  149
         , (*A 456(P  58)*)  149 , (*A 457(P  59)*)  150 , (*A 458(P  60)*)  151
         , (*A 459(P  61)*)  151 , (*A 460(P  62)*)  152 , (*A 461(P  63)*)  152
         , (*A 462(P  64)*)  153 , (*A 463(P  65)*)  153 , (*A 464(P  66)*)  153
         , (*A 465(P  67)*)  155 , (*A 466(P  68)*)  155 , (*A 467(P  69)*)  156
         , (*A 468(P  70)*)  158 , (*A 469(P  71)*)  157 , (*A 470(P  72)*)  157
         , (*A 471(P  73)*)  159 , (*A 472(P  74)*)  159 , (*A 473(P  75)*)  161
         , (*A 474(P  76)*)  160 , (*A 475(P  77)*)  164 , (*A 476(P  78)*)  164
         , (*A 477(P  79)*)  165 , (*A 478(P  80)*)  167 , (*A 479(P  81)*)  166
         , (*A 480(P  82)*)  166 , (*A 481(P  83)*)  168 , (*A 482(P  84)*)  168
         , (*A 483(P  85)*)  170 , (*A 484(P  86)*)  169 , (*A 485(P  87)*)  171
         , (*A 486(P  88)*)  171 , (*A 487(P  89)*)  172 , (*A 488(P  90)*)  174
         , (*A 489(P  91)*)  173 , (*A 490(P  92)*)  173 , (*A 491(P  93)*)  175
         , (*A 492(P  94)*)  175 , (*A 493(P  95)*)  176 , (*A 494(P  96)*)  177
         , (*A 495(P  97)*)  179 , (*A 496(P  98)*)  178 , (*A 497(P  99)*)  178
         , (*A 498(P 100)*)  180 , (*A 499(P 101)*)  180 , (*A 500(P 102)*)  181
         , (*A 501(P 103)*)  182 , (*A 502(P 104)*)  162 , (*A 503(P 105)*)  162
         , (*A 504(P 106)*)  183 , (*A 505(P 107)*)  183 , (*A 506(P 108)*)  154
         , (*A 507(P 109)*)  154 , (*A 508(P 110)*)  154 , (*A 509(P 111)*)  154
         , (*A 510(P 112)*)  154 , (*A 511(P 113)*)  154 , (*A 512(P 114)*)  154
         , (*A 513(P 115)*)  154 , (*A 514(P 116)*)  154 , (*A 515(P 117)*)  154
         , (*A 516(P 118)*)  154 , (*A 517(P 119)*)  154 , (*A 518(P 120)*)  154
         , (*A 519(P 121)*)  154 , (*A 520(P 122)*)  154 , (*A 521(P 123)*)  154
         , (*A 522(P 124)*)  154 , (*A 523(P 125)*)  154 , (*A 524(P 126)*)  154
         , (*A 525(P 127)*)  154 , (*A 526(P 128)*)  201 , (*A 527(P 129)*)  154
         , (*A 528(P 130)*)  202 , (*A 529(P 131)*)  203 , (*A 530(P 132)*)  205
         , (*A 531(P 133)*)  204 , (*A 532(P 134)*)  204 , (*A 533(P 135)*)  206
         , (*A 534(P 136)*)  206 , (*A 535(P 137)*)  207 , (*A 536(P 138)*)  154
         , (*A 537(P 139)*)  208 , (*A 538(P 140)*)  208 , (*A 539(P 141)*)  209
         , (*A 540(P 142)*)  209 , (*A 541(P 143)*)  210 , (*A 542(P 144)*)  154
         , (*A 543(P 145)*)  211 , (*A 544(P 146)*)  211 , (*A 545(P 147)*)  211
         , (*A 546(P 148)*)  212 , (*A 547(P 149)*)  212 , (*A 548(P 150)*)  214
         , (*A 549(P 151)*)  213 , (*A 550(P 152)*)  216 , (*A 551(P 153)*)  216
         , (*A 552(P 154)*)  216 , (*A 553(P 155)*)  217 , (*A 554(P 156)*)  217
         , (*A 555(P 157)*)  219 , (*A 556(P 158)*)  218 , (*A 557(P 159)*)  220
         , (*A 558(P 160)*)  220 , (*A 559(P 161)*)  220 , (*A 560(P 162)*)  221
         , (*A 561(P 163)*)  221 , (*A 562(P 164)*)  221 , (*A 563(P 165)*)  223
         , (*A 564(P 166)*)  222 , (*A 565(P 167)*)  154 , (*A 566(P 168)*)  224
         , (*A 567(P 169)*)  154 , (*A 568(P 170)*)  215 , (*A 569(P 171)*)  225
         , (*A 570(P 172)*)  228 , (*A 571(P 173)*)  228 , (*A 572(P 174)*)  229
         , (*A 573(P 175)*)  229 , (*A 574(P 176)*)  231 , (*A 575(P 177)*)  231
         , (*A 576(P 178)*)  231 , (*A 577(P 179)*)  231 , (*A 578(P 180)*)  230
         , (*A 579(P 181)*)  232 , (*A 580(P 182)*)  233 , (*A 581(P 183)*)  233
         , (*A 582(P 184)*)  234 , (*A 583(P 185)*)  234 , (*A 584(P 186)*)  226
         , (*A 585(P 187)*)  226 , (*A 586(P 188)*)  227 , (*A 587(P 189)*)  227
         , (*A 588(P 190)*)  227 , (*A 589(P 191)*)  236 , (*A 590(P 192)*)  238
         , (*A 591(P 193)*)  237 , (*A 592(P 194)*)  239 , (*A 593(P 195)*)  237
         , (*A 594(P 196)*)  163 , (*A 595(P 197)*)  240 , (*A 596(P 198)*)  240
         , (*A 597(P 199)*)  241 , (*A 598(P 200)*)  241 , (*A 599(P 201)*)  242
         , (*A 600(P 202)*)  242 , (*A 601(P 203)*)  243 , (*A 602(P 204)*)  243
         , (*A 603(P 205)*)  244 , (*A 604(P 206)*)  244 , (*A 605(P 207)*)  246
         , (*A 606(P 208)*)  246 , (*A 607(P 209)*)  248 , (*A 608(P 210)*)  248
         , (*A 609(P 211)*)  250 , (*A 610(P 212)*)  250 , (*A 611(P 213)*)  250
         , (*A 612(P 214)*)  250 , (*A 613(P 215)*)  250 , (*A 614(P 216)*)  250
         , (*A 615(P 217)*)  250 , (*A 616(P 218)*)  250 , (*A 617(P 219)*)  250
         , (*A 618(P 220)*)  250 , (*A 619(P 221)*)  250 , (*A 620(P 222)*)  250
         , (*A 621(P 223)*)  253 , (*A 622(P 224)*)  256 , (*A 623(P 225)*)  256
         , (*A 624(P 226)*)  254 , (*A 625(P 227)*)  257 , (*A 626(P 228)*)  257
         , (*A 627(P 229)*)  257 , (*A 628(P 230)*)  258 , (*A 629(P 231)*)  258
         , (*A 630(P 232)*)  252 , (*A 631(P 233)*)  252 , (*A 632(P 234)*)  252
         , (*A 633(P 235)*)  252 , (*A 634(P 236)*)  252 , (*A 635(P 237)*)  252
         , (*A 636(P 238)*)  252 , (*A 637(P 239)*)  252 , (*A 638(P 240)*)  252
         , (*A 639(P 241)*)  252 , (*A 640(P 242)*)  252 , (*A 641(P 243)*)  252
         , (*A 642(P 244)*)  252 , (*A 643(P 245)*)  245 , (*A 644(P 246)*)  245
         , (*A 645(P 247)*)  245 , (*A 646(P 248)*)  245 , (*A 647(P 249)*)  245
         , (*A 648(P 250)*)  245 , (*A 649(P 251)*)  245 , (*A 650(P 252)*)  247
         , (*A 651(P 253)*)  247 , (*A 652(P 254)*)  247 , (*A 653(P 255)*)  249
         , (*A 654(P 256)*)  249 , (*A 655(P 257)*)  249 , (*A 656(P 258)*)  249
         , (*A 657(P 259)*)  251 , (*A 658(P 260)*)  251 , (*A 659(P 261)*)  259
         , (*A 660(P 262)*)  135 , (*A 661(P 263)*)  260 , (*A 662(P 264)*)  260
         , (*A 663(P 265)*)  260 , (*A 664(P 266)*)  260 , (*A 665(P 267)*)  260
         , (*A 666(P 268)*)  260 , (*A 667(P 269)*)  127 , (*A 668(P 270)*)  127
         , (*A 669(P 271)*)  262 , (*A 670(P 272)*)  262 , (*A 671(P 273)*)  131
         , (*A 672(P 274)*)  131 , (*A 673(P 275)*)  263 , (*A 674(P 276)*)  263
         , (*A 675(P 277)*)  264 , (*A 676(P 278)*)  265
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   95 , (*:  13*)   30 , (*:  14*)   95
         , (*:  15*)   66 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   95 , (*:  23*)   69
         , (*:  24*)   70 , (*:  25*)   70 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   67
         , (*:  30*)   19 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)    9
         , (*:  36*)    9 , (*:  37*)   66 , (*:  38*)   68
         , (*:  39*)   19 , (*:  40*)   40 , (*:  41*)   19
         , (*:  42*)   19 , (*:  43*)   52 , (*:  44*)   19
         , (*:  45*)   48 , (*:  46*)   19 , (*:  47*)   76
         , (*:  48*)   76 , (*:  49*)   76 , (*:  50*)   95
         , (*:  51*)   19 , (*:  52*)   19 , (*:  53*)   95
         , (*:  54*)   19 , (*:  55*)   19 , (*:  56*)   96
         , (*:  57*)   96 , (*:  58*)   96 , (*:  59*)   67
         , (*:  60*)   95 , (*:  61*)    5 , (*:  62*)   70
         , (*:  63*)   67 , (*:  64*)   96 , (*:  65*)   19
         , (*:  66*)   96 , (*:  67*)   19 , (*:  68*)   96
         , (*:  69*)    5 , (*:  70*)   96 , (*:  71*)    5
         , (*:  72*)   96 , (*:  73*)    5 , (*:  74*)   96
         , (*:  75*)   96 , (*:  76*)    5 , (*:  77*)   95
         , (*:  78*)   96 , (*:  79*)   19 , (*:  80*)    5
         , (*:  81*)    5 , (*:  82*)    5 , (*:  83*)   81
         , (*:  84*)   96 , (*:  85*)   70 , (*:  86*)   96
         , (*:  87*)   70 , (*:  88*)    5 , (*:  89*)   19
         , (*:  90*)   19 , (*:  91*)   19 , (*:  92*)   39
         , (*:  93*)   39 , (*:  94*)   39 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   19
         , (*:  99*)   19 , (*: 100*)   19 , (*: 101*)   69
         , (*: 102*)   70 , (*: 103*)   70 , (*: 104*)   70
         , (*: 105*)   70 , (*: 106*)   95 , (*: 107*)   66
         , (*: 108*)   66 , (*: 109*)   66 , (*: 110*)   69
         , (*: 111*)   19 , (*: 112*)   19 , (*: 113*)   19
         , (*: 114*)    6 , (*: 115*)    6 , (*: 116*)   76
         , (*: 117*)   66 , (*: 118*)   96 , (*: 119*)   19
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   68 , (*: 124*)   96 , (*: 125*)   19
         , (*: 126*)   68 , (*: 127*)   96 , (*: 128*)   66
         , (*: 129*)    9 , (*: 130*)    9 , (*: 131*)   66
         , (*: 132*)   68 , (*: 133*)   66 , (*: 134*)   66
         , (*: 135*)    9 , (*: 136*)   68 , (*: 137*)   66
         , (*: 138*)    9 , (*: 139*)   66 , (*: 140*)   66
         , (*: 141*)    9 , (*: 142*)    9 , (*: 143*)   66
         , (*: 144*)   66 , (*: 145*)   69 , (*: 146*)   66
         , (*: 147*)    9 , (*: 148*)   95 , (*: 149*)   66
         , (*: 150*)    9 , (*: 151*)    9 , (*: 152*)   19
         , (*: 153*)   19 , (*: 154*)   74 , (*: 155*)   96
         , (*: 156*)   19 , (*: 157*)   19 , (*: 158*)    9
         , (*: 159*)   66 , (*: 160*)   95 , (*: 161*)   66
         , (*: 162*)   95 , (*: 163*)   95 , (*: 164*)   69
         , (*: 165*)   19 , (*: 166*)   95 , (*: 167*)   67
         , (*: 168*)   66 , (*: 169*)    9 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)   19
         , (*: 174*)   19 , (*: 175*)   95 , (*: 176*)   67
         , (*: 177*)   69 , (*: 178*)   69 , (*: 179*)   70
         , (*: 180*)   70 , (*: 181*)   66 , (*: 182*)   14
         , (*: 183*)   14 , (*: 184*)   19 , (*: 185*)   19
         , (*: 186*)   95 , (*: 187*)   67 , (*: 188*)   69
         , (*: 189*)   69 , (*: 190*)   66 , (*: 191*)    9
         , (*: 192*)    9 , (*: 193*)    9 , (*: 194*)   95
         , (*: 195*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 196)*)  420 (*P21*) , (*RR: 197)*)  422 (*P23*)
         , (*RR: 198)*)  424 (*P25*) , (*RR: 199)*)  412 (*P13*)
         , (*RR: 200)*)  416 (*P17*) , (*RR: 201)*)  437 (*P38*)
         , (*RR: 202)*)  436 (*P37*) , (*RR: 203)*)  432 (*P33*)
         , (*RR: 204)*)  439 (*P40*) , (*RR: 205)*)  438 (*P39*)
         , (*RR: 206)*)  440 (*P41*) , (*RR: 207)*)  429 (*P30*)
         , (*RR: 208)*)  447 (*P48*) , (*RR: 209)*)  413 (*P14*)
         , (*RR: 210)*)  467 (*P68*) , (*RR: 211)*)  589 (*P190*)
         , (*RR: 212)*)  487 (*P88*) , (*RR: 213)*)  477 (*P78*)
         , (*RR: 214)*)  494 (*P95*) , (*RR: 215)*)  415 (*P16*)
         , (*RR: 216)*)  473 (*P74*) , (*RR: 217)*)  472 (*P73*)
         , (*RR: 218)*)  566 (*P167*) , (*RR: 219)*)  541 (*P142*)
         , (*RR: 220)*)  463 (*P64*) , (*RR: 221)*)  464 (*P65*)
         , (*RR: 222)*)  529 (*P130*) , (*RR: 223)*)  447 (*P48*)
         , (*RR: 224)*)  535 (*P136*) , (*RR: 225)*)  530 (*P131*)
         , (*RR: 226)*)  451 (*P52*) , (*RR: 227)*)  452 (*P53*)
         , (*RR: 228)*)  657 (*P258*) , (*RR: 229)*)  658 (*P259*)
         , (*RR: 230)*)  630 (*P231*) , (*RR: 231)*)  631 (*P232*)
         , (*RR: 232)*)  632 (*P233*) , (*RR: 233)*)  633 (*P234*)
         , (*RR: 234)*)  634 (*P235*) , (*RR: 235)*)  635 (*P236*)
         , (*RR: 236)*)  636 (*P237*) , (*RR: 237)*)  637 (*P238*)
         , (*RR: 238)*)  640 (*P241*) , (*RR: 239)*)  641 (*P242*)
         , (*RR: 240)*)  638 (*P239*) , (*RR: 241)*)  639 (*P240*)
         , (*RR: 242)*)  649 (*P250*) , (*RR: 243)*)  643 (*P244*)
         , (*RR: 244)*)  644 (*P245*) , (*RR: 245)*)  645 (*P246*)
         , (*RR: 246)*)  646 (*P247*) , (*RR: 247)*)  647 (*P248*)
         , (*RR: 248)*)  648 (*P249*) , (*RR: 249)*)  650 (*P251*)
         , (*RR: 250)*)  651 (*P252*) , (*RR: 251)*)  652 (*P253*)
         , (*RR: 252)*)  655 (*P256*) , (*RR: 253)*)  656 (*P257*)
         , (*RR: 254)*)  653 (*P254*) , (*RR: 255)*)  654 (*P255*)
         , (*RR: 256)*)  612 (*P213*) , (*RR: 257)*)  621 (*P222*)
         , (*RR: 258)*)  609 (*P210*) , (*RR: 259)*)  624 (*P225*)
         , (*RR: 260)*)  614 (*P215*) , (*RR: 261)*)  642 (*P243*)
         , (*RR: 262)*)  542 (*P143*) , (*RR: 263)*)  563 (*P164*)
         , (*RR: 264)*)  548 (*P149*) , (*RR: 265)*)  577 (*P178*)
         , (*RR: 266)*)  575 (*P176*) , (*RR: 267)*)  576 (*P177*)
         , (*RR: 268)*)  569 (*P170*) , (*RR: 269)*)  587 (*P188*)
         , (*RR: 270)*)  588 (*P189*) , (*RR: 271)*)  555 (*P156*)
         , (*RR: 272)*)  564 (*P165*) , (*RR: 273)*)  471 (*P72*)
         , (*RR: 274)*)  483 (*P84*) , (*RR: 275)*)  482 (*P83*)
         , (*RR: 276)*)  475 (*P76*) , (*RR: 277)*)  476 (*P77*)
         , (*RR: 278)*)  481 (*P82*) , (*RR: 279)*)  485 (*P86*)
         , (*RR: 280)*)  486 (*P87*) , (*RR: 281)*)  492 (*P93*)
         , (*RR: 282)*)  491 (*P92*) , (*RR: 283)*)  499 (*P100*)
         , (*RR: 284)*)  498 (*P99*) , (*RR: 285)*)  591 (*P192*)
         , (*RR: 286)*)  592 (*P193*) , (*RR: 287)*)  593 (*P194*)
         , (*RR: 288)*)  660 (*P261*) , (*RR: 289)*)  446 (*P47*)
         , (*RR: 290)*)  417 (*P18*) , (*RR: 291)*)  419 (*P20*)
         , (*RR: 292)*)  428 (*P29*) , (*RR: 293)*)  421 (*P22*)
         , (*RR: 294)*)  423 (*P24*) , (*RR: 295)*)  400 (*P1*)
         , (*RR: 296)*)  401 (*P2*) , (*RR: 297)*)  402 (*P3*)
         , (*RR: 298)*)  403 (*P4*) , (*RR: 299)*)  404 (*P5*)
         , (*RR: 300)*)  405 (*P6*) , (*RR: 301)*)  434 (*P35*)
         , (*RR: 302)*)  433 (*P34*) , (*RR: 303)*)  414 (*P15*)
         , (*RR: 304)*)  431 (*P32*) , (*RR: 305)*)  453 (*P54*)
         , (*RR: 306)*)  468 (*P69*) , (*RR: 307)*)  455 (*P56*)
         , (*RR: 308)*)  462 (*P63*) , (*RR: 309)*)  456 (*P57*)
         , (*RR: 310)*)  523 (*P124*) , (*RR: 311)*)  507 (*P108*)
         , (*RR: 312)*)  508 (*P109*) , (*RR: 313)*)  509 (*P110*)
         , (*RR: 314)*)  510 (*P111*) , (*RR: 315)*)  511 (*P112*)
         , (*RR: 316)*)  512 (*P113*) , (*RR: 317)*)  513 (*P114*)
         , (*RR: 318)*)  514 (*P115*) , (*RR: 319)*)  515 (*P116*)
         , (*RR: 320)*)  516 (*P117*) , (*RR: 321)*)  517 (*P118*)
         , (*RR: 322)*)  518 (*P119*) , (*RR: 323)*)  519 (*P120*)
         , (*RR: 324)*)  520 (*P121*) , (*RR: 325)*)  521 (*P122*)
         , (*RR: 326)*)  522 (*P123*) , (*RR: 327)*)  524 (*P125*)
         , (*RR: 328)*)  525 (*P126*) , (*RR: 329)*)  527 (*P128*)
         , (*RR: 330)*)  534 (*P135*) , (*RR: 331)*)  533 (*P134*)
         , (*RR: 332)*)  536 (*P137*) , (*RR: 333)*)  539 (*P140*)
         , (*RR: 334)*)  620 (*P221*) , (*RR: 335)*)  629 (*P230*)
         , (*RR: 336)*)  598 (*P199*) , (*RR: 337)*)  606 (*P207*)
         , (*RR: 338)*)  607 (*P208*) , (*RR: 339)*)  608 (*P209*)
         , (*RR: 340)*)  622 (*P223*) , (*RR: 341)*)  597 (*P198*)
         , (*RR: 342)*)  605 (*P206*) , (*RR: 343)*)  618 (*P219*)
         , (*RR: 344)*)  623 (*P224*) , (*RR: 345)*)  610 (*P211*)
         , (*RR: 346)*)  611 (*P212*) , (*RR: 347)*)  628 (*P229*)
         , (*RR: 348)*)  627 (*P228*) , (*RR: 349)*)  626 (*P227*)
         , (*RR: 350)*)  615 (*P216*) , (*RR: 351)*)  616 (*P217*)
         , (*RR: 352)*)  504 (*P105*) , (*RR: 353)*)  500 (*P101*)
         , (*RR: 354)*)  540 (*P141*) , (*RR: 355)*)  538 (*P139*)
         , (*RR: 356)*)  559 (*P160*) , (*RR: 357)*)  547 (*P148*)
         , (*RR: 358)*)  572 (*P173*) , (*RR: 359)*)  580 (*P181*)
         , (*RR: 360)*)  567 (*P168*) , (*RR: 361)*)  584 (*P185*)
         , (*RR: 362)*)  568 (*P169*) , (*RR: 363)*)  582 (*P183*)
         , (*RR: 364)*)  578 (*P179*) , (*RR: 365)*)  571 (*P172*)
         , (*RR: 366)*)  573 (*P174*) , (*RR: 367)*)  549 (*P150*)
         , (*RR: 368)*)  545 (*P146*) , (*RR: 369)*)  546 (*P147*)
         , (*RR: 370)*)  554 (*P155*) , (*RR: 371)*)  552 (*P153*)
         , (*RR: 372)*)  553 (*P154*) , (*RR: 373)*)  556 (*P157*)
         , (*RR: 374)*)  526 (*P127*) , (*RR: 375)*)  502 (*P103*)
         , (*RR: 376)*)  474 (*P75*) , (*RR: 377)*)  661 (*P262*)
         , (*RR: 378)*)  478 (*P79*) , (*RR: 379)*)  484 (*P85*)
         , (*RR: 380)*)  662 (*P263*) , (*RR: 381)*)  493 (*P94*)
         , (*RR: 382)*)  488 (*P89*) , (*RR: 383)*)  666 (*P267*)
         , (*RR: 384)*)  495 (*P96*) , (*RR: 385)*)  664 (*P265*)
         , (*RR: 386)*)  590 (*P191*) , (*RR: 387)*)  676 (*P277*)
         , (*RR: 388)*)  674 (*P275*) , (*RR: 389)*)  675 (*P276*)
         , (*RR: 390)*)  672 (*P273*) , (*RR: 391)*)  673 (*P274*)
         , (*RR: 392)*)  665 (*P266*) , (*RR: 393)*)  669 (*P270*)
         , (*RR: 394)*)  663 (*P264*) , (*RR: 395)*)  670 (*P271*)
         , (*RR: 396)*)  445 (*P46*) , (*RR: 397)*)  444 (*P45*)
         , (*RR: 398)*)  418 (*P19*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 399 => (* P1 _0000_ (266): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 400,295 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 401,296 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 402,297 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 403,298 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 404,299 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 405,300 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 406 => (* P8 InterfaceKind (115): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 115;
                (* line 288 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 407 => (* P9 ModuleKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 408 => (* P10 GenInterfaceKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 409 => (* P11 GenModuleKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 410 => (* P12 InstInterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 411 => (* P13 InstModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 412,199 => (* P14 InterfaceLt (122): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 306 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 413,209 => (* P15 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 414,303 => (* P16 InterfaceMiddle (126): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 126;
                (* line 332 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 415,215 => (* P17 Interface (108): InterfaceMiddle OpenDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 343 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 416,200 => (* P18 ModuleLt (128): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 366 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 417,290 => (* P19 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 387 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 418,398 => (* P20 ModuleMiddle (130): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 130;
                (* line 394 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 419,291 => (* P21 Module (110): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 406 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 420,196 => (* P22 GenInterfaceLt (132): StkRwGENERIC StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 432 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 421,293 => (* P23 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 111;
                (* line 452 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 422,197 => (* P24 GenModuleLt (134): StkRwGENERIC StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 460 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 423,294 => (* P25 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 112;
                (* line 480 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+7] . Scan , Ukt . UkGenModule ) ;
                     
              | 424,198 => (* P26 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 489 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 425 => (* P27 OptUnsafe (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 490 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 426 => (* P28 OptSemicolon (136): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;

              | 427 => (* P29 OptSemicolon (136): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 136;

              | 428,292 => (* P30 GenFormalList (133): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 499 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 429,207 => (* P31 GenActualList (123): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 505 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 430 => (* P32 ImportList (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 431,304 => (* P33 ImportList (124): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 432,203 => (* P34 Import (138): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 433,302 => (* P35 ImportItemPlusList (139): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 434,301 => (* P36 ImportItemPlusList (139): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;

              | 435 => (* P37 ImportItem (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 524 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 436,202 => (* P38 ImportItem (140): StkIdent StkRwAS StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 527 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 437,201 => (* P39 FromImportLt (141): StkRwFROM StkIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 531 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 438,205 => (* P40 Import (138): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 439,204 => (* P41 FromImportIdPlusList (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 542 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 440,206 => (* P42 FromImportIdPlusList (142): FromImportIdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 547 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 441 => (* P43 ExpImpDone (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 552 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 442 => (* P44 Exports (129): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 129;
                (* line 559 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 443 => (* P45 Exports (129): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 129;

              | 444,397 => (* P46 ExportIdPlusList (143): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 445,396 => (* P47 ExportIdPlusList (143): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 446,289 => (* P48 ExportIdent (144): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 579 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 447,208,223 => (* P49 IdentRef (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 594 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 448 => (* P50 QualIdentRef (146): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 600 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 449 => (* P51 IdPlusList (147): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 607 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 450 => (* P52 IdPlusList (147): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;
                (* line 611 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 451,226 => (* P53 DeclIdListElems (148): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 623 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                            )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 452,227 => (* P54 DeclIdListElems (148): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 148;
                (* line 638 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;  
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 453,305 => (* P55 IdStarList (137): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 657 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 454 => (* P56 IdStarList (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 659 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 455,307 => (* P57 MaybeQualIdent (149): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 664 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                     
              | 456,309 => (* P58 MaybeQualIdent (149): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 668 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                     
              | 457 => (* P59 QualIdent (150): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;
                (* line 673 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 458 => (* P60 MaybeQualIdentStarList (151): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 151;
                (* line 680 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 459 => (* P61 MaybeQualIdentStarList (151): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 682 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 460 => (* P62 MaybeQualIdentPlusList (152): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 684 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 461 => (* P63 MaybeQualIdentPlusList (152): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 686 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 462,308 => (* P64 TypeId (153): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 463,220 => (* P65 TypeId (153): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 696 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 464,221 => (* P66 TypeId (153): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 701 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 465 => (* P67 OptConstType (155): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 711 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 466 => (* P68 OptConstType (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 713 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 467,210 => (* P69 ConstDeclGroupLt (156): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 722 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 468,306 => (* P70 ConstDeclGroup (158): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 725 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 469 => (* P71 ConstDeclList (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 730 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 470 => (* P72 ConstDeclList (157): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 471,273 => (* P73 ConstDeclPlus (159): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 741 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 472,217 => (* P74 ConstDeclPlus (159): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 746 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 473,216 => (* P75 ConstDeclId (161): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 764 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 474,376 => (* P76 ConstDecl (160): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 771 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 475,276 => (* P77 TypeRelation (164): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 797 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 476,277 => (* P78 TypeRelation (164): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 799 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 477,213 => (* P79 TypeDeclGroupLt (165): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 810 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 478,378 => (* P80 TypeDeclGroup (167): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 813 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 479 => (* P81 TypeDeclList (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 818 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 480 => (* P82 TypeDeclList (166): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 824 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 481,278 => (* P83 TypeDeclPlus (168): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 829 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 482,275 => (* P84 TypeDeclPlus (168): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 168;
                (* line 834 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 483,274 => (* P85 TypeDeclId (170): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 850 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 484,379 => (* P86 TypeDecl (169): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 857 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 485,279 => (* P87 RevelationRelation (171): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 877 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 486,280 => (* P88 RevelationRelation (171): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 879 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 487,212 => (* P89 RevelationGroupLt (172): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 890 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 488,382 => (* P90 RevelationGroup (174): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 893 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 489 => (* P91 RevelationList (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 898 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 490 => (* P92 RevelationList (173): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 904 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 491,282 => (* P93 RevelationPlus (175): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 909 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 492,281 => (* P94 RevelationPlus (175): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 914 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 493,381 => (* P95 Revelation (176): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 930 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 494,214 => (* P96 VarDeclGroupLt (177): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 957 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 495,384 => (* P97 VarDeclGroup (179): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 971 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 496 => (* P98 VarDeclList (178): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 178;
                (* line 977 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 497 => (* P99 VarDeclList (178): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 983 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 498,284 => (* P100 VarDeclPlus (180): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 996 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 499,283 => (* P101 VarDeclPlus (180): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 1001 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 500,353 => (* P102 VarDecl (181): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1019 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 501 => (* P103 VarDeclIds (182): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1047 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 502,375 => (* P104 OptDeclType (162): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 1059 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 503 => (* P105 OptDeclType (162): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 162;
                (* line 1063 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 504,352 => (* P106 OptDeclValue (183): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1069 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 505 => (* P107 OptDeclValue (183): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 183;
                (* line 1073 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 506 => (* P108 Type (154): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 507,311 => (* P109 Type (154): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 508,312 => (* P110 Type (154): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 509,313 => (* P111 Type (154): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 510,314 => (* P112 Type (154): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 511,315 => (* P113 Type (154): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 512,316 => (* P114 Type (154): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 513,317 => (* P115 Type (154): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 514,318 => (* P116 Type (154): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 515,319 => (* P117 Type (154): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 516,320 => (* P118 Type (154): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 517,321 => (* P119 Type (154): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 518,322 => (* P120 Type (154): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 519,323 => (* P121 Type (154): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 520,324 => (* P122 Type (154): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 521,325 => (* P123 Type (154): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 522,326 => (* P124 Type (154): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 523,310 => (* P125 Type (154): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1105 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 524,327 => (* P126 Type (154): StkUNTRACED StkRwREF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1113 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkUNTRACEDREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 525,328 => (* P127 Type (154): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 526,374 => (* P128 OpenArrayType (201): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 201;
                (* line 1125 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 527,329 => (* P129 Type (154): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 528 => (* P130 FixedArrayType (202): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 202;

              | 529,222 => (* P131 EnumTypeLt (203): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 203;
                (* line 1140 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 530,225 => (* P132 EnumType (205): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1155 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 531 => (* P133 EnumLitList (204): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 204;
                (* line 1172 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 532 => (* P134 EnumLitList (204): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1175 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 533,331 => (* P135 EnumLitPlus (206): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1178 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 534,330 => (* P136 EnumLitPlus (206): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 206;
                (* line 1181 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 535,224 => (* P137 EnumLit (207): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1184 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 536,332 => (* P138 Type (154): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 537 => (* P139 FieldDeclList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1207 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 538,355 => (* P140 FieldDeclList (208): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 208;
                (* line 1215 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 539,333 => (* P141 FieldDeclPlus (209): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1224 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 540,354 => (* P142 FieldDeclPlus (209): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1227 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 541,219 => (* P143 RecTypeLt (210): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1239 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 542,262 => (* P144 Type (154): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1267 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 543 => (* P145 MethodDeclList (211): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 211;
                (* line 1289 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 544 => (* P146 MethodDeclList (211): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1297 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 545,368 => (* P147 MethodDeclList (211): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 211;
                (* line 1302 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 546,369 => (* P148 MethodDeclPlus (212): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1311 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 547,357 => (* P149 MethodDeclPlus (212): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 212;
                (* line 1314 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 548,264 => (* P150 MethodDeclLt (214): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1326 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 549,367 => (* P151 MethodDecl (213): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 213;
                (* line 1349 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 550 => (* P152 OverrideList (216): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 216;
                (* line 1379 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 551 => (* P153 OverrideList (216): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1387 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 552,371 => (* P154 OverrideList (216): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1392 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 553,372 => (* P155 OverridePlus (217): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1401 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 554,370 => (* P156 OverridePlus (217): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 217;
                (* line 1404 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 555,271 => (* P157 OverrideLt (219): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1416 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 556,373 => (* P158 Override (218): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 218;
                (* line 1422 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 557 => (* P159 Brand (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1434 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 558 => (* P160 Brand (220): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1439 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 559,356 => (* P161 Brand (220): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 220;
                (* line 1444 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 560 => (* P162 Supertype (221): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 221;
                (* line 1451 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 561 => (* P163 Supertype (221): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1457 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 562 => (* P164 Supertype (221): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1466 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 563,263 => (* P165 ObjTypeLt (223): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 223;
                (* line 1477 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 564,272 => (* P166 ObjType (222): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 222;
                (* line 1505 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 565 => (* P167 Type (154): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 566,218 => (* P168 ProcTypeLt (224): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1529 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*)
                     
              | 567,360 => (* P169 Type (154): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1544 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 568,362 => (* P170 Signature (215): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1552 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 569,268 => (* P171 Formals (225): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 225;
                (* line 1572 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 570 => (* P172 FormalsList (228): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 228;
                (* line 1591 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 571,365 => (* P173 FormalsList (228): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 228;

              | 572,358 => (* P174 FormalPlus (229): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1596 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 573,366 => (* P175 FormalPlus (229): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1606 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 574 => (* P176 FormalLt (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1610 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 575,266 => (* P177 FormalLt (231): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1625 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 576,267 => (* P178 FormalLt (231): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1641 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 577,265 => (* P179 FormalLt (231): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1655 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 578,364 => (* P180 Formal (230): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 230;
                (* line 1672 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 579 => (* P181 FormalIds (232): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 232;
                (* line 1727 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 580,359 => (* P182 FormalType (233): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 233;
                (* line 1739 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 581 => (* P183 FormalType (233): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 233;
                (* line 1748 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 582,363 => (* P184 FormalExpr (234): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 234;
                (* line 1756 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 583 => (* P185 FormalExpr (234): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 234;
                (* line 1765 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 584,361 => (* P186 ResultType (226): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 226;
                (* line 1773 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 585 => (* P187 ResultType (226): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 226;
                (* line 1780 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 586 => (* P188 Raises (227): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 227;
                (* line 1790 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 587,269 => (* P189 Raises (227): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 227;
                (* line 1796 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 588,270 => (* P190 Raises (227): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 227;
                (* line 1803 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 589,211 => (* P191 ProcDeclLt (236): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 236;
                (* line 1810 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* Body scope.*) 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkModule  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         END (*IF*) ; 
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END (*Block*) 
                     
              | 590,386 => (* P192 ProcDecl (238): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1841 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 591,285 => (* P193 OptProcBody (237): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1885 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 592,286 => (* P194 ProcBodyLt (239): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1894 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 593,287 => (* P195 OptProcBody (237): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 237;
                (* line 1907 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 594 => (* P196 Expr (163): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 595 => (* P197 E0 (240): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;

              | 596 => (* P198 E0 (240): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1931 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 597,341 => (* P199 E1 (241): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;

              | 598,336 => (* P200 E1 (241): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 241;
                (* line 1941 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 599 => (* P201 E2 (242): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;

              | 600 => (* P202 E2 (242): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 242;
                (* line 1951 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 601 => (* P203 E3 (243): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;

              | 602 => (* P204 E3 (243): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 243;
                (* line 1957 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 603 => (* P205 E4 (244): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 604 => (* P206 E4 (244): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1967 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 605,342 => (* P207 E5 (246): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 606,337 => (* P208 E5 (246): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 1977 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 607,338 => (* P209 E6 (248): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 608,339 => (* P210 E6 (248): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 248;
                (* line 1987 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 609,258 => (* P211 E7 (250): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2002 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 610,345 => (* P212 E7 (250): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2007 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 611,346 => (* P213 E7 (250): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2016 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 612,256 => (* P214 E7 (250): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2025 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 613 => (* P215 E7 (250): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 614,260 => (* P216 E7 (250): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2036 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 615,350 => (* P217 E7 (250): IdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2041 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 616,351 => (* P218 E7 (250): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2050 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 617 => (* P219 E7 (250): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2059 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 618,343 => (* P220 E7 (250): BuiltinIdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2062 of "FM3Parser.lalr" *)
                 (* This is tricky.  Skip the ident for now.  Very soon,
                            BuiltinIdentActualsL2R may either reinsert it, put its atom
                            into an ItkBuiltinCall, or skip the actuals too. *)
                         FM3Pass1 . PutBwd_LCI_ri 
                           ( Itk . ItkSkipLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord  
                           , FM3Globals . NextSkipNo  
                           ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         FM3Pass1 . BuiltinIdentActualsL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 619 => (* P221 E7 (250): BuiltinIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2075 of "FM3Parser.lalr" *)
                 FM3Pass1 . BuiltinSelector ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+1] , "selected" ) 
              | 620,334 => (* P222 E7 (250): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 621,257 => (* P223 Subscripts (253): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 253;
                (* line 2081 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 622,340 => (* P224 SsPlusList (256): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2091 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 623,344 => (* P225 SsPlusList (256): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2094 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 624,259 => (* P226 Actuals (254): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;
                (* line 2105 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 625 => (* P227 ActualList (257): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 257;
                (* line 2115 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 626,349 => (* P228 ActualList (257): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2118 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 627,348 => (* P229 ActualList (257): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2121 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 628,347 => (* P230 Actual (258): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2131 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 629,335 => (* P231 Actual (258): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2136 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 630,230 => (* P232 E8WOId (252): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2151 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 631,231 => (* P233 E8WOId (252): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2156 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 632,232 => (* P234 E8WOId (252): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2163 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 633,233 => (* P235 E8WOId (252): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2170 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 634,234 => (* P236 E8WOId (252): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2180 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 635,235 => (* P237 E8WOId (252): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2190 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 636,236 => (* P238 E8WOId (252): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2197 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 637,237 => (* P239 E8WOId (252): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2204 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 638,240 => (* P240 E8WOId (252): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2212 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 639,241 => (* P241 E8WOId (252): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2219 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 640,238 => (* P242 E8WOId (252): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2226 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 641,239 => (* P243 E8WOId (252): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2228 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 642,261 => (* P244 E8WOId (252): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;

              | 643,243 => (* P245 ExprRelOp (245): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2232 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 644,244 => (* P246 ExprRelOp (245): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2233 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 645,245 => (* P247 ExprRelOp (245): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2234 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 646,246 => (* P248 ExprRelOp (245): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2235 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 647,247 => (* P249 ExprRelOp (245): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2236 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 648,248 => (* P250 ExprRelOp (245): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2237 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 649,242 => (* P251 ExprRelOp (245): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2238 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 650,249 => (* P252 ExprAddOp (247): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2241 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 651,250 => (* P253 ExprAddOp (247): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 652,251 => (* P254 ExprAddOp (247): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2243 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 653,254 => (* P255 ExprMulOp (249): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2245 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 654,255 => (* P256 ExprMulOp (249): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 655,252 => (* P257 ExprMulOp (249): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2247 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 656,253 => (* P258 ExprMulOp (249): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 657,228 => (* P259 ExprUnaryAddOp (251): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2250 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 658,229 => (* P260 ExprUnaryAddOp (251): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2251 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 659 => (* P261 BlockLt (259): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 259;
                (* line 2256 of "FM3Parser.lalr" *)
                
                     
              | 660,288 => (* P262 Block (135): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 135;
                (* line 2260 of "FM3Parser.lalr" *)
                
                     
              | 661,377 => (* P263 BlockDecl (260): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2266 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 662,380 => (* P264 BlockDecl (260): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2270 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 663,394 => (* P265 BlockDecl (260): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2274 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 664,385 => (* P266 BlockDecl (260): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2278 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 665,392 => (* P267 BlockDecl (260): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2282 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 666,383 => (* P268 BlockDecl (260): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2286 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 667 => (* P269 OpenDeclList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;
                (* line 2294 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 668 => (* P270 OpenDeclList (127): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 127;
                (* line 2302 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 669,393 => (* P271 BlockDeclPlus (262): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2311 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 670,395 => (* P272 BlockDeclPlus (262): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 262;
                (* line 2316 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 671 => (* P273 StmtList (131): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 131;
                (* line 2335 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 672,390 => (* P274 StmtList (131): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 131;
                (* line 2343 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 673,391 => (* P275 StmtPlus (263): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2351 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 674,388 => (* P276 StmtPlus (263): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 263;
                (* line 2354 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 675,389 => (* P277 Stmt (264): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 264;

              | 676,387 => (* P278 AssignStmt (265): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 265;
                (* line 2368 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

