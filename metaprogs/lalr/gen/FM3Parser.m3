
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 44 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 260;
   yyTableMax               = 832;
   yyNTableMax              = 970;
   yyFirstReadState         = 1;
   yyLastReadState          = 193;
   yyFirstReadTermState             = 194;
   yyLastReadTermState              = 291;
   yyLastReadNontermState           = 385;
   yyFirstReduceState               = 386;
   yyLastReduceState                = 650;
   yyStartState             = 1;
   yyStopState              = 386;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   1]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   2])
         , (*   8*) ADR (yyTComb [   3]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   5]) , (*  17*) ADR (yyTComb [   3])
         , (*  18*) ADR (yyTComb [   6]) , (*  19*) ADR (yyTComb [   7])
         , (*  20*) ADR (yyTComb [   4]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   8]) , (*  23*) ADR (yyTComb [   9])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   0])
         , (*  26*) ADR (yyTComb [   3]) , (*  27*) ADR (yyTComb [  10])
         , (*  28*) ADR (yyTComb [   1]) , (*  29*) ADR (yyTComb [  11])
         , (*  30*) ADR (yyTComb [   8]) , (*  31*) ADR (yyTComb [  64])
         , (*  32*) ADR (yyTComb [  13]) , (*  33*) ADR (yyTComb [   2])
         , (*  34*) ADR (yyTComb [  14]) , (*  35*) ADR (yyTComb [   9])
         , (*  36*) ADR (yyTComb [  68]) , (*  37*) ADR (yyTComb [  71])
         , (*  38*) ADR (yyTComb [  13]) , (*  39*) ADR (yyTComb [  16])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [ 101])
         , (*  44*) ADR (yyTComb [  15]) , (*  45*) ADR (yyTComb [ 113])
         , (*  46*) ADR (yyTComb [   5]) , (*  47*) ADR (yyTComb [  10])
         , (*  48*) ADR (yyTComb [  18]) , (*  49*) ADR (yyTComb [  18])
         , (*  50*) ADR (yyTComb [   3]) , (*  51*) ADR (yyTComb [ 114])
         , (*  52*) ADR (yyTComb [  21]) , (*  53*) ADR (yyTComb [ 118])
         , (*  54*) ADR (yyTComb [ 128]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [ 154]) , (*  59*) ADR (yyTComb [  22])
         , (*  60*) ADR (yyTComb [ 190]) , (*  61*) ADR (yyTComb [  21])
         , (*  62*) ADR (yyTComb [ 252]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 172]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 289]) , (*  67*) ADR (yyTComb [   0])
         , (*  68*) ADR (yyTComb [ 310]) , (*  69*) ADR (yyTComb [   0])
         , (*  70*) ADR (yyTComb [ 348]) , (*  71*) ADR (yyTComb [   0])
         , (*  72*) ADR (yyTComb [ 369]) , (*  73*) ADR (yyTComb [  42])
         , (*  74*) ADR (yyTComb [ 199]) , (*  75*) ADR (yyTComb [ 444])
         , (*  76*) ADR (yyTComb [  23]) , (*  77*) ADR (yyTComb [   0])
         , (*  78*) ADR (yyTComb [ 482]) , (*  79*) ADR (yyTComb [ 531])
         , (*  80*) ADR (yyTComb [ 591]) , (*  81*) ADR (yyTComb [  64])
         , (*  82*) ADR (yyTComb [   0]) , (*  83*) ADR (yyTComb [  68])
         , (*  84*) ADR (yyTComb [  28]) , (*  85*) ADR (yyTComb [  23])
         , (*  86*) ADR (yyTComb [ 629]) , (*  87*) ADR (yyTComb [   4])
         , (*  88*) ADR (yyTComb [  91]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [   1]) , (*  91*) ADR (yyTComb [   2])
         , (*  92*) ADR (yyTComb [   5]) , (*  93*) ADR (yyTComb [ 425])
         , (*  94*) ADR (yyTComb [  11]) , (*  95*) ADR (yyTComb [  12])
         , (*  96*) ADR (yyTComb [   6]) , (*  97*) ADR (yyTComb [  99])
         , (*  98*) ADR (yyTComb [ 102]) , (*  99*) ADR (yyTComb [   0])
         , (* 100*) ADR (yyTComb [  72]) , (* 101*) ADR (yyTComb [  80])
         , (* 102*) ADR (yyTComb [ 112]) , (* 103*) ADR (yyTComb [ 153])
         , (* 104*) ADR (yyTComb [  56]) , (* 105*) ADR (yyTComb [ 240])
         , (* 106*) ADR (yyTComb [ 134]) , (* 107*) ADR (yyTComb [   0])
         , (* 108*) ADR (yyTComb [   0]) , (* 109*) ADR (yyTComb [ 327])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 426])
         , (* 112*) ADR (yyTComb [ 155]) , (* 113*) ADR (yyTComb [  78])
         , (* 114*) ADR (yyTComb [  83]) , (* 115*) ADR (yyTComb [ 127])
         , (* 116*) ADR (yyTComb [  67]) , (* 117*) ADR (yyTComb [ 167])
         , (* 118*) ADR (yyTComb [   0]) , (* 119*) ADR (yyTComb [   7])
         , (* 120*) ADR (yyTComb [ 145]) , (* 121*) ADR (yyTComb [ 110])
         , (* 122*) ADR (yyTComb [   5]) , (* 123*) ADR (yyTComb [ 133])
         , (* 124*) ADR (yyTComb [   0]) , (* 125*) ADR (yyTComb [   8])
         , (* 126*) ADR (yyTComb [ 142]) , (* 127*) ADR (yyTComb [   0])
         , (* 128*) ADR (yyTComb [ 146]) , (* 129*) ADR (yyTComb [ 494])
         , (* 130*) ADR (yyTComb [ 674]) , (* 131*) ADR (yyTComb [ 147])
         , (* 132*) ADR (yyTComb [ 149]) , (* 133*) ADR (yyTComb [   0])
         , (* 134*) ADR (yyTComb [ 152]) , (* 135*) ADR (yyTComb [ 535])
         , (* 136*) ADR (yyTComb [ 151]) , (* 137*) ADR (yyTComb [ 528])
         , (* 138*) ADR (yyTComb [ 675]) , (* 139*) ADR (yyTComb [ 161])
         , (* 140*) ADR (yyTComb [ 168]) , (* 141*) ADR (yyTComb [ 677])
         , (* 142*) ADR (yyTComb [ 710]) , (* 143*) ADR (yyTComb [ 170])
         , (* 144*) ADR (yyTComb [ 173]) , (* 145*) ADR (yyTComb [ 175])
         , (* 146*) ADR (yyTComb [ 179]) , (* 147*) ADR (yyTComb [ 364])
         , (* 148*) ADR (yyTComb [ 154]) , (* 149*) ADR (yyTComb [ 184])
         , (* 150*) ADR (yyTComb [   0]) , (* 151*) ADR (yyTComb [   1])
         , (* 152*) ADR (yyTComb [   0]) , (* 153*) ADR (yyTComb [  10])
         , (* 154*) ADR (yyTComb [ 177]) , (* 155*) ADR (yyTComb [   7])
         , (* 156*) ADR (yyTComb [ 243]) , (* 157*) ADR (yyTComb [  17])
         , (* 158*) ADR (yyTComb [  41]) , (* 159*) ADR (yyTComb [ 309])
         , (* 160*) ADR (yyTComb [   0]) , (* 161*) ADR (yyTComb [ 218])
         , (* 162*) ADR (yyTComb [ 157]) , (* 163*) ADR (yyTComb [ 159])
         , (* 164*) ADR (yyTComb [ 186]) , (* 165*) ADR (yyTComb [  36])
         , (* 166*) ADR (yyTComb [ 168]) , (* 167*) ADR (yyTComb [ 198])
         , (* 168*) ADR (yyTComb [ 200]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [ 586]) , (* 171*) ADR (yyTComb [ 595])
         , (* 172*) ADR (yyTComb [   2]) , (* 173*) ADR (yyTComb [  37])
         , (* 174*) ADR (yyTComb [  39]) , (* 175*) ADR (yyTComb [ 174])
         , (* 176*) ADR (yyTComb [ 218]) , (* 177*) ADR (yyTComb [ 217])
         , (* 178*) ADR (yyTComb [   0]) , (* 179*) ADR (yyTComb [ 220])
         , (* 180*) ADR (yyTComb [ 246]) , (* 181*) ADR (yyTComb [ 221])
         , (* 182*) ADR (yyTComb [ 725]) , (* 183*) ADR (yyTComb [  35])
         , (* 184*) ADR (yyTComb [  42]) , (* 185*) ADR (yyTComb [ 197])
         , (* 186*) ADR (yyTComb [ 240]) , (* 187*) ADR (yyTComb [ 244])
         , (* 188*) ADR (yyTComb [ 249]) , (* 189*) ADR (yyTComb [ 259])
         , (* 190*) ADR (yyTComb [ 721]) , (* 191*) ADR (yyTComb [ 320])
         , (* 192*) ADR (yyTComb [ 232]) , (* 193*) ADR (yyTComb [ 281])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 110]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 110])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 110])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 181])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 108])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 138]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 112])
         , (*  54*) ADR (yyNComb [ 108]) , (*  55*) ADR (yyNComb [ 113])
         , (*  56*) ADR (yyNComb [ 147]) , (*  57*) ADR (yyNComb [ 177])
         , (*  58*) ADR (yyNComb [ 108]) , (*  59*) ADR (yyNComb [ 108])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 193])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 245])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 209])
         , (*  66*) ADR (yyNComb [ 108]) , (*  67*) ADR (yyNComb [ 259])
         , (*  68*) ADR (yyNComb [ 113]) , (*  69*) ADR (yyNComb [ 268])
         , (*  70*) ADR (yyNComb [ 141]) , (*  71*) ADR (yyNComb [ 275])
         , (*  72*) ADR (yyNComb [ 140]) , (*  73*) ADR (yyNComb [ 281])
         , (*  74*) ADR (yyNComb [ 144]) , (*  75*) ADR (yyNComb [ 148])
         , (*  76*) ADR (yyNComb [ 108]) , (*  77*) ADR (yyNComb [ 297])
         , (*  78*) ADR (yyNComb [ 108]) , (*  79*) ADR (yyNComb [ 141])
         , (*  80*) ADR (yyNComb [ 140]) , (*  81*) ADR (yyNComb [ 108])
         , (*  82*) ADR (yyNComb [ 313]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 327]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 113]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 108])
         , (*  90*) ADR (yyNComb [ 114]) , (*  91*) ADR (yyNComb [ 357])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 401]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 112]) , (*  97*) ADR (yyNComb [ 110])
         , (*  98*) ADR (yyNComb [ 122]) , (*  99*) ADR (yyNComb [ 125])
         , (* 100*) ADR (yyNComb [ 240]) , (* 101*) ADR (yyNComb [ 108])
         , (* 102*) ADR (yyNComb [ 113]) , (* 103*) ADR (yyNComb [ 111])
         , (* 104*) ADR (yyNComb [ 178]) , (* 105*) ADR (yyNComb [ 108])
         , (* 106*) ADR (yyNComb [ 111]) , (* 107*) ADR (yyNComb [ 433])
         , (* 108*) ADR (yyNComb [ 198]) , (* 109*) ADR (yyNComb [ 111])
         , (* 110*) ADR (yyNComb [ 493]) , (* 111*) ADR (yyNComb [ 112])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 285])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 108])
         , (* 116*) ADR (yyNComb [ 117]) , (* 117*) ADR (yyNComb [ 114])
         , (* 118*) ADR (yyNComb [ 421]) , (* 119*) ADR (yyNComb [ 135])
         , (* 120*) ADR (yyNComb [ 247]) , (* 121*) ADR (yyNComb [ 125])
         , (* 122*) ADR (yyNComb [ 297]) , (* 123*) ADR (yyNComb [ 108])
         , (* 124*) ADR (yyNComb [ 479]) , (* 125*) ADR (yyNComb [ 108])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 501])
         , (* 128*) ADR (yyNComb [ 108]) , (* 129*) ADR (yyNComb [ 303])
         , (* 130*) ADR (yyNComb [ 109]) , (* 131*) ADR (yyNComb [ 108])
         , (* 132*) ADR (yyNComb [ 119]) , (* 133*) ADR (yyNComb [ 566])
         , (* 134*) ADR (yyNComb [ 108]) , (* 135*) ADR (yyNComb [ 437])
         , (* 136*) ADR (yyNComb [ 115]) , (* 137*) ADR (yyNComb [ 626])
         , (* 138*) ADR (yyNComb [ 299]) , (* 139*) ADR (yyNComb [ 108])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 463])
         , (* 142*) ADR (yyNComb [ 349]) , (* 143*) ADR (yyNComb [ 108])
         , (* 144*) ADR (yyNComb [ 108]) , (* 145*) ADR (yyNComb [ 258])
         , (* 146*) ADR (yyNComb [ 171]) , (* 147*) ADR (yyNComb [ 325])
         , (* 148*) ADR (yyNComb [ 108]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 616]) , (* 151*) ADR (yyNComb [ 108])
         , (* 152*) ADR (yyNComb [ 641]) , (* 153*) ADR (yyNComb [ 108])
         , (* 154*) ADR (yyNComb [ 108]) , (* 155*) ADR (yyNComb [ 561])
         , (* 156*) ADR (yyNComb [ 127]) , (* 157*) ADR (yyNComb [ 669])
         , (* 158*) ADR (yyNComb [ 764]) , (* 159*) ADR (yyNComb [ 108])
         , (* 160*) ADR (yyNComb [ 344]) , (* 161*) ADR (yyNComb [ 108])
         , (* 162*) ADR (yyNComb [ 135]) , (* 163*) ADR (yyNComb [ 108])
         , (* 164*) ADR (yyNComb [ 115]) , (* 165*) ADR (yyNComb [ 108])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 108])
         , (* 168*) ADR (yyNComb [ 108]) , (* 169*) ADR (yyNComb [ 116])
         , (* 170*) ADR (yyNComb [ 108]) , (* 171*) ADR (yyNComb [ 768])
         , (* 172*) ADR (yyNComb [ 108]) , (* 173*) ADR (yyNComb [ 712])
         , (* 174*) ADR (yyNComb [ 108]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 108]) , (* 177*) ADR (yyNComb [ 108])
         , (* 178*) ADR (yyNComb [ 110]) , (* 179*) ADR (yyNComb [ 178])
         , (* 180*) ADR (yyNComb [ 108]) , (* 181*) ADR (yyNComb [ 108])
         , (* 182*) ADR (yyNComb [ 119]) , (* 183*) ADR (yyNComb [ 818])
         , (* 184*) ADR (yyNComb [ 108]) , (* 185*) ADR (yyNComb [ 108])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 108])
         , (* 188*) ADR (yyNComb [ 266]) , (* 189*) ADR (yyNComb [ 108])
         , (* 190*) ADR (yyNComb [ 279]) , (* 191*) ADR (yyNComb [ 588])
         , (* 192*) ADR (yyNComb [ 108]) , (* 193*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  182 , (*  11*)  183
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   18 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)    0 , (*  23*)    0
         , (*  24*)  164 , (*  25*)  179 , (*  26*)  180 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)    0
         , (*  36*)   37 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)  137 , (*  41*)  137 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)   49 , (*  47*)    0
         , (*  48*)    0 , (*  49*)    0 , (*  50*)  104 , (*  51*)    0
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)  155
         , (*  56*)   73 , (*  57*)  155 , (*  58*)   62 , (*  59*)    0
         , (*  60*)    0 , (*  61*)   84 , (*  62*)    0 , (*  63*)  155
         , (*  64*)   85 , (*  65*)  155 , (*  66*)   78 , (*  67*)  155
         , (*  68*)   86 , (*  69*)   73 , (*  70*)   79 , (*  71*)   73
         , (*  72*)   80 , (*  73*)   74 , (*  74*)    0 , (*  75*)   60
         , (*  76*)    0 , (*  77*)  155 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)  155 , (*  83*)    0
         , (*  84*)  155 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)   97 , (*  89*)  122 , (*  90*)    0 , (*  91*)  155
         , (*  92*)    0 , (*  93*)    0 , (*  94*)   50 , (*  95*)    0
         , (*  96*)   98 , (*  97*)  156 , (*  98*)  122 , (*  99*)  145
         , (* 100*)  103 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)  137
         , (* 108*)  145 , (* 109*)    0 , (* 110*)  137 , (* 111*)    0
         , (* 112*)    0 , (* 113*)  116 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)  155 , (* 119*)    0
         , (* 120*)    0 , (* 121*)  156 , (* 122*)  104 , (* 123*)    0
         , (* 124*)  155 , (* 125*)    0 , (* 126*)    0 , (* 127*)  155
         , (* 128*)    0 , (* 129*)  130 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)  137 , (* 134*)    0 , (* 135*)  138
         , (* 136*)    0 , (* 137*)  116 , (* 138*)  116 , (* 139*)    0
         , (* 140*)    0 , (* 141*)  104 , (* 142*)  104 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)    0
         , (* 148*)    0 , (* 149*)    0 , (* 150*)  171 , (* 151*)    0
         , (* 152*)  173 , (* 153*)    0 , (* 154*)    0 , (* 155*)   73
         , (* 156*)    0 , (* 157*)  155 , (* 158*)  171 , (* 159*)    0
         , (* 160*)    0 , (* 161*)    0 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)    0 , (* 169*)  190 , (* 170*)  191 , (* 171*)    0
         , (* 172*)    0 , (* 173*)  155 , (* 174*)    0 , (* 175*)    0
         , (* 176*)    0 , (* 177*)    0 , (* 178*)  188 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)   31
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)  147
         , (* 192*)    0 , (* 193*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  386} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  15,   16}
         , (*  10*) yyTCombType { 151,  152} , (*  11*) yyTCombType { 172,  173}
         , (*  12*) yyTCombType {  90,   91} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  11,  401} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  11,  401}
         , (*  20*) yyTCombType {  28,   29} , (*  21*) yyTCombType {  33,   34}
         , (*  22*) yyTCombType {  50,  517} , (*  23*) yyTCombType {  87,  259}
         , (*  24*) yyTCombType { 122,  414} , (*  25*) yyTCombType {  96,  524}
         , (*  26*) yyTCombType { 119,  530} , (*  27*) yyTCombType { 125,  269}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 153,  285}
         , (*  30*) yyTCombType {  13,  199} , (*  31*) yyTCombType {  95,  523}
         , (*  32*) yyTCombType {   1,  412} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  89,  414}
         , (*  36*) yyTCombType { 157,  414} , (*  37*) yyTCombType {   1,  412}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  90,  537} , (*  41*) yyTCombType {  91,  538}
         , (*  42*) yyTCombType {  89,  414} , (*  43*) yyTCombType {  11,  401}
         , (*  44*) yyTCombType {  92,  260} , (*  45*) yyTCombType { 155,   56}
         , (*  46*) yyTCombType {  94,  517} , (*  47*) yyTCombType {  95,   96}
         , (*  48*) yyTCombType {  96,  524} , (*  49*) yyTCombType { 119,  120}
         , (*  50*) yyTCombType { 158,  642} , (*  51*) yyTCombType {  11,  401}
         , (*  52*) yyTCombType {  42,  219} , (*  53*) yyTCombType {  94,  517}
         , (*  54*) yyTCombType {  95,  523} , (*  55*) yyTCombType { 165,  166}
         , (*  56*) yyTCombType { 173,  645} , (*  57*) yyTCombType {  11,  401}
         , (*  58*) yyTCombType { 174,  175} , (*  59*) yyTCombType {   1,  196}
         , (*  60*) yyTCombType { 158,  642} , (*  61*) yyTCombType { 184,  185}
         , (*  62*) yyTCombType { 183,   12} , (*  63*) yyTCombType {  11,  401}
         , (*  64*) yyTCombType {  85,   65} , (*  65*) yyTCombType { 183,   14}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  15,  437}
         , (*  68*) yyTCombType {   9,   23} , (*  69*) yyTCombType {  17,  201}
         , (*  70*) yyTCombType {  20,  203} , (*  71*) yyTCombType {  21,   22}
         , (*  72*) yyTCombType {  15,  437} , (*  73*) yyTCombType {  26,  205}
         , (*  74*) yyTCombType {  17,   18} , (*  75*) yyTCombType {  30,  207}
         , (*  76*) yyTCombType {  35,  213} , (*  77*) yyTCombType {  36,  454}
         , (*  78*) yyTCombType {  31,  208} , (*  79*) yyTCombType {  38,  215}
         , (*  80*) yyTCombType {  37,  455} , (*  81*) yyTCombType {  46,  511}
         , (*  82*) yyTCombType {  36,  454} , (*  83*) yyTCombType {  31,  641}
         , (*  84*) yyTCombType {  39,  488} , (*  85*) yyTCombType {  37,  455}
         , (*  86*) yyTCombType {  47,  223} , (*  87*) yyTCombType {  36,  454}
         , (*  88*) yyTCombType {  39,   40} , (*  89*) yyTCombType {  48,   49}
         , (*  90*) yyTCombType {  37,  455} , (*  91*) yyTCombType {  61,  600}
         , (*  92*) yyTCombType {  61,  600} , (*  93*) yyTCombType {  85,  258}
         , (*  94*) yyTCombType {  48,  512} , (*  95*) yyTCombType {   3,  194}
         , (*  96*) yyTCombType {   4,  195} , (*  97*) yyTCombType {   7,  197}
         , (*  98*) yyTCombType {   8,  198} , (*  99*) yyTCombType {  12,   13}
         , (* 100*) yyTCombType {  16,  200} , (* 101*) yyTCombType {  18,   15}
         , (* 102*) yyTCombType {  19,  202} , (* 103*) yyTCombType {  22,  204}
         , (* 104*) yyTCombType {  23,   24} , (* 105*) yyTCombType {  27,  206}
         , (* 106*) yyTCombType {  29,   30} , (* 107*) yyTCombType {  31,   32}
         , (* 108*) yyTCombType {  32,  209} , (* 109*) yyTCombType {  34,   35}
         , (* 110*) yyTCombType {  44,  221} , (* 111*) yyTCombType {  36,  454}
         , (* 112*) yyTCombType {  43,  427} , (* 113*) yyTCombType {  49,  222}
         , (* 114*) yyTCombType {  37,  455} , (* 115*) yyTCombType {  31,  210}
         , (* 116*) yyTCombType {  52,  225} , (* 117*) yyTCombType {  59,  228}
         , (* 118*) yyTCombType {  76,  254} , (* 119*) yyTCombType {  36,  454}
         , (* 120*) yyTCombType {  43,  427} , (* 121*) yyTCombType {  31,  211}
         , (* 122*) yyTCombType {  37,  455} , (* 123*) yyTCombType {  84,   62}
         , (* 124*) yyTCombType {  45,  541} , (* 125*) yyTCombType {  36,  454}
         , (* 126*) yyTCombType {  88,  415} , (* 127*) yyTCombType {  31,  212}
         , (* 128*) yyTCombType {  37,  455} , (* 129*) yyTCombType {  73,  226}
         , (* 130*) yyTCombType {  73,  227} , (* 131*) yyTCombType {  36,  454}
         , (* 132*) yyTCombType {  45,  491} , (* 133*) yyTCombType {  51,  486}
         , (* 134*) yyTCombType {  37,  455} , (* 135*) yyTCombType {  81,   82}
         , (* 136*) yyTCombType {  43,  427} , (* 137*) yyTCombType {  53,  488}
         , (* 138*) yyTCombType {  83,  257} , (* 139*) yyTCombType {  83,   84}
         , (* 140*) yyTCombType {  43,  427} , (* 141*) yyTCombType {  97,  415}
         , (* 142*) yyTCombType { 100,  550} , (* 143*) yyTCombType {  43,  427}
         , (* 144*) yyTCombType {  98,  414} , (* 145*) yyTCombType {  81,  255}
         , (* 146*) yyTCombType {  43,  427} , (* 147*) yyTCombType {  54,  490}
         , (* 148*) yyTCombType {  45,  491} , (* 149*) yyTCombType {  51,  486}
         , (* 150*) yyTCombType { 101,  265} , (* 151*) yyTCombType { 104,  224}
         , (* 152*) yyTCombType {  45,  541} , (* 153*) yyTCombType {  53,  488}
         , (* 154*) yyTCombType { 113,  423} , (* 155*) yyTCombType {  45,  491}
         , (* 156*) yyTCombType {  51,  486} , (* 157*) yyTCombType {  88,   89}
         , (* 158*) yyTCombType {  45,  491} , (* 159*) yyTCombType { 114,  267}
         , (* 160*) yyTCombType {  53,  488} , (* 161*) yyTCombType { 112,  266}
         , (* 162*) yyTCombType { 116,   43} , (* 163*) yyTCombType {  54,  490}
         , (* 164*) yyTCombType { 120,  531} , (* 165*) yyTCombType {  97,   98}
         , (* 166*) yyTCombType {  37,  214} , (* 167*) yyTCombType {  43,  427}
         , (* 168*) yyTCombType {  43,   44} , (* 169*) yyTCombType {  43,  427}
         , (* 170*) yyTCombType {  54,  490} , (* 171*) yyTCombType {  43,  427}
         , (* 172*) yyTCombType {  43,  427} , (* 173*) yyTCombType {  58,  416}
         , (* 174*) yyTCombType {  43,  427} , (* 175*) yyTCombType {  43,  427}
         , (* 176*) yyTCombType { 121,  122} , (* 177*) yyTCombType {  43,  427}
         , (* 178*) yyTCombType { 102,  103} , (* 179*) yyTCombType {  45,  491}
         , (* 180*) yyTCombType {  51,  486} , (* 181*) yyTCombType {  45,  491}
         , (* 182*) yyTCombType { 102,  415} , (* 183*) yyTCombType {  45,  491}
         , (* 184*) yyTCombType {  53,  488} , (* 185*) yyTCombType {  51,   52}
         , (* 186*) yyTCombType {  51,  486} , (* 187*) yyTCombType {  45,  491}
         , (* 188*) yyTCombType {  51,  486} , (* 189*) yyTCombType {  58,  416}
         , (* 190*) yyTCombType {  53,   40} , (* 191*) yyTCombType {  64,  574}
         , (* 192*) yyTCombType {  53,  488} , (* 193*) yyTCombType {  58,  416}
         , (* 194*) yyTCombType {  54,  490} , (* 195*) yyTCombType {  60,  593}
         , (* 196*) yyTCombType {  58,  416} , (* 197*) yyTCombType {  98,  261}
         , (* 198*) yyTCombType { 115,  116} , (* 199*) yyTCombType { 103,  262}
         , (* 200*) yyTCombType { 106,  561} , (* 201*) yyTCombType { 123,  124}
         , (* 202*) yyTCombType {  54,   55} , (* 203*) yyTCombType { 115,  424}
         , (* 204*) yyTCombType { 106,  561} , (* 205*) yyTCombType {  60,  593}
         , (* 206*) yyTCombType { 106,  107} , (* 207*) yyTCombType {  64,  574}
         , (* 208*) yyTCombType { 106,  561} , (* 209*) yyTCombType {  60,  593}
         , (* 210*) yyTCombType { 126,  127} , (* 211*) yyTCombType {  64,  574}
         , (* 212*) yyTCombType { 128,  270} , (* 213*) yyTCombType { 131,  272}
         , (* 214*) yyTCombType {  64,  574} , (* 215*) yyTCombType { 103,  263}
         , (* 216*) yyTCombType { 103,  264} , (* 217*) yyTCombType { 132,  273}
         , (* 218*) yyTCombType { 134,  275} , (* 219*) yyTCombType { 136,  276}
         , (* 220*) yyTCombType {  58,  416} , (* 221*) yyTCombType {  60,  593}
         , (* 222*) yyTCombType { 132,  274} , (* 223*) yyTCombType { 103,  414}
         , (* 224*) yyTCombType { 136,  277} , (* 225*) yyTCombType {  60,  593}
         , (* 226*) yyTCombType {  60,  593} , (* 227*) yyTCombType { 139,  278}
         , (* 228*) yyTCombType {  58,  416} , (* 229*) yyTCombType {  60,  593}
         , (* 230*) yyTCombType { 112,  113} , (* 231*) yyTCombType {  60,  593}
         , (* 232*) yyTCombType {  60,  593} , (* 233*) yyTCombType { 117,  563}
         , (* 234*) yyTCombType { 140,  279} , (* 235*) yyTCombType {  58,  416}
         , (* 236*) yyTCombType { 143,  280} , (* 237*) yyTCombType { 117,  563}
         , (* 238*) yyTCombType {  64,  574} , (* 239*) yyTCombType { 144,  281}
         , (* 240*) yyTCombType { 120,  268} , (* 241*) yyTCombType { 117,  118}
         , (* 242*) yyTCombType {  64,  574} , (* 243*) yyTCombType {  64,  574}
         , (* 244*) yyTCombType { 145,  100} , (* 245*) yyTCombType { 146,  282}
         , (* 246*) yyTCombType {  64,  574} , (* 247*) yyTCombType { 146,  283}
         , (* 248*) yyTCombType { 103,  554} , (* 249*) yyTCombType { 148,  149}
         , (* 250*) yyTCombType { 149,  284} , (* 251*) yyTCombType { 154,  155}
         , (* 252*) yyTCombType { 162,  286} , (* 253*) yyTCombType {  64,  574}
         , (* 254*) yyTCombType { 163,  164} , (* 255*) yyTCombType { 164,   25}
         , (* 256*) yyTCombType {  60,  593} , (* 257*) yyTCombType {  62,  416}
         , (* 258*) yyTCombType {  60,  593} , (* 259*) yyTCombType {  60,   61}
         , (* 260*) yyTCombType {  60,  593} , (* 261*) yyTCombType {  60,  593}
         , (* 262*) yyTCombType { 156,  415} , (* 263*) yyTCombType { 166,  167}
         , (* 264*) yyTCombType {  60,  593} , (* 265*) yyTCombType { 167,  287}
         , (* 266*) yyTCombType { 168,  169} , (* 267*) yyTCombType {  62,  416}
         , (* 268*) yyTCombType {  74,   57} , (* 269*) yyTCombType { 175,  176}
         , (* 270*) yyTCombType {  60,   77} , (* 271*) yyTCombType {  60,  593}
         , (* 272*) yyTCombType {  60,  593} , (* 273*) yyTCombType {  60,  593}
         , (* 274*) yyTCombType {  60,  593} , (* 275*) yyTCombType {  60,  593}
         , (* 276*) yyTCombType {  60,  593} , (* 277*) yyTCombType {  60,  593}
         , (* 278*) yyTCombType {  60,  593} , (* 279*) yyTCombType {  60,  593}
         , (* 280*) yyTCombType {  60,  593} , (* 281*) yyTCombType {  60,  593}
         , (* 282*) yyTCombType {  60,  256} , (* 283*) yyTCombType {  62,  416}
         , (* 284*) yyTCombType { 161,  444} , (* 285*) yyTCombType { 176,  288}
         , (* 286*) yyTCombType { 177,  395} , (* 287*) yyTCombType { 181,  182}
         , (* 288*) yyTCombType {  62,  416} , (* 289*) yyTCombType { 161,  162}
         , (* 290*) yyTCombType { 179,  422} , (* 291*) yyTCombType { 179,  422}
         , (* 292*) yyTCombType { 185,  186} , (* 293*) yyTCombType {  62,  416}
         , (* 294*) yyTCombType {  74,   58} , (* 295*) yyTCombType {  74,  229}
         , (* 296*) yyTCombType {  74,  230} , (* 297*) yyTCombType {  74,  231}
         , (* 298*) yyTCombType {  74,  232} , (* 299*) yyTCombType {  74,  233}
         , (* 300*) yyTCombType {  74,  234} , (* 301*) yyTCombType {  74,  235}
         , (* 302*) yyTCombType {  74,  236} , (* 303*) yyTCombType {  74,  237}
         , (* 304*) yyTCombType {  74,  238} , (* 305*) yyTCombType {  74,  239}
         , (* 306*) yyTCombType { 105,  559} , (* 307*) yyTCombType { 186,  290}
         , (* 308*) yyTCombType {  66,  576} , (* 309*) yyTCombType { 156,  157}
         , (* 310*) yyTCombType { 105,  559} , (* 311*) yyTCombType { 105,   52}
         , (* 312*) yyTCombType { 105,  559} , (* 313*) yyTCombType { 187,  396}
         , (* 314*) yyTCombType { 105,  559} , (* 315*) yyTCombType {  68,  579}
         , (* 316*) yyTCombType { 180,  289} , (* 317*) yyTCombType { 180,   27}
         , (* 318*) yyTCombType { 188,  179} , (* 319*) yyTCombType {  62,   59}
         , (* 320*) yyTCombType {  62,  416} , (* 321*) yyTCombType {  62,  416}
         , (* 322*) yyTCombType {  62,  416} , (* 323*) yyTCombType {  62,  416}
         , (* 324*) yyTCombType {  66,  576} , (* 325*) yyTCombType { 189,  190}
         , (* 326*) yyTCombType {  62,   63} , (* 327*) yyTCombType { 192,  193}
         , (* 328*) yyTCombType {  66,  576} , (* 329*) yyTCombType {  68,  579}
         , (* 330*) yyTCombType {  66,  576} , (* 331*) yyTCombType {  66,  576}
         , (* 332*) yyTCombType {  62,  416} , (* 333*) yyTCombType { 159,  160}
         , (* 334*) yyTCombType {  62,  416} , (* 335*) yyTCombType {  62,  416}
         , (* 336*) yyTCombType {  62,  416} , (* 337*) yyTCombType {  62,  416}
         , (* 338*) yyTCombType {  62,  416} , (* 339*) yyTCombType {  62,  416}
         , (* 340*) yyTCombType {  62,  416} , (* 341*) yyTCombType {  62,  416}
         , (* 342*) yyTCombType {  62,  416} , (* 343*) yyTCombType {  62,  416}
         , (* 344*) yyTCombType {  62,  416} , (* 345*) yyTCombType {  68,  579}
         , (* 346*) yyTCombType { 109,  565} , (* 347*) yyTCombType { 191,   12}
         , (* 348*) yyTCombType { 193,  291} , (* 349*) yyTCombType {  68,  579}
         , (* 350*) yyTCombType { 191,   14} , (* 351*) yyTCombType {  68,  579}
         , (* 352*) yyTCombType {  68,  579} , (* 353*) yyTCombType {  70,  582}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  66,  576}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {  66,  576}
         , (* 360*) yyTCombType {  66,  576} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType { 109,  565} , (* 363*) yyTCombType {  66,  576}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {  70,  582}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType { 109,  565}
         , (* 370*) yyTCombType {  66,  576} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType { 109,  565} , (* 373*) yyTCombType { 147,  633}
         , (* 374*) yyTCombType {  72,  584} , (* 375*) yyTCombType { 159,  443}
         , (* 376*) yyTCombType {  68,  579} , (* 377*) yyTCombType { 159,  163}
         , (* 378*) yyTCombType { 147,  633} , (* 379*) yyTCombType {  70,  582}
         , (* 380*) yyTCombType {  68,  579} , (* 381*) yyTCombType {  68,  579}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {  70,  582}
         , (* 384*) yyTCombType {  68,  579} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {  70,  582}
         , (* 388*) yyTCombType {  72,  584} , (* 389*) yyTCombType {  70,  582}
         , (* 390*) yyTCombType {  70,  582} , (* 391*) yyTCombType {  68,  579}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType { 109,  565}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType { 109,  565}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType { 109,  565}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType { 109,  110}
         , (* 400*) yyTCombType {  72,  584} , (* 401*) yyTCombType { 109,  565}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {  72,  584} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType { 147,  633}
         , (* 408*) yyTCombType {  72,  584} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {  72,  584} , (* 411*) yyTCombType {  72,  584}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType {   0,    0}
         , (* 414*) yyTCombType {  70,  582} , (* 415*) yyTCombType { 147,  633}
         , (* 416*) yyTCombType {  70,  582} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {  70,  582} , (* 419*) yyTCombType {  70,  582}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType { 147,  633}
         , (* 422*) yyTCombType {  70,  582} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {   0,    0}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType { 147,  633}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType {  70,  582}
         , (* 430*) yyTCombType {  70,  582} , (* 431*) yyTCombType {  70,  582}
         , (* 432*) yyTCombType {  70,  582} , (* 433*) yyTCombType {  70,  582}
         , (* 434*) yyTCombType {  70,  582} , (* 435*) yyTCombType {  72,  584}
         , (* 436*) yyTCombType {  93,  542} , (* 437*) yyTCombType {  72,  584}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {  72,  584}
         , (* 440*) yyTCombType {  72,  584} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {  72,  584}
         , (* 444*) yyTCombType {  93,  545} , (* 445*) yyTCombType { 111,  566}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {  75,  591}
         , (* 450*) yyTCombType {  72,  584} , (* 451*) yyTCombType {  72,  584}
         , (* 452*) yyTCombType {  72,  584} , (* 453*) yyTCombType {  72,  584}
         , (* 454*) yyTCombType {  72,  584} , (* 455*) yyTCombType {  72,  584}
         , (* 456*) yyTCombType {  72,  584} , (* 457*) yyTCombType {  72,  584}
         , (* 458*) yyTCombType {  72,  584} , (* 459*) yyTCombType {  75,  591}
         , (* 460*) yyTCombType {  93,  545} , (* 461*) yyTCombType { 111,  566}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {  75,  591}
         , (* 464*) yyTCombType {  93,  542} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {  93,  545}
         , (* 468*) yyTCombType { 111,  566} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {  93,  545} , (* 471*) yyTCombType { 111,  112}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {  75,  591}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {  75,  591}
         , (* 480*) yyTCombType {  75,  591} , (* 481*) yyTCombType {   0,    0}
         , (* 482*) yyTCombType {   0,    0} , (* 483*) yyTCombType {  75,  591}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {  75,  591}
         , (* 486*) yyTCombType {  75,  591} , (* 487*) yyTCombType {  78,   67}
         , (* 488*) yyTCombType {   0,    0} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {  93,  545}
         , (* 492*) yyTCombType { 111,  566} , (* 493*) yyTCombType {  93,  545}
         , (* 494*) yyTCombType { 111,  566} , (* 495*) yyTCombType {  93,  545}
         , (* 496*) yyTCombType { 111,  566} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  93,  545}
         , (* 500*) yyTCombType { 111,  566} , (* 501*) yyTCombType {  78,  575}
         , (* 502*) yyTCombType {   0,    0} , (* 503*) yyTCombType { 129,  464}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType { 129,  464} , (* 509*) yyTCombType {   0,    0}
         , (* 510*) yyTCombType {  75,  591} , (* 511*) yyTCombType {  75,   76}
         , (* 512*) yyTCombType {  75,  591} , (* 513*) yyTCombType { 129,  464}
         , (* 514*) yyTCombType {  75,  591} , (* 515*) yyTCombType {  75,  591}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {  78,  575}
         , (* 518*) yyTCombType {  75,  591} , (* 519*) yyTCombType {   0,    0}
         , (* 520*) yyTCombType {   0,    0} , (* 521*) yyTCombType {  78,  575}
         , (* 522*) yyTCombType {   0,    0} , (* 523*) yyTCombType {  78,  575}
         , (* 524*) yyTCombType {  78,  575} , (* 525*) yyTCombType {  75,  591}
         , (* 526*) yyTCombType {  75,  591} , (* 527*) yyTCombType {  75,  591}
         , (* 528*) yyTCombType {  75,  591} , (* 529*) yyTCombType {  75,  591}
         , (* 530*) yyTCombType {  75,  591} , (* 531*) yyTCombType {  75,  591}
         , (* 532*) yyTCombType {  75,  591} , (* 533*) yyTCombType {  75,  591}
         , (* 534*) yyTCombType {  75,  591} , (* 535*) yyTCombType {  75,  591}
         , (* 536*) yyTCombType {  79,  581} , (* 537*) yyTCombType { 129,  464}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType { 137,  540}
         , (* 540*) yyTCombType {   0,    0} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {   0,    0} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType { 135,  474} , (* 545*) yyTCombType { 129,  464}
         , (* 546*) yyTCombType {   0,    0} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {  78,  575} , (* 549*) yyTCombType { 135,  474}
         , (* 550*) yyTCombType {  79,  581} , (* 551*) yyTCombType { 129,  464}
         , (* 552*) yyTCombType {  78,  575} , (* 553*) yyTCombType {  78,  575}
         , (* 554*) yyTCombType { 135,  474} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {  78,  575} , (* 557*) yyTCombType { 129,  464}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType {   0,    0}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {  79,  581} , (* 563*) yyTCombType {  78,  575}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {  79,  581} , (* 567*) yyTCombType { 137,  540}
         , (* 568*) yyTCombType {   0,    0} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType {  79,  581} , (* 571*) yyTCombType { 137,  216}
         , (* 572*) yyTCombType {  79,  581} , (* 573*) yyTCombType {  79,  581}
         , (* 574*) yyTCombType {   0,    0} , (* 575*) yyTCombType { 137,  217}
         , (* 576*) yyTCombType { 137,   41} , (* 577*) yyTCombType {   0,    0}
         , (* 578*) yyTCombType { 135,  474} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType { 137,  218} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType {   0,    0}
         , (* 584*) yyTCombType {   0,    0} , (* 585*) yyTCombType {   0,    0}
         , (* 586*) yyTCombType { 135,  474} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType { 137,   42}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType { 135,  474} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType {   0,    0} , (* 595*) yyTCombType { 170,  405}
         , (* 596*) yyTCombType {  80,  583} , (* 597*) yyTCombType {  79,  581}
         , (* 598*) yyTCombType { 135,  474} , (* 599*) yyTCombType {  79,  581}
         , (* 600*) yyTCombType { 170,  405} , (* 601*) yyTCombType {  79,  581}
         , (* 602*) yyTCombType {  79,  581} , (* 603*) yyTCombType { 137,  220}
         , (* 604*) yyTCombType { 171,  641} , (* 605*) yyTCombType {  79,  581}
         , (* 606*) yyTCombType {  80,  250} , (* 607*) yyTCombType {   0,    0}
         , (* 608*) yyTCombType {   0,    0} , (* 609*) yyTCombType { 171,  208}
         , (* 610*) yyTCombType {  80,  583} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType {  79,  581} , (* 613*) yyTCombType {  79,  581}
         , (* 614*) yyTCombType {  79,  581} , (* 615*) yyTCombType {  79,  581}
         , (* 616*) yyTCombType {  79,  581} , (* 617*) yyTCombType {  79,  581}
         , (* 618*) yyTCombType {  79,  247} , (* 619*) yyTCombType {  79,  248}
         , (* 620*) yyTCombType {  79,  249} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {  80,  583} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {  80,  583} , (* 627*) yyTCombType {  80,  251}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType { 170,  405}
         , (* 630*) yyTCombType {  80,  583} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType {  80,  583} , (* 633*) yyTCombType {  80,  583}
         , (* 634*) yyTCombType {  86,  580} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType { 170,  405}
         , (* 638*) yyTCombType { 171,   32} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {   0,    0} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType { 170,  405}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {   0,    0}
         , (* 646*) yyTCombType { 171,  210} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {  86,  580} , (* 649*) yyTCombType { 170,  405}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType { 171,  211} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {  80,  583}
         , (* 658*) yyTCombType { 171,  212} , (* 659*) yyTCombType {  80,  583}
         , (* 660*) yyTCombType {  86,  240} , (* 661*) yyTCombType {  80,  583}
         , (* 662*) yyTCombType {  80,  583} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {  86,  580} , (* 665*) yyTCombType {  80,  583}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {  86,  580} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {  86,  580} , (* 671*) yyTCombType {  86,  580}
         , (* 672*) yyTCombType {  80,  583} , (* 673*) yyTCombType {  80,  583}
         , (* 674*) yyTCombType {  80,  583} , (* 675*) yyTCombType {  80,  583}
         , (* 676*) yyTCombType {  80,  583} , (* 677*) yyTCombType {  80,  583}
         , (* 678*) yyTCombType {  80,  583} , (* 679*) yyTCombType {  80,  583}
         , (* 680*) yyTCombType {  80,  583} , (* 681*) yyTCombType {  80,  252}
         , (* 682*) yyTCombType {  80,  253} , (* 683*) yyTCombType { 130,  465}
         , (* 684*) yyTCombType { 138,  475} , (* 685*) yyTCombType {   0,    0}
         , (* 686*) yyTCombType { 141,  481} , (* 687*) yyTCombType {   0,    0}
         , (* 688*) yyTCombType { 130,  465} , (* 689*) yyTCombType { 138,  475}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType { 141,  481}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType { 130,  465}
         , (* 694*) yyTCombType { 138,  475} , (* 695*) yyTCombType {  86,  580}
         , (* 696*) yyTCombType { 141,  481} , (* 697*) yyTCombType {  86,  241}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType {  86,  580}
         , (* 700*) yyTCombType {  86,  580} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType {   0,    0} , (* 703*) yyTCombType {  86,  580}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType {  86,  580} , (* 711*) yyTCombType {  86,  242}
         , (* 712*) yyTCombType {  86,  243} , (* 713*) yyTCombType {  86,  244}
         , (* 714*) yyTCombType {  86,  245} , (* 715*) yyTCombType {  86,  246}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType { 130,  465}
         , (* 718*) yyTCombType { 138,  475} , (* 719*) yyTCombType { 142,  482}
         , (* 720*) yyTCombType { 141,  481} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType { 142,  482} , (* 725*) yyTCombType { 130,  465}
         , (* 726*) yyTCombType { 138,  475} , (* 727*) yyTCombType { 138,  218}
         , (* 728*) yyTCombType { 141,  481} , (* 729*) yyTCombType { 142,  482}
         , (* 730*) yyTCombType { 190,  432} , (* 731*) yyTCombType { 130,  465}
         , (* 732*) yyTCombType { 138,  475} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType { 141,  481} , (* 735*) yyTCombType { 190,  432}
         , (* 736*) yyTCombType { 138,   42} , (* 737*) yyTCombType { 130,  465}
         , (* 738*) yyTCombType { 138,  475} , (* 739*) yyTCombType { 182,  432}
         , (* 740*) yyTCombType { 141,  481} , (* 741*) yyTCombType {   0,    0}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType { 182,  432} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType { 190,  432} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType { 190,  432}
         , (* 752*) yyTCombType { 182,  432} , (* 753*) yyTCombType { 142,  482}
         , (* 754*) yyTCombType {   0,    0} , (* 755*) yyTCombType { 182,  432}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType { 142,  482}
         , (* 762*) yyTCombType {   0,    0} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType { 190,  432} , (* 765*) yyTCombType {   0,    0}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType { 142,  482}
         , (* 768*) yyTCombType { 182,  432} , (* 769*) yyTCombType { 130,  271}
         , (* 770*) yyTCombType {   0,    0} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType { 190,  432} , (* 773*) yyTCombType { 142,  482}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType { 182,  432} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType { 190,  432} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType {   0,    0} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType { 182,  432} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType { 190,  432} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType {   0,    0}
         , (* 788*) yyTCombType { 182,  432} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType {   0,    0}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {   0,    0} , (* 805*) yyTCombType {   0,    0}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType {   0,    0} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType {   0,    0} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType {   0,    0} , (* 817*) yyTCombType {   0,    0}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType {   0,    0} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType {   0,    0} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  292 , (* 109*)    5 , (* 110*)  293 , (* 111*)  294
         , (* 112*)  295 , (* 113*)  296 , (* 114*)  297 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  178 , (* 118*)  188 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    6 , (* 122*)    9 , (* 123*)   28
         , (* 124*)   11 , (* 125*)   31 , (* 126*)   33 , (* 127*)  159
         , (* 128*)  168 , (* 129*)  171 , (* 130*)  165 , (* 131*)  177
         , (* 132*)  170 , (* 133*)  187 , (* 134*)  181 , (* 135*)  183
         , (* 136*)  342 , (* 137*)  301 , (* 138*)  357 , (* 139*)   51
         , (* 140*)   26 , (* 141*)  354 , (* 142*)   60 , (* 143*)  303
         , (* 144*)   45 , (* 145*)  300 , (* 146*)   17 , (* 147*)  299
         , (* 148*)   19 , (* 149*)  298 , (* 150*)   20 , (* 151*)   21
         , (* 152*)  349 , (* 153*)  360 , (* 154*)  363 , (* 155*)  378
         , (* 156*)   36 , (* 157*)  302 , (* 158*)  365 , (* 159*)   37
         , (* 160*)  128 , (* 161*)   39 , (* 162*)   38 , (* 163*)   39
         , (* 164*)  126 , (* 165*)  129 , (* 166*)   54 , (* 167*)  368
         , (* 168*)  339 , (* 169*)   51 , (* 170*)  131 , (* 171*)  132
         , (* 172*)  135 , (* 173*)   60 , (* 174*)  371 , (* 175*)  133
         , (* 176*)   60 , (* 177*)  141 , (* 178*)  137 , (* 179*)  373
         , (* 180*)  384 , (* 181*)  341 , (* 182*)   53 , (* 183*)  340
         , (* 184*)  305 , (* 185*)  306 , (* 186*)  307 , (* 187*)  308
         , (* 188*)  309 , (* 189*)  310 , (* 190*)  311 , (* 191*)  312
         , (* 192*)  313 , (* 193*)  314 , (* 194*)  315 , (* 195*)  316
         , (* 196*)  317 , (* 197*)  318 , (* 198*)  319 , (* 199*)  320
         , (* 200*)   46 , (* 201*)   47 , (* 202*)  323 , (* 203*)   48
         , (* 204*)  322 , (* 205*)  321 , (* 206*)   60 , (* 207*)   50
         , (* 208*)  119 , (* 209*)  105 , (* 210*)  180 , (* 211*)  324
         , (* 212*)   53 , (* 213*)   97 , (* 214*)  358 , (* 215*)   99
         , (* 216*)  303 , (* 217*)   45 , (* 218*)   90 , (* 219*)   93
         , (* 220*)   94 , (* 221*)  108 , (* 222*)   60 , (* 223*)   92
         , (* 224*)  344 , (* 225*)   99 , (* 226*)  111 , (* 227*)  304
         , (* 228*)  351 , (* 229*)  356 , (* 230*)  345 , (* 231*)  104
         , (* 232*)  145 , (* 233*)  117 , (* 234*)  380 , (* 235*)   87
         , (* 236*)   88 , (* 237*)  353 , (* 238*)   60 , (* 239*)  109
         , (* 240*)  125 , (* 241*)   64 , (* 242*)   78 , (* 243*)  331
         , (* 244*)   68 , (* 245*)   79 , (* 246*)   69 , (* 247*)   80
         , (* 248*)  335 , (* 249*)  332 , (* 250*)  338 , (* 251*)  328
         , (* 252*)   74 , (* 253*)   75 , (* 254*)  381 , (* 255*)  382
         , (* 256*)  158 , (* 257*)  305 , (* 258*)  306 , (* 259*)  307
         , (* 260*)  308 , (* 261*)  309 , (* 262*)  310 , (* 263*)  311
         , (* 264*)  312 , (* 265*)  313 , (* 266*)  314 , (* 267*)  315
         , (* 268*)  316 , (* 269*)  317 , (* 270*)  318 , (* 271*)  319
         , (* 272*)  320 , (* 273*)   46 , (* 274*)   60 , (* 275*)  323
         , (* 276*)   71 , (* 277*)   73 , (* 278*)   86 , (* 279*)   79
         , (* 280*)   50 , (* 281*)   80 , (* 282*)  329 , (* 283*)  332
         , (* 284*)   75 , (* 285*)  328 , (* 286*)   74 , (* 287*)   75
         , (* 288*)   60 , (* 289*)  334 , (* 290*)  189 , (* 291*)   90
         , (* 292*)   93 , (* 293*)   94 , (* 294*)  108 , (* 295*)  191
         , (* 296*)  374 , (* 297*)   60 , (* 298*)  147 , (* 299*)  106
         , (* 300*)  325 , (* 301*)    0 , (* 302*)  347 , (* 303*)    0
         , (* 304*)   60 , (* 305*)   85 , (* 306*)   78 , (* 307*)  331
         , (* 308*)   68 , (* 309*)   79 , (* 310*)   60 , (* 311*)   80
         , (* 312*)  109 , (* 313*)  332 , (* 314*)    0 , (* 315*)  328
         , (* 316*)   74 , (* 317*)   75 , (* 318*)  114 , (* 319*)  115
         , (* 320*)  350 , (* 321*)   64 , (* 322*)   78 , (* 323*)  331
         , (* 324*)   68 , (* 325*)   79 , (* 326*)   60 , (* 327*)   80
         , (* 328*)   51 , (* 329*)  332 , (* 330*)    0 , (* 331*)  328
         , (* 332*)   74 , (* 333*)   75 , (* 334*)  303 , (* 335*)  136
         , (* 336*)   83 , (* 337*)  337 , (* 338*)   66 , (* 339*)  331
         , (* 340*)   68 , (* 341*)   79 , (* 342*)   60 , (* 343*)   80
         , (* 344*)    0 , (* 345*)  332 , (* 346*)    0 , (* 347*)  328
         , (* 348*)   74 , (* 349*)   75 , (* 350*)    0 , (* 351*)  148
         , (* 352*)  330 , (* 353*)  121 , (* 354*)  361 , (* 355*)  123
         , (* 356*)   60 , (* 357*)  101 , (* 358*)  102 , (* 359*)  355
         , (* 360*)  104 , (* 361*)  366 , (* 362*)  146 , (* 363*)  130
         , (* 364*)  134 , (* 365*)  132 , (* 366*)    0 , (* 367*)  139
         , (* 368*)  333 , (* 369*)    0 , (* 370*)  359 , (* 371*)   53
         , (* 372*)  109 , (* 373*)   64 , (* 374*)   78 , (* 375*)  331
         , (* 376*)   68 , (* 377*)   79 , (* 378*)    0 , (* 379*)   80
         , (* 380*)   51 , (* 381*)  332 , (* 382*)  335 , (* 383*)  328
         , (* 384*)   74 , (* 385*)   75 , (* 386*)   60 , (* 387*)  161
         , (* 388*)  385 , (* 389*)  326 , (* 390*)   68 , (* 391*)   79
         , (* 392*)    0 , (* 393*)   80 , (* 394*)    0 , (* 395*)  332
         , (* 396*)    0 , (* 397*)  328 , (* 398*)   74 , (* 399*)   75
         , (* 400*)   70 , (* 401*)    0 , (* 402*)   80 , (* 403*)    0
         , (* 404*)  332 , (* 405*)    0 , (* 406*)  328 , (* 407*)   74
         , (* 408*)   75 , (* 409*)   72 , (* 410*)    0 , (* 411*)  332
         , (* 412*)  343 , (* 413*)  328 , (* 414*)   74 , (* 415*)   75
         , (* 416*)    0 , (* 417*)  327 , (* 418*)    0 , (* 419*)  328
         , (* 420*)   74 , (* 421*)   75 , (* 422*)  143 , (* 423*)   53
         , (* 424*)    0 , (* 425*)   64 , (* 426*)   78 , (* 427*)  331
         , (* 428*)   68 , (* 429*)   79 , (* 430*)    0 , (* 431*)   80
         , (* 432*)   51 , (* 433*)  332 , (* 434*)    0 , (* 435*)  328
         , (* 436*)   74 , (* 437*)   75 , (* 438*)    0 , (* 439*)   81
         , (* 440*)    0 , (* 441*)   64 , (* 442*)   78 , (* 443*)  331
         , (* 444*)   68 , (* 445*)   79 , (* 446*)    0 , (* 447*)   80
         , (* 448*)    0 , (* 449*)  332 , (* 450*)   60 , (* 451*)  328
         , (* 452*)   74 , (* 453*)   75 , (* 454*)    0 , (* 455*)   64
         , (* 456*)   78 , (* 457*)  331 , (* 458*)   68 , (* 459*)   79
         , (* 460*)    0 , (* 461*)   80 , (* 462*)    0 , (* 463*)  332
         , (* 464*)    0 , (* 465*)  328 , (* 466*)   74 , (* 467*)   75
         , (* 468*)  303 , (* 469*)   45 , (* 470*)  150 , (* 471*)  336
         , (* 472*)  303 , (* 473*)  136 , (* 474*)  324 , (* 475*)   53
         , (* 476*)  352 , (* 477*)    0 , (* 478*)    0 , (* 479*)  346
         , (* 480*)    0 , (* 481*)    0 , (* 482*)    0 , (* 483*)    0
         , (* 484*)    0 , (* 485*)   64 , (* 486*)   78 , (* 487*)  331
         , (* 488*)   68 , (* 489*)   79 , (* 490*)    0 , (* 491*)   80
         , (* 492*)    0 , (* 493*)  332 , (* 494*)   51 , (* 495*)  328
         , (* 496*)   74 , (* 497*)   75 , (* 498*)   95 , (* 499*)   88
         , (* 500*)    0 , (* 501*)    0 , (* 502*)  370 , (* 503*)    0
         , (* 504*)  138 , (* 505*)  140 , (* 506*)    0 , (* 507*)    0
         , (* 508*)   60 , (* 509*)  305 , (* 510*)  306 , (* 511*)  307
         , (* 512*)  308 , (* 513*)  309 , (* 514*)  310 , (* 515*)  311
         , (* 516*)  312 , (* 517*)  313 , (* 518*)  314 , (* 519*)  315
         , (* 520*)  316 , (* 521*)  317 , (* 522*)  318 , (* 523*)  319
         , (* 524*)  320 , (* 525*)   46 , (* 526*)    0 , (* 527*)  323
         , (* 528*)  303 , (* 529*)   45 , (* 530*)   60 , (* 531*)    0
         , (* 532*)   50 , (* 533*)  372 , (* 534*)  362 , (* 535*)  142
         , (* 536*)  144 , (* 537*)   53 , (* 538*)    0 , (* 539*)  348
         , (* 540*)    0 , (* 541*)    0 , (* 542*)    0 , (* 543*)   90
         , (* 544*)   93 , (* 545*)   94 , (* 546*)  108 , (* 547*)    0
         , (* 548*)    0 , (* 549*)   64 , (* 550*)   78 , (* 551*)  331
         , (* 552*)   68 , (* 553*)   79 , (* 554*)    0 , (* 555*)   80
         , (* 556*)  364 , (* 557*)  332 , (* 558*)    0 , (* 559*)  328
         , (* 560*)   74 , (* 561*)   75 , (* 562*)    0 , (* 563*)    0
         , (* 564*)    0 , (* 565*)    0 , (* 566*)    0 , (* 567*)    0
         , (* 568*)    0 , (* 569*)  305 , (* 570*)  306 , (* 571*)  307
         , (* 572*)  308 , (* 573*)  309 , (* 574*)  310 , (* 575*)  311
         , (* 576*)  312 , (* 577*)  313 , (* 578*)  314 , (* 579*)  315
         , (* 580*)  316 , (* 581*)  317 , (* 582*)  318 , (* 583*)  319
         , (* 584*)  320 , (* 585*)   46 , (* 586*)    0 , (* 587*)  323
         , (* 588*)    0 , (* 589*)    0 , (* 590*)   60 , (* 591*)    0
         , (* 592*)   50 , (* 593*)    0 , (* 594*)    0 , (* 595*)    0
         , (* 596*)    0 , (* 597*)    0 , (* 598*)    0 , (* 599*)    0
         , (* 600*)    0 , (* 601*)  303 , (* 602*)   45 , (* 603*)   90
         , (* 604*)   93 , (* 605*)   94 , (* 606*)  108 , (* 607*)   64
         , (* 608*)   78 , (* 609*)  331 , (* 610*)   68 , (* 611*)   79
         , (* 612*)  367 , (* 613*)   80 , (* 614*)  192 , (* 615*)  332
         , (* 616*)  375 , (* 617*)  328 , (* 618*)   74 , (* 619*)   75
         , (* 620*)    0 , (* 621*)    0 , (* 622*)    0 , (* 623*)    0
         , (* 624*)    0 , (* 625*)  300 , (* 626*)    0 , (* 627*)    0
         , (* 628*)   19 , (* 629*)   64 , (* 630*)   78 , (* 631*)  331
         , (* 632*)   68 , (* 633*)   79 , (* 634*)  151 , (* 635*)   80
         , (* 636*)    0 , (* 637*)  332 , (* 638*)    0 , (* 639*)  328
         , (* 640*)   74 , (* 641*)   75 , (* 642*)  305 , (* 643*)  306
         , (* 644*)  307 , (* 645*)  308 , (* 646*)  309 , (* 647*)  310
         , (* 648*)  311 , (* 649*)  312 , (* 650*)  313 , (* 651*)  314
         , (* 652*)  315 , (* 653*)  316 , (* 654*)  317 , (* 655*)  318
         , (* 656*)  319 , (* 657*)  320 , (* 658*)   46 , (* 659*)    0
         , (* 660*)  323 , (* 661*)  303 , (* 662*)   45 , (* 663*)  153
         , (* 664*)   36 , (* 665*)   50 , (* 666*)  365 , (* 667*)    0
         , (* 668*)    0 , (* 669*)    0 , (* 670*)   60 , (* 671*)    0
         , (* 672*)  369 , (* 673*)  129 , (* 674*)    0 , (* 675*)  368
         , (* 676*)   90 , (* 677*)   93 , (* 678*)   94 , (* 679*)  108
         , (* 680*)  135 , (* 681*)    0 , (* 682*)  371 , (* 683*)    0
         , (* 684*)    0 , (* 685*)  141 , (* 686*)    0 , (* 687*)  373
         , (* 688*)    0 , (* 689*)   64 , (* 690*)   78 , (* 691*)  331
         , (* 692*)   68 , (* 693*)   79 , (* 694*)    0 , (* 695*)   80
         , (* 696*)  154 , (* 697*)  332 , (* 698*)   60 , (* 699*)  328
         , (* 700*)   74 , (* 701*)   75 , (* 702*)  305 , (* 703*)  306
         , (* 704*)  307 , (* 705*)  308 , (* 706*)  309 , (* 707*)  310
         , (* 708*)  311 , (* 709*)  312 , (* 710*)  313 , (* 711*)  314
         , (* 712*)  315 , (* 713*)  316 , (* 714*)  317 , (* 715*)  318
         , (* 716*)  319 , (* 717*)  320 , (* 718*)   46 , (* 719*)    0
         , (* 720*)  323 , (* 721*)    0 , (* 722*)    0 , (* 723*)    0
         , (* 724*)  154 , (* 725*)   50 , (* 726*)    0 , (* 727*)    0
         , (* 728*)    0 , (* 729*)    0 , (* 730*)    0 , (* 731*)    0
         , (* 732*)    0 , (* 733*)  150 , (* 734*)  174 , (* 735*)    0
         , (* 736*)   90 , (* 737*)   93 , (* 738*)   94 , (* 739*)  108
         , (* 740*)  145 , (* 741*)   60 , (* 742*)  380 , (* 743*)    0
         , (* 744*)    0 , (* 745*)    0 , (* 746*)    0 , (* 747*)    0
         , (* 748*)    0 , (* 749*)    0 , (* 750*)    0 , (* 751*)    0
         , (* 752*)    0 , (* 753*)    0 , (* 754*)    0 , (* 755*)    0
         , (* 756*)    0 , (* 757*)    0 , (* 758*)    0 , (* 759*)    0
         , (* 760*)    0 , (* 761*)    0 , (* 762*)  381 , (* 763*)  382
         , (* 764*)  158 , (* 765*)    0 , (* 766*)    0 , (* 767*)  154
         , (* 768*)    0 , (* 769*)   64 , (* 770*)   78 , (* 771*)  331
         , (* 772*)   68 , (* 773*)   79 , (* 774*)    0 , (* 775*)   80
         , (* 776*)    0 , (* 777*)  332 , (* 778*)    0 , (* 779*)  328
         , (* 780*)   74 , (* 781*)   75 , (* 782*)    0 , (* 783*)    0
         , (* 784*)    0 , (* 785*)    0 , (* 786*)  172 , (* 787*)    0
         , (* 788*)    0 , (* 789*)    0 , (* 790*)  156 , (* 791*)  379
         , (* 792*)  377 , (* 793*)    0 , (* 794*)    0 , (* 795*)    0
         , (* 796*)    0 , (* 797*)   64 , (* 798*)   78 , (* 799*)  331
         , (* 800*)   68 , (* 801*)   79 , (* 802*)    0 , (* 803*)   80
         , (* 804*)    0 , (* 805*)  332 , (* 806*)    0 , (* 807*)  328
         , (* 808*)   74 , (* 809*)   75 , (* 810*)    0 , (* 811*)    0
         , (* 812*)   36 , (* 813*)    0 , (* 814*)  365 , (* 815*)    0
         , (* 816*)   36 , (* 817*)    0 , (* 818*)  365 , (* 819*)  376
         , (* 820*)  377 , (* 821*)  129 , (* 822*)    0 , (* 823*)  368
         , (* 824*)    0 , (* 825*)  129 , (* 826*)    0 , (* 827*)  368
         , (* 828*)  135 , (* 829*)    0 , (* 830*)  371 , (* 831*)    0
         , (* 832*)  135 , (* 833*)  141 , (* 834*)  371 , (* 835*)  373
         , (* 836*)  184 , (* 837*)  141 , (* 838*)    0 , (* 839*)  373
         , (* 840*)   64 , (* 841*)   78 , (* 842*)  331 , (* 843*)   68
         , (* 844*)   79 , (* 845*)    0 , (* 846*)   80 , (* 847*)    0
         , (* 848*)  332 , (* 849*)    0 , (* 850*)  328 , (* 851*)   74
         , (* 852*)   75 , (* 853*)    0 , (* 854*)    0 , (* 855*)  300
         , (* 856*)    0 , (* 857*)    0 , (* 858*)   19 , (* 859*)    0
         , (* 860*)    0 , (* 861*)  156 , (* 862*)  379 , (* 863*)  377
         , (* 864*)    0 , (* 865*)    0 , (* 866*)   36 , (* 867*)    0
         , (* 868*)  365 , (* 869*)    0 , (* 870*)    0 , (* 871*)    0
         , (* 872*)    0 , (* 873*)    0 , (* 874*)    0 , (* 875*)  129
         , (* 876*)    0 , (* 877*)  368 , (* 878*)    0 , (* 879*)    0
         , (* 880*)    0 , (* 881*)    0 , (* 882*)  135 , (* 883*)    0
         , (* 884*)  371 , (* 885*)    0 , (* 886*)    0 , (* 887*)  141
         , (* 888*)  145 , (* 889*)  373 , (* 890*)  380 , (* 891*)    0
         , (* 892*)  145 , (* 893*)    0 , (* 894*)  380 , (* 895*)    0
         , (* 896*)    0 , (* 897*)    0 , (* 898*)    0 , (* 899*)    0
         , (* 900*)    0 , (* 901*)    0 , (* 902*)    0 , (* 903*)    0
         , (* 904*)    0 , (* 905*)    0 , (* 906*)    0 , (* 907*)    0
         , (* 908*)    0 , (* 909*)    0 , (* 910*)  383 , (* 911*)  382
         , (* 912*)    0 , (* 913*)    0 , (* 914*)  381 , (* 915*)  382
         , (* 916*)  158 , (* 917*)    0 , (* 918*)    0 , (* 919*)    0
         , (* 920*)    0 , (* 921*)    0 , (* 922*)    0 , (* 923*)    0
         , (* 924*)    0 , (* 925*)    0 , (* 926*)    0 , (* 927*)    0
         , (* 928*)    0 , (* 929*)    0 , (* 930*)    0 , (* 931*)    0
         , (* 932*)    0 , (* 933*)    0 , (* 934*)    0 , (* 935*)    0
         , (* 936*)    0 , (* 937*)    0 , (* 938*)    0 , (* 939*)    0
         , (* 940*)    0 , (* 941*)    0 , (* 942*)  145 , (* 943*)    0
         , (* 944*)  380 , (* 945*)    0 , (* 946*)    0 , (* 947*)    0
         , (* 948*)    0 , (* 949*)    0 , (* 950*)    0 , (* 951*)    0
         , (* 952*)    0 , (* 953*)    0 , (* 954*)    0 , (* 955*)    0
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)    0
         , (* 960*)    0 , (* 961*)    0 , (* 962*)    0 , (* 963*)    0
         , (* 964*)  381 , (* 965*)  382 , (* 966*)  158 , (* 967*)    0
         , (* 968*)    0 , (* 969*)    0 , (* 970*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 386(P   1)*)    2 , (*A 387(P   2)*)    1 , (*A 388(P   3)*)    1
         , (*A 389(P   4)*)    1 , (*A 390(P   5)*)    1 , (*A 391(P   6)*)    1
         , (*A 392(P   7)*)    1 , (*A 393(P   8)*)    0 , (*A 394(P   9)*)    0
         , (*A 395(P  10)*)    0 , (*A 396(P  11)*)    0 , (*A 397(P  12)*)    0
         , (*A 398(P  13)*)    0 , (*A 399(P  14)*)    3 , (*A 400(P  15)*)    7
         , (*A 401(P  16)*)    3 , (*A 402(P  17)*)    5 , (*A 403(P  18)*)    3
         , (*A 404(P  19)*)    7 , (*A 405(P  20)*)    4 , (*A 406(P  21)*)    7
         , (*A 407(P  22)*)    3 , (*A 408(P  23)*)    9 , (*A 409(P  24)*)    3
         , (*A 410(P  25)*)    8 , (*A 411(P  26)*)    1 , (*A 412(P  27)*)    0
         , (*A 413(P  28)*)    0 , (*A 414(P  29)*)    1 , (*A 415(P  30)*)    0
         , (*A 416(P  31)*)    1 , (*A 417(P  32)*)    1 , (*A 418(P  33)*)    3
         , (*A 419(P  34)*)    1 , (*A 420(P  35)*)    3 , (*A 421(P  36)*)    3
         , (*A 422(P  37)*)    0 , (*A 423(P  38)*)    0 , (*A 424(P  39)*)    1
         , (*A 425(P  40)*)    1 , (*A 426(P  41)*)    3 , (*A 427(P  42)*)    1
         , (*A 428(P  43)*)    3 , (*A 429(P  44)*)    1 , (*A 430(P  45)*)    1
         , (*A 431(P  46)*)    2 , (*A 432(P  47)*)    0 , (*A 433(P  48)*)    2
         , (*A 434(P  49)*)    3 , (*A 435(P  50)*)    1 , (*A 436(P  51)*)    3
         , (*A 437(P  52)*)    1 , (*A 438(P  53)*)    3 , (*A 439(P  54)*)    3
         , (*A 440(P  55)*)    3 , (*A 441(P  56)*)    1 , (*A 442(P  57)*)    3
         , (*A 443(P  58)*)    0 , (*A 444(P  59)*)    2 , (*A 445(P  60)*)    1
         , (*A 446(P  61)*)    3 , (*A 447(P  62)*)    1 , (*A 448(P  63)*)    3
         , (*A 449(P  64)*)    3 , (*A 450(P  65)*)    2 , (*A 451(P  66)*)    0
         , (*A 452(P  67)*)    1 , (*A 453(P  68)*)    2 , (*A 454(P  69)*)    0
         , (*A 455(P  70)*)    1 , (*A 456(P  71)*)    2 , (*A 457(P  72)*)    3
         , (*A 458(P  73)*)    1 , (*A 459(P  74)*)    4 , (*A 460(P  75)*)    1
         , (*A 461(P  76)*)    1 , (*A 462(P  77)*)    1 , (*A 463(P  78)*)    2
         , (*A 464(P  79)*)    0 , (*A 465(P  80)*)    1 , (*A 466(P  81)*)    2
         , (*A 467(P  82)*)    3 , (*A 468(P  83)*)    1 , (*A 469(P  84)*)    3
         , (*A 470(P  85)*)    1 , (*A 471(P  86)*)    1 , (*A 472(P  87)*)    1
         , (*A 473(P  88)*)    2 , (*A 474(P  89)*)    0 , (*A 475(P  90)*)    1
         , (*A 476(P  91)*)    2 , (*A 477(P  92)*)    3 , (*A 478(P  93)*)    3
         , (*A 479(P  94)*)    1 , (*A 480(P  95)*)    2 , (*A 481(P  96)*)    0
         , (*A 482(P  97)*)    1 , (*A 483(P  98)*)    2 , (*A 484(P  99)*)    3
         , (*A 485(P 100)*)    3 , (*A 486(P 101)*)    1 , (*A 487(P 102)*)    2
         , (*A 488(P 103)*)    0 , (*A 489(P 104)*)    2 , (*A 490(P 105)*)    0
         , (*A 491(P 106)*)    1 , (*A 492(P 107)*)    2 , (*A 493(P 108)*)    1
         , (*A 494(P 109)*)    1 , (*A 495(P 110)*)    1 , (*A 496(P 111)*)    1
         , (*A 497(P 112)*)    1 , (*A 498(P 113)*)    1 , (*A 499(P 114)*)    1
         , (*A 500(P 115)*)    1 , (*A 501(P 116)*)    1 , (*A 502(P 117)*)    1
         , (*A 503(P 118)*)    1 , (*A 504(P 119)*)    1 , (*A 505(P 120)*)    1
         , (*A 506(P 121)*)    1 , (*A 507(P 122)*)    1 , (*A 508(P 123)*)    1
         , (*A 509(P 124)*)    1 , (*A 510(P 125)*)    3 , (*A 511(P 126)*)    0
         , (*A 512(P 127)*)    1 , (*A 513(P 128)*)    1 , (*A 514(P 129)*)    3
         , (*A 515(P 130)*)    1 , (*A 516(P 131)*)    1 , (*A 517(P 132)*)    0
         , (*A 518(P 133)*)    2 , (*A 519(P 134)*)    1 , (*A 520(P 135)*)    3
         , (*A 521(P 136)*)    1 , (*A 522(P 137)*)    3 , (*A 523(P 138)*)    0
         , (*A 524(P 139)*)    1 , (*A 525(P 140)*)    3 , (*A 526(P 141)*)    1
         , (*A 527(P 142)*)    3 , (*A 528(P 143)*)    1 , (*A 529(P 144)*)    2
         , (*A 530(P 145)*)    0 , (*A 531(P 146)*)    1 , (*A 532(P 147)*)    3
         , (*A 533(P 148)*)    1 , (*A 534(P 149)*)    3 , (*A 535(P 150)*)    1
         , (*A 536(P 151)*)    3 , (*A 537(P 152)*)    0 , (*A 538(P 153)*)    1
         , (*A 539(P 154)*)    2 , (*A 540(P 155)*)    0 , (*A 541(P 156)*)    1
         , (*A 542(P 157)*)    1 , (*A 543(P 158)*)    3 , (*A 544(P 159)*)    5
         , (*A 545(P 160)*)    1 , (*A 546(P 161)*)    1 , (*A 547(P 162)*)    2
         , (*A 548(P 163)*)    3 , (*A 549(P 164)*)    3 , (*A 550(P 165)*)    0
         , (*A 551(P 166)*)    2 , (*A 552(P 167)*)    3 , (*A 553(P 168)*)    1
         , (*A 554(P 169)*)    0 , (*A 555(P 170)*)    1 , (*A 556(P 171)*)    1
         , (*A 557(P 172)*)    1 , (*A 558(P 173)*)    4 , (*A 559(P 174)*)    1
         , (*A 560(P 175)*)    2 , (*A 561(P 176)*)    0 , (*A 562(P 177)*)    2
         , (*A 563(P 178)*)    0 , (*A 564(P 179)*)    2 , (*A 565(P 180)*)    0
         , (*A 566(P 181)*)    0 , (*A 567(P 182)*)    2 , (*A 568(P 183)*)    4
         , (*A 569(P 184)*)    2 , (*A 570(P 185)*)    3 , (*A 571(P 186)*)    1
         , (*A 572(P 187)*)    1 , (*A 573(P 188)*)    4 , (*A 574(P 189)*)    1
         , (*A 575(P 190)*)    1 , (*A 576(P 191)*)    3 , (*A 577(P 192)*)    1
         , (*A 578(P 193)*)    3 , (*A 579(P 194)*)    1 , (*A 580(P 195)*)    2
         , (*A 581(P 196)*)    1 , (*A 582(P 197)*)    3 , (*A 583(P 198)*)    1
         , (*A 584(P 199)*)    3 , (*A 585(P 200)*)    1 , (*A 586(P 201)*)    3
         , (*A 587(P 202)*)    1 , (*A 588(P 203)*)    2 , (*A 589(P 204)*)    2
         , (*A 590(P 205)*)    3 , (*A 591(P 206)*)    1 , (*A 592(P 207)*)    2
         , (*A 593(P 208)*)    1 , (*A 594(P 209)*)    3 , (*A 595(P 210)*)    1
         , (*A 596(P 211)*)    3 , (*A 597(P 212)*)    1 , (*A 598(P 213)*)    3
         , (*A 599(P 214)*)    3 , (*A 600(P 215)*)    0 , (*A 601(P 216)*)    1
         , (*A 602(P 217)*)    3 , (*A 603(P 218)*)    1 , (*A 604(P 219)*)    3
         , (*A 605(P 220)*)    1 , (*A 606(P 221)*)    1 , (*A 607(P 222)*)    1
         , (*A 608(P 223)*)    1 , (*A 609(P 224)*)    1 , (*A 610(P 225)*)    1
         , (*A 611(P 226)*)    1 , (*A 612(P 227)*)    1 , (*A 613(P 228)*)    1
         , (*A 614(P 229)*)    1 , (*A 615(P 230)*)    1 , (*A 616(P 231)*)    3
         , (*A 617(P 232)*)    1 , (*A 618(P 233)*)    1 , (*A 619(P 234)*)    1
         , (*A 620(P 235)*)    1 , (*A 621(P 236)*)    1 , (*A 622(P 237)*)    1
         , (*A 623(P 238)*)    1 , (*A 624(P 239)*)    1 , (*A 625(P 240)*)    1
         , (*A 626(P 241)*)    1 , (*A 627(P 242)*)    1 , (*A 628(P 243)*)    1
         , (*A 629(P 244)*)    1 , (*A 630(P 245)*)    1 , (*A 631(P 246)*)    1
         , (*A 632(P 247)*)    1 , (*A 633(P 248)*)    0 , (*A 634(P 249)*)    5
         , (*A 635(P 250)*)    1 , (*A 636(P 251)*)    1 , (*A 637(P 252)*)    1
         , (*A 638(P 253)*)    1 , (*A 639(P 254)*)    1 , (*A 640(P 255)*)    1
         , (*A 641(P 256)*)    0 , (*A 642(P 257)*)    1 , (*A 643(P 258)*)    1
         , (*A 644(P 259)*)    2 , (*A 645(P 260)*)    0 , (*A 646(P 261)*)    2
         , (*A 647(P 262)*)    1 , (*A 648(P 263)*)    3 , (*A 649(P 264)*)    1
         , (*A 650(P 265)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 386(P   1)*)  260 , (*A 387(P   2)*)  109 , (*A 388(P   3)*)  109
         , (*A 389(P   4)*)  109 , (*A 390(P   5)*)  109 , (*A 391(P   6)*)  109
         , (*A 392(P   7)*)  109 , (*A 393(P   8)*)  115 , (*A 394(P   9)*)  116
         , (*A 395(P  10)*)  117 , (*A 396(P  11)*)  118 , (*A 397(P  12)*)  119
         , (*A 398(P  13)*)  120 , (*A 399(P  14)*)  122 , (*A 400(P  15)*)  113
         , (*A 401(P  16)*)  125 , (*A 402(P  17)*)  108 , (*A 403(P  18)*)  127
         , (*A 404(P  19)*)  114 , (*A 405(P  20)*)  129 , (*A 406(P  21)*)  110
         , (*A 407(P  22)*)  131 , (*A 408(P  23)*)  111 , (*A 409(P  24)*)  133
         , (*A 410(P  25)*)  112 , (*A 411(P  26)*)  121 , (*A 412(P  27)*)  121
         , (*A 413(P  28)*)  135 , (*A 414(P  29)*)  136 , (*A 415(P  30)*)  136
         , (*A 416(P  31)*)  137 , (*A 417(P  32)*)  138 , (*A 418(P  33)*)  138
         , (*A 419(P  34)*)  139 , (*A 420(P  35)*)  139 , (*A 421(P  36)*)  140
         , (*A 422(P  37)*)  140 , (*A 423(P  38)*)  141 , (*A 424(P  39)*)  141
         , (*A 425(P  40)*)  142 , (*A 426(P  41)*)  142 , (*A 427(P  42)*)  143
         , (*A 428(P  43)*)  143 , (*A 429(P  44)*)  144 , (*A 430(P  45)*)  144
         , (*A 431(P  46)*)  144 , (*A 432(P  47)*)  124 , (*A 433(P  48)*)  124
         , (*A 434(P  49)*)  145 , (*A 435(P  50)*)  146 , (*A 436(P  51)*)  146
         , (*A 437(P  52)*)  147 , (*A 438(P  53)*)  147 , (*A 439(P  54)*)  148
         , (*A 440(P  55)*)  145 , (*A 441(P  56)*)  149 , (*A 442(P  57)*)  149
         , (*A 443(P  58)*)  128 , (*A 444(P  59)*)  128 , (*A 445(P  60)*)  151
         , (*A 446(P  61)*)  151 , (*A 447(P  62)*)  153 , (*A 448(P  63)*)  132
         , (*A 449(P  64)*)  123 , (*A 450(P  65)*)  155 , (*A 451(P  66)*)  155
         , (*A 452(P  67)*)  156 , (*A 453(P  68)*)  158 , (*A 454(P  69)*)  157
         , (*A 455(P  70)*)  157 , (*A 456(P  71)*)  159 , (*A 457(P  72)*)  159
         , (*A 458(P  73)*)  161 , (*A 459(P  74)*)  160 , (*A 460(P  75)*)  164
         , (*A 461(P  76)*)  164 , (*A 462(P  77)*)  165 , (*A 463(P  78)*)  167
         , (*A 464(P  79)*)  166 , (*A 465(P  80)*)  166 , (*A 466(P  81)*)  168
         , (*A 467(P  82)*)  168 , (*A 468(P  83)*)  170 , (*A 469(P  84)*)  169
         , (*A 470(P  85)*)  171 , (*A 471(P  86)*)  171 , (*A 472(P  87)*)  172
         , (*A 473(P  88)*)  174 , (*A 474(P  89)*)  173 , (*A 475(P  90)*)  173
         , (*A 476(P  91)*)  175 , (*A 477(P  92)*)  175 , (*A 478(P  93)*)  176
         , (*A 479(P  94)*)  177 , (*A 480(P  95)*)  179 , (*A 481(P  96)*)  178
         , (*A 482(P  97)*)  178 , (*A 483(P  98)*)  180 , (*A 484(P  99)*)  180
         , (*A 485(P 100)*)  181 , (*A 486(P 101)*)  182 , (*A 487(P 102)*)  162
         , (*A 488(P 103)*)  162 , (*A 489(P 104)*)  183 , (*A 490(P 105)*)  183
         , (*A 491(P 106)*)  154 , (*A 492(P 107)*)  154 , (*A 493(P 108)*)  154
         , (*A 494(P 109)*)  154 , (*A 495(P 110)*)  154 , (*A 496(P 111)*)  154
         , (*A 497(P 112)*)  154 , (*A 498(P 113)*)  154 , (*A 499(P 114)*)  154
         , (*A 500(P 115)*)  154 , (*A 501(P 116)*)  154 , (*A 502(P 117)*)  154
         , (*A 503(P 118)*)  154 , (*A 504(P 119)*)  154 , (*A 505(P 120)*)  154
         , (*A 506(P 121)*)  154 , (*A 507(P 122)*)  154 , (*A 508(P 123)*)  154
         , (*A 509(P 124)*)  200 , (*A 510(P 125)*)  202 , (*A 511(P 126)*)  201
         , (*A 512(P 127)*)  201 , (*A 513(P 128)*)  203 , (*A 514(P 129)*)  203
         , (*A 515(P 130)*)  204 , (*A 516(P 131)*)  154 , (*A 517(P 132)*)  205
         , (*A 518(P 133)*)  205 , (*A 519(P 134)*)  206 , (*A 520(P 135)*)  206
         , (*A 521(P 136)*)  207 , (*A 522(P 137)*)  154 , (*A 523(P 138)*)  208
         , (*A 524(P 139)*)  208 , (*A 525(P 140)*)  208 , (*A 526(P 141)*)  209
         , (*A 527(P 142)*)  209 , (*A 528(P 143)*)  211 , (*A 529(P 144)*)  210
         , (*A 530(P 145)*)  213 , (*A 531(P 146)*)  213 , (*A 532(P 147)*)  213
         , (*A 533(P 148)*)  214 , (*A 534(P 149)*)  214 , (*A 535(P 150)*)  216
         , (*A 536(P 151)*)  215 , (*A 537(P 152)*)  217 , (*A 538(P 153)*)  217
         , (*A 539(P 154)*)  217 , (*A 540(P 155)*)  218 , (*A 541(P 156)*)  218
         , (*A 542(P 157)*)  218 , (*A 543(P 158)*)  220 , (*A 544(P 159)*)  219
         , (*A 545(P 160)*)  154 , (*A 546(P 161)*)  221 , (*A 547(P 162)*)  154
         , (*A 548(P 163)*)  212 , (*A 549(P 164)*)  222 , (*A 550(P 165)*)  225
         , (*A 551(P 166)*)  225 , (*A 552(P 167)*)  226 , (*A 553(P 168)*)  226
         , (*A 554(P 169)*)  228 , (*A 555(P 170)*)  228 , (*A 556(P 171)*)  228
         , (*A 557(P 172)*)  228 , (*A 558(P 173)*)  227 , (*A 559(P 174)*)  229
         , (*A 560(P 175)*)  230 , (*A 561(P 176)*)  230 , (*A 562(P 177)*)  231
         , (*A 563(P 178)*)  231 , (*A 564(P 179)*)  223 , (*A 565(P 180)*)  223
         , (*A 566(P 181)*)  224 , (*A 567(P 182)*)  224 , (*A 568(P 183)*)  224
         , (*A 569(P 184)*)  232 , (*A 570(P 185)*)  234 , (*A 571(P 186)*)  233
         , (*A 572(P 187)*)  235 , (*A 573(P 188)*)  233 , (*A 574(P 189)*)  163
         , (*A 575(P 190)*)  236 , (*A 576(P 191)*)  236 , (*A 577(P 192)*)  237
         , (*A 578(P 193)*)  237 , (*A 579(P 194)*)  238 , (*A 580(P 195)*)  238
         , (*A 581(P 196)*)  239 , (*A 582(P 197)*)  239 , (*A 583(P 198)*)  240
         , (*A 584(P 199)*)  240 , (*A 585(P 200)*)  242 , (*A 586(P 201)*)  242
         , (*A 587(P 202)*)  244 , (*A 588(P 203)*)  244 , (*A 589(P 204)*)  246
         , (*A 590(P 205)*)  246 , (*A 591(P 206)*)  246 , (*A 592(P 207)*)  246
         , (*A 593(P 208)*)  246 , (*A 594(P 209)*)  248 , (*A 595(P 210)*)  249
         , (*A 596(P 211)*)  249 , (*A 597(P 212)*)  250 , (*A 598(P 213)*)  250
         , (*A 599(P 214)*)  249 , (*A 600(P 215)*)  251 , (*A 601(P 216)*)  251
         , (*A 602(P 217)*)  251 , (*A 603(P 218)*)  252 , (*A 604(P 219)*)  252
         , (*A 605(P 220)*)  248 , (*A 606(P 221)*)  248 , (*A 607(P 222)*)  248
         , (*A 608(P 223)*)  248 , (*A 609(P 224)*)  248 , (*A 610(P 225)*)  248
         , (*A 611(P 226)*)  248 , (*A 612(P 227)*)  248 , (*A 613(P 228)*)  248
         , (*A 614(P 229)*)  248 , (*A 615(P 230)*)  248 , (*A 616(P 231)*)  248
         , (*A 617(P 232)*)  241 , (*A 618(P 233)*)  241 , (*A 619(P 234)*)  241
         , (*A 620(P 235)*)  241 , (*A 621(P 236)*)  241 , (*A 622(P 237)*)  241
         , (*A 623(P 238)*)  241 , (*A 624(P 239)*)  243 , (*A 625(P 240)*)  243
         , (*A 626(P 241)*)  243 , (*A 627(P 242)*)  245 , (*A 628(P 243)*)  245
         , (*A 629(P 244)*)  245 , (*A 630(P 245)*)  245 , (*A 631(P 246)*)  247
         , (*A 632(P 247)*)  247 , (*A 633(P 248)*)  253 , (*A 634(P 249)*)  134
         , (*A 635(P 250)*)  254 , (*A 636(P 251)*)  254 , (*A 637(P 252)*)  254
         , (*A 638(P 253)*)  254 , (*A 639(P 254)*)  254 , (*A 640(P 255)*)  254
         , (*A 641(P 256)*)  126 , (*A 642(P 257)*)  126 , (*A 643(P 258)*)  256
         , (*A 644(P 259)*)  256 , (*A 645(P 260)*)  130 , (*A 646(P 261)*)  130
         , (*A 647(P 262)*)  257 , (*A 648(P 263)*)  257 , (*A 649(P 264)*)  258
         , (*A 650(P 265)*)  259
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   95 , (*:  13*)   30 , (*:  14*)   95
         , (*:  15*)   66 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   71 , (*:  22*)   95 , (*:  23*)   95
         , (*:  24*)   69 , (*:  25*)   70 , (*:  26*)   70
         , (*:  27*)   95 , (*:  28*)   19 , (*:  29*)   95
         , (*:  30*)   67 , (*:  31*)   19 , (*:  32*)   95
         , (*:  33*)   19 , (*:  34*)   95 , (*:  35*)   67
         , (*:  36*)    9 , (*:  37*)    9 , (*:  38*)   66
         , (*:  39*)   68 , (*:  40*)   95 , (*:  41*)   95
         , (*:  42*)   52 , (*:  43*)   11 , (*:  44*)   95
         , (*:  45*)   19 , (*:  46*)   76 , (*:  47*)   76
         , (*:  48*)   76 , (*:  49*)   95 , (*:  50*)   19
         , (*:  51*)   19 , (*:  52*)   95 , (*:  53*)   19
         , (*:  54*)   19 , (*:  55*)   96 , (*:  56*)   96
         , (*:  57*)   96 , (*:  58*)   67 , (*:  59*)   95
         , (*:  60*)    5 , (*:  61*)   70 , (*:  62*)   67
         , (*:  63*)   96 , (*:  64*)   19 , (*:  65*)   96
         , (*:  66*)   19 , (*:  67*)   96 , (*:  68*)    5
         , (*:  69*)   96 , (*:  70*)    5 , (*:  71*)   96
         , (*:  72*)    5 , (*:  73*)   96 , (*:  74*)   96
         , (*:  75*)    5 , (*:  76*)   95 , (*:  77*)   96
         , (*:  78*)   19 , (*:  79*)    5 , (*:  80*)    5
         , (*:  81*)   81 , (*:  82*)   96 , (*:  83*)   70
         , (*:  84*)   96 , (*:  85*)   70 , (*:  86*)    5
         , (*:  87*)   19 , (*:  88*)   19 , (*:  89*)   19
         , (*:  90*)   39 , (*:  91*)   39 , (*:  92*)   39
         , (*:  93*)   19 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   19
         , (*:  99*)   69 , (*: 100*)   70 , (*: 101*)   70
         , (*: 102*)   70 , (*: 103*)   70 , (*: 104*)   95
         , (*: 105*)   66 , (*: 106*)   66 , (*: 107*)   95
         , (*: 108*)   69 , (*: 109*)   19 , (*: 110*)   95
         , (*: 111*)   19 , (*: 112*)    6 , (*: 113*)   76
         , (*: 114*)   76 , (*: 115*)   76 , (*: 116*)   95
         , (*: 117*)   66 , (*: 118*)   96 , (*: 119*)   19
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   68 , (*: 124*)   96 , (*: 125*)   19
         , (*: 126*)   68 , (*: 127*)   96 , (*: 128*)   66
         , (*: 129*)    9 , (*: 130*)    9 , (*: 131*)   66
         , (*: 132*)   68 , (*: 133*)   95 , (*: 134*)   66
         , (*: 135*)    9 , (*: 136*)   68 , (*: 137*)   95
         , (*: 138*)    9 , (*: 139*)   66 , (*: 140*)   66
         , (*: 141*)    9 , (*: 142*)    9 , (*: 143*)   66
         , (*: 144*)   66 , (*: 145*)   69 , (*: 146*)   66
         , (*: 147*)    9 , (*: 148*)   95 , (*: 149*)   66
         , (*: 150*)    9 , (*: 151*)    9 , (*: 152*)   19
         , (*: 153*)   19 , (*: 154*)   74 , (*: 155*)   96
         , (*: 156*)   19 , (*: 157*)   19 , (*: 158*)    9
         , (*: 159*)   66 , (*: 160*)   66 , (*: 161*)   66
         , (*: 162*)   95 , (*: 163*)   95 , (*: 164*)   69
         , (*: 165*)   19 , (*: 166*)   95 , (*: 167*)   67
         , (*: 168*)   66 , (*: 169*)    9 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)   19
         , (*: 174*)   19 , (*: 175*)   95 , (*: 176*)   67
         , (*: 177*)   69 , (*: 178*)   69 , (*: 179*)   70
         , (*: 180*)   70 , (*: 181*)   66 , (*: 182*)   14
         , (*: 183*)   19 , (*: 184*)   19 , (*: 185*)   95
         , (*: 186*)   67 , (*: 187*)   69 , (*: 188*)   69
         , (*: 189*)   66 , (*: 190*)    9 , (*: 191*)    9
         , (*: 192*)   95 , (*: 193*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 194)*)  407 (*P21*) , (*RR: 195)*)  409 (*P23*)
         , (*RR: 196)*)  411 (*P25*) , (*RR: 197)*)  399 (*P13*)
         , (*RR: 198)*)  403 (*P17*) , (*RR: 199)*)  439 (*P53*)
         , (*RR: 200)*)  438 (*P52*) , (*RR: 201)*)  434 (*P48*)
         , (*RR: 202)*)  441 (*P55*) , (*RR: 203)*)  440 (*P54*)
         , (*RR: 204)*)  442 (*P56*) , (*RR: 205)*)  449 (*P63*)
         , (*RR: 206)*)  416 (*P30*) , (*RR: 207)*)  400 (*P14*)
         , (*RR: 208)*)  452 (*P66*) , (*RR: 209)*)  569 (*P183*)
         , (*RR: 210)*)  472 (*P86*) , (*RR: 211)*)  462 (*P76*)
         , (*RR: 212)*)  479 (*P93*) , (*RR: 213)*)  402 (*P16*)
         , (*RR: 214)*)  458 (*P72*) , (*RR: 215)*)  457 (*P71*)
         , (*RR: 216)*)  546 (*P160*) , (*RR: 217)*)  521 (*P135*)
         , (*RR: 218)*)  430 (*P44*) , (*RR: 219)*)  431 (*P45*)
         , (*RR: 220)*)  509 (*P123*) , (*RR: 221)*)  428 (*P42*)
         , (*RR: 222)*)  515 (*P129*) , (*RR: 223)*)  510 (*P124*)
         , (*RR: 224)*)  419 (*P33*) , (*RR: 225)*)  420 (*P34*)
         , (*RR: 226)*)  631 (*P245*) , (*RR: 227)*)  632 (*P246*)
         , (*RR: 228)*)  594 (*P208*) , (*RR: 229)*)  605 (*P219*)
         , (*RR: 230)*)  606 (*P220*) , (*RR: 231)*)  607 (*P221*)
         , (*RR: 232)*)  608 (*P222*) , (*RR: 233)*)  609 (*P223*)
         , (*RR: 234)*)  610 (*P224*) , (*RR: 235)*)  611 (*P225*)
         , (*RR: 236)*)  614 (*P228*) , (*RR: 237)*)  615 (*P229*)
         , (*RR: 238)*)  612 (*P226*) , (*RR: 239)*)  613 (*P227*)
         , (*RR: 240)*)  623 (*P237*) , (*RR: 241)*)  617 (*P231*)
         , (*RR: 242)*)  618 (*P232*) , (*RR: 243)*)  619 (*P233*)
         , (*RR: 244)*)  620 (*P234*) , (*RR: 245)*)  621 (*P235*)
         , (*RR: 246)*)  622 (*P236*) , (*RR: 247)*)  624 (*P238*)
         , (*RR: 248)*)  625 (*P239*) , (*RR: 249)*)  626 (*P240*)
         , (*RR: 250)*)  629 (*P243*) , (*RR: 251)*)  630 (*P244*)
         , (*RR: 252)*)  627 (*P241*) , (*RR: 253)*)  628 (*P242*)
         , (*RR: 254)*)  590 (*P204*) , (*RR: 255)*)  596 (*P210*)
         , (*RR: 256)*)  595 (*P209*) , (*RR: 257)*)  599 (*P213*)
         , (*RR: 258)*)  616 (*P230*) , (*RR: 259)*)  522 (*P136*)
         , (*RR: 260)*)  543 (*P157*) , (*RR: 261)*)  528 (*P142*)
         , (*RR: 262)*)  557 (*P171*) , (*RR: 263)*)  555 (*P169*)
         , (*RR: 264)*)  556 (*P170*) , (*RR: 265)*)  549 (*P163*)
         , (*RR: 266)*)  567 (*P181*) , (*RR: 267)*)  568 (*P182*)
         , (*RR: 268)*)  535 (*P149*) , (*RR: 269)*)  544 (*P158*)
         , (*RR: 270)*)  456 (*P70*) , (*RR: 271)*)  468 (*P82*)
         , (*RR: 272)*)  467 (*P81*) , (*RR: 273)*)  460 (*P74*)
         , (*RR: 274)*)  461 (*P75*) , (*RR: 275)*)  466 (*P80*)
         , (*RR: 276)*)  470 (*P84*) , (*RR: 277)*)  471 (*P85*)
         , (*RR: 278)*)  477 (*P91*) , (*RR: 279)*)  476 (*P90*)
         , (*RR: 280)*)  484 (*P98*) , (*RR: 281)*)  483 (*P97*)
         , (*RR: 282)*)  571 (*P185*) , (*RR: 283)*)  572 (*P186*)
         , (*RR: 284)*)  573 (*P187*) , (*RR: 285)*)  634 (*P248*)
         , (*RR: 286)*)  447 (*P61*) , (*RR: 287)*)  404 (*P18*)
         , (*RR: 288)*)  406 (*P20*) , (*RR: 289)*)  448 (*P62*)
         , (*RR: 290)*)  408 (*P22*) , (*RR: 291)*)  410 (*P24*)
         , (*RR: 292)*)  387 (*P1*) , (*RR: 293)*)  388 (*P2*)
         , (*RR: 294)*)  389 (*P3*) , (*RR: 295)*)  390 (*P4*)
         , (*RR: 296)*)  391 (*P5*) , (*RR: 297)*)  392 (*P6*)
         , (*RR: 298)*)  436 (*P50*) , (*RR: 299)*)  435 (*P49*)
         , (*RR: 300)*)  433 (*P47*) , (*RR: 301)*)  421 (*P35*)
         , (*RR: 302)*)  453 (*P67*) , (*RR: 303)*)  429 (*P43*)
         , (*RR: 304)*)  492 (*P106*) , (*RR: 305)*)  493 (*P107*)
         , (*RR: 306)*)  494 (*P108*) , (*RR: 307)*)  495 (*P109*)
         , (*RR: 308)*)  496 (*P110*) , (*RR: 309)*)  497 (*P111*)
         , (*RR: 310)*)  498 (*P112*) , (*RR: 311)*)  499 (*P113*)
         , (*RR: 312)*)  500 (*P114*) , (*RR: 313)*)  501 (*P115*)
         , (*RR: 314)*)  502 (*P116*) , (*RR: 315)*)  503 (*P117*)
         , (*RR: 316)*)  504 (*P118*) , (*RR: 317)*)  505 (*P119*)
         , (*RR: 318)*)  506 (*P120*) , (*RR: 319)*)  507 (*P121*)
         , (*RR: 320)*)  508 (*P122*) , (*RR: 321)*)  514 (*P128*)
         , (*RR: 322)*)  513 (*P127*) , (*RR: 323)*)  516 (*P130*)
         , (*RR: 324)*)  519 (*P133*) , (*RR: 325)*)  604 (*P218*)
         , (*RR: 326)*)  578 (*P192*) , (*RR: 327)*)  586 (*P200*)
         , (*RR: 328)*)  587 (*P201*) , (*RR: 329)*)  588 (*P202*)
         , (*RR: 330)*)  597 (*P211*) , (*RR: 331)*)  577 (*P191*)
         , (*RR: 332)*)  585 (*P199*) , (*RR: 333)*)  598 (*P212*)
         , (*RR: 334)*)  589 (*P203*) , (*RR: 335)*)  603 (*P217*)
         , (*RR: 336)*)  602 (*P216*) , (*RR: 337)*)  601 (*P215*)
         , (*RR: 338)*)  592 (*P206*) , (*RR: 339)*)  489 (*P103*)
         , (*RR: 340)*)  485 (*P99*) , (*RR: 341)*)  520 (*P134*)
         , (*RR: 342)*)  518 (*P132*) , (*RR: 343)*)  539 (*P153*)
         , (*RR: 344)*)  527 (*P141*) , (*RR: 345)*)  552 (*P166*)
         , (*RR: 346)*)  560 (*P174*) , (*RR: 347)*)  547 (*P161*)
         , (*RR: 348)*)  564 (*P178*) , (*RR: 349)*)  426 (*P40*)
         , (*RR: 350)*)  425 (*P39*) , (*RR: 351)*)  548 (*P162*)
         , (*RR: 352)*)  562 (*P176*) , (*RR: 353)*)  558 (*P172*)
         , (*RR: 354)*)  551 (*P165*) , (*RR: 355)*)  553 (*P167*)
         , (*RR: 356)*)  529 (*P143*) , (*RR: 357)*)  525 (*P139*)
         , (*RR: 358)*)  526 (*P140*) , (*RR: 359)*)  534 (*P148*)
         , (*RR: 360)*)  532 (*P146*) , (*RR: 361)*)  533 (*P147*)
         , (*RR: 362)*)  536 (*P150*) , (*RR: 363)*)  487 (*P101*)
         , (*RR: 364)*)  459 (*P73*) , (*RR: 365)*)  635 (*P249*)
         , (*RR: 366)*)  463 (*P77*) , (*RR: 367)*)  469 (*P83*)
         , (*RR: 368)*)  636 (*P250*) , (*RR: 369)*)  478 (*P92*)
         , (*RR: 370)*)  473 (*P87*) , (*RR: 371)*)  640 (*P254*)
         , (*RR: 372)*)  480 (*P94*) , (*RR: 373)*)  638 (*P252*)
         , (*RR: 374)*)  570 (*P184*) , (*RR: 375)*)  650 (*P264*)
         , (*RR: 376)*)  648 (*P262*) , (*RR: 377)*)  649 (*P263*)
         , (*RR: 378)*)  646 (*P260*) , (*RR: 379)*)  647 (*P261*)
         , (*RR: 380)*)  639 (*P253*) , (*RR: 381)*)  643 (*P257*)
         , (*RR: 382)*)  637 (*P251*) , (*RR: 383)*)  644 (*P258*)
         , (*RR: 384)*)  446 (*P60*) , (*RR: 385)*)  445 (*P59*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 78 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 386 => (* P1 _0000_ (260): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 387,292 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 388,293 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 389,294 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 390,295 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 391,296 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 392,297 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 393 => (* P8 InterfaceKind (115): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 115;
                (* line 334 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 394 => (* P9 ModuleKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 337 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 395 => (* P10 GenInterfaceKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 340 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 396 => (* P11 GenModuleKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 343 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 397 => (* P12 InstInterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 346 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 398 => (* P13 InstModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 349 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 399,197 => (* P14 InterfaceLt (122): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 352 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 400,207 => (* P15 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 371 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+5] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 401 => (* P16 InterfaceMiddle (125): InterfaceLt StkSemicolon ImportList .*)
                DEC (yyStackPtr, 3); yyNonterminal := 125;
                (* line 377 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 402,213 => (* P17 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 388 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 403,198 => (* P18 ModuleLt (127): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 411 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         LUnitRef ^ . UntKind := Ukt . UkModule
                           (* ^Could change, if it turns out to be an instantiation. *) ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 404,287 => (* P19 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 432 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+5] . Scan , Ukt . UkInstModule ) ; 
                     
              | 405 => (* P20 ModuleMiddle (129): ModuleLt Exports StkSemicolon ImportList .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 438 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 406,288 => (* P21 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 449 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , LUnitRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 407,194 => (* P22 GenInterfaceLt (131): StkRwGENERIC StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 477 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ;
                       END ; 
                     
              | 408,290 => (* P23 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;
                (* line 497 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                
                     
              | 409,195 => (* P24 GenModuleLt (133): StkRwGENERIC StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 506 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef  ;
                       END ; 
                     
              | 410,291 => (* P25 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList Block StkIdent StkDot .*)
                DEC (yyStackPtr, 8); yyNonterminal := 112;
                (* line 526 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+7] . Scan , Ukt . UkGenModule ) ; 
                     
              | 411,196 => (* P26 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 534 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 412 => (* P27 OptUnsafe (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 535 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 413 => (* P28 CaptureCoord (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 538 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
              | 414 => (* P29 OptSemicolon (136): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;

              | 415 => (* P30 OptSemicolon (136): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 136;

              | 416,206 => (* P31 IdentRef (137): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 137;
                (* line 546 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 417 => (* P32 IdPlusList (138): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 138;
                (* line 550 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 418 => (* P33 IdPlusList (138): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 554 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 419,224 => (* P34 DeclIdListElems (139): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;
                (* line 566 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3Pass1 . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 420,225 => (* P35 DeclIdListElems (139): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;
                (* line 577 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 421,301 => (* P36 IdStarList (140): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 590 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 422 => (* P37 IdStarList (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;
                (* line 592 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 423 => (* P38 QualIdentStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 596 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 424 => (* P39 QualIdentStarList (141): QualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 598 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 425,350 => (* P40 QualIdentPlusList (142): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 600 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 426,349 => (* P41 QualIdentPlusList (142): QualIdentPlusList StkComma QualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 602 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 427 => (* P42 QualIdent (143): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;
                (* line 605 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 428,221 => (* P43 QualIdent (143): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 608 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 429,303 => (* P44 TypeId (144): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;

              | 430,218 => (* P45 TypeId (144): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 617 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 431,219 => (* P46 TypeId (144): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 144;
                (* line 622 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidUNTRACEDROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 432 => (* P47 ImportList (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 433,300 => (* P48 ImportList (124): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 434,201 => (* P49 Import (145): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;

              | 435,299 => (* P50 ImportItemPlusList (146): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;

              | 436,298 => (* P51 ImportItemPlusList (146): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;

              | 437 => (* P52 ImportItem (147): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 639 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface
                                ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                , IsExport := FALSE
                                ) ;
                         FM3ExpImp . ImportIntfASIdent ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan ) ;
                         Pop4 ( ) ; 
                       END (* Block *) 
                     
              | 438,200 => (* P53 ImportItem (147): StkIdent StkRwAS StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;
                (* line 653 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface
                                ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                , IsExport := FALSE
                                ) ;
                         FM3ExpImp . ImportIntfASIdent ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                         Pop8 ( ) ; 
                       END (* Block *) 
                     
              | 439,199 => (* P54 FromImportLt (148): StkRwFROM StkIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 148;
                (* line 668 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ;
                       Pop4 ( ) ; 
                     
              | 440,203 => (* P55 Import (145): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;

              | 441,202 => (* P56 FromImportIdPlusList (149): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 680 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                       Pop4 ( ) ;
                     
              | 442,204 => (* P57 FromImportIdPlusList (149): FromImportPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 149;
                (* line 686 of "FM3Parser.lalr" *)
                 <* ASSERT yyAttributeStack^[yyStackPtr] . PaRefany # NIL *>
                       EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                       Pop4 ( ) ;
                     
              | 443 => (* P58 Exports (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 697 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface 
                                 ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                 , FM3Scanner . Attribute . Position 
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 444 => (* P59 Exports (128): StkRwEXPORTS ExportPlus .*)
                DEC (yyStackPtr, 2); yyNonterminal := 128;

              | 445,385 => (* P60 ExportPlus (151): StkExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 446,384 => (* P61 ExportPlus (151): ExportPlus StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;

              | 447,286 => (* P62 ExportIdent (153): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 717 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 448,289 => (* P63 GenFormalList (132): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 733 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 449,205 => (* P64 GenActualList (123): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 739 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 450 => (* P65 OptConstType (155): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 748 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 451 => (* P66 OptConstType (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 452,208 => (* P67 ConstDeclGroupLt (156): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 759 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 453,302 => (* P68 ConstDeclGroup (158): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 762 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 454 => (* P69 ConstDeclList (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 767 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 455 => (* P70 ConstDeclList (157): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 773 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 456,270 => (* P71 ConstDeclPlus (159): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 778 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 457,215 => (* P72 ConstDeclPlus (159): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 458,214 => (* P73 ConstDeclId (161): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 801 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 459,364 => (* P74 ConstDecl (160): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 808 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 460,273 => (* P75 TypeRelation (164): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 834 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 461,274 => (* P76 TypeRelation (164): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 836 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 462,211 => (* P77 TypeDeclGroupLt (165): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 847 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 463,366 => (* P78 TypeDeclGroup (167): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 850 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 464 => (* P79 TypeDeclList (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 855 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 465 => (* P80 TypeDeclList (166): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 861 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 466,275 => (* P81 TypeDeclPlus (168): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 866 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 467,272 => (* P82 TypeDeclPlus (168): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 168;
                (* line 871 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 468,271 => (* P83 TypeDeclId (170): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 887 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 469,367 => (* P84 TypeDecl (169): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 894 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 470,276 => (* P85 RevelationRelation (171): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 914 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 471,277 => (* P86 RevelationRelation (171): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 916 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 472,210 => (* P87 RevelationGroupLt (172): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 927 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 473,370 => (* P88 RevelationGroup (174): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 930 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 474 => (* P89 RevelationList (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 935 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 475 => (* P90 RevelationList (173): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 941 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 476,279 => (* P91 RevelationPlus (175): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 946 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 477,278 => (* P92 RevelationPlus (175): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 951 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 478,369 => (* P93 Revelation (176): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 967 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 479,212 => (* P94 VarDeclGroupLt (177): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 994 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 480,372 => (* P95 VarDeclGroup (179): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 1008 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 481 => (* P96 VarDeclList (178): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 178;
                (* line 1014 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 482 => (* P97 VarDeclList (178): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 1020 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 483,281 => (* P98 VarDeclPlus (180): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1033 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 484,280 => (* P99 VarDeclPlus (180): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 1038 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 485,340 => (* P100 VarDecl (181): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1056 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 486 => (* P101 VarDeclIds (182): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1084 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 487,363 => (* P102 OptDeclType (162): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 1096 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 488 => (* P103 OptDeclType (162): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 162;
                (* line 1100 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclTypeAbsent ) ; 
                     
              | 489,339 => (* P104 OptDeclValue (183): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1105 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 490 => (* P105 OptDeclValue (183): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 183;
                (* line 1109 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclValAbsent ) ; 
                     
              | 491 => (* P106 Type (154): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 492,304 => (* P107 Type (154): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1119 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 493,305 => (* P108 Type (154): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 494,306 => (* P109 Type (154): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 495,307 => (* P110 Type (154): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 496,308 => (* P111 Type (154): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 497,309 => (* P112 Type (154): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 498,310 => (* P113 Type (154): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 499,311 => (* P114 Type (154): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 500,312 => (* P115 Type (154): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 501,313 => (* P116 Type (154): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 502,314 => (* P117 Type (154): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 503,315 => (* P118 Type (154): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 504,316 => (* P119 Type (154): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 505,317 => (* P120 Type (154): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 506,318 => (* P121 Type (154): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 507,319 => (* P122 Type (154): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 508,320 => (* P123 Type (154): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 509,220 => (* P124 EnumTypeLt (200): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 200;
                (* line 1146 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the enum type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 510,223 => (* P125 EnumType (202): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 202;
                (* line 1162 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 511 => (* P126 EnumLitList (201): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 201;
                (* line 1179 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 512 => (* P127 EnumLitList (201): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 201;
                (* line 1182 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 513,322 => (* P128 EnumLitPlus (203): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 203;
                (* line 1185 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 514,321 => (* P129 EnumLitPlus (203): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 203;
                (* line 1188 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 515,222 => (* P130 EnumLit (204): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1191 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 516,323 => (* P131 Type (154): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 517 => (* P132 FieldDeclList (205): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 205;
                (* line 1214 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 518,342 => (* P133 FieldDeclList (205): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 205;
                (* line 1222 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 519,324 => (* P134 FieldDeclPlus (206): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1231 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 520,341 => (* P135 FieldDeclPlus (206): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 206;
                (* line 1234 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 521,217 => (* P136 RecTypeLt (207): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1246 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 522,259 => (* P137 Type (154): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1274 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 523 => (* P138 MethodDeclList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1296 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 524 => (* P139 MethodDeclList (208): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1304 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 525,357 => (* P140 MethodDeclList (208): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 208;
                (* line 1309 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 526,358 => (* P141 MethodDeclPlus (209): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1318 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 527,344 => (* P142 MethodDeclPlus (209): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1321 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 528,261 => (* P143 MethodDeclLt (211): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1333 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 529,356 => (* P144 MethodDecl (210): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 210;
                (* line 1356 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 530 => (* P145 OverrideList (213): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 213;
                (* line 1386 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 531 => (* P146 OverrideList (213): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1394 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 532,360 => (* P147 OverrideList (213): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1399 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 533,361 => (* P148 OverridePlus (214): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1408 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 534,359 => (* P149 OverridePlus (214): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 214;
                (* line 1411 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 535,268 => (* P150 OverrideLt (216): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1423 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 536,362 => (* P151 Override (215): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1429 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 537 => (* P152 Brand (217): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 217;
                (* line 1441 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 538 => (* P153 Brand (217): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1446 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 539,343 => (* P154 Brand (217): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 217;
                (* line 1451 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 540 => (* P155 Supertype (218): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 218;
                (* line 1458 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 541 => (* P156 Supertype (218): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1464 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 542 => (* P157 Supertype (218): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1473 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 543,260 => (* P158 ObjTypeLt (220): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1484 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 544,269 => (* P159 ObjType (219): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 219;
                (* line 1512 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 545 => (* P160 Type (154): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 546,216 => (* P161 ProcTypeLt (221): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1536 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END (*Block*)
                     
              | 547,347 => (* P162 Type (154): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1551 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 548,351 => (* P163 Signature (212): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 212;
                (* line 1559 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 549,265 => (* P164 Formals (222): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1579 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 550 => (* P165 FormalsList (225): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 225;
                (* line 1598 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 551,354 => (* P166 FormalsList (225): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 225;

              | 552,345 => (* P167 FormalPlus (226): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 226;
                (* line 1603 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 553,355 => (* P168 FormalPlus (226): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 226;
                (* line 1613 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 554 => (* P169 FormalLt (228): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 228;
                (* line 1617 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 555,263 => (* P170 FormalLt (228): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1632 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 556,264 => (* P171 FormalLt (228): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1648 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 557,262 => (* P172 FormalLt (228): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1662 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 558,353 => (* P173 Formal (227): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 227;
                (* line 1679 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , FM3Globals . NextSkipNo
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 559 => (* P174 FormalIds (229): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1737 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 560,346 => (* P175 FormalType (230): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1749 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 561 => (* P176 FormalType (230): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 230;
                (* line 1758 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 562,352 => (* P177 FormalExpr (231): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1766 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 563 => (* P178 FormalExpr (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1775 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 564,348 => (* P179 ResultType (223): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 223;
                (* line 1783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 565 => (* P180 ResultType (223): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 223;
                (* line 1790 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 566 => (* P181 Raises (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1800 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 567,266 => (* P182 Raises (224): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1806 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 568,267 => (* P183 Raises (224): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 224;
                (* line 1813 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 569,209 => (* P184 ProcDeclLt (232): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 232;
                (* line 1820 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN LScopeKind  := Skt . SkFormalsAndBody ; 
                         ELSE LScopeKind  := Skt . SkFormals ;
                         END (*IF*) ; 
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , LScopeKind 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END (*Block*) 
                     
              | 570,374 => (* P185 ProcDecl (234): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 234;
                (* line 1845 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => will have a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => will have no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 571,282 => (* P186 OptProcBody (233): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1889 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 572,283 => (* P187 ProcBodyLt (235): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1898 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 573,284 => (* P188 OptProcBody (233): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 233;
                (* line 1911 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 574 => (* P189 Expr (163): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 575 => (* P190 E0 (236): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;

              | 576 => (* P191 E0 (236): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 236;
                (* line 1935 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 577,331 => (* P192 E1 (237): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;

              | 578,326 => (* P193 E1 (237): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 237;
                (* line 1945 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 579 => (* P194 E2 (238): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 238;

              | 580 => (* P195 E2 (238): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1955 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 581 => (* P196 E3 (239): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;

              | 582 => (* P197 E3 (239): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 239;
                (* line 1961 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 583 => (* P198 E4 (240): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;

              | 584 => (* P199 E4 (240): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1971 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 585,332 => (* P200 E5 (242): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;

              | 586,327 => (* P201 E5 (242): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 242;
                (* line 1981 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 587,328 => (* P202 E6 (244): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 588,329 => (* P203 E6 (244): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 244;
                (* line 1991 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 589,334 => (* P204 E7 (246): E8WOId SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 246;
                (* line 2004 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 590,254 => (* P205 E7 (246): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 2013 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 591 => (* P206 E7 (246): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 592,338 => (* P207 E7 (246): IdentRef SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 246;
                (* line 2024 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 593 => (* P208 E7 (246): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 594,228 => (* P209 E8WOId (248): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 2038 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 595,256 => (* P210 SelectorWODot (249): StkDeref .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2042 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDerefLt ;
                       yySynAttribute . PaInt := 0 (* Meaningless. *) ;
                     
              | 596,255 => (* P211 SelectorWODot (249): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 2048 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubscriptLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 597,330 => (* P212 SsPlusList (250): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2059 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 598,333 => (* P213 SsPlusList (250): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2062 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 599,257 => (* P214 SelectorWODot (249): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 2073 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkCallLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 600 => (* P215 ActualList (251): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 251;
                (* line 2084 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 601,337 => (* P216 ActualList (251): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2087 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 602,336 => (* P217 ActualList (251): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 251;
                (* line 2090 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 603,335 => (* P218 Actual (252): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2100 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 604,325 => (* P219 Actual (252): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2105 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 605,229 => (* P220 E8WOId (248): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2116 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 606,230 => (* P221 E8WOId (248): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2123 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 607,231 => (* P222 E8WOId (248): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2130 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 608,232 => (* P223 E8WOId (248): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2140 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 609,233 => (* P224 E8WOId (248): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2150 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 610,234 => (* P225 E8WOId (248): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2157 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 611,235 => (* P226 E8WOId (248): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2164 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 612,238 => (* P227 E8WOId (248): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2172 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 613,239 => (* P228 E8WOId (248): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2179 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 614,236 => (* P229 E8WOId (248): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2186 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 615,237 => (* P230 E8WOId (248): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2188 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 616,258 => (* P231 E8WOId (248): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;

              | 617,241 => (* P232 ExprRelOp (241): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2192 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 618,242 => (* P233 ExprRelOp (241): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2193 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 619,243 => (* P234 ExprRelOp (241): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2194 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 620,244 => (* P235 ExprRelOp (241): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2195 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 621,245 => (* P236 ExprRelOp (241): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2196 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 622,246 => (* P237 ExprRelOp (241): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2197 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 623,240 => (* P238 ExprRelOp (241): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2198 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 624,247 => (* P239 ExprAddOp (243): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2201 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 625,248 => (* P240 ExprAddOp (243): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2202 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 626,249 => (* P241 ExprAddOp (243): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2203 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 627,252 => (* P242 ExprMulOp (245): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2205 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 628,253 => (* P243 ExprMulOp (245): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2206 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 629,250 => (* P244 ExprMulOp (245): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2207 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 630,251 => (* P245 ExprMulOp (245): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2208 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 631,226 => (* P246 ExprUnaryAddOp (247): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2210 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 632,227 => (* P247 ExprUnaryAddOp (247): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2211 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 633 => (* P248 BlockLt (253): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 253;
                (* line 2216 of "FM3Parser.lalr" *)
                
                     
              | 634,285 => (* P249 Block (134): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 2220 of "FM3Parser.lalr" *)
                
                     
              | 635,365 => (* P250 BlockDecl (254): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2226 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 636,368 => (* P251 BlockDecl (254): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2230 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 637,382 => (* P252 BlockDecl (254): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2234 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 638,373 => (* P253 BlockDecl (254): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2238 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 639,380 => (* P254 BlockDecl (254): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 640,371 => (* P255 BlockDecl (254): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 641 => (* P256 BlockDeclList (126): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 126;
                (* line 2254 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 642 => (* P257 BlockDeclList (126): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 126;
                (* line 2262 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 643,381 => (* P258 BlockDeclPlus (256): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2271 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 644,383 => (* P259 BlockDeclPlus (256): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2276 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 645 => (* P260 StmtList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2295 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 646,378 => (* P261 StmtList (130): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 130;
                (* line 2303 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 647,379 => (* P262 StmtPlus (257): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2311 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 648,376 => (* P263 StmtPlus (257): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2314 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 649,377 => (* P264 Stmt (258): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;

              | 650,375 => (* P265 AssignStmt (259): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 259;
                (* line 2328 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 95 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 98 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

