
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 269;
   yyTableMax               = 886;
   yyNTableMax              = 1497;
   yyFirstReadState         = 1;
   yyLastReadState          = 196;
   yyFirstReadTermState             = 197;
   yyLastReadTermState              = 276;
   yyLastReadNontermState           = 398;
   yyFirstReduceState               = 399;
   yyLastReduceState                = 676;
   yyStartState             = 1;
   yyStopState              = 399;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   0]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   1]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   3]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   4])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   0])
         , (*  26*) ADR (yyTComb [   1]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   6]) , (*  31*) ADR (yyTComb [   0])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   1])
         , (*  34*) ADR (yyTComb [   0]) , (*  35*) ADR (yyTComb [   9])
         , (*  36*) ADR (yyTComb [  34]) , (*  37*) ADR (yyTComb [  35])
         , (*  38*) ADR (yyTComb [  13]) , (*  39*) ADR (yyTComb [  12])
         , (*  40*) ADR (yyTComb [  21]) , (*  41*) ADR (yyTComb [   1])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [   0]) , (*  45*) ADR (yyTComb [  71])
         , (*  46*) ADR (yyTComb [   2]) , (*  47*) ADR (yyTComb [   0])
         , (*  48*) ADR (yyTComb [   5]) , (*  49*) ADR (yyTComb [   7])
         , (*  50*) ADR (yyTComb [  17]) , (*  51*) ADR (yyTComb [   0])
         , (*  52*) ADR (yyTComb [   2]) , (*  53*) ADR (yyTComb [  77])
         , (*  54*) ADR (yyTComb [   0]) , (*  55*) ADR (yyTComb [  80])
         , (*  56*) ADR (yyTComb [  89]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [   0]) , (*  59*) ADR (yyTComb [   0])
         , (*  60*) ADR (yyTComb [ 125]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [ 123]) , (*  63*) ADR (yyTComb [  25])
         , (*  64*) ADR (yyTComb [  30]) , (*  65*) ADR (yyTComb [ 187])
         , (*  66*) ADR (yyTComb [   0]) , (*  67*) ADR (yyTComb [ 224])
         , (*  68*) ADR (yyTComb [   0]) , (*  69*) ADR (yyTComb [ 245])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 262])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 283])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [ 339])
         , (*  76*) ADR (yyTComb [  15]) , (*  77*) ADR (yyTComb [  78])
         , (*  78*) ADR (yyTComb [ 399]) , (*  79*) ADR (yyTComb [   0])
         , (*  80*) ADR (yyTComb [ 487]) , (*  81*) ADR (yyTComb [ 575])
         , (*  82*) ADR (yyTComb [ 613]) , (*  83*) ADR (yyTComb [ 669])
         , (*  84*) ADR (yyTComb [  34]) , (*  85*) ADR (yyTComb [   0])
         , (*  86*) ADR (yyTComb [  40]) , (*  87*) ADR (yyTComb [   0])
         , (*  88*) ADR (yyTComb [  17]) , (*  89*) ADR (yyTComb [ 686])
         , (*  90*) ADR (yyTComb [   3]) , (*  91*) ADR (yyTComb [  72])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [   3])
         , (*  94*) ADR (yyTComb [   6]) , (*  95*) ADR (yyTComb [   7])
         , (*  96*) ADR (yyTComb [ 433]) , (*  97*) ADR (yyTComb [  20])
         , (*  98*) ADR (yyTComb [  90]) , (*  99*) ADR (yyTComb [   5])
         , (* 100*) ADR (yyTComb [  84]) , (* 101*) ADR (yyTComb [   9])
         , (* 102*) ADR (yyTComb [   0]) , (* 103*) ADR (yyTComb [  44])
         , (* 104*) ADR (yyTComb [  48]) , (* 105*) ADR (yyTComb [  57])
         , (* 106*) ADR (yyTComb [ 157]) , (* 107*) ADR (yyTComb [   0])
         , (* 108*) ADR (yyTComb [ 159]) , (* 109*) ADR (yyTComb [ 166])
         , (* 110*) ADR (yyTComb [  59]) , (* 111*) ADR (yyTComb [   0])
         , (* 112*) ADR (yyTComb [ 474]) , (* 113*) ADR (yyTComb [  83])
         , (* 114*) ADR (yyTComb [ 475]) , (* 115*) ADR (yyTComb [  59])
         , (* 116*) ADR (yyTComb [   0]) , (* 117*) ADR (yyTComb [  44])
         , (* 118*) ADR (yyTComb [ 171]) , (* 119*) ADR (yyTComb [   0])
         , (* 120*) ADR (yyTComb [ 117]) , (* 121*) ADR (yyTComb [   4])
         , (* 122*) ADR (yyTComb [  69]) , (* 123*) ADR (yyTComb [   6])
         , (* 124*) ADR (yyTComb [  89]) , (* 125*) ADR (yyTComb [   0])
         , (* 126*) ADR (yyTComb [   7]) , (* 127*) ADR (yyTComb [ 100])
         , (* 128*) ADR (yyTComb [   0]) , (* 129*) ADR (yyTComb [ 103])
         , (* 130*) ADR (yyTComb [ 320]) , (* 131*) ADR (yyTComb [ 333])
         , (* 132*) ADR (yyTComb [ 104]) , (* 133*) ADR (yyTComb [ 117])
         , (* 134*) ADR (yyTComb [   0]) , (* 135*) ADR (yyTComb [ 105])
         , (* 136*) ADR (yyTComb [ 336]) , (* 137*) ADR (yyTComb [ 153])
         , (* 138*) ADR (yyTComb [ 576]) , (* 139*) ADR (yyTComb [ 663])
         , (* 140*) ADR (yyTComb [ 106]) , (* 141*) ADR (yyTComb [ 120])
         , (* 142*) ADR (yyTComb [ 722]) , (* 143*) ADR (yyTComb [ 723])
         , (* 144*) ADR (yyTComb [ 121]) , (* 145*) ADR (yyTComb [ 122])
         , (* 146*) ADR (yyTComb [ 129]) , (* 147*) ADR (yyTComb [ 156])
         , (* 148*) ADR (yyTComb [   0]) , (* 149*) ADR (yyTComb [   0])
         , (* 150*) ADR (yyTComb [ 134]) , (* 151*) ADR (yyTComb [   0])
         , (* 152*) ADR (yyTComb [   1]) , (* 153*) ADR (yyTComb [   0])
         , (* 154*) ADR (yyTComb [   8]) , (* 155*) ADR (yyTComb [ 127])
         , (* 156*) ADR (yyTComb [  19]) , (* 157*) ADR (yyTComb [ 216])
         , (* 158*) ADR (yyTComb [  10]) , (* 159*) ADR (yyTComb [ 225])
         , (* 160*) ADR (yyTComb [ 223]) , (* 161*) ADR (yyTComb [   0])
         , (* 162*) ADR (yyTComb [ 180]) , (* 163*) ADR (yyTComb [   0])
         , (* 164*) ADR (yyTComb [   0]) , (* 165*) ADR (yyTComb [ 170])
         , (* 166*) ADR (yyTComb [  12]) , (* 167*) ADR (yyTComb [   0])
         , (* 168*) ADR (yyTComb [ 175]) , (* 169*) ADR (yyTComb [ 182])
         , (* 170*) ADR (yyTComb [   0]) , (* 171*) ADR (yyTComb [   0])
         , (* 172*) ADR (yyTComb [ 386]) , (* 173*) ADR (yyTComb [   2])
         , (* 174*) ADR (yyTComb [  17]) , (* 175*) ADR (yyTComb [  41])
         , (* 176*) ADR (yyTComb [   0]) , (* 177*) ADR (yyTComb [ 182])
         , (* 178*) ADR (yyTComb [ 181]) , (* 179*) ADR (yyTComb [   0])
         , (* 180*) ADR (yyTComb [ 183]) , (* 181*) ADR (yyTComb [ 222])
         , (* 182*) ADR (yyTComb [ 194]) , (* 183*) ADR (yyTComb [ 570])
         , (* 184*) ADR (yyTComb [ 732]) , (* 185*) ADR (yyTComb [ 545])
         , (* 186*) ADR (yyTComb [  42]) , (* 187*) ADR (yyTComb [   0])
         , (* 188*) ADR (yyTComb [ 195]) , (* 189*) ADR (yyTComb [ 196])
         , (* 190*) ADR (yyTComb [ 199]) , (* 191*) ADR (yyTComb [ 217])
         , (* 192*) ADR (yyTComb [ 767]) , (* 193*) ADR (yyTComb [ 778])
         , (* 194*) ADR (yyTComb [ 388]) , (* 195*) ADR (yyTComb [ 190])
         , (* 196*) ADR (yyTComb [ 229])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 114])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 112])
         , (*  12*) ADR (yyNComb [ 115]) , (*  13*) ADR (yyNComb [ 118])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 122])
         , (*  16*) ADR (yyNComb [ 109]) , (*  17*) ADR (yyNComb [ 124])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 125])
         , (*  20*) ADR (yyNComb [ 126]) , (*  21*) ADR (yyNComb [ 109])
         , (*  22*) ADR (yyNComb [ 127]) , (*  23*) ADR (yyNComb [ 128])
         , (*  24*) ADR (yyNComb [ 126]) , (*  25*) ADR (yyNComb [ 113])
         , (*  26*) ADR (yyNComb [ 109]) , (*  27*) ADR (yyNComb [ 131])
         , (*  28*) ADR (yyNComb [ 109]) , (*  29*) ADR (yyNComb [ 138])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 125])
         , (*  32*) ADR (yyNComb [ 140]) , (*  33*) ADR (yyNComb [ 109])
         , (*  34*) ADR (yyNComb [ 144]) , (*  35*) ADR (yyNComb [ 109])
         , (*  36*) ADR (yyNComb [ 154]) , (*  37*) ADR (yyNComb [ 159])
         , (*  38*) ADR (yyNComb [ 109]) , (*  39*) ADR (yyNComb [ 112])
         , (*  40*) ADR (yyNComb [ 203]) , (*  41*) ADR (yyNComb [ 109])
         , (*  42*) ADR (yyNComb [ 288]) , (*  43*) ADR (yyNComb [ 350])
         , (*  44*) ADR (yyNComb [ 109]) , (*  45*) ADR (yyNComb [ 109])
         , (*  46*) ADR (yyNComb [ 109]) , (*  47*) ADR (yyNComb [ 412])
         , (*  48*) ADR (yyNComb [ 161]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 109]) , (*  51*) ADR (yyNComb [ 166])
         , (*  52*) ADR (yyNComb [ 168]) , (*  53*) ADR (yyNComb [ 109])
         , (*  54*) ADR (yyNComb [ 174]) , (*  55*) ADR (yyNComb [ 115])
         , (*  56*) ADR (yyNComb [ 111]) , (*  57*) ADR (yyNComb [ 414])
         , (*  58*) ADR (yyNComb [ 210]) , (*  59*) ADR (yyNComb [ 435])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 474])
         , (*  62*) ADR (yyNComb [ 109]) , (*  63*) ADR (yyNComb [ 110])
         , (*  64*) ADR (yyNComb [ 544]) , (*  65*) ADR (yyNComb [ 109])
         , (*  66*) ADR (yyNComb [ 583]) , (*  67*) ADR (yyNComb [ 109])
         , (*  68*) ADR (yyNComb [ 497]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 524]) , (*  71*) ADR (yyNComb [ 113])
         , (*  72*) ADR (yyNComb [ 377]) , (*  73*) ADR (yyNComb [ 112])
         , (*  74*) ADR (yyNComb [ 561]) , (*  75*) ADR (yyNComb [ 117])
         , (*  76*) ADR (yyNComb [ 554]) , (*  77*) ADR (yyNComb [ 501])
         , (*  78*) ADR (yyNComb [ 116]) , (*  79*) ADR (yyNComb [ 177])
         , (*  80*) ADR (yyNComb [ 109]) , (*  81*) ADR (yyNComb [ 117])
         , (*  82*) ADR (yyNComb [ 112]) , (*  83*) ADR (yyNComb [ 109])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 615])
         , (*  86*) ADR (yyNComb [ 109]) , (*  87*) ADR (yyNComb [ 697])
         , (*  88*) ADR (yyNComb [ 109]) , (*  89*) ADR (yyNComb [ 113])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 130])
         , (*  92*) ADR (yyNComb [ 190]) , (*  93*) ADR (yyNComb [ 110])
         , (*  94*) ADR (yyNComb [ 724]) , (*  95*) ADR (yyNComb [ 109])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 320])
         , (*  98*) ADR (yyNComb [ 112]) , (*  99*) ADR (yyNComb [ 198])
         , (* 100*) ADR (yyNComb [ 144]) , (* 101*) ADR (yyNComb [ 207])
         , (* 102*) ADR (yyNComb [ 110]) , (* 103*) ADR (yyNComb [ 115])
         , (* 104*) ADR (yyNComb [ 109]) , (* 105*) ADR (yyNComb [ 151])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 300])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 141])
         , (* 110*) ADR (yyNComb [ 806]) , (* 111*) ADR (yyNComb [ 112])
         , (* 112*) ADR (yyNComb [ 110]) , (* 113*) ADR (yyNComb [ 868])
         , (* 114*) ADR (yyNComb [ 114]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 140]) , (* 117*) ADR (yyNComb [ 109])
         , (* 118*) ADR (yyNComb [ 144]) , (* 119*) ADR (yyNComb [ 870])
         , (* 120*) ADR (yyNComb [ 112]) , (* 121*) ADR (yyNComb [ 296])
         , (* 122*) ADR (yyNComb [ 154]) , (* 123*) ADR (yyNComb [ 633])
         , (* 124*) ADR (yyNComb [ 109]) , (* 125*) ADR (yyNComb [ 930])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 109])
         , (* 128*) ADR (yyNComb [ 979]) , (* 129*) ADR (yyNComb [ 109])
         , (* 130*) ADR (yyNComb [ 684]) , (* 131*) ADR (yyNComb [ 348])
         , (* 132*) ADR (yyNComb [ 109]) , (* 133*) ADR (yyNComb [ 127])
         , (* 134*) ADR (yyNComb [1048]) , (* 135*) ADR (yyNComb [ 109])
         , (* 136*) ADR (yyNComb [ 726]) , (* 137*) ADR (yyNComb [ 124])
         , (* 138*) ADR (yyNComb [1133]) , (* 139*) ADR (yyNComb [ 745])
         , (* 140*) ADR (yyNComb [ 109]) , (* 141*) ADR (yyNComb [ 109])
         , (* 142*) ADR (yyNComb [ 700]) , (* 143*) ADR (yyNComb [ 772])
         , (* 144*) ADR (yyNComb [ 109]) , (* 145*) ADR (yyNComb [ 109])
         , (* 146*) ADR (yyNComb [ 203]) , (* 147*) ADR (yyNComb [ 142])
         , (* 148*) ADR (yyNComb [ 172]) , (* 149*) ADR (yyNComb [ 188])
         , (* 150*) ADR (yyNComb [ 109]) , (* 151*) ADR (yyNComb [1038])
         , (* 152*) ADR (yyNComb [ 109]) , (* 153*) ADR (yyNComb [1145])
         , (* 154*) ADR (yyNComb [ 109]) , (* 155*) ADR (yyNComb [ 109])
         , (* 156*) ADR (yyNComb [1195]) , (* 157*) ADR (yyNComb [ 165])
         , (* 158*) ADR (yyNComb [1218]) , (* 159*) ADR (yyNComb [ 867])
         , (* 160*) ADR (yyNComb [ 173]) , (* 161*) ADR (yyNComb [ 303])
         , (* 162*) ADR (yyNComb [ 109]) , (* 163*) ADR (yyNComb [ 444])
         , (* 164*) ADR (yyNComb [ 189]) , (* 165*) ADR (yyNComb [ 202])
         , (* 166*) ADR (yyNComb [ 109]) , (* 167*) ADR (yyNComb [ 290])
         , (* 168*) ADR (yyNComb [ 109]) , (* 169*) ADR (yyNComb [ 109])
         , (* 170*) ADR (yyNComb [ 208]) , (* 171*) ADR (yyNComb [ 312])
         , (* 172*) ADR (yyNComb [1247]) , (* 173*) ADR (yyNComb [ 109])
         , (* 174*) ADR (yyNComb [1304]) , (* 175*) ADR (yyNComb [ 109])
         , (* 176*) ADR (yyNComb [ 386]) , (* 177*) ADR (yyNComb [ 109])
         , (* 178*) ADR (yyNComb [ 109]) , (* 179*) ADR (yyNComb [ 248])
         , (* 180*) ADR (yyNComb [ 246]) , (* 181*) ADR (yyNComb [ 109])
         , (* 182*) ADR (yyNComb [ 109]) , (* 183*) ADR (yyNComb [ 260])
         , (* 184*) ADR (yyNComb [ 326]) , (* 185*) ADR (yyNComb [1337])
         , (* 186*) ADR (yyNComb [ 109]) , (* 187*) ADR (yyNComb [ 448])
         , (* 188*) ADR (yyNComb [ 109]) , (* 189*) ADR (yyNComb [ 109])
         , (* 190*) ADR (yyNComb [ 282]) , (* 191*) ADR (yyNComb [ 109])
         , (* 192*) ADR (yyNComb [ 293]) , (* 193*) ADR (yyNComb [ 383])
         , (* 194*) ADR (yyNComb [ 317]) , (* 195*) ADR (yyNComb [ 450])
         , (* 196*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  195
         , (*   4*)  195 , (*   5*)    0 , (*   6*)    0 , (*   7*)  195
         , (*   8*)    0 , (*   9*)  195 , (*  10*)    0 , (*  11*)  183
         , (*  12*)  184 , (*  13*)  195 , (*  14*)    0 , (*  15*)  195
         , (*  16*)    0 , (*  17*)  195 , (*  18*)    0 , (*  19*)  195
         , (*  20*)  195 , (*  21*)    0 , (*  22*)  195 , (*  23*)  195
         , (*  24*)  165 , (*  25*)  180 , (*  26*)  181 , (*  27*)  195
         , (*  28*)    0 , (*  29*)  195 , (*  30*)    0 , (*  31*)  185
         , (*  32*)  195 , (*  33*)    0 , (*  34*)  195 , (*  35*)    0
         , (*  36*)  195 , (*  37*)  195 , (*  38*)    0 , (*  39*)    0
         , (*  40*)  138 , (*  41*)    0 , (*  42*)  113 , (*  43*)  113
         , (*  44*)    0 , (*  45*)    0 , (*  46*)    0 , (*  47*)  113
         , (*  48*)  195 , (*  49*)    0 , (*  50*)    0 , (*  51*)  195
         , (*  52*)  195 , (*  53*)    0 , (*  54*)  195 , (*  55*)    0
         , (*  56*)    0 , (*  57*)  156 , (*  58*)   76 , (*  59*)  156
         , (*  60*)    0 , (*  61*)  156 , (*  62*)   65 , (*  63*)    0
         , (*  64*)  156 , (*  65*)    0 , (*  66*)  156 , (*  67*)   88
         , (*  68*)  156 , (*  69*)   83 , (*  70*)  156 , (*  71*)   89
         , (*  72*)   76 , (*  73*)   82 , (*  74*)   76 , (*  75*)   81
         , (*  76*)   77 , (*  77*)    0 , (*  78*)   63 , (*  79*)  195
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)  156 , (*  86*)    0 , (*  87*)  156
         , (*  88*)    0 , (*  89*)    0 , (*  90*)    0 , (*  91*)  100
         , (*  92*)  101 , (*  93*)    0 , (*  94*)  156 , (*  95*)    0
         , (*  96*)    0 , (*  97*)   52 , (*  98*)    0 , (*  99*)  195
         , (* 100*)  157 , (* 101*)  123 , (* 102*)  146 , (* 103*)  106
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)  195
         , (* 108*)    0 , (* 109*)    0 , (* 110*)  138 , (* 111*)  146
         , (* 112*)    0 , (* 113*)   40 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)  156
         , (* 120*)    0 , (* 121*)  195 , (* 122*)  157 , (* 123*)  195
         , (* 124*)    0 , (* 125*)  156 , (* 126*)    0 , (* 127*)    0
         , (* 128*)  156 , (* 129*)    0 , (* 130*)  195 , (* 131*)  195
         , (* 132*)    0 , (* 133*)    0 , (* 134*)  138 , (* 135*)    0
         , (* 136*)  139 , (* 137*)    0 , (* 138*)  195 , (* 139*)  195
         , (* 140*)    0 , (* 141*)    0 , (* 142*)  195 , (* 143*)  195
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)    0
         , (* 148*)  194 , (* 149*)  195 , (* 150*)    0 , (* 151*)  172
         , (* 152*)    0 , (* 153*)  174 , (* 154*)    0 , (* 155*)    0
         , (* 156*)   76 , (* 157*)    0 , (* 158*)  156 , (* 159*)  185
         , (* 160*)    0 , (* 161*)  195 , (* 162*)    0 , (* 163*)  195
         , (* 164*)  195 , (* 165*)    0 , (* 166*)    0 , (* 167*)  195
         , (* 168*)    0 , (* 169*)    0 , (* 170*)  192 , (* 171*)  193
         , (* 172*)    0 , (* 173*)    0 , (* 174*)  156 , (* 175*)    0
         , (* 176*)  195 , (* 177*)    0 , (* 178*)    0 , (* 179*)  190
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)  195
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0 , (* 195*)    0
         , (* 196*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  399} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  16,   17}
         , (*  10*) yyTCombType { 152,  153} , (*  11*) yyTCombType { 173,  174}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  93,   94} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  28,   29}
         , (*  20*) yyTCombType {  33,   34} , (*  21*) yyTCombType {  52,  539}
         , (*  22*) yyTCombType {  90,  248} , (*  23*) yyTCombType { 121,  553}
         , (*  24*) yyTCombType {  99,  546} , (*  25*) yyTCombType { 123,  426}
         , (*  26*) yyTCombType { 126,  256} , (*  27*) yyTCombType { 154,  271}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 158,  426}
         , (*  30*) yyTCombType {  14,  199} , (*  31*) yyTCombType { 166,  167}
         , (*  32*) yyTCombType {   1,  425} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  92,  426}
         , (*  36*) yyTCombType { 174,  671} , (*  37*) yyTCombType {   1,  425}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    9}
         , (*  40*) yyTCombType {  40,  530} , (*  41*) yyTCombType {  41,   42}
         , (*  42*) yyTCombType {  93,  559} , (*  43*) yyTCombType {  36,  471}
         , (*  44*) yyTCombType {  37,  472} , (*  45*) yyTCombType {  94,  560}
         , (*  46*) yyTCombType {  95,  249} , (*  47*) yyTCombType {  99,  546}
         , (*  48*) yyTCombType {  36,  471} , (*  49*) yyTCombType {  37,  472}
         , (*  50*) yyTCombType {  46,   47} , (*  51*) yyTCombType { 101,  426}
         , (*  52*) yyTCombType {  44,  213} , (*  53*) yyTCombType {  36,  471}
         , (*  54*) yyTCombType {  37,  472} , (*  55*) yyTCombType {  97,  539}
         , (*  56*) yyTCombType {  40,  530} , (*  57*) yyTCombType { 156,   58}
         , (*  58*) yyTCombType {  88,   68} , (*  59*) yyTCombType {   1,  198}
         , (*  60*) yyTCombType { 175,  176} , (*  61*) yyTCombType { 186,  187}
         , (*  62*) yyTCombType {  97,  539} , (*  63*) yyTCombType {  40,  530}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType { 115,  254}
         , (*  66*) yyTCombType {  10,   11} , (*  67*) yyTCombType {  16,  435}
         , (*  68*) yyTCombType {  10,   23} , (*  69*) yyTCombType {  18,  200}
         , (*  70*) yyTCombType {  21,  201} , (*  71*) yyTCombType {  26,  202}
         , (*  72*) yyTCombType {  16,  435} , (*  73*) yyTCombType {  30,  203}
         , (*  74*) yyTCombType {  18,   19} , (*  75*) yyTCombType {  21,   22}
         , (*  76*) yyTCombType {  35,  208} , (*  77*) yyTCombType {  36,  471}
         , (*  78*) yyTCombType {  37,  472} , (*  79*) yyTCombType {  38,  209}
         , (*  80*) yyTCombType {  39,  505} , (*  81*) yyTCombType {  48,  533}
         , (*  82*) yyTCombType {  45,  563} , (*  83*) yyTCombType {  49,  215}
         , (*  84*) yyTCombType {  39,   40} , (*  85*) yyTCombType {  36,  471}
         , (*  86*) yyTCombType {  37,  472} , (*  87*) yyTCombType {  88,  247}
         , (*  88*) yyTCombType {  50,   51} , (*  89*) yyTCombType {  40,  530}
         , (*  90*) yyTCombType {  45,  508} , (*  91*) yyTCombType {  36,  471}
         , (*  92*) yyTCombType {  37,  472} , (*  93*) yyTCombType {  50,  534}
         , (*  94*) yyTCombType {  63,   64} , (*  95*) yyTCombType {  40,  530}
         , (*  96*) yyTCombType {  53,  503} , (*  97*) yyTCombType {  36,  471}
         , (*  98*) yyTCombType {  37,  472} , (*  99*) yyTCombType {  55,  505}
         , (* 100*) yyTCombType {  64,  625} , (* 101*) yyTCombType {  64,  625}
         , (* 102*) yyTCombType {  76,  216} , (* 103*) yyTCombType {  76,  217}
         , (* 104*) yyTCombType {  84,  244} , (* 105*) yyTCombType {  84,   85}
         , (* 106*) yyTCombType {  45,  508} , (* 107*) yyTCombType {  91,  427}
         , (* 108*) yyTCombType {  56,  507} , (* 109*) yyTCombType {  98,  545}
         , (* 110*) yyTCombType {  45,  563} , (* 111*) yyTCombType {  86,   87}
         , (* 112*) yyTCombType {  53,  503} , (* 113*) yyTCombType {  45,  508}
         , (* 114*) yyTCombType { 103,  572} , (* 115*) yyTCombType {  55,  505}
         , (* 116*) yyTCombType {  45,  508} , (* 117*) yyTCombType {  63,  245}
         , (* 118*) yyTCombType { 104,  253} , (* 119*) yyTCombType {  53,  503}
         , (* 120*) yyTCombType { 117,  255} , (* 121*) yyTCombType {  86,  246}
         , (* 122*) yyTCombType {  55,  505} , (* 123*) yyTCombType { 105,  106}
         , (* 124*) yyTCombType {  56,  507} , (* 125*) yyTCombType {  98,   99}
         , (* 126*) yyTCombType { 100,  427} , (* 127*) yyTCombType { 105,  427}
         , (* 128*) yyTCombType { 113,  530} , (* 129*) yyTCombType { 110,  530}
         , (* 130*) yyTCombType {  60,  447} , (* 131*) yyTCombType {  56,  507}
         , (* 132*) yyTCombType {  98,  545} , (* 133*) yyTCombType { 110,  530}
         , (* 134*) yyTCombType { 115,  116} , (* 135*) yyTCombType { 122,  123}
         , (* 136*) yyTCombType { 120,  552} , (* 137*) yyTCombType {  45,  508}
         , (* 138*) yyTCombType {  91,   92} , (* 139*) yyTCombType {  45,  508}
         , (* 140*) yyTCombType {  60,  447} , (* 141*) yyTCombType {  45,  508}
         , (* 142*) yyTCombType {  62,  459} , (* 143*) yyTCombType {  53,  503}
         , (* 144*) yyTCombType {  60,  447} , (* 145*) yyTCombType {  45,  508}
         , (* 146*) yyTCombType {  55,  505} , (* 147*) yyTCombType {  77,   59}
         , (* 148*) yyTCombType {  53,   54} , (* 149*) yyTCombType {  53,  503}
         , (* 150*) yyTCombType { 100,  101} , (* 151*) yyTCombType {  53,  503}
         , (* 152*) yyTCombType {  55,   40} , (* 153*) yyTCombType { 113,  530}
         , (* 154*) yyTCombType {  55,  505} , (* 155*) yyTCombType {  56,  507}
         , (* 156*) yyTCombType {  60,  447} , (* 157*) yyTCombType { 124,  125}
         , (* 158*) yyTCombType {  62,  459} , (* 159*) yyTCombType { 120,  121}
         , (* 160*) yyTCombType {  60,  447} , (* 161*) yyTCombType {  60,  447}
         , (* 162*) yyTCombType {  62,  459} , (* 163*) yyTCombType {  56,   57}
         , (* 164*) yyTCombType {  60,  447} , (* 165*) yyTCombType {  62,  459}
         , (* 166*) yyTCombType {  60,  447} , (* 167*) yyTCombType {  60,  447}
         , (* 168*) yyTCombType { 127,  128} , (* 169*) yyTCombType { 129,  257}
         , (* 170*) yyTCombType { 132,  258} , (* 171*) yyTCombType { 135,  261}
         , (* 172*) yyTCombType { 140,  264} , (* 173*) yyTCombType {  77,   60}
         , (* 174*) yyTCombType {  77,  218} , (* 175*) yyTCombType {  77,  219}
         , (* 176*) yyTCombType {  77,  220} , (* 177*) yyTCombType {  77,  221}
         , (* 178*) yyTCombType {  77,  222} , (* 179*) yyTCombType {  77,  223}
         , (* 180*) yyTCombType {  77,  224} , (* 181*) yyTCombType {  77,  225}
         , (* 182*) yyTCombType {  77,  226} , (* 183*) yyTCombType {  77,  227}
         , (* 184*) yyTCombType {  77,  228} , (* 185*) yyTCombType { 133,  259}
         , (* 186*) yyTCombType { 141,  265} , (* 187*) yyTCombType { 144,  266}
         , (* 188*) yyTCombType { 145,  267} , (* 189*) yyTCombType {  62,  459}
         , (* 190*) yyTCombType { 133,  260} , (* 191*) yyTCombType {  60,  447}
         , (* 192*) yyTCombType {  65,  459} , (* 193*) yyTCombType {  60,  447}
         , (* 194*) yyTCombType {  60,  447} , (* 195*) yyTCombType {  60,  447}
         , (* 196*) yyTCombType {  60,  447} , (* 197*) yyTCombType {  62,  459}
         , (* 198*) yyTCombType { 146,  103} , (* 199*) yyTCombType {  60,  447}
         , (* 200*) yyTCombType { 150,  270} , (* 201*) yyTCombType { 155,  156}
         , (* 202*) yyTCombType {  65,  459} , (* 203*) yyTCombType { 106,  250}
         , (* 204*) yyTCombType {  62,  459} , (* 205*) yyTCombType {  60,   61}
         , (* 206*) yyTCombType {  60,  447} , (* 207*) yyTCombType {  60,  447}
         , (* 208*) yyTCombType {  60,  447} , (* 209*) yyTCombType {  60,  447}
         , (* 210*) yyTCombType {  60,  447} , (* 211*) yyTCombType {  60,  447}
         , (* 212*) yyTCombType {  60,  447} , (* 213*) yyTCombType {  60,  447}
         , (* 214*) yyTCombType {  60,  447} , (* 215*) yyTCombType {  60,  447}
         , (* 216*) yyTCombType {  60,  447} , (* 217*) yyTCombType {  60,  447}
         , (* 218*) yyTCombType {  65,  459} , (* 219*) yyTCombType { 106,  251}
         , (* 220*) yyTCombType { 106,  252} , (* 221*) yyTCombType { 137,  262}
         , (* 222*) yyTCombType { 147,  268} , (* 223*) yyTCombType {  65,  459}
         , (* 224*) yyTCombType { 147,  269} , (* 225*) yyTCombType { 108,  581}
         , (* 226*) yyTCombType { 137,  263} , (* 227*) yyTCombType { 106,  426}
         , (* 228*) yyTCombType {  65,  459} , (* 229*) yyTCombType { 108,  581}
         , (* 230*) yyTCombType { 108,   54} , (* 231*) yyTCombType { 108,  581}
         , (* 232*) yyTCombType { 109,  583} , (* 233*) yyTCombType { 108,  581}
         , (* 234*) yyTCombType { 159,  668} , (* 235*) yyTCombType { 157,  427}
         , (* 236*) yyTCombType { 109,  583} , (* 237*) yyTCombType { 118,  585}
         , (* 238*) yyTCombType { 109,  110} , (* 239*) yyTCombType { 165,   25}
         , (* 240*) yyTCombType { 109,  583} , (* 241*) yyTCombType { 118,  585}
         , (* 242*) yyTCombType { 168,  272} , (* 243*) yyTCombType {  67,  596}
         , (* 244*) yyTCombType { 159,  668} , (* 245*) yyTCombType { 118,  119}
         , (* 246*) yyTCombType { 162,  443} , (* 247*) yyTCombType { 160,  161}
         , (* 248*) yyTCombType { 169,  170} , (* 249*) yyTCombType { 177,  273}
         , (* 250*) yyTCombType { 178,  408} , (* 251*) yyTCombType { 162,  163}
         , (* 252*) yyTCombType { 106,  576} , (* 253*) yyTCombType { 180,  456}
         , (* 254*) yyTCombType { 180,  456} , (* 255*) yyTCombType {  65,  459}
         , (* 256*) yyTCombType {  65,  449} , (* 257*) yyTCombType {  65,  459}
         , (* 258*) yyTCombType {  65,  459} , (* 259*) yyTCombType {  67,  596}
         , (* 260*) yyTCombType { 182,  183} , (* 261*) yyTCombType {  65,   66}
         , (* 262*) yyTCombType { 188,  275} , (* 263*) yyTCombType {  67,  596}
         , (* 264*) yyTCombType {  69,  598} , (* 265*) yyTCombType { 189,  409}
         , (* 266*) yyTCombType {  67,  596} , (* 267*) yyTCombType {  71,  601}
         , (* 268*) yyTCombType { 190,  180} , (* 269*) yyTCombType {  65,  459}
         , (* 270*) yyTCombType {  65,  459} , (* 271*) yyTCombType {  65,  459}
         , (* 272*) yyTCombType {  65,  459} , (* 273*) yyTCombType {  65,  459}
         , (* 274*) yyTCombType {  65,  459} , (* 275*) yyTCombType {  65,  459}
         , (* 276*) yyTCombType {  65,  459} , (* 277*) yyTCombType {  65,  459}
         , (* 278*) yyTCombType {  65,  459} , (* 279*) yyTCombType {  65,  449}
         , (* 280*) yyTCombType {  69,  598} , (* 281*) yyTCombType {  71,  601}
         , (* 282*) yyTCombType { 157,  158} , (* 283*) yyTCombType { 191,  192}
         , (* 284*) yyTCombType {  69,  598} , (* 285*) yyTCombType { 195,  197}
         , (* 286*) yyTCombType {  69,  598} , (* 287*) yyTCombType {  69,  598}
         , (* 288*) yyTCombType {  73,  604} , (* 289*) yyTCombType { 160,  442}
         , (* 290*) yyTCombType {  67,  596} , (* 291*) yyTCombType { 160,  164}
         , (* 292*) yyTCombType { 181,  274} , (* 293*) yyTCombType { 181,   27}
         , (* 294*) yyTCombType {  67,  596} , (* 295*) yyTCombType {  67,  596}
         , (* 296*) yyTCombType { 196,  276} , (* 297*) yyTCombType {  71,  601}
         , (* 298*) yyTCombType {  67,  596} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {  71,  601}
         , (* 302*) yyTCombType {  73,  604} , (* 303*) yyTCombType {  71,  601}
         , (* 304*) yyTCombType {  71,  601} , (* 305*) yyTCombType {  67,  596}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {   0,    0} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {  69,  598}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType {  73,  604} , (* 315*) yyTCombType {  69,  598}
         , (* 316*) yyTCombType {  69,  598} , (* 317*) yyTCombType {   0,    0}
         , (* 318*) yyTCombType {  73,  604} , (* 319*) yyTCombType {  69,  598}
         , (* 320*) yyTCombType {   0,    0} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {  73,  604} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {  73,  604} , (* 325*) yyTCombType {  73,  604}
         , (* 326*) yyTCombType {  69,  598} , (* 327*) yyTCombType {   0,    0}
         , (* 328*) yyTCombType {  71,  601} , (* 329*) yyTCombType { 130,  481}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {  71,  601} , (* 333*) yyTCombType {  71,  601}
         , (* 334*) yyTCombType { 130,  481} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType {  71,  601} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType { 130,  481}
         , (* 340*) yyTCombType {   0,    0} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType { 131,  482} , (* 343*) yyTCombType {  71,  601}
         , (* 344*) yyTCombType {  75,  606} , (* 345*) yyTCombType { 136,  491}
         , (* 346*) yyTCombType {   0,    0} , (* 347*) yyTCombType { 131,  482}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType {  73,  604}
         , (* 350*) yyTCombType { 136,  491} , (* 351*) yyTCombType {  73,  604}
         , (* 352*) yyTCombType { 131,  482} , (* 353*) yyTCombType {  73,  604}
         , (* 354*) yyTCombType {  73,  604} , (* 355*) yyTCombType { 136,  491}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {  73,  604}
         , (* 358*) yyTCombType {  75,  606} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType { 130,  481}
         , (* 364*) yyTCombType {  73,  604} , (* 365*) yyTCombType {  73,  604}
         , (* 366*) yyTCombType {  73,  604} , (* 367*) yyTCombType {  73,  604}
         , (* 368*) yyTCombType {  73,  604} , (* 369*) yyTCombType {  73,  604}
         , (* 370*) yyTCombType {  75,  606} , (* 371*) yyTCombType { 130,  481}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {   0,    0}
         , (* 374*) yyTCombType {  75,  606} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType { 131,  482} , (* 377*) yyTCombType { 130,  481}
         , (* 378*) yyTCombType {  75,  606} , (* 379*) yyTCombType { 136,  491}
         , (* 380*) yyTCombType {  75,  606} , (* 381*) yyTCombType {  75,  606}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType { 130,  481}
         , (* 384*) yyTCombType { 131,  482} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType { 136,  491}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType { 131,  482} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType { 136,  491}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType { 172,  667}
         , (* 396*) yyTCombType { 131,  482} , (* 397*) yyTCombType { 194,  659}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType { 136,  491}
         , (* 400*) yyTCombType { 172,  204} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType { 194,  659} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {  78,  615} , (* 405*) yyTCombType {  75,  606}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType {  75,  606}
         , (* 408*) yyTCombType {   0,    0} , (* 409*) yyTCombType {  75,  606}
         , (* 410*) yyTCombType {  75,  606} , (* 411*) yyTCombType {   0,    0}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType {  75,  606}
         , (* 414*) yyTCombType {  78,  615} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType {   0,    0} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {  78,  615} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType {  75,  606} , (* 421*) yyTCombType {  75,  606}
         , (* 422*) yyTCombType {  75,  606} , (* 423*) yyTCombType {  75,  606}
         , (* 424*) yyTCombType {  75,  606} , (* 425*) yyTCombType {  75,  606}
         , (* 426*) yyTCombType {  75,  606} , (* 427*) yyTCombType {  75,  606}
         , (* 428*) yyTCombType {  75,  606} , (* 429*) yyTCombType { 172,   32}
         , (* 430*) yyTCombType {  78,  615} , (* 431*) yyTCombType { 194,  659}
         , (* 432*) yyTCombType {   0,    0} , (* 433*) yyTCombType {   0,    0}
         , (* 434*) yyTCombType {  78,  615} , (* 435*) yyTCombType {  78,  615}
         , (* 436*) yyTCombType {   0,    0} , (* 437*) yyTCombType { 172,  205}
         , (* 438*) yyTCombType {  78,  615} , (* 439*) yyTCombType { 194,  659}
         , (* 440*) yyTCombType {  78,  615} , (* 441*) yyTCombType {  78,  615}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType { 172,  206}
         , (* 444*) yyTCombType {  96,  564} , (* 445*) yyTCombType { 194,  659}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType { 172,  207}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType { 194,  659}
         , (* 452*) yyTCombType {  96,  567} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType {   0,    0} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {  78,  615}
         , (* 466*) yyTCombType {  78,   79} , (* 467*) yyTCombType {  78,  615}
         , (* 468*) yyTCombType {  96,  567} , (* 469*) yyTCombType {  78,  615}
         , (* 470*) yyTCombType {  78,  615} , (* 471*) yyTCombType {   0,    0}
         , (* 472*) yyTCombType {  96,  564} , (* 473*) yyTCombType {  78,  615}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {  96,  567}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {  96,  567} , (* 479*) yyTCombType {  78,   61}
         , (* 480*) yyTCombType {  78,  615} , (* 481*) yyTCombType {  78,  615}
         , (* 482*) yyTCombType {  78,  615} , (* 483*) yyTCombType {  78,  615}
         , (* 484*) yyTCombType {  78,  615} , (* 485*) yyTCombType {  78,  615}
         , (* 486*) yyTCombType {  78,  615} , (* 487*) yyTCombType {  78,  615}
         , (* 488*) yyTCombType {  78,  615} , (* 489*) yyTCombType {  78,  615}
         , (* 490*) yyTCombType {  78,  615} , (* 491*) yyTCombType {  78,  243}
         , (* 492*) yyTCombType {  80,  614} , (* 493*) yyTCombType { 112,  587}
         , (* 494*) yyTCombType { 114,  588} , (* 495*) yyTCombType {   0,    0}
         , (* 496*) yyTCombType {   0,    0} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  96,  567}
         , (* 500*) yyTCombType {   0,    0} , (* 501*) yyTCombType {  96,  567}
         , (* 502*) yyTCombType {  80,  614} , (* 503*) yyTCombType {  96,  567}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {  80,  614} , (* 507*) yyTCombType {  96,  567}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType { 112,  587}
         , (* 510*) yyTCombType { 114,  588} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType { 112,  587} , (* 517*) yyTCombType { 114,  588}
         , (* 518*) yyTCombType {  80,  614} , (* 519*) yyTCombType { 112,  587}
         , (* 520*) yyTCombType { 114,  115} , (* 521*) yyTCombType {   0,    0}
         , (* 522*) yyTCombType {  80,  614} , (* 523*) yyTCombType {  80,  614}
         , (* 524*) yyTCombType {   0,    0} , (* 525*) yyTCombType {   0,    0}
         , (* 526*) yyTCombType {  80,  614} , (* 527*) yyTCombType {   0,    0}
         , (* 528*) yyTCombType {  80,  614} , (* 529*) yyTCombType {  80,  614}
         , (* 530*) yyTCombType {   0,    0} , (* 531*) yyTCombType {   0,    0}
         , (* 532*) yyTCombType {   0,    0} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType {   0,    0} , (* 537*) yyTCombType {   0,    0}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType {   0,    0}
         , (* 540*) yyTCombType { 112,  587} , (* 541*) yyTCombType { 114,  588}
         , (* 542*) yyTCombType { 112,  587} , (* 543*) yyTCombType { 114,  588}
         , (* 544*) yyTCombType { 112,  587} , (* 545*) yyTCombType { 114,  588}
         , (* 546*) yyTCombType { 112,  113} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType { 112,  587} , (* 549*) yyTCombType { 114,  588}
         , (* 550*) yyTCombType {   0,    0} , (* 551*) yyTCombType {   0,    0}
         , (* 552*) yyTCombType {   0,    0} , (* 553*) yyTCombType {  80,  614}
         , (* 554*) yyTCombType {  80,  630} , (* 555*) yyTCombType {  80,  614}
         , (* 556*) yyTCombType {  80,  630} , (* 557*) yyTCombType {  80,  614}
         , (* 558*) yyTCombType {  80,  614} , (* 559*) yyTCombType { 185,  204}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {  80,  614}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {   0,    0}
         , (* 564*) yyTCombType { 185,  667} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {   0,    0} , (* 567*) yyTCombType {  80,  630}
         , (* 568*) yyTCombType {  80,  614} , (* 569*) yyTCombType {  80,  614}
         , (* 570*) yyTCombType {  80,  614} , (* 571*) yyTCombType {  80,  614}
         , (* 572*) yyTCombType {  80,  614} , (* 573*) yyTCombType {  80,  614}
         , (* 574*) yyTCombType {  80,  614} , (* 575*) yyTCombType {  80,  614}
         , (* 576*) yyTCombType {  80,  614} , (* 577*) yyTCombType {  80,  614}
         , (* 578*) yyTCombType {  80,  614} , (* 579*) yyTCombType {  80,  630}
         , (* 580*) yyTCombType {  81,  605} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType { 138,   41}
         , (* 584*) yyTCombType { 183,  430} , (* 585*) yyTCombType {   0,    0}
         , (* 586*) yyTCombType {   0,    0} , (* 587*) yyTCombType { 138,  562}
         , (* 588*) yyTCombType { 185,   32} , (* 589*) yyTCombType { 183,  430}
         , (* 590*) yyTCombType {  81,  239} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType {  81,  605} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType { 185,  205} , (* 597*) yyTCombType { 183,  430}
         , (* 598*) yyTCombType {   0,    0} , (* 599*) yyTCombType {   0,    0}
         , (* 600*) yyTCombType { 183,  430} , (* 601*) yyTCombType {   0,    0}
         , (* 602*) yyTCombType { 185,  206} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType {   0,    0}
         , (* 606*) yyTCombType {  81,  605} , (* 607*) yyTCombType {   0,    0}
         , (* 608*) yyTCombType { 185,  207} , (* 609*) yyTCombType {   0,    0}
         , (* 610*) yyTCombType {  81,  605} , (* 611*) yyTCombType {  81,  240}
         , (* 612*) yyTCombType {   0,    0} , (* 613*) yyTCombType { 183,  430}
         , (* 614*) yyTCombType {  81,  605} , (* 615*) yyTCombType { 138,  562}
         , (* 616*) yyTCombType {  81,  605} , (* 617*) yyTCombType {  81,  605}
         , (* 618*) yyTCombType {  82,  603} , (* 619*) yyTCombType { 138,  210}
         , (* 620*) yyTCombType {   0,    0} , (* 621*) yyTCombType { 183,  430}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType { 138,  211}
         , (* 624*) yyTCombType { 138,   43} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {   0,    0} , (* 627*) yyTCombType { 183,  430}
         , (* 628*) yyTCombType { 138,  212} , (* 629*) yyTCombType {   0,    0}
         , (* 630*) yyTCombType {   0,    0} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType {  82,  603} , (* 633*) yyTCombType { 183,  430}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType { 138,   44}
         , (* 638*) yyTCombType {   0,    0} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {   0,    0} , (* 641*) yyTCombType {  81,  605}
         , (* 642*) yyTCombType { 138,  530} , (* 643*) yyTCombType {  81,  605}
         , (* 644*) yyTCombType {  82,  603} , (* 645*) yyTCombType {  81,  605}
         , (* 646*) yyTCombType {  81,  605} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {  82,  603} , (* 649*) yyTCombType {  81,  605}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType { 138,  214}
         , (* 652*) yyTCombType {  82,  603} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {  82,  603} , (* 655*) yyTCombType {  82,  603}
         , (* 656*) yyTCombType {  81,  605} , (* 657*) yyTCombType {  81,  605}
         , (* 658*) yyTCombType {  81,  605} , (* 659*) yyTCombType {  81,  605}
         , (* 660*) yyTCombType {  81,  605} , (* 661*) yyTCombType {  81,  605}
         , (* 662*) yyTCombType {  81,  605} , (* 663*) yyTCombType {  81,  605}
         , (* 664*) yyTCombType {  81,  605} , (* 665*) yyTCombType {  81,  241}
         , (* 666*) yyTCombType {  81,  242} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {   0,    0} , (* 671*) yyTCombType {   0,    0}
         , (* 672*) yyTCombType { 139,  492} , (* 673*) yyTCombType {   0,    0}
         , (* 674*) yyTCombType {  83,   70} , (* 675*) yyTCombType {   0,    0}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType { 139,  492}
         , (* 678*) yyTCombType {   0,    0} , (* 679*) yyTCombType {  82,  603}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType {  82,  603}
         , (* 682*) yyTCombType { 139,  492} , (* 683*) yyTCombType {  82,  603}
         , (* 684*) yyTCombType {  82,  603} , (* 685*) yyTCombType {   0,    0}
         , (* 686*) yyTCombType {   0,    0} , (* 687*) yyTCombType {  82,  603}
         , (* 688*) yyTCombType {  83,  597} , (* 689*) yyTCombType {   0,    0}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType {  89,  602}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType {   0,    0}
         , (* 694*) yyTCombType {  82,  603} , (* 695*) yyTCombType {  82,  603}
         , (* 696*) yyTCombType {  82,  603} , (* 697*) yyTCombType {  82,  603}
         , (* 698*) yyTCombType {  82,  603} , (* 699*) yyTCombType {  82,  603}
         , (* 700*) yyTCombType {  82,  236} , (* 701*) yyTCombType {  82,  237}
         , (* 702*) yyTCombType {  82,  238} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {  83,  597} , (* 705*) yyTCombType {  89,  602}
         , (* 706*) yyTCombType { 139,  492} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType {  83,  597} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType {  83,  597} , (* 711*) yyTCombType {  83,  597}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {   0,    0}
         , (* 714*) yyTCombType { 139,  492} , (* 715*) yyTCombType { 139,  212}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType {  89,  229}
         , (* 718*) yyTCombType {   0,    0} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType { 139,  492} , (* 721*) yyTCombType {  89,  602}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType { 139,   44} , (* 725*) yyTCombType {  89,  602}
         , (* 726*) yyTCombType { 139,  492} , (* 727*) yyTCombType {  89,  602}
         , (* 728*) yyTCombType {  89,  602} , (* 729*) yyTCombType {   0,    0}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType { 142,  498}
         , (* 732*) yyTCombType { 143,  499} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType {   0,    0} , (* 735*) yyTCombType {  83,  597}
         , (* 736*) yyTCombType { 142,  498} , (* 737*) yyTCombType { 143,  499}
         , (* 738*) yyTCombType {   0,    0} , (* 739*) yyTCombType {  83,  597}
         , (* 740*) yyTCombType {  83,  597} , (* 741*) yyTCombType { 142,  498}
         , (* 742*) yyTCombType { 143,  499} , (* 743*) yyTCombType {  83,  597}
         , (* 744*) yyTCombType {   0,    0} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType { 184,  441} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType {   0,    0} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {  83,  597} , (* 751*) yyTCombType { 184,  441}
         , (* 752*) yyTCombType {  89,  602} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType {  89,  230} , (* 755*) yyTCombType {   0,    0}
         , (* 756*) yyTCombType {  89,  602} , (* 757*) yyTCombType {  89,  602}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType { 184,   13}
         , (* 760*) yyTCombType {  89,  602} , (* 761*) yyTCombType {   0,    0}
         , (* 762*) yyTCombType { 184,   15} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType {   0,    0} , (* 765*) yyTCombType { 142,  498}
         , (* 766*) yyTCombType { 143,  499} , (* 767*) yyTCombType {  89,  602}
         , (* 768*) yyTCombType {  89,  231} , (* 769*) yyTCombType {  89,  232}
         , (* 770*) yyTCombType {  89,  233} , (* 771*) yyTCombType {  89,  234}
         , (* 772*) yyTCombType {  89,  235} , (* 773*) yyTCombType { 142,  498}
         , (* 774*) yyTCombType { 143,  499} , (* 775*) yyTCombType { 184,  441}
         , (* 776*) yyTCombType { 192,  430} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType {   0,    0} , (* 779*) yyTCombType { 142,  498}
         , (* 780*) yyTCombType { 143,  499} , (* 781*) yyTCombType { 192,  430}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType { 184,  441}
         , (* 784*) yyTCombType {   0,    0} , (* 785*) yyTCombType { 142,  498}
         , (* 786*) yyTCombType { 143,  499} , (* 787*) yyTCombType { 193,  441}
         , (* 788*) yyTCombType {   0,    0} , (* 789*) yyTCombType { 184,  441}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType { 193,  441} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType { 192,  430} , (* 795*) yyTCombType { 184,  441}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType { 192,  430}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {   0,    0} , (* 805*) yyTCombType { 193,   13}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType { 193,   15} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType { 192,  430} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType {   0,    0} , (* 817*) yyTCombType {   0,    0}
         , (* 818*) yyTCombType { 192,  430} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType { 193,  441}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType { 192,  430} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType { 193,  441}
         , (* 830*) yyTCombType { 192,  430} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType {   0,    0} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType {   0,    0} , (* 835*) yyTCombType { 193,  441}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType {   0,    0}
         , (* 838*) yyTCombType {   0,    0} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType {   0,    0} , (* 841*) yyTCombType { 193,  441}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType {   0,    0} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType {   0,    0} , (* 855*) yyTCombType {   0,    0}
         , (* 856*) yyTCombType {   0,    0} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType {   0,    0} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType {   0,    0} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  280 , (* 110*)    5 , (* 111*)  281 , (* 112*)  282
         , (* 113*)  283 , (* 114*)  284 , (* 115*)  285 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  179 , (* 119*)  190 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  277 , (* 124*)  279
         , (* 125*)   10 , (* 126*)    8 , (* 127*)  286 , (* 128*)  287
         , (* 129*)   31 , (* 130*)   12 , (* 131*)  160 , (* 132*)   14
         , (* 133*)  172 , (* 134*)  291 , (* 135*)  178 , (* 136*)   16
         , (* 137*)  189 , (* 138*)  288 , (* 139*)   16 , (* 140*)  293
         , (* 141*)  294 , (* 142*)   24 , (* 143*)   28 , (* 144*)   26
         , (* 145*)  295 , (* 146*)   33 , (* 147*)  292 , (* 148*)  278
         , (* 149*)  278 , (* 150*)   20 , (* 151*)  278 , (* 152*)   30
         , (* 153*)  278 , (* 154*)  297 , (* 155*)   18 , (* 156*)  290
         , (* 157*)  278 , (* 158*)   35 , (* 159*)  289 , (* 160*)  351
         , (* 161*)  278 , (* 162*)   21 , (* 163*)  278 , (* 164*)  278
         , (* 165*)  278 , (* 166*)  278 , (* 167*)  278 , (* 168*)  298
         , (* 169*)  127 , (* 170*)  278 , (* 171*)  296 , (* 172*)   56
         , (* 173*)  298 , (* 174*)  365 , (* 175*)  324 , (* 176*)   36
         , (* 177*)  278 , (* 178*)  375 , (* 179*)  278 , (* 180*)  324
         , (* 181*)  362 , (* 182*)  328 , (* 183*)  278 , (* 184*)  369
         , (* 185*)  130 , (* 186*)  134 , (* 187*)  379 , (* 188*)  329
         , (* 189*)  349 , (* 190*)  138 , (* 191*)   80 , (* 192*)  136
         , (* 193*)  278 , (* 194*)  382 , (* 195*)  389 , (* 196*)  169
         , (* 197*)  142 , (* 198*)  278 , (* 199*)  384 , (* 200*)  278
         , (* 201*)  149 , (* 202*)  150 , (* 203*)  165 , (* 204*)  328
         , (* 205*)  278 , (* 206*)  299 , (* 207*)  278 , (* 208*)   37
         , (* 209*)  129 , (* 210*)   39 , (* 211*)   53 , (* 212*)  353
         , (* 213*)  278 , (* 214*)   38 , (* 215*)   39 , (* 216*)  278
         , (* 217*)  300 , (* 218*)  120 , (* 219*)  166 , (* 220*)  364
         , (* 221*)  353 , (* 222*)  357 , (* 223*)  126 , (* 224*)   62
         , (* 225*)   95 , (* 226*)  171 , (* 227*)  278 , (* 228*)  278
         , (* 229*)  278 , (* 230*)  112 , (* 231*)  114 , (* 232*)  112
         , (* 233*)   53 , (* 234*)  355 , (* 235*)  107 , (* 236*)  359
         , (* 237*)  278 , (* 238*)  104 , (* 239*)  105 , (* 240*)  363
         , (* 241*)  107 , (* 242*)  278 , (* 243*)  301 , (* 244*)  330
         , (* 245*)   55 , (* 246*)  278 , (* 247*)  302 , (* 248*)  303
         , (* 249*)  278 , (* 250*)   63 , (* 251*)   45 , (* 252*)  373
         , (* 253*)   72 , (* 254*)   74 , (* 255*)  331 , (* 256*)  146
         , (* 257*)  347 , (* 258*)  391 , (* 259*)  344 , (* 260*)   49
         , (* 261*)   76 , (* 262*)   50 , (* 263*)  326 , (* 264*)  337
         , (* 265*)  338 , (* 266*)  350 , (* 267*)   55 , (* 268*)  325
         , (* 269*)  118 , (* 270*)  117 , (* 271*)   90 , (* 272*)   91
         , (* 273*)  361 , (* 274*)  385 , (* 275*)  182 , (* 276*)  148
         , (* 277*)  181 , (* 278*)  184 , (* 279*)  392 , (* 280*)  393
         , (* 281*)  159 , (* 282*)  305 , (* 283*)  306 , (* 284*)  307
         , (* 285*)  308 , (* 286*)  309 , (* 287*)  310 , (* 288*)  311
         , (* 289*)  312 , (* 290*)  313 , (* 291*)  314 , (* 292*)  315
         , (* 293*)  316 , (* 294*)  317 , (* 295*)  318 , (* 296*)  319
         , (* 297*)  320 , (* 298*)   46 , (* 299*)  322 , (* 300*)  323
         , (* 301*)   48 , (* 302*)  300 , (* 303*)  327 , (* 304*)  168
         , (* 305*)  100 , (* 306*)  366 , (* 307*)  102 , (* 308*)   52
         , (* 309*)  191 , (* 310*)  367 , (* 311*)  193 , (* 312*)    0
         , (* 313*)  147 , (* 314*)  328 , (* 315*)  354 , (* 316*)  102
         , (* 317*)  395 , (* 318*)    0 , (* 319*)   93 , (* 320*)   96
         , (* 321*)   97 , (* 322*)  111 , (* 323*)  112 , (* 324*)    0
         , (* 325*)  151 , (* 326*)    0 , (* 327*)  278 , (* 328*)  301
         , (* 329*)  278 , (* 330*)    0 , (* 331*)  398 , (* 332*)  302
         , (* 333*)  303 , (* 334*)  328 , (* 335*)  278 , (* 336*)   45
         , (* 337*)  372 , (* 338*)    0 , (* 339*)  278 , (* 340*)  162
         , (* 341*)  397 , (* 342*)  278 , (* 343*)  108 , (* 344*)  292
         , (* 345*)  185 , (* 346*)  195 , (* 347*)   20 , (* 348*)   89
         , (* 349*)   82 , (* 350*)    0 , (* 351*)   81 , (* 352*)    0
         , (* 353*)  339 , (* 354*)    0 , (* 355*)  335 , (* 356*)   77
         , (* 357*)   78 , (* 358*)  292 , (* 359*)  278 , (* 360*)    0
         , (* 361*)   20 , (* 362*)  376 , (* 363*)   53 , (* 364*)  300
         , (* 365*)    0 , (* 366*)    0 , (* 367*)  305 , (* 368*)  306
         , (* 369*)  307 , (* 370*)  308 , (* 371*)  309 , (* 372*)  310
         , (* 373*)  311 , (* 374*)  312 , (* 375*)  313 , (* 376*)  314
         , (* 377*)  315 , (* 378*)  316 , (* 379*)  317 , (* 380*)  318
         , (* 381*)  319 , (* 382*)  320 , (* 383*)   46 , (* 384*)  322
         , (* 385*)  323 , (* 386*)   48 , (* 387*)  278 , (* 388*)  327
         , (* 389*)  278 , (* 390*)  301 , (* 391*)   62 , (* 392*)    0
         , (* 393*)   52 , (* 394*)  302 , (* 395*)  303 , (* 396*)  330
         , (* 397*)   55 , (* 398*)   45 , (* 399*)  304 , (* 400*)  177
         , (* 401*)    0 , (* 402*)  194 , (* 403*)    0 , (* 404*)   93
         , (* 405*)   96 , (* 406*)   97 , (* 407*)  111 , (* 408*)  122
         , (* 409*)  370 , (* 410*)  124 , (* 411*)    0 , (* 412*)  132
         , (* 413*)  133 , (* 414*)    0 , (* 415*)  292 , (* 416*)  278
         , (* 417*)   63 , (* 418*)   20 , (* 419*)    0 , (* 420*)    0
         , (* 421*)    0 , (* 422*)  331 , (* 423*)   98 , (* 424*)   91
         , (* 425*)  278 , (* 426*)  300 , (* 427*)  109 , (* 428*)   62
         , (* 429*)  305 , (* 430*)  306 , (* 431*)  307 , (* 432*)  308
         , (* 433*)  309 , (* 434*)  310 , (* 435*)  311 , (* 436*)  312
         , (* 437*)  313 , (* 438*)  314 , (* 439*)  315 , (* 440*)  316
         , (* 441*)  317 , (* 442*)  318 , (* 443*)  319 , (* 444*)  320
         , (* 445*)   46 , (* 446*)  322 , (* 447*)  323 , (* 448*)   48
         , (* 449*)   62 , (* 450*)  327 , (* 451*)  278 , (* 452*)  301
         , (* 453*)  278 , (* 454*)   63 , (* 455*)   52 , (* 456*)  302
         , (* 457*)  303 , (* 458*)  395 , (* 459*)  331 , (* 460*)   45
         , (* 461*)  321 , (* 462*)  188 , (* 463*)    0 , (* 464*)  196
         , (* 465*)    0 , (* 466*)   93 , (* 467*)   96 , (* 468*)   97
         , (* 469*)  111 , (* 470*)  151 , (* 471*)    0 , (* 472*)  348
         , (* 473*)    0 , (* 474*)  278 , (* 475*)   63 , (* 476*)    0
         , (* 477*)    0 , (* 478*)    0 , (* 479*)    0 , (* 480*)  331
         , (* 481*)    0 , (* 482*)  396 , (* 483*)  278 , (* 484*)    0
         , (* 485*)    0 , (* 486*)    0 , (* 487*)  278 , (* 488*)   62
         , (* 489*)  278 , (* 490*)    0 , (* 491*)  305 , (* 492*)  306
         , (* 493*)  307 , (* 494*)  308 , (* 495*)  309 , (* 496*)  310
         , (* 497*)  311 , (* 498*)  312 , (* 499*)  313 , (* 500*)  314
         , (* 501*)  315 , (* 502*)  316 , (* 503*)  317 , (* 504*)  318
         , (* 505*)  319 , (* 506*)  320 , (* 507*)   46 , (* 508*)  322
         , (* 509*)  323 , (* 510*)   48 , (* 511*)   62 , (* 512*)  327
         , (* 513*)  278 , (* 514*)   63 , (* 515*)   62 , (* 516*)   73
         , (* 517*)   52 , (* 518*)   81 , (* 519*)  331 , (* 520*)  339
         , (* 521*)    0 , (* 522*)  335 , (* 523*)   77 , (* 524*)   78
         , (* 525*)    0 , (* 526*)    0 , (* 527*)    0 , (* 528*)   93
         , (* 529*)   96 , (* 530*)   97 , (* 531*)  111 , (* 532*)  345
         , (* 533*)    0 , (* 534*)    0 , (* 535*)    0 , (* 536*)  278
         , (* 537*)   63 , (* 538*)   62 , (* 539*)    0 , (* 540*)  278
         , (* 541*)   63 , (* 542*)  331 , (* 543*)    0 , (* 544*)    0
         , (* 545*)    0 , (* 546*)  331 , (* 547*)    0 , (* 548*)    0
         , (* 549*)   67 , (* 550*)   83 , (* 551*)  340 , (* 552*)   71
         , (* 553*)   82 , (* 554*)    0 , (* 555*)   81 , (* 556*)    0
         , (* 557*)  339 , (* 558*)   65 , (* 559*)  335 , (* 560*)   77
         , (* 561*)   78 , (* 562*)    0 , (* 563*)  278 , (* 564*)   63
         , (* 565*)    0 , (* 566*)    0 , (* 567*)    0 , (* 568*)   62
         , (* 569*)  331 , (* 570*)   88 , (* 571*)   83 , (* 572*)  340
         , (* 573*)   71 , (* 574*)   82 , (* 575*)   62 , (* 576*)   81
         , (* 577*)    0 , (* 578*)  339 , (* 579*)    0 , (* 580*)  335
         , (* 581*)   77 , (* 582*)   78 , (* 583*)  278 , (* 584*)   63
         , (* 585*)    0 , (* 586*)    0 , (* 587*)    0 , (* 588*)    0
         , (* 589*)  331 , (* 590*)    0 , (* 591*)    0 , (* 592*)    0
         , (* 593*)  278 , (* 594*)   63 , (* 595*)    0 , (* 596*)    0
         , (* 597*)   62 , (* 598*)    0 , (* 599*)  331 , (* 600*)  278
         , (* 601*)   63 , (* 602*)  341 , (* 603*)    0 , (* 604*)    0
         , (* 605*)    0 , (* 606*)  331 , (* 607*)    0 , (* 608*)    0
         , (* 609*)   67 , (* 610*)   83 , (* 611*)  340 , (* 612*)   71
         , (* 613*)   82 , (* 614*)    0 , (* 615*)   81 , (* 616*)    0
         , (* 617*)  339 , (* 618*)    0 , (* 619*)  335 , (* 620*)   77
         , (* 621*)   78 , (* 622*)  278 , (* 623*)   63 , (* 624*)   86
         , (* 625*)    0 , (* 626*)    0 , (* 627*)    0 , (* 628*)  331
         , (* 629*)   65 , (* 630*)    0 , (* 631*)    0 , (* 632*)    0
         , (* 633*)   69 , (* 634*)  340 , (* 635*)   71 , (* 636*)   82
         , (* 637*)    0 , (* 638*)   81 , (* 639*)    0 , (* 640*)  339
         , (* 641*)  332 , (* 642*)  335 , (* 643*)   77 , (* 644*)   78
         , (* 645*)    0 , (* 646*)  336 , (* 647*)  328 , (* 648*)   78
         , (* 649*)    0 , (* 650*)    0 , (* 651*)    0 , (* 652*)    0
         , (* 653*)    0 , (* 654*)  278 , (* 655*)   63 , (* 656*)    0
         , (* 657*)    0 , (* 658*)    0 , (* 659*)    0 , (* 660*)  331
         , (* 661*)  333 , (* 662*)   71 , (* 663*)   82 , (* 664*)    0
         , (* 665*)   81 , (* 666*)    0 , (* 667*)  339 , (* 668*)    0
         , (* 669*)  335 , (* 670*)   77 , (* 671*)   78 , (* 672*)  278
         , (* 673*)  341 , (* 674*)    0 , (* 675*)    0 , (* 676*)   53
         , (* 677*)    0 , (* 678*)    0 , (* 679*)   67 , (* 680*)   83
         , (* 681*)  340 , (* 682*)   71 , (* 683*)   82 , (* 684*)    0
         , (* 685*)   81 , (* 686*)    0 , (* 687*)  339 , (* 688*)    0
         , (* 689*)  335 , (* 690*)   77 , (* 691*)   78 , (* 692*)    0
         , (* 693*)    0 , (* 694*)    0 , (* 695*)   84 , (* 696*)  343
         , (* 697*)  334 , (* 698*)  376 , (* 699*)  335 , (* 700*)   77
         , (* 701*)   78 , (* 702*)   75 , (* 703*)    0 , (* 704*)  339
         , (* 705*)    0 , (* 706*)  335 , (* 707*)   77 , (* 708*)   78
         , (* 709*)  368 , (* 710*)   55 , (* 711*)   62 , (* 712*)    0
         , (* 713*)    0 , (* 714*)  328 , (* 715*)    0 , (* 716*)    0
         , (* 717*)    0 , (* 718*)   67 , (* 719*)   83 , (* 720*)  340
         , (* 721*)   71 , (* 722*)   82 , (* 723*)  278 , (* 724*)   81
         , (* 725*)    0 , (* 726*)  339 , (* 727*)    0 , (* 728*)  335
         , (* 729*)   77 , (* 730*)   78 , (* 731*)    0 , (* 732*)    0
         , (* 733*)    0 , (* 734*)    0 , (* 735*)    0 , (* 736*)  278
         , (* 737*)   63 , (* 738*)   62 , (* 739*)  278 , (* 740*)  300
         , (* 741*)    0 , (* 742*)  331 , (* 743*)   53 , (* 744*)    0
         , (* 745*)  377 , (* 746*)    0 , (* 747*)  131 , (* 748*)  135
         , (* 749*)  133 , (* 750*)   67 , (* 751*)   83 , (* 752*)  340
         , (* 753*)   71 , (* 754*)   82 , (* 755*)  346 , (* 756*)   81
         , (* 757*)    0 , (* 758*)  339 , (* 759*)  300 , (* 760*)  335
         , (* 761*)   77 , (* 762*)   78 , (* 763*)  278 , (* 764*)   63
         , (* 765*)  278 , (* 766*)  301 , (* 767*)  342 , (* 768*)    0
         , (* 769*)  331 , (* 770*)  302 , (* 771*)  303 , (* 772*)    0
         , (* 773*)  383 , (* 774*)  137 , (* 775*)  143 , (* 776*)  145
         , (* 777*)   55 , (* 778*)    0 , (* 779*)    0 , (* 780*)    0
         , (* 781*)    0 , (* 782*)  352 , (* 783*)    0 , (* 784*)  278
         , (* 785*)  301 , (* 786*)  328 , (* 787*)    0 , (* 788*)    0
         , (* 789*)  302 , (* 790*)  303 , (* 791*)    0 , (* 792*)    0
         , (* 793*)  137 , (* 794*)  381 , (* 795*)    0 , (* 796*)  139
         , (* 797*)  141 , (* 798*)    0 , (* 799*)    0 , (* 800*)    0
         , (* 801*)    0 , (* 802*)    0 , (* 803*)    0 , (* 804*)    0
         , (* 805*)    0 , (* 806*)    0 , (* 807*)    0 , (* 808*)    0
         , (* 809*)    0 , (* 810*)    0 , (* 811*)  278 , (* 812*)    0
         , (* 813*)    0 , (* 814*)    0 , (* 815*)   53 , (* 816*)  140
         , (* 817*)    0 , (* 818*)    0 , (* 819*)    0 , (* 820*)  300
         , (* 821*)    0 , (* 822*)    0 , (* 823*)    0 , (* 824*)    0
         , (* 825*)    0 , (* 826*)    0 , (* 827*)    0 , (* 828*)    0
         , (* 829*)    0 , (* 830*)    0 , (* 831*)    0 , (* 832*)   67
         , (* 833*)   83 , (* 834*)  340 , (* 835*)   71 , (* 836*)   82
         , (* 837*)    0 , (* 838*)   81 , (* 839*)    0 , (* 840*)  339
         , (* 841*)    0 , (* 842*)  335 , (* 843*)   77 , (* 844*)   78
         , (* 845*)  278 , (* 846*)  301 , (* 847*)    0 , (* 848*)  144
         , (* 849*)   55 , (* 850*)  302 , (* 851*)  303 , (* 852*)    0
         , (* 853*)    0 , (* 854*)   45 , (* 855*)  356 , (* 856*)    0
         , (* 857*)    0 , (* 858*)    0 , (* 859*)   67 , (* 860*)   83
         , (* 861*)  340 , (* 862*)   71 , (* 863*)   82 , (* 864*)    0
         , (* 865*)   81 , (* 866*)    0 , (* 867*)  339 , (* 868*)    0
         , (* 869*)  335 , (* 870*)   77 , (* 871*)   78 , (* 872*)    0
         , (* 873*)    0 , (* 874*)    0 , (* 875*)    0 , (* 876*)    0
         , (* 877*)    0 , (* 878*)    0 , (* 879*)    0 , (* 880*)    0
         , (* 881*)    0 , (* 882*)  300 , (* 883*)    0 , (* 884*)   62
         , (* 885*)  305 , (* 886*)  306 , (* 887*)  307 , (* 888*)  308
         , (* 889*)  309 , (* 890*)  310 , (* 891*)  311 , (* 892*)  312
         , (* 893*)  313 , (* 894*)  314 , (* 895*)  315 , (* 896*)  316
         , (* 897*)  317 , (* 898*)  318 , (* 899*)  319 , (* 900*)  320
         , (* 901*)   46 , (* 902*)  322 , (* 903*)  323 , (* 904*)   48
         , (* 905*)    0 , (* 906*)  327 , (* 907*)  278 , (* 908*)  301
         , (* 909*)  278 , (* 910*)   63 , (* 911*)   52 , (* 912*)  302
         , (* 913*)  303 , (* 914*)    0 , (* 915*)  331 , (* 916*)   45
         , (* 917*)  358 , (* 918*)   36 , (* 919*)    0 , (* 920*)  375
         , (* 921*)    0 , (* 922*)   93 , (* 923*)   96 , (* 924*)   97
         , (* 925*)  111 , (* 926*)    0 , (* 927*)  130 , (* 928*)  360
         , (* 929*)  379 , (* 930*)    0 , (* 931*)    0 , (* 932*)    0
         , (* 933*)    0 , (* 934*)  136 , (* 935*)    0 , (* 936*)  382
         , (* 937*)    0 , (* 938*)    0 , (* 939*)  142 , (* 940*)    0
         , (* 941*)  384 , (* 942*)    0 , (* 943*)    0 , (* 944*)   62
         , (* 945*)    0 , (* 946*)    0 , (* 947*)  305 , (* 948*)  306
         , (* 949*)  307 , (* 950*)  308 , (* 951*)  309 , (* 952*)  310
         , (* 953*)  311 , (* 954*)  312 , (* 955*)  313 , (* 956*)  314
         , (* 957*)  315 , (* 958*)  316 , (* 959*)  317 , (* 960*)  318
         , (* 961*)  319 , (* 962*)  320 , (* 963*)   46 , (* 964*)  322
         , (* 965*)  323 , (* 966*)   48 , (* 967*)    0 , (* 968*)  327
         , (* 969*)  278 , (* 970*)   63 , (* 971*)    0 , (* 972*)    0
         , (* 973*)   52 , (* 974*)    0 , (* 975*)  331 , (* 976*)    0
         , (* 977*)    0 , (* 978*)    0 , (* 979*)    0 , (* 980*)    0
         , (* 981*)    0 , (* 982*)    0 , (* 983*)    0 , (* 984*)   93
         , (* 985*)   96 , (* 986*)   97 , (* 987*)  111 , (* 988*)  371
         , (* 989*)    0 , (* 990*)    0 , (* 991*)    0 , (* 992*)    0
         , (* 993*)   62 , (* 994*)    0 , (* 995*)    0 , (* 996*)    0
         , (* 997*)    0 , (* 998*)  146 , (* 999*)    0 , (*1000*)  391
         , (*1001*)    0 , (*1002*)    0 , (*1003*)    0 , (*1004*)    0
         , (*1005*)   67 , (*1006*)   83 , (*1007*)  340 , (*1008*)   71
         , (*1009*)   82 , (*1010*)    0 , (*1011*)   81 , (*1012*)    0
         , (*1013*)  339 , (*1014*)    0 , (*1015*)  335 , (*1016*)   77
         , (*1017*)   78 , (*1018*)  278 , (*1019*)   63 , (*1020*)    0
         , (*1021*)  394 , (*1022*)  393 , (*1023*)    0 , (*1024*)  331
         , (*1025*)    0 , (*1026*)    0 , (*1027*)    0 , (*1028*)    0
         , (*1029*)    0 , (*1030*)    0 , (*1031*)    0 , (*1032*)    0
         , (*1033*)    0 , (*1034*)    0 , (*1035*)    0 , (*1036*)    0
         , (*1037*)  374 , (*1038*)    0 , (*1039*)    0 , (*1040*)    0
         , (*1041*)    0 , (*1042*)    0 , (*1043*)    0 , (*1044*)    0
         , (*1045*)    0 , (*1046*)    0 , (*1047*)    0 , (*1048*)    0
         , (*1049*)    0 , (*1050*)    0 , (*1051*)    0 , (*1052*)    0
         , (*1053*)    0 , (*1054*)    0 , (*1055*)    0 , (*1056*)    0
         , (*1057*)    0 , (*1058*)    0 , (*1059*)  152 , (*1060*)    0
         , (*1061*)    0 , (*1062*)  300 , (*1063*)    0 , (*1064*)    0
         , (*1065*)   67 , (*1066*)   83 , (*1067*)  340 , (*1068*)   71
         , (*1069*)   82 , (*1070*)    0 , (*1071*)   81 , (*1072*)    0
         , (*1073*)  339 , (*1074*)    0 , (*1075*)  335 , (*1076*)   77
         , (*1077*)   78 , (*1078*)    0 , (*1079*)    0 , (*1080*)    0
         , (*1081*)    0 , (*1082*)    0 , (*1083*)    0 , (*1084*)    0
         , (*1085*)    0 , (*1086*)    0 , (*1087*)  278 , (*1088*)  301
         , (*1089*)   36 , (*1090*)    0 , (*1091*)  375 , (*1092*)  302
         , (*1093*)  303 , (*1094*)    0 , (*1095*)    0 , (*1096*)   45
         , (*1097*)  378 , (*1098*)  130 , (*1099*)    0 , (*1100*)  379
         , (*1101*)    0 , (*1102*)    0 , (*1103*)    0 , (*1104*)    0
         , (*1105*)  136 , (*1106*)    0 , (*1107*)  382 , (*1108*)    0
         , (*1109*)    0 , (*1110*)  142 , (*1111*)    0 , (*1112*)  384
         , (*1113*)    0 , (*1114*)   67 , (*1115*)   83 , (*1116*)  340
         , (*1117*)   71 , (*1118*)   82 , (*1119*)    0 , (*1120*)   81
         , (*1121*)    0 , (*1122*)  339 , (*1123*)    0 , (*1124*)  335
         , (*1125*)   77 , (*1126*)   78 , (*1127*)  305 , (*1128*)  306
         , (*1129*)  307 , (*1130*)  308 , (*1131*)  309 , (*1132*)  310
         , (*1133*)  311 , (*1134*)  312 , (*1135*)  313 , (*1136*)  314
         , (*1137*)  315 , (*1138*)  316 , (*1139*)  317 , (*1140*)  318
         , (*1141*)  319 , (*1142*)  320 , (*1143*)   46 , (*1144*)  322
         , (*1145*)  323 , (*1146*)   48 , (*1147*)  300 , (*1148*)  327
         , (*1149*)    0 , (*1150*)    0 , (*1151*)    0 , (*1152*)    0
         , (*1153*)   52 , (*1154*)    0 , (*1155*)    0 , (*1156*)    0
         , (*1157*)    0 , (*1158*)    0 , (*1159*)   62 , (*1160*)    0
         , (*1161*)    0 , (*1162*)    0 , (*1163*)    0 , (*1164*)   93
         , (*1165*)   96 , (*1166*)   97 , (*1167*)  111 , (*1168*)    0
         , (*1169*)  146 , (*1170*)  154 , (*1171*)  391 , (*1172*)  278
         , (*1173*)  301 , (*1174*)    0 , (*1175*)    0 , (*1176*)    0
         , (*1177*)  302 , (*1178*)  303 , (*1179*)    0 , (*1180*)    0
         , (*1181*)   45 , (*1182*)  380 , (*1183*)    0 , (*1184*)  278
         , (*1185*)   63 , (*1186*)    0 , (*1187*)    0 , (*1188*)    0
         , (*1189*)    0 , (*1190*)  331 , (*1191*)    0 , (*1192*)  392
         , (*1193*)  393 , (*1194*)  159 , (*1195*)    0 , (*1196*)    0
         , (*1197*)    0 , (*1198*)    0 , (*1199*)    0 , (*1200*)    0
         , (*1201*)    0 , (*1202*)    0 , (*1203*)  155 , (*1204*)    0
         , (*1205*)    0 , (*1206*)    0 , (*1207*)    0 , (*1208*)    0
         , (*1209*)   62 , (*1210*)    0 , (*1211*)    0 , (*1212*)  305
         , (*1213*)  306 , (*1214*)  307 , (*1215*)  308 , (*1216*)  309
         , (*1217*)  310 , (*1218*)  311 , (*1219*)  312 , (*1220*)  313
         , (*1221*)  314 , (*1222*)  315 , (*1223*)  316 , (*1224*)  317
         , (*1225*)  318 , (*1226*)  319 , (*1227*)  320 , (*1228*)   46
         , (*1229*)  322 , (*1230*)  323 , (*1231*)   48 , (*1232*)   62
         , (*1233*)  327 , (*1234*)  278 , (*1235*)   63 , (*1236*)    0
         , (*1237*)    0 , (*1238*)   52 , (*1239*)    0 , (*1240*)  331
         , (*1241*)    0 , (*1242*)    0 , (*1243*)    0 , (*1244*)    0
         , (*1245*)    0 , (*1246*)    0 , (*1247*)    0 , (*1248*)    0
         , (*1249*)   93 , (*1250*)   96 , (*1251*)   97 , (*1252*)  111
         , (*1253*)  386 , (*1254*)    0 , (*1255*)    0 , (*1256*)    0
         , (*1257*)  278 , (*1258*)   63 , (*1259*)    0 , (*1260*)    0
         , (*1261*)    0 , (*1262*)    0 , (*1263*)  331 , (*1264*)    0
         , (*1265*)    0 , (*1266*)    0 , (*1267*)    0 , (*1268*)  173
         , (*1269*)    0 , (*1270*)    0 , (*1271*)    0 , (*1272*)    0
         , (*1273*)    0 , (*1274*)    0 , (*1275*)    0 , (*1276*)  155
         , (*1277*)    0 , (*1278*)    0 , (*1279*)    0 , (*1280*)   67
         , (*1281*)   83 , (*1282*)  340 , (*1283*)   71 , (*1284*)   82
         , (*1285*)    0 , (*1286*)   81 , (*1287*)    0 , (*1288*)  339
         , (*1289*)    0 , (*1290*)  335 , (*1291*)   77 , (*1292*)   78
         , (*1293*)    0 , (*1294*)    0 , (*1295*)    0 , (*1296*)    0
         , (*1297*)    0 , (*1298*)   36 , (*1299*)    0 , (*1300*)  375
         , (*1301*)    0 , (*1302*)  157 , (*1303*)  390 , (*1304*)  388
         , (*1305*)    0 , (*1306*)    0 , (*1307*)  130 , (*1308*)    0
         , (*1309*)  379 , (*1310*)    0 , (*1311*)    0 , (*1312*)    0
         , (*1313*)    0 , (*1314*)  136 , (*1315*)    0 , (*1316*)  382
         , (*1317*)    0 , (*1318*)   62 , (*1319*)  142 , (*1320*)    0
         , (*1321*)  384 , (*1322*)    0 , (*1323*)    0 , (*1324*)    0
         , (*1325*)    0 , (*1326*)    0 , (*1327*)    0 , (*1328*)    0
         , (*1329*)  175 , (*1330*)   67 , (*1331*)   83 , (*1332*)  340
         , (*1333*)   71 , (*1334*)   82 , (*1335*)    0 , (*1336*)   81
         , (*1337*)    0 , (*1338*)  339 , (*1339*)    0 , (*1340*)  335
         , (*1341*)   77 , (*1342*)   78 , (*1343*)  278 , (*1344*)   63
         , (*1345*)    0 , (*1346*)    0 , (*1347*)    0 , (*1348*)    0
         , (*1349*)  331 , (*1350*)    0 , (*1351*)    0 , (*1352*)    0
         , (*1353*)   67 , (*1354*)   83 , (*1355*)  340 , (*1356*)   71
         , (*1357*)   82 , (*1358*)  186 , (*1359*)   81 , (*1360*)    0
         , (*1361*)  339 , (*1362*)  155 , (*1363*)  335 , (*1364*)   77
         , (*1365*)   78 , (*1366*)    0 , (*1367*)    0 , (*1368*)    0
         , (*1369*)    0 , (*1370*)    0 , (*1371*)    0 , (*1372*)    0
         , (*1373*)    0 , (*1374*)    0 , (*1375*)    0 , (*1376*)  387
         , (*1377*)  388 , (*1378*)  146 , (*1379*)    0 , (*1380*)  391
         , (*1381*)    0 , (*1382*)    0 , (*1383*)    0 , (*1384*)    0
         , (*1385*)    0 , (*1386*)    0 , (*1387*)    0 , (*1388*)   36
         , (*1389*)    0 , (*1390*)  375 , (*1391*)    0 , (*1392*)    0
         , (*1393*)    0 , (*1394*)    0 , (*1395*)    0 , (*1396*)    0
         , (*1397*)  130 , (*1398*)    0 , (*1399*)  379 , (*1400*)    0
         , (*1401*)  392 , (*1402*)  393 , (*1403*)  159 , (*1404*)  136
         , (*1405*)    0 , (*1406*)  382 , (*1407*)    0 , (*1408*)    0
         , (*1409*)  142 , (*1410*)    0 , (*1411*)  384 , (*1412*)    0
         , (*1413*)    0 , (*1414*)    0 , (*1415*)    0 , (*1416*)    0
         , (*1417*)    0 , (*1418*)    0 , (*1419*)    0 , (*1420*)    0
         , (*1421*)    0 , (*1422*)    0 , (*1423*)    0 , (*1424*)    0
         , (*1425*)    0 , (*1426*)    0 , (*1427*)    0 , (*1428*)    0
         , (*1429*)    0 , (*1430*)    0 , (*1431*)    0 , (*1432*)    0
         , (*1433*)    0 , (*1434*)    0 , (*1435*)    0 , (*1436*)    0
         , (*1437*)    0 , (*1438*)    0 , (*1439*)   67 , (*1440*)   83
         , (*1441*)  340 , (*1442*)   71 , (*1443*)   82 , (*1444*)    0
         , (*1445*)   81 , (*1446*)    0 , (*1447*)  339 , (*1448*)    0
         , (*1449*)  335 , (*1450*)   77 , (*1451*)   78 , (*1452*)    0
         , (*1453*)    0 , (*1454*)    0 , (*1455*)    0 , (*1456*)    0
         , (*1457*)    0 , (*1458*)    0 , (*1459*)    0 , (*1460*)    0
         , (*1461*)  157 , (*1462*)  390 , (*1463*)  388 , (*1464*)    0
         , (*1465*)    0 , (*1466*)    0 , (*1467*)    0 , (*1468*)  146
         , (*1469*)    0 , (*1470*)  391 , (*1471*)    0 , (*1472*)    0
         , (*1473*)    0 , (*1474*)    0 , (*1475*)    0 , (*1476*)    0
         , (*1477*)    0 , (*1478*)    0 , (*1479*)    0 , (*1480*)    0
         , (*1481*)    0 , (*1482*)    0 , (*1483*)    0 , (*1484*)    0
         , (*1485*)    0 , (*1486*)    0 , (*1487*)    0 , (*1488*)    0
         , (*1489*)    0 , (*1490*)    0 , (*1491*)  392 , (*1492*)  393
         , (*1493*)  159 , (*1494*)    0 , (*1495*)    0 , (*1496*)    0
         , (*1497*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 399(P   1)*)    2 , (*A 400(P   2)*)    1 , (*A 401(P   3)*)    1
         , (*A 402(P   4)*)    1 , (*A 403(P   5)*)    1 , (*A 404(P   6)*)    1
         , (*A 405(P   7)*)    1 , (*A 406(P   8)*)    0 , (*A 407(P   9)*)    0
         , (*A 408(P  10)*)    0 , (*A 409(P  11)*)    0 , (*A 410(P  12)*)    0
         , (*A 411(P  13)*)    0 , (*A 412(P  14)*)    4 , (*A 413(P  15)*)    7
         , (*A 414(P  16)*)    4 , (*A 415(P  17)*)    5 , (*A 416(P  18)*)    3
         , (*A 417(P  19)*)    7 , (*A 418(P  20)*)    5 , (*A 419(P  21)*)    7
         , (*A 420(P  22)*)    3 , (*A 421(P  23)*)   10 , (*A 422(P  24)*)    3
         , (*A 423(P  25)*)    9 , (*A 424(P  26)*)    1 , (*A 425(P  27)*)    0
         , (*A 426(P  28)*)    1 , (*A 427(P  29)*)    0 , (*A 428(P  30)*)    3
         , (*A 429(P  31)*)    3 , (*A 430(P  32)*)    0 , (*A 431(P  33)*)    2
         , (*A 432(P  34)*)    3 , (*A 433(P  35)*)    1 , (*A 434(P  36)*)    3
         , (*A 435(P  37)*)    1 , (*A 436(P  38)*)    3 , (*A 437(P  39)*)    3
         , (*A 438(P  40)*)    3 , (*A 439(P  41)*)    1 , (*A 440(P  42)*)    3
         , (*A 441(P  43)*)    0 , (*A 442(P  44)*)    0 , (*A 443(P  45)*)    2
         , (*A 444(P  46)*)    1 , (*A 445(P  47)*)    3 , (*A 446(P  48)*)    1
         , (*A 447(P  49)*)    1 , (*A 448(P  50)*)    1 , (*A 449(P  51)*)    1
         , (*A 450(P  52)*)    3 , (*A 451(P  53)*)    1 , (*A 452(P  54)*)    3
         , (*A 453(P  55)*)    1 , (*A 454(P  56)*)    3 , (*A 455(P  57)*)    3
         , (*A 456(P  58)*)    0 , (*A 457(P  59)*)    1 , (*A 458(P  60)*)    1
         , (*A 459(P  61)*)    1 , (*A 460(P  62)*)    0 , (*A 461(P  63)*)    1
         , (*A 462(P  64)*)    1 , (*A 463(P  65)*)    3 , (*A 464(P  66)*)    1
         , (*A 465(P  67)*)    1 , (*A 466(P  68)*)    2 , (*A 467(P  69)*)    2
         , (*A 468(P  70)*)    0 , (*A 469(P  71)*)    1 , (*A 470(P  72)*)    2
         , (*A 471(P  73)*)    0 , (*A 472(P  74)*)    1 , (*A 473(P  75)*)    2
         , (*A 474(P  76)*)    3 , (*A 475(P  77)*)    1 , (*A 476(P  78)*)    4
         , (*A 477(P  79)*)    1 , (*A 478(P  80)*)    1 , (*A 479(P  81)*)    1
         , (*A 480(P  82)*)    2 , (*A 481(P  83)*)    0 , (*A 482(P  84)*)    1
         , (*A 483(P  85)*)    2 , (*A 484(P  86)*)    3 , (*A 485(P  87)*)    1
         , (*A 486(P  88)*)    3 , (*A 487(P  89)*)    1 , (*A 488(P  90)*)    1
         , (*A 489(P  91)*)    1 , (*A 490(P  92)*)    2 , (*A 491(P  93)*)    0
         , (*A 492(P  94)*)    1 , (*A 493(P  95)*)    2 , (*A 494(P  96)*)    3
         , (*A 495(P  97)*)    3 , (*A 496(P  98)*)    1 , (*A 497(P  99)*)    2
         , (*A 498(P 100)*)    0 , (*A 499(P 101)*)    1 , (*A 500(P 102)*)    2
         , (*A 501(P 103)*)    3 , (*A 502(P 104)*)    3 , (*A 503(P 105)*)    1
         , (*A 504(P 106)*)    2 , (*A 505(P 107)*)    0 , (*A 506(P 108)*)    2
         , (*A 507(P 109)*)    0 , (*A 508(P 110)*)    1 , (*A 509(P 111)*)    1
         , (*A 510(P 112)*)    1 , (*A 511(P 113)*)    1 , (*A 512(P 114)*)    1
         , (*A 513(P 115)*)    1 , (*A 514(P 116)*)    1 , (*A 515(P 117)*)    1
         , (*A 516(P 118)*)    1 , (*A 517(P 119)*)    1 , (*A 518(P 120)*)    1
         , (*A 519(P 121)*)    1 , (*A 520(P 122)*)    1 , (*A 521(P 123)*)    1
         , (*A 522(P 124)*)    1 , (*A 523(P 125)*)    1 , (*A 524(P 126)*)    1
         , (*A 525(P 127)*)    2 , (*A 526(P 128)*)    3 , (*A 527(P 129)*)    1
         , (*A 528(P 130)*)    3 , (*A 529(P 131)*)    1 , (*A 530(P 132)*)    0
         , (*A 531(P 133)*)    1 , (*A 532(P 134)*)    3 , (*A 533(P 135)*)    0
         , (*A 534(P 136)*)    1 , (*A 535(P 137)*)    1 , (*A 536(P 138)*)    3
         , (*A 537(P 139)*)    1 , (*A 538(P 140)*)    1 , (*A 539(P 141)*)    0
         , (*A 540(P 142)*)    2 , (*A 541(P 143)*)    1 , (*A 542(P 144)*)    3
         , (*A 543(P 145)*)    1 , (*A 544(P 146)*)    3 , (*A 545(P 147)*)    0
         , (*A 546(P 148)*)    1 , (*A 547(P 149)*)    3 , (*A 548(P 150)*)    1
         , (*A 549(P 151)*)    3 , (*A 550(P 152)*)    1 , (*A 551(P 153)*)    2
         , (*A 552(P 154)*)    0 , (*A 553(P 155)*)    1 , (*A 554(P 156)*)    3
         , (*A 555(P 157)*)    1 , (*A 556(P 158)*)    3 , (*A 557(P 159)*)    1
         , (*A 558(P 160)*)    3 , (*A 559(P 161)*)    0 , (*A 560(P 162)*)    1
         , (*A 561(P 163)*)    2 , (*A 562(P 164)*)    0 , (*A 563(P 165)*)    1
         , (*A 564(P 166)*)    1 , (*A 565(P 167)*)    3 , (*A 566(P 168)*)    5
         , (*A 567(P 169)*)    1 , (*A 568(P 170)*)    1 , (*A 569(P 171)*)    2
         , (*A 570(P 172)*)    3 , (*A 571(P 173)*)    3 , (*A 572(P 174)*)    0
         , (*A 573(P 175)*)    2 , (*A 574(P 176)*)    3 , (*A 575(P 177)*)    1
         , (*A 576(P 178)*)    0 , (*A 577(P 179)*)    1 , (*A 578(P 180)*)    1
         , (*A 579(P 181)*)    1 , (*A 580(P 182)*)    4 , (*A 581(P 183)*)    1
         , (*A 582(P 184)*)    2 , (*A 583(P 185)*)    0 , (*A 584(P 186)*)    2
         , (*A 585(P 187)*)    0 , (*A 586(P 188)*)    2 , (*A 587(P 189)*)    0
         , (*A 588(P 190)*)    0 , (*A 589(P 191)*)    2 , (*A 590(P 192)*)    4
         , (*A 591(P 193)*)    2 , (*A 592(P 194)*)    3 , (*A 593(P 195)*)    1
         , (*A 594(P 196)*)    1 , (*A 595(P 197)*)    4 , (*A 596(P 198)*)    1
         , (*A 597(P 199)*)    1 , (*A 598(P 200)*)    3 , (*A 599(P 201)*)    1
         , (*A 600(P 202)*)    3 , (*A 601(P 203)*)    1 , (*A 602(P 204)*)    2
         , (*A 603(P 205)*)    1 , (*A 604(P 206)*)    3 , (*A 605(P 207)*)    1
         , (*A 606(P 208)*)    3 , (*A 607(P 209)*)    1 , (*A 608(P 210)*)    3
         , (*A 609(P 211)*)    1 , (*A 610(P 212)*)    2 , (*A 611(P 213)*)    2
         , (*A 612(P 214)*)    2 , (*A 613(P 215)*)    2 , (*A 614(P 216)*)    3
         , (*A 615(P 217)*)    1 , (*A 616(P 218)*)    2 , (*A 617(P 219)*)    2
         , (*A 618(P 220)*)    2 , (*A 619(P 221)*)    1 , (*A 620(P 222)*)    1
         , (*A 621(P 223)*)    3 , (*A 622(P 224)*)    1 , (*A 623(P 225)*)    3
         , (*A 624(P 226)*)    3 , (*A 625(P 227)*)    0 , (*A 626(P 228)*)    1
         , (*A 627(P 229)*)    3 , (*A 628(P 230)*)    1 , (*A 629(P 231)*)    3
         , (*A 630(P 232)*)    3 , (*A 631(P 233)*)    1 , (*A 632(P 234)*)    1
         , (*A 633(P 235)*)    1 , (*A 634(P 236)*)    1 , (*A 635(P 237)*)    1
         , (*A 636(P 238)*)    1 , (*A 637(P 239)*)    1 , (*A 638(P 240)*)    1
         , (*A 639(P 241)*)    1 , (*A 640(P 242)*)    1 , (*A 641(P 243)*)    1
         , (*A 642(P 244)*)    3 , (*A 643(P 245)*)    1 , (*A 644(P 246)*)    1
         , (*A 645(P 247)*)    1 , (*A 646(P 248)*)    1 , (*A 647(P 249)*)    1
         , (*A 648(P 250)*)    1 , (*A 649(P 251)*)    1 , (*A 650(P 252)*)    1
         , (*A 651(P 253)*)    1 , (*A 652(P 254)*)    1 , (*A 653(P 255)*)    1
         , (*A 654(P 256)*)    1 , (*A 655(P 257)*)    1 , (*A 656(P 258)*)    1
         , (*A 657(P 259)*)    1 , (*A 658(P 260)*)    1 , (*A 659(P 261)*)    0
         , (*A 660(P 262)*)    5 , (*A 661(P 263)*)    1 , (*A 662(P 264)*)    1
         , (*A 663(P 265)*)    1 , (*A 664(P 266)*)    1 , (*A 665(P 267)*)    1
         , (*A 666(P 268)*)    1 , (*A 667(P 269)*)    0 , (*A 668(P 270)*)    1
         , (*A 669(P 271)*)    1 , (*A 670(P 272)*)    2 , (*A 671(P 273)*)    0
         , (*A 672(P 274)*)    2 , (*A 673(P 275)*)    1 , (*A 674(P 276)*)    3
         , (*A 675(P 277)*)    1 , (*A 676(P 278)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 399(P   1)*)  269 , (*A 400(P   2)*)  110 , (*A 401(P   3)*)  110
         , (*A 402(P   4)*)  110 , (*A 403(P   5)*)  110 , (*A 404(P   6)*)  110
         , (*A 405(P   7)*)  110 , (*A 406(P   8)*)  116 , (*A 407(P   9)*)  117
         , (*A 408(P  10)*)  118 , (*A 409(P  11)*)  119 , (*A 410(P  12)*)  120
         , (*A 411(P  13)*)  121 , (*A 412(P  14)*)  125 , (*A 413(P  15)*)  114
         , (*A 414(P  16)*)  129 , (*A 415(P  17)*)  109 , (*A 416(P  18)*)  131
         , (*A 417(P  19)*)  115 , (*A 418(P  20)*)  133 , (*A 419(P  21)*)  111
         , (*A 420(P  22)*)  135 , (*A 421(P  23)*)  112 , (*A 422(P  24)*)  137
         , (*A 423(P  25)*)  113 , (*A 424(P  26)*)  122 , (*A 425(P  27)*)  122
         , (*A 426(P  28)*)  139 , (*A 427(P  29)*)  139 , (*A 428(P  30)*)  136
         , (*A 429(P  31)*)  126 , (*A 430(P  32)*)  127 , (*A 431(P  33)*)  127
         , (*A 432(P  34)*)  141 , (*A 433(P  35)*)  142 , (*A 434(P  36)*)  142
         , (*A 435(P  37)*)  143 , (*A 436(P  38)*)  143 , (*A 437(P  39)*)  144
         , (*A 438(P  40)*)  141 , (*A 439(P  41)*)  145 , (*A 440(P  42)*)  145
         , (*A 441(P  43)*)  128 , (*A 442(P  44)*)  132 , (*A 443(P  45)*)  132
         , (*A 444(P  46)*)  146 , (*A 445(P  47)*)  146 , (*A 446(P  48)*)  147
         , (*A 447(P  49)*)  123 , (*A 448(P  50)*)  123 , (*A 449(P  51)*)  149
         , (*A 450(P  52)*)  150 , (*A 451(P  53)*)  151 , (*A 452(P  54)*)  151
         , (*A 453(P  55)*)  152 , (*A 454(P  56)*)  152 , (*A 455(P  57)*)  140
         , (*A 456(P  58)*)  140 , (*A 457(P  59)*)  153 , (*A 458(P  60)*)  153
         , (*A 459(P  61)*)  154 , (*A 460(P  62)*)  155 , (*A 461(P  63)*)  155
         , (*A 462(P  64)*)  156 , (*A 463(P  65)*)  156 , (*A 464(P  66)*)  157
         , (*A 465(P  67)*)  157 , (*A 466(P  68)*)  157 , (*A 467(P  69)*)  159
         , (*A 468(P  70)*)  159 , (*A 469(P  71)*)  160 , (*A 470(P  72)*)  162
         , (*A 471(P  73)*)  161 , (*A 472(P  74)*)  161 , (*A 473(P  75)*)  163
         , (*A 474(P  76)*)  163 , (*A 475(P  77)*)  165 , (*A 476(P  78)*)  164
         , (*A 477(P  79)*)  168 , (*A 478(P  80)*)  168 , (*A 479(P  81)*)  169
         , (*A 480(P  82)*)  171 , (*A 481(P  83)*)  170 , (*A 482(P  84)*)  170
         , (*A 483(P  85)*)  172 , (*A 484(P  86)*)  172 , (*A 485(P  87)*)  174
         , (*A 486(P  88)*)  173 , (*A 487(P  89)*)  175 , (*A 488(P  90)*)  175
         , (*A 489(P  91)*)  176 , (*A 490(P  92)*)  178 , (*A 491(P  93)*)  177
         , (*A 492(P  94)*)  177 , (*A 493(P  95)*)  179 , (*A 494(P  96)*)  179
         , (*A 495(P  97)*)  180 , (*A 496(P  98)*)  181 , (*A 497(P  99)*)  183
         , (*A 498(P 100)*)  182 , (*A 499(P 101)*)  182 , (*A 500(P 102)*)  184
         , (*A 501(P 103)*)  184 , (*A 502(P 104)*)  185 , (*A 503(P 105)*)  186
         , (*A 504(P 106)*)  166 , (*A 505(P 107)*)  166 , (*A 506(P 108)*)  187
         , (*A 507(P 109)*)  187 , (*A 508(P 110)*)  158 , (*A 509(P 111)*)  158
         , (*A 510(P 112)*)  158 , (*A 511(P 113)*)  158 , (*A 512(P 114)*)  158
         , (*A 513(P 115)*)  158 , (*A 514(P 116)*)  158 , (*A 515(P 117)*)  158
         , (*A 516(P 118)*)  158 , (*A 517(P 119)*)  158 , (*A 518(P 120)*)  158
         , (*A 519(P 121)*)  158 , (*A 520(P 122)*)  158 , (*A 521(P 123)*)  158
         , (*A 522(P 124)*)  158 , (*A 523(P 125)*)  158 , (*A 524(P 126)*)  158
         , (*A 525(P 127)*)  158 , (*A 526(P 128)*)  158 , (*A 527(P 129)*)  158
         , (*A 528(P 130)*)  205 , (*A 529(P 131)*)  158 , (*A 530(P 132)*)  206
         , (*A 531(P 133)*)  207 , (*A 532(P 134)*)  209 , (*A 533(P 135)*)  208
         , (*A 534(P 136)*)  208 , (*A 535(P 137)*)  210 , (*A 536(P 138)*)  210
         , (*A 537(P 139)*)  211 , (*A 538(P 140)*)  158 , (*A 539(P 141)*)  212
         , (*A 540(P 142)*)  212 , (*A 541(P 143)*)  213 , (*A 542(P 144)*)  213
         , (*A 543(P 145)*)  214 , (*A 544(P 146)*)  158 , (*A 545(P 147)*)  215
         , (*A 546(P 148)*)  215 , (*A 547(P 149)*)  215 , (*A 548(P 150)*)  216
         , (*A 549(P 151)*)  216 , (*A 550(P 152)*)  218 , (*A 551(P 153)*)  217
         , (*A 552(P 154)*)  220 , (*A 553(P 155)*)  220 , (*A 554(P 156)*)  220
         , (*A 555(P 157)*)  221 , (*A 556(P 158)*)  221 , (*A 557(P 159)*)  223
         , (*A 558(P 160)*)  222 , (*A 559(P 161)*)  224 , (*A 560(P 162)*)  224
         , (*A 561(P 163)*)  224 , (*A 562(P 164)*)  225 , (*A 563(P 165)*)  225
         , (*A 564(P 166)*)  225 , (*A 565(P 167)*)  227 , (*A 566(P 168)*)  226
         , (*A 567(P 169)*)  158 , (*A 568(P 170)*)  228 , (*A 569(P 171)*)  158
         , (*A 570(P 172)*)  219 , (*A 571(P 173)*)  229 , (*A 572(P 174)*)  232
         , (*A 573(P 175)*)  232 , (*A 574(P 176)*)  233 , (*A 575(P 177)*)  233
         , (*A 576(P 178)*)  235 , (*A 577(P 179)*)  235 , (*A 578(P 180)*)  235
         , (*A 579(P 181)*)  235 , (*A 580(P 182)*)  234 , (*A 581(P 183)*)  236
         , (*A 582(P 184)*)  237 , (*A 583(P 185)*)  237 , (*A 584(P 186)*)  238
         , (*A 585(P 187)*)  238 , (*A 586(P 188)*)  230 , (*A 587(P 189)*)  230
         , (*A 588(P 190)*)  231 , (*A 589(P 191)*)  231 , (*A 590(P 192)*)  231
         , (*A 591(P 193)*)  240 , (*A 592(P 194)*)  242 , (*A 593(P 195)*)  241
         , (*A 594(P 196)*)  243 , (*A 595(P 197)*)  241 , (*A 596(P 198)*)  167
         , (*A 597(P 199)*)  244 , (*A 598(P 200)*)  244 , (*A 599(P 201)*)  245
         , (*A 600(P 202)*)  245 , (*A 601(P 203)*)  246 , (*A 602(P 204)*)  246
         , (*A 603(P 205)*)  247 , (*A 604(P 206)*)  247 , (*A 605(P 207)*)  248
         , (*A 606(P 208)*)  248 , (*A 607(P 209)*)  250 , (*A 608(P 210)*)  250
         , (*A 609(P 211)*)  252 , (*A 610(P 212)*)  252 , (*A 611(P 213)*)  254
         , (*A 612(P 214)*)  254 , (*A 613(P 215)*)  254 , (*A 614(P 216)*)  254
         , (*A 615(P 217)*)  254 , (*A 616(P 218)*)  254 , (*A 617(P 219)*)  254
         , (*A 618(P 220)*)  254 , (*A 619(P 221)*)  254 , (*A 620(P 222)*)  254
         , (*A 621(P 223)*)  257 , (*A 622(P 224)*)  259 , (*A 623(P 225)*)  259
         , (*A 624(P 226)*)  258 , (*A 625(P 227)*)  260 , (*A 626(P 228)*)  260
         , (*A 627(P 229)*)  260 , (*A 628(P 230)*)  261 , (*A 629(P 231)*)  261
         , (*A 630(P 232)*)  256 , (*A 631(P 233)*)  256 , (*A 632(P 234)*)  256
         , (*A 633(P 235)*)  256 , (*A 634(P 236)*)  256 , (*A 635(P 237)*)  256
         , (*A 636(P 238)*)  256 , (*A 637(P 239)*)  256 , (*A 638(P 240)*)  256
         , (*A 639(P 241)*)  256 , (*A 640(P 242)*)  256 , (*A 641(P 243)*)  256
         , (*A 642(P 244)*)  256 , (*A 643(P 245)*)  249 , (*A 644(P 246)*)  249
         , (*A 645(P 247)*)  249 , (*A 646(P 248)*)  249 , (*A 647(P 249)*)  249
         , (*A 648(P 250)*)  249 , (*A 649(P 251)*)  249 , (*A 650(P 252)*)  251
         , (*A 651(P 253)*)  251 , (*A 652(P 254)*)  251 , (*A 653(P 255)*)  253
         , (*A 654(P 256)*)  253 , (*A 655(P 257)*)  253 , (*A 656(P 258)*)  253
         , (*A 657(P 259)*)  255 , (*A 658(P 260)*)  255 , (*A 659(P 261)*)  262
         , (*A 660(P 262)*)  138 , (*A 661(P 263)*)  263 , (*A 662(P 264)*)  263
         , (*A 663(P 265)*)  263 , (*A 664(P 266)*)  263 , (*A 665(P 267)*)  263
         , (*A 666(P 268)*)  263 , (*A 667(P 269)*)  130 , (*A 668(P 270)*)  130
         , (*A 669(P 271)*)  265 , (*A 670(P 272)*)  265 , (*A 671(P 273)*)  134
         , (*A 672(P 274)*)  134 , (*A 673(P 275)*)  266 , (*A 674(P 276)*)  266
         , (*A 675(P 277)*)  267 , (*A 676(P 278)*)  268
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   37 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   95 , (*:  10*)   66 , (*:  11*)   14
         , (*:  12*)   14 , (*:  13*)   95 , (*:  14*)   30
         , (*:  15*)   95 , (*:  16*)   66 , (*:  17*)   95
         , (*:  18*)   66 , (*:  19*)   95 , (*:  20*)   95
         , (*:  21*)   66 , (*:  22*)   95 , (*:  23*)   95
         , (*:  24*)   69 , (*:  25*)   70 , (*:  26*)   70
         , (*:  27*)   95 , (*:  28*)   19 , (*:  29*)   95
         , (*:  30*)   67 , (*:  31*)   19 , (*:  32*)   95
         , (*:  33*)   19 , (*:  34*)   95 , (*:  35*)   67
         , (*:  36*)    9 , (*:  37*)    9 , (*:  38*)   66
         , (*:  39*)   68 , (*:  40*)   19 , (*:  41*)   40
         , (*:  42*)   19 , (*:  43*)   19 , (*:  44*)   52
         , (*:  45*)   19 , (*:  46*)   48 , (*:  47*)   19
         , (*:  48*)   76 , (*:  49*)   76 , (*:  50*)   76
         , (*:  51*)   95 , (*:  52*)   19 , (*:  53*)   19
         , (*:  54*)   95 , (*:  55*)   19 , (*:  56*)   19
         , (*:  57*)   96 , (*:  58*)   96 , (*:  59*)   96
         , (*:  60*)    5 , (*:  61*)   96 , (*:  62*)    5
         , (*:  63*)   92 , (*:  64*)   70 , (*:  65*)    5
         , (*:  66*)   96 , (*:  67*)   19 , (*:  68*)   96
         , (*:  69*)   19 , (*:  70*)   96 , (*:  71*)    5
         , (*:  72*)   96 , (*:  73*)    5 , (*:  74*)   96
         , (*:  75*)    5 , (*:  76*)   96 , (*:  77*)   96
         , (*:  78*)    5 , (*:  79*)   95 , (*:  80*)   67
         , (*:  81*)    5 , (*:  82*)    5 , (*:  83*)   19
         , (*:  84*)   70 , (*:  85*)   96 , (*:  86*)   81
         , (*:  87*)   96 , (*:  88*)   70 , (*:  89*)    5
         , (*:  90*)   19 , (*:  91*)   19 , (*:  92*)   19
         , (*:  93*)   39 , (*:  94*)   39 , (*:  95*)   39
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   19
         , (*:  99*)   19 , (*: 100*)   19 , (*: 101*)   19
         , (*: 102*)   69 , (*: 103*)   70 , (*: 104*)   70
         , (*: 105*)   70 , (*: 106*)   70 , (*: 107*)   95
         , (*: 108*)   66 , (*: 109*)   66 , (*: 110*)   66
         , (*: 111*)   69 , (*: 112*)   19 , (*: 113*)   19
         , (*: 114*)   19 , (*: 115*)    6 , (*: 116*)    6
         , (*: 117*)   76 , (*: 118*)   66 , (*: 119*)   96
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   19 , (*: 124*)   68 , (*: 125*)   96
         , (*: 126*)   19 , (*: 127*)   68 , (*: 128*)   96
         , (*: 129*)   66 , (*: 130*)    9 , (*: 131*)    9
         , (*: 132*)   66 , (*: 133*)   68 , (*: 134*)   66
         , (*: 135*)   66 , (*: 136*)    9 , (*: 137*)   68
         , (*: 138*)   66 , (*: 139*)    9 , (*: 140*)   66
         , (*: 141*)   66 , (*: 142*)    9 , (*: 143*)    9
         , (*: 144*)   66 , (*: 145*)   66 , (*: 146*)   69
         , (*: 147*)   66 , (*: 148*)    9 , (*: 149*)   95
         , (*: 150*)   66 , (*: 151*)    9 , (*: 152*)    9
         , (*: 153*)   19 , (*: 154*)   19 , (*: 155*)   74
         , (*: 156*)   96 , (*: 157*)   19 , (*: 158*)   19
         , (*: 159*)    9 , (*: 160*)   66 , (*: 161*)   95
         , (*: 162*)   66 , (*: 163*)   95 , (*: 164*)   95
         , (*: 165*)   69 , (*: 166*)   19 , (*: 167*)   95
         , (*: 168*)   67 , (*: 169*)   66 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)    9
         , (*: 174*)   19 , (*: 175*)   19 , (*: 176*)   95
         , (*: 177*)   67 , (*: 178*)   69 , (*: 179*)   69
         , (*: 180*)   70 , (*: 181*)   70 , (*: 182*)   66
         , (*: 183*)   14 , (*: 184*)   14 , (*: 185*)   19
         , (*: 186*)   19 , (*: 187*)   95 , (*: 188*)   67
         , (*: 189*)   69 , (*: 190*)   69 , (*: 191*)   66
         , (*: 192*)    9 , (*: 193*)    9 , (*: 194*)    9
         , (*: 195*)   95 , (*: 196*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 197)*)  447 (*P48*) , (*RR: 198)*)  424 (*P25*)
         , (*RR: 199)*)  437 (*P38*) , (*RR: 200)*)  432 (*P33*)
         , (*RR: 201)*)  438 (*P39*) , (*RR: 202)*)  429 (*P30*)
         , (*RR: 203)*)  413 (*P14*) , (*RR: 204)*)  469 (*P70*)
         , (*RR: 205)*)  489 (*P90*) , (*RR: 206)*)  479 (*P80*)
         , (*RR: 207)*)  496 (*P97*) , (*RR: 208)*)  415 (*P16*)
         , (*RR: 209)*)  474 (*P75*) , (*RR: 210)*)  568 (*P169*)
         , (*RR: 211)*)  543 (*P144*) , (*RR: 212)*)  465 (*P66*)
         , (*RR: 213)*)  466 (*P67*) , (*RR: 214)*)  531 (*P132*)
         , (*RR: 215)*)  532 (*P133*) , (*RR: 216)*)  657 (*P258*)
         , (*RR: 217)*)  658 (*P259*) , (*RR: 218)*)  631 (*P232*)
         , (*RR: 219)*)  632 (*P233*) , (*RR: 220)*)  633 (*P234*)
         , (*RR: 221)*)  634 (*P235*) , (*RR: 222)*)  635 (*P236*)
         , (*RR: 223)*)  636 (*P237*) , (*RR: 224)*)  637 (*P238*)
         , (*RR: 225)*)  640 (*P241*) , (*RR: 226)*)  641 (*P242*)
         , (*RR: 227)*)  638 (*P239*) , (*RR: 228)*)  639 (*P240*)
         , (*RR: 229)*)  649 (*P250*) , (*RR: 230)*)  643 (*P244*)
         , (*RR: 231)*)  644 (*P245*) , (*RR: 232)*)  645 (*P246*)
         , (*RR: 233)*)  646 (*P247*) , (*RR: 234)*)  647 (*P248*)
         , (*RR: 235)*)  648 (*P249*) , (*RR: 236)*)  650 (*P251*)
         , (*RR: 237)*)  651 (*P252*) , (*RR: 238)*)  652 (*P253*)
         , (*RR: 239)*)  655 (*P256*) , (*RR: 240)*)  656 (*P257*)
         , (*RR: 241)*)  653 (*P254*) , (*RR: 242)*)  654 (*P255*)
         , (*RR: 243)*)  611 (*P212*) , (*RR: 244)*)  624 (*P225*)
         , (*RR: 245)*)  616 (*P217*) , (*RR: 246)*)  621 (*P222*)
         , (*RR: 247)*)  642 (*P243*) , (*RR: 248)*)  544 (*P145*)
         , (*RR: 249)*)  565 (*P166*) , (*RR: 250)*)  579 (*P180*)
         , (*RR: 251)*)  577 (*P178*) , (*RR: 252)*)  578 (*P179*)
         , (*RR: 253)*)  571 (*P172*) , (*RR: 254)*)  589 (*P190*)
         , (*RR: 255)*)  590 (*P191*) , (*RR: 256)*)  566 (*P167*)
         , (*RR: 257)*)  473 (*P74*) , (*RR: 258)*)  484 (*P85*)
         , (*RR: 259)*)  477 (*P78*) , (*RR: 260)*)  478 (*P79*)
         , (*RR: 261)*)  483 (*P84*) , (*RR: 262)*)  487 (*P88*)
         , (*RR: 263)*)  488 (*P89*) , (*RR: 264)*)  494 (*P95*)
         , (*RR: 265)*)  493 (*P94*) , (*RR: 266)*)  501 (*P102*)
         , (*RR: 267)*)  500 (*P101*) , (*RR: 268)*)  593 (*P194*)
         , (*RR: 269)*)  594 (*P195*) , (*RR: 270)*)  595 (*P196*)
         , (*RR: 271)*)  660 (*P261*) , (*RR: 272)*)  417 (*P18*)
         , (*RR: 273)*)  419 (*P20*) , (*RR: 274)*)  428 (*P29*)
         , (*RR: 275)*)  421 (*P22*) , (*RR: 276)*)  423 (*P24*)
         , (*RR: 277)*)  420 (*P21*) , (*RR: 278)*)  448 (*P49*)
         , (*RR: 279)*)  422 (*P23*) , (*RR: 280)*)  400 (*P1*)
         , (*RR: 281)*)  401 (*P2*) , (*RR: 282)*)  402 (*P3*)
         , (*RR: 283)*)  403 (*P4*) , (*RR: 284)*)  404 (*P5*)
         , (*RR: 285)*)  405 (*P6*) , (*RR: 286)*)  412 (*P13*)
         , (*RR: 287)*)  416 (*P17*) , (*RR: 288)*)  436 (*P37*)
         , (*RR: 289)*)  434 (*P35*) , (*RR: 290)*)  433 (*P34*)
         , (*RR: 291)*)  414 (*P15*) , (*RR: 292)*)  431 (*P32*)
         , (*RR: 293)*)  439 (*P40*) , (*RR: 294)*)  440 (*P41*)
         , (*RR: 295)*)  449 (*P50*) , (*RR: 296)*)  455 (*P56*)
         , (*RR: 297)*)  591 (*P192*) , (*RR: 298)*)  475 (*P76*)
         , (*RR: 299)*)  470 (*P71*) , (*RR: 300)*)  449 (*P50*)
         , (*RR: 301)*)  457 (*P58*) , (*RR: 302)*)  464 (*P65*)
         , (*RR: 303)*)  458 (*P59*) , (*RR: 304)*)  525 (*P126*)
         , (*RR: 305)*)  509 (*P110*) , (*RR: 306)*)  510 (*P111*)
         , (*RR: 307)*)  511 (*P112*) , (*RR: 308)*)  512 (*P113*)
         , (*RR: 309)*)  513 (*P114*) , (*RR: 310)*)  514 (*P115*)
         , (*RR: 311)*)  515 (*P116*) , (*RR: 312)*)  516 (*P117*)
         , (*RR: 313)*)  517 (*P118*) , (*RR: 314)*)  518 (*P119*)
         , (*RR: 315)*)  519 (*P120*) , (*RR: 316)*)  520 (*P121*)
         , (*RR: 317)*)  521 (*P122*) , (*RR: 318)*)  522 (*P123*)
         , (*RR: 319)*)  523 (*P124*) , (*RR: 320)*)  524 (*P125*)
         , (*RR: 321)*)  526 (*P127*) , (*RR: 322)*)  527 (*P128*)
         , (*RR: 323)*)  529 (*P130*) , (*RR: 324)*)  537 (*P138*)
         , (*RR: 325)*)  536 (*P137*) , (*RR: 326)*)  535 (*P136*)
         , (*RR: 327)*)  538 (*P139*) , (*RR: 328)*)  453 (*P54*)
         , (*RR: 329)*)  454 (*P55*) , (*RR: 330)*)  541 (*P142*)
         , (*RR: 331)*)  620 (*P221*) , (*RR: 332)*)  629 (*P230*)
         , (*RR: 333)*)  600 (*P201*) , (*RR: 334)*)  608 (*P209*)
         , (*RR: 335)*)  609 (*P210*) , (*RR: 336)*)  610 (*P211*)
         , (*RR: 337)*)  612 (*P213*) , (*RR: 338)*)  613 (*P214*)
         , (*RR: 339)*)  607 (*P208*) , (*RR: 340)*)  599 (*P200*)
         , (*RR: 341)*)  628 (*P229*) , (*RR: 342)*)  627 (*P228*)
         , (*RR: 343)*)  626 (*P227*) , (*RR: 344)*)  618 (*P219*)
         , (*RR: 345)*)  622 (*P223*) , (*RR: 346)*)  623 (*P224*)
         , (*RR: 347)*)  617 (*P218*) , (*RR: 348)*)  506 (*P107*)
         , (*RR: 349)*)  502 (*P103*) , (*RR: 350)*)  542 (*P143*)
         , (*RR: 351)*)  540 (*P141*) , (*RR: 352)*)  561 (*P162*)
         , (*RR: 353)*)  550 (*P151*) , (*RR: 354)*)  549 (*P150*)
         , (*RR: 355)*)  574 (*P175*) , (*RR: 356)*)  582 (*P183*)
         , (*RR: 357)*)  569 (*P170*) , (*RR: 358)*)  586 (*P187*)
         , (*RR: 359)*)  570 (*P171*) , (*RR: 360)*)  584 (*P185*)
         , (*RR: 361)*)  580 (*P181*) , (*RR: 362)*)  573 (*P174*)
         , (*RR: 363)*)  575 (*P176*) , (*RR: 364)*)  551 (*P152*)
         , (*RR: 365)*)  547 (*P148*) , (*RR: 366)*)  548 (*P149*)
         , (*RR: 367)*)  557 (*P158*) , (*RR: 368)*)  556 (*P157*)
         , (*RR: 369)*)  554 (*P155*) , (*RR: 370)*)  555 (*P156*)
         , (*RR: 371)*)  558 (*P159*) , (*RR: 372)*)  528 (*P129*)
         , (*RR: 373)*)  504 (*P105*) , (*RR: 374)*)  476 (*P77*)
         , (*RR: 375)*)  661 (*P262*) , (*RR: 376)*)  485 (*P86*)
         , (*RR: 377)*)  480 (*P81*) , (*RR: 378)*)  486 (*P87*)
         , (*RR: 379)*)  662 (*P263*) , (*RR: 380)*)  495 (*P96*)
         , (*RR: 381)*)  490 (*P91*) , (*RR: 382)*)  666 (*P267*)
         , (*RR: 383)*)  497 (*P98*) , (*RR: 384)*)  664 (*P265*)
         , (*RR: 385)*)  592 (*P193*) , (*RR: 386)*)  676 (*P277*)
         , (*RR: 387)*)  674 (*P275*) , (*RR: 388)*)  675 (*P276*)
         , (*RR: 389)*)  672 (*P273*) , (*RR: 390)*)  673 (*P274*)
         , (*RR: 391)*)  665 (*P266*) , (*RR: 392)*)  669 (*P270*)
         , (*RR: 393)*)  663 (*P264*) , (*RR: 394)*)  670 (*P271*)
         , (*RR: 395)*)  446 (*P47*) , (*RR: 396)*)  445 (*P46*)
         , (*RR: 397)*)  444 (*P45*) , (*RR: 398)*)  418 (*P19*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 399 => (* P1 _0000_ (269): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 400,280 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 401,281 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 402,282 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 403,283 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 404,284 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 405,285 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 406 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 407 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 408 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 409 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 410 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 411 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 306 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 412,286 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE UnreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 309 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 413,203 => (* P15 InstInterface (114): InterfaceLt StkEqual UnreservedIdent GenActualList StkRwEND UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 328 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 414,291 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 335 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 415,208 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 346 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 416,287 => (* P18 ModuleLt (131): OptUnsafe StkRwMODULE UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 369 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 417,272 => (* P19 InstModule (115): ModuleLt StkEqual UnreservedIdent GenActualList StkRwEND UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 390 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 418,398 => (* P20 ModuleMiddle (133): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 133;
                (* line 397 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 419,273 => (* P21 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 409 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 420,277 => (* P22 GenInterfaceLt (135): StkRwGENERIC StkRwINTERFACE UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 435 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 421,275 => (* P23 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 455 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 422,279 => (* P24 GenModuleLt (137): StkRwGENERIC StkRwMODULE UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 463 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 423,276 => (* P25 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block UnreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 483 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 424,198 => (* P26 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 492 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 425 => (* P27 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 493 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 426 => (* P28 OptSemicolon (139): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 427 => (* P29 OptSemicolon (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 428,274 => (* P30 GenFormalList (136): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 502 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 429,202 => (* P31 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 508 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 430 => (* P32 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 431,292 => (* P33 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 432,200 => (* P34 Import (141): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;

              | 433,290 => (* P35 ImportItemPlusList (142): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;

              | 434,289 => (* P36 ImportItemPlusList (142): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 435 => (* P37 ImportItem (143): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;
                (* line 527 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 436,288 => (* P38 ImportItem (143): UnreservedIdent StkRwAS UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 530 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 437,199 => (* P39 FromImportLt (144): StkRwFROM UnreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 534 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 438,201 => (* P40 Import (141): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;

              | 439,293 => (* P41 FromImportIdPlusList (145): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 545 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 440,294 => (* P42 FromImportIdPlusList (145): FromImportIdPlusList StkComma UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 550 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 441 => (* P43 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 555 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 442 => (* P44 Exports (132): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 132;
                (* line 562 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 443 => (* P45 Exports (132): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 132;

              | 444,397 => (* P46 ExportIdPlusList (146): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;

              | 445,396 => (* P47 ExportIdPlusList (146): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;

              | 446,395 => (* P48 ExportIdent (147): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 582 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 447,197 => (* P49 UnreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;

              | 448,278 => (* P50 UnreservedIdent (123): StkReservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 599 of "FM3Parser.lalr" *)
                 FM3Pass1 . FlagReservedIdent ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 449,295,300 => (* P51 IdentRef (149): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 602 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 450 => (* P52 QualIdentRef (150): UnreservedIdent StkDot UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 609 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 451 => (* P53 IdPlusList (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 617 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 452 => (* P54 IdPlusList (151): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 621 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 453,328 => (* P55 DeclIdListElems (152): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 633 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                            )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 454,329 => (* P56 DeclIdListElems (152): DeclIdListElems StkComma UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 648 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 455,296 => (* P57 IdStarList (140): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 667 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 456 => (* P58 IdStarList (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;
                (* line 669 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 457,301 => (* P59 MaybeQualIdent (153): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 674 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                
                     
              | 458,303 => (* P60 MaybeQualIdent (153): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 680 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                     
              | 459 => (* P61 QualIdent (154): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 686 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 460 => (* P62 MaybeQualIdentStarList (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 694 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 461 => (* P63 MaybeQualIdentStarList (155): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 696 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 462 => (* P64 MaybeQualIdentPlusList (156): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 698 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 463 => (* P65 MaybeQualIdentPlusList (156): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 700 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 464,302 => (* P66 TypeId (157): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;

              | 465,212 => (* P67 TypeId (157): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 710 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 466,213 => (* P68 TypeId (157): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 715 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 467 => (* P69 OptConstType (159): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 725 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 468 => (* P70 OptConstType (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 727 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 469,204 => (* P71 ConstDeclGroupLt (160): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 470,299 => (* P72 ConstDeclGroup (162): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 739 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 471 => (* P73 ConstDeclList (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 744 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 472 => (* P74 ConstDeclList (161): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 473,257 => (* P75 ConstDeclPlus (163): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 755 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 474,209 => (* P76 ConstDeclPlus (163): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 163;
                (* line 760 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 475,298 => (* P77 ConstDeclId (165): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 778 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 476,374 => (* P78 ConstDecl (164): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 164;
                (* line 785 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 477,259 => (* P79 TypeRelation (168): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 811 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 478,260 => (* P80 TypeRelation (168): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 813 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 479,206 => (* P81 TypeDeclGroupLt (169): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 824 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 480,377 => (* P82 TypeDeclGroup (171): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 827 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 481 => (* P83 TypeDeclList (170): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 170;
                (* line 832 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 482 => (* P84 TypeDeclList (170): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 483,261 => (* P85 TypeDeclPlus (172): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 843 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 484,258 => (* P86 TypeDeclPlus (172): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 172;
                (* line 848 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 485,376 => (* P87 TypeDeclId (174): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 864 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 486,378 => (* P88 TypeDecl (173): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 871 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 487,262 => (* P89 RevelationRelation (175): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 891 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 488,263 => (* P90 RevelationRelation (175): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 893 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 489,205 => (* P91 RevelationGroupLt (176): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 904 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 490,381 => (* P92 RevelationGroup (178): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 907 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 491 => (* P93 RevelationList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 912 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 492 => (* P94 RevelationList (177): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 918 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 493,265 => (* P95 RevelationPlus (179): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 923 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 494,264 => (* P96 RevelationPlus (179): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 928 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 495,380 => (* P97 Revelation (180): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 944 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 496,207 => (* P98 VarDeclGroupLt (181): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 971 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 497,383 => (* P99 VarDeclGroup (183): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 985 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 498 => (* P100 VarDeclList (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 991 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 499 => (* P101 VarDeclList (182): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 997 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 500,267 => (* P102 VarDeclPlus (184): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1010 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 501,266 => (* P103 VarDeclPlus (184): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 184;
                (* line 1015 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 502,349 => (* P104 VarDecl (185): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 185;
                (* line 1033 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 503 => (* P105 VarDeclIds (186): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;
                (* line 1061 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 504,373 => (* P106 OptDeclType (166): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 1072 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 505 => (* P107 OptDeclType (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 1076 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 506,348 => (* P108 OptDeclValue (187): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1082 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 507 => (* P109 OptDeclValue (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1086 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 508 => (* P110 Type (158): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 509,305 => (* P111 Type (158): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 510,306 => (* P112 Type (158): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 511,307 => (* P113 Type (158): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 512,308 => (* P114 Type (158): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 513,309 => (* P115 Type (158): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 514,310 => (* P116 Type (158): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 515,311 => (* P117 Type (158): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 516,312 => (* P118 Type (158): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 517,313 => (* P119 Type (158): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 518,314 => (* P120 Type (158): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 519,315 => (* P121 Type (158): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 520,316 => (* P122 Type (158): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 521,317 => (* P123 Type (158): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 522,318 => (* P124 Type (158): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 523,319 => (* P125 Type (158): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 524,320 => (* P126 Type (158): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 525,304 => (* P127 Type (158): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1118 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 526,321 => (* P128 Type (158): StkUNTRACED StkRwREF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1126 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkUNTRACEDREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 527,322 => (* P129 Type (158): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 528,372 => (* P130 OpenArrayType (205): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1138 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 529,323 => (* P131 Type (158): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 530 => (* P132 FixedArrayType (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;

              | 531,214 => (* P133 EnumTypeLt (207): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1153 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 532,215 => (* P134 EnumType (209): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1168 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 533 => (* P135 EnumLitList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1185 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 534 => (* P136 EnumLitList (208): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1188 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 535,326 => (* P137 EnumLitPlus (210): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1191 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 536,325 => (* P138 EnumLitPlus (210): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1194 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 537,324 => (* P139 EnumLit (211): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1197 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 538,327 => (* P140 Type (158): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 539 => (* P141 FieldDeclList (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1220 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 540,351 => (* P142 FieldDeclList (212): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 212;
                (* line 1228 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 541,330 => (* P143 FieldDeclPlus (213): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1237 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 542,350 => (* P144 FieldDeclPlus (213): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1240 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 543,211 => (* P145 RecTypeLt (214): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1252 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 544,248 => (* P146 Type (158): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1280 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 545 => (* P147 MethodDeclList (215): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 215;
                (* line 1302 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 546 => (* P148 MethodDeclList (215): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1310 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 547,365 => (* P149 MethodDeclList (215): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1315 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 548,366 => (* P150 MethodDeclPlus (216): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1324 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 549,354 => (* P151 MethodDeclPlus (216): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1327 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 550,353 => (* P152 MethodDeclLt (218): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1339 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 551,364 => (* P153 MethodDecl (217): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 217;
                (* line 1362 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 552 => (* P154 OverrideList (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1392 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 553 => (* P155 OverrideList (220): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1400 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 554,369 => (* P156 OverrideList (220): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1405 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 555,370 => (* P157 OverridePlus (221): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1414 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 556,368 => (* P158 OverridePlus (221): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 221;
                (* line 1417 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 557,367 => (* P159 OverrideLt (223): UnreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 223;
                (* line 1429 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 558,371 => (* P160 Override (222): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1435 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 559 => (* P161 Brand (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1447 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 560 => (* P162 Brand (224): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1452 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 561,352 => (* P163 Brand (224): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1457 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 562 => (* P164 Supertype (225): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 225;
                (* line 1464 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 563 => (* P165 Supertype (225): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1470 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 564 => (* P166 Supertype (225): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1479 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 565,249 => (* P167 ObjTypeLt (227): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 227;
                (* line 1490 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 566,256 => (* P168 ObjType (226): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 226;
                (* line 1518 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 567 => (* P169 Type (158): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 568,210 => (* P170 ProcTypeLt (228): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1542 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*)
                     
              | 569,357 => (* P171 Type (158): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1557 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 570,359 => (* P172 Signature (219): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1565 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 571,253 => (* P173 Formals (229): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1585 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 572 => (* P174 FormalsList (232): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 232;
                (* line 1604 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 573,362 => (* P175 FormalsList (232): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 232;

              | 574,355 => (* P176 FormalPlus (233): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 233;
                (* line 1609 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 575,363 => (* P177 FormalPlus (233): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1619 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 576 => (* P178 FormalLt (235): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 235;
                (* line 1623 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 577,251 => (* P179 FormalLt (235): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1638 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 578,252 => (* P180 FormalLt (235): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1654 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 579,250 => (* P181 FormalLt (235): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1668 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 580,361 => (* P182 Formal (234): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 234;
                (* line 1685 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 581 => (* P183 FormalIds (236): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;
                (* line 1740 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 582,356 => (* P184 FormalType (237): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 237;
                (* line 1751 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 583 => (* P185 FormalType (237): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 237;
                (* line 1760 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 584,360 => (* P186 FormalExpr (238): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1768 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 585 => (* P187 FormalExpr (238): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 238;
                (* line 1777 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 586,358 => (* P188 ResultType (230): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1785 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 587 => (* P189 ResultType (230): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 230;
                (* line 1792 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 588 => (* P190 Raises (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1802 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 589,254 => (* P191 Raises (231): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1808 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 590,255 => (* P192 Raises (231): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 231;
                (* line 1815 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 591,297 => (* P193 ProcDeclLt (240): StkRwPROCEDURE UnreservedIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 240;
                (* line 1822 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* Body scope.*) 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkModule  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         END (*IF*) ; 
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END (*Block*) 
                     
              | 592,385 => (* P194 ProcDecl (242): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 242;
                (* line 1853 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 593,268 => (* P195 OptProcBody (241): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1897 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 594,269 => (* P196 ProcBodyLt (243): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 1906 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 595,270 => (* P197 OptProcBody (241): ProcBodyLt Block UnreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 241;
                (* line 1919 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 596 => (* P198 Expr (167): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;

              | 597 => (* P199 E0 (244): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 598 => (* P200 E0 (244): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1943 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 599,340 => (* P201 E1 (245): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 600,333 => (* P202 E1 (245): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 245;
                (* line 1954 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - Stk . StkRwAND 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 601 => (* P203 E2 (246): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 602 => (* P204 E2 (246): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 246;
                (* line 1965 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - Stk . StkRwNOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 603 => (* P205 E3 (247): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;

              | 604 => (* P206 E3 (247): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1975 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk .ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 605 => (* P207 E4 (248): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 606 => (* P208 E4 (248): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 1986 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk .ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 607,339 => (* P209 E5 (250): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 608,334 => (* P210 E5 (250): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 1997 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk .ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 609,335 => (* P211 E6 (252): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;

              | 610,336 => (* P212 E6 (252): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2008 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , - yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 611,243 => (* P213 E7 (254): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2027 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 612,337 => (* P214 E7 (254): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2032 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 613,338 => (* P215 E7 (254): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2041 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 614 => (* P216 E7 (254): E8WOId StkDot UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;
                (* line 2050 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 615 => (* P217 E7 (254): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;

              | 616,245 => (* P218 E7 (254): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2061 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 617,347 => (* P219 E7 (254): StkIdent Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2066 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 618,344 => (* P220 E7 (254): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2075 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 619 => (* P221 E7 (254): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2084 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 620,331 => (* P222 E7 (254): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;

              | 621,246 => (* P223 Subscripts (257): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2090 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 622,345 => (* P224 SsPlusList (259): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 259;
                (* line 2099 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 623,346 => (* P225 SsPlusList (259): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 259;
                (* line 2102 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 624,244 => (* P226 Actuals (258): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2113 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 625 => (* P227 ActualList (260): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 260;
                (* line 2122 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 626,343 => (* P228 ActualList (260): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2125 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 627,342 => (* P229 ActualList (260): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 260;
                (* line 2128 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 628,341 => (* P230 Actual (261): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2138 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 629,332 => (* P231 Actual (261): UnreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 261;
                (* line 2143 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 630 => (* P232 E8WOId (256): E8WOId StkDot UnreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2158 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 631,218 => (* P233 E8WOId (256): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2163 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 632,219 => (* P234 E8WOId (256): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2170 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 633,220 => (* P235 E8WOId (256): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2177 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 634,221 => (* P236 E8WOId (256): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2187 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 635,222 => (* P237 E8WOId (256): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2197 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 636,223 => (* P238 E8WOId (256): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2204 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 637,224 => (* P239 E8WOId (256): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2211 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 638,227 => (* P240 E8WOId (256): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2219 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 639,228 => (* P241 E8WOId (256): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2226 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 640,225 => (* P242 E8WOId (256): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2233 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 641,226 => (* P243 E8WOId (256): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2235 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 642,247 => (* P244 E8WOId (256): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;

              | 643,230 => (* P245 ExprRelOp (249): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2239 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 644,231 => (* P246 ExprRelOp (249): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2240 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 645,232 => (* P247 ExprRelOp (249): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2241 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 646,233 => (* P248 ExprRelOp (249): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 647,234 => (* P249 ExprRelOp (249): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2243 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 648,235 => (* P250 ExprRelOp (249): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2244 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 649,229 => (* P251 ExprRelOp (249): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2245 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 650,236 => (* P252 ExprAddOp (251): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 651,237 => (* P253 ExprAddOp (251): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2249 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 652,238 => (* P254 ExprAddOp (251): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2250 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 653,241 => (* P255 ExprMulOp (253): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2252 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 654,242 => (* P256 ExprMulOp (253): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2253 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 655,239 => (* P257 ExprMulOp (253): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2254 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 656,240 => (* P258 ExprMulOp (253): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2255 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 657,216 => (* P259 ExprUnaryAddOp (255): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2258 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 658,217 => (* P260 ExprUnaryAddOp (255): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2259 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 659 => (* P261 BlockLt (262): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 262;
                (* line 2264 of "FM3Parser.lalr" *)
                
                     
              | 660,271 => (* P262 Block (138): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 138;
                (* line 2268 of "FM3Parser.lalr" *)
                
                     
              | 661,375 => (* P263 BlockDecl (263): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2274 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 662,379 => (* P264 BlockDecl (263): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2278 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 663,393 => (* P265 BlockDecl (263): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2282 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 664,384 => (* P266 BlockDecl (263): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2286 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 665,391 => (* P267 BlockDecl (263): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2290 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 666,382 => (* P268 BlockDecl (263): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2294 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 667 => (* P269 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2302 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 668 => (* P270 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2310 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 669,392 => (* P271 BlockDeclPlus (265): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2319 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 670,394 => (* P272 BlockDeclPlus (265): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2324 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 671 => (* P273 StmtList (134): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 134;
                (* line 2343 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 672,389 => (* P274 StmtList (134): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 134;
                (* line 2351 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 673,390 => (* P275 StmtPlus (266): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2359 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 674,387 => (* P276 StmtPlus (266): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 266;
                (* line 2362 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 675,388 => (* P277 Stmt (267): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;

              | 676,386 => (* P278 AssignStmt (268): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 268;
                (* line 2376 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

