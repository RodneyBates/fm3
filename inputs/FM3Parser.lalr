
(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023,       Rodney M. Bates.                                    *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

(* File FM3Parser.lalr.  lalr specification for FM3Parser. *)

SCANNER FM3Scanner

PARSER FM3Parser

/* Stuff to go into the parser interface. */ 
EXPORT
  { IMPORT FM3ParseSem;

    TYPE tParsAttribute = FM3ParseSem . tParsAttribute; 
  }

(* Stuff to go at front of the parser module, at global scope. *)
GLOBAL
  { FROM FM3ParseSem IMPORT PushTok , PushTokPatch;
    IMPORT FM3SrcToks AS TD;
  }

(* Local declarations of the Parse procedure. *) 
LOCAL { }

(* Parser module initialization. *) 
BEGIN { }

(* Parser module final cleanup. *) 
CLOSE { }

(* Source code terminal tokens. *)
(* Copied in from GeTok output and edited. *) 
TOKEN

  StkMinTok                                     = 16384
  StkUnknown                                   = 16384 (*16_80 80 01 *)
  StkEOF                                       = 16385 (*16_81 80 01 *)

(* Modula-3 Reserved words: *)
  StkRwAND (*"AND"*)                           = 16386 (*16_82 80 01 *)
  StkRwANY (*"ANY"*)                           = 16387 (*16_83 80 01 *)
  StkRwARRAY (*"ARRAY"*)                       = 16388 (*16_84 80 01 *)
  StkRwAS (*"AS"*)                             = 16389 (*16_85 80 01 *)
  StkRwBEGIN (*"BEGIN"*)                       = 16390 (*16_86 80 01 *)
  StkRwBITS (*"BITS"*)                         = 16391 (*16_87 80 01 *)
  StkRwBRANDED (*"BRANDED"*)                   = 16392 (*16_88 80 01 *)
  StkRwBY (*"BY"*)                             = 16393 (*16_89 80 01 *)
  StkRwCASE (*"CASE"*)                         = 16394 (*16_8a 80 01 *)
  StkRwCONST (*"CONST"*)                       = 16395 (*16_8b 80 01 *)
  StkRwDIV (*"DIV"*)                           = 16396 (*16_8c 80 01 *)
  StkRwDO (*"DO"*)                             = 16397 (*16_8d 80 01 *)
  StkRwELSE (*"ELSE"*)                         = 16398 (*16_8e 80 01 *)
  StkRwELSIF (*"ELSIF"*)                       = 16399 (*16_8f 80 01 *)
  StkRwEND (*"END"*)                           = 16400 (*16_90 80 01 *)
  StkRwEVAL (*"EVAL"*)                         = 16401 (*16_91 80 01 *)
  StkRwEXCEPT (*"EXCEPT"*)                     = 16402 (*16_92 80 01 *)
  StkRwEXCEPTION (*"EXCEPTION"*)               = 16403 (*16_93 80 01 *)
  StkRwEXIT (*"EXIT"*)                         = 16404 (*16_94 80 01 *)
  StkRwEXPORTS (*"EXPORTS"*)                   = 16405 (*16_95 80 01 *)
  StkRwFINALLY (*"FINALLY"*)                   = 16406 (*16_96 80 01 *)
  StkRwFOR (*"FOR"*)                           = 16407 (*16_97 80 01 *)
  StkRwFROM (*"FROM"*)                         = 16408 (*16_98 80 01 *)
  StkRwGENERIC (*"GENERIC"*)                   = 16409 (*16_99 80 01 *)
  StkRwIF (*"IF"*)                             = 16410 (*16_9a 80 01 *)
  StkRwIMPORT (*"IMPORT"*)                     = 16411 (*16_9b 80 01 *)
  StkRwIN (*"IN"*)                             = 16412 (*16_9c 80 01 *)
  StkRwINTERFACE (*"INTERFACE"*)               = 16413 (*16_9d 80 01 *)
  StkRwLOCK (*"LOCK"*)                         = 16414 (*16_9e 80 01 *)
  StkRwLOOP (*"LOOP"*)                         = 16415 (*16_9f 80 01 *)
  StkRwMETHODS (*"METHODS"*)                   = 16416 (*16_a0 80 01 *)
  StkRwMOD (*"MOD"*)                           = 16417 (*16_a1 80 01 *)
  StkRwMODULE (*"MODULE"*)                     = 16418 (*16_a2 80 01 *)
  StkRwNOT (*"NOT"*)                           = 16419 (*16_a3 80 01 *)
  StkRwOBJECT (*"OBJECT"*)                     = 16420 (*16_a4 80 01 *)
  StkRwOF (*"OF"*)                             = 16421 (*16_a5 80 01 *)
  StkRwOR (*"OR"*)                             = 16422 (*16_a6 80 01 *)
  StkRwOVERRIDES (*"OVERRIDES"*)               = 16423 (*16_a7 80 01 *)
  StkRwPROCEDURE (*"PROCEDURE"*)               = 16424 (*16_a8 80 01 *)
  StkRwRAISE (*"RAISE"*)                       = 16425 (*16_a9 80 01 *)
  StkRwRAISES (*"RAISES"*)                     = 16426 (*16_aa 80 01 *)
  StkRwREADONLY (*"READONLY"*)                 = 16427 (*16_ab 80 01 *)
  StkRwRECORD (*"RECORD"*)                     = 16428 (*16_ac 80 01 *)
  StkRwREF (*"REF"*)                           = 16429 (*16_ad 80 01 *)
  StkRwREPEAT (*"REPEAT"*)                     = 16430 (*16_ae 80 01 *)
  StkRwRETURN (*"RETURN"*)                     = 16431 (*16_af 80 01 *)
  StkRwREVEAL (*"REVEAL"*)                     = 16432 (*16_b0 80 01 *)
  StkRwROOT (*"ROOT"*)                         = 16433 (*16_b1 80 01 *)
  StkRwSET (*"SET"*)                           = 16434 (*16_b2 80 01 *)
  StkRwTHEN (*"THEN"*)                         = 16435 (*16_b3 80 01 *)
  StkRwTO (*"TO"*)                             = 16436 (*16_b4 80 01 *)
  StkRwTRY (*"TRY"*)                           = 16437 (*16_b5 80 01 *)
  StkRwTYPE (*"TYPE"*)                         = 16438 (*16_b6 80 01 *)
  StkRwTYPECASE (*"TYPECASE"*)                 = 16439 (*16_b7 80 01 *)
  StkRwUNSAFE (*"UNSAFE"*)                     = 16440 (*16_b8 80 01 *)
  StkRwUNTIL (*"UNTIL"*)                       = 16441 (*16_b9 80 01 *)
  StkRwUNTRACED (*"UNTRACED"*)                 = 16442 (*16_ba 80 01 *)
  StkRwVALUE (*"VALUE"*)                       = 16443 (*16_bb 80 01 *)
  StkRwVAR (*"VAR"*)                           = 16444 (*16_bc 80 01 *)
  StkRwWHILE (*"WHILE"*)                       = 16445 (*16_bd 80 01 *)
  StkRwWITH (*"WITH"*)                         = 16446 (*16_be 80 01 *)

  (* Special character tokens:*)
  StkSemicolon                                 = 16447 (*16_bf 80 01 *)
  StkDot                                       = 16448 (*16_c0 80 01 *)
  StkEqual                                     = 16449 (*16_c1 80 01 *)
  StkOpenParen                                 = 16450 (*16_c2 80 01 *)
  StkCloseParen                                = 16451 (*16_c3 80 01 *)
  StkComma                                     = 16452 (*16_c4 80 01 *)
  StkColon                                     = 16453 (*16_c5 80 01 *)
  StkSubtype                                   = 16454 (*16_c6 80 01 *)
  StkBecomes                                   = 16455 (*16_c7 80 01 *)
  StkOpenBrace                                 = 16456 (*16_c8 80 01 *)
  StkCloseBrace                                = 16457 (*16_c9 80 01 *)
  StkStroke                                    = 16458 (*16_ca 80 01 *)
  StkArrow                                     = 16459 (*16_cb 80 01 *)
  StkEllipsis                                  = 16460 (*16_cc 80 01 *)
  StkOpenBracket                               = 16461 (*16_cd 80 01 *)
  StkCloseBracket                              = 16462 (*16_ce 80 01 *)
  StkUnequal                                   = 16463 (*16_cf 80 01 *)
  StkLess                                      = 16464 (*16_d0 80 01 *)
  StkGreater                                   = 16465 (*16_d1 80 01 *)
  StkLessEqual                                 = 16466 (*16_d2 80 01 *)
  StkGreaterEqual                              = 16467 (*16_d3 80 01 *)
  StkPlus                                      = 16468 (*16_d4 80 01 *)
  StkMinus                                     = 16469 (*16_d5 80 01 *)
  StkAmpersand                                 = 16470 (*16_d6 80 01 *)
  StkStar                                      = 16471 (*16_d7 80 01 *)
  StkSlash                                     = 16472 (*16_d8 80 01 *)
  StkDeref                                     = 16473 (*16_d9 80 01 *)
  StkOpenPragma                                = 16474 (*16_da 80 01 *)
  StkClosePragma                               = 16475 (*16_db 80 01 *)

(* Variable tokens: *)
  StkIdent                                     = 16476 (*16_dc 80 01 *)
  StkIntLit                                    = 16477 (*16_dd 80 01 *)
  StkLongIntLit                                = 16478 (*16_de 80 01 *)
  StkBasedLit                                  = 16479 (*16_df 80 01 *)
  StkLongBasedLit                              = 16480 (*16_e0 80 01 *)
  StkRealLit                                   = 16481 (*16_e1 80 01 *)
  StkLongRealLit                               = 16482 (*16_e2 80 01 *)
  StkExtendedLit                               = 16483 (*16_e3 80 01 *)
  StkTextLit                                   = 16484 (*16_e4 80 01 *)
  StkWideTextLit                               = 16485 (*16_e5 80 01 *)
  StkCharLit                                   = 16486 (*16_e6 80 01 *)
  StkWideCharLit                               = 16487 (*16_e7 80 01 *)
  StkLexErrChars                               = 16488 (*16_e8 80 01 *)

  StkMaxTok                                    = 16488




(* Productions. *) 
RULE

(* Compilation units: *) 

Compilation : GenInterface . 
Compilation : InstInterface . 
Compilation : GenModule . 
Compilation : InstModule .
Compilation : Interface . 
Compilation : Module .
GenInterface :
    StkRwGENERIC StkRwINTERFACE StkIdent GenFormalsList StkSemicolon
    ImportList DeclList StkRwEND StkIdent StkDot . 

InstInterface :
    OptUnsafe StkRwINTERFACE StkIdent StkEqual
    StkIdent GenActals StkRwEND StkIdent StkDot . 

GenModule :
    StkRwGENERIC StkRwMODULE StkIdent GenFormalsList StkSemicolon
    ImportList Block StkRwEND StkIdent StkDot . 

InstModule :
    OptUnsafeTkRwMODULE StkIdent Exports StkEqual
    StkIdent GenActals StkRwEND StkIdent StkDot . 

Interface :
    OptUnsafe StkRwINTERFACE StkIdent StkSemicolon
    ImportList DeclList StkRwEND StkIdent StkDot .

Module :
    OptUnsafe StkRwMODULE StkIdent Exports StkSemicolon
    ImportList Block StkRwEND StkIdent StkDot .

OptUnsafe : StkUNSAFE { $$ . PaBool := TRUE; } .
OptUnsafe : { $$ . PaBool := FALSE; }.

Exports : { } .
Exports : StkRwEXPORTS IdentList { }.

IdentList : .
IdentList : IdentListSub 
    { WITH i = $1 . PaLong
      DO PushTok ( TD . StkIdentListRt , i+1L);
        PushTokPatch ( TD . StkIdentListLtPatch , 0L , i+1L);
      END (*WITH*); 
    } .

IdentListSub : { $$ . PaLong := 0L; } .
IdentListSub : IdentListSub StkComma Ident
    { WITH i = $1 . PaLong
      DO PushTok ( TD . StkIdentListRtElem , i );
        PushTokPatch ( TD . StkIdentListLtElemPatch , 0L , i );
        $$ . PaLong := i+1L;
      END (*WITH*); 
    } .

GenFormalsList : IdentList . 

GenActuals : IdentList .

DeclList : . 

Block : .

(* END of FM3Parser.lalr. *)

