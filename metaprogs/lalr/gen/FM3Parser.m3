
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -k -i -t -d -D FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* Global insertions from the .lalr file: *)
(* line 29 "FM3Parser.lalr" *)
 IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3ParsePass;
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCP_rp , Push_LCPeCrP , Push_LCPeCprp ,
      Push_ECPrP , Push_LCBr , Push_LCIri , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Push_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeList , MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  
(* End of global insertions from the .lalr file: *) 

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* Lalr-generated constants: *) 
   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 180;
   yyTableMax               = 338;
   yyNTableMax              = 273;
   yyFirstReadState         = 1;
   yyLastReadState          = 128;
   yyFirstReadTermState             = 129;
   yyLastReadTermState              = 166;
   yyLastReadNontermState           = 206;
   yyFirstReduceState               = 207;
   yyLastReduceState                = 321;
   yyStartState             = 1;
   yyStopState              = 207;
(* End of lalr-generated constants: *) 

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BIT FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BIT FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, uses in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   0]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   1]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   0]) , (*  13*) ADR (yyTComb [   2])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   3]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [  11]) , (*  21*) ADR (yyTComb [  10])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [  17]) , (*  25*) ADR (yyTComb [   0])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   5])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   9])
         , (*  30*) ADR (yyTComb [   2]) , (*  31*) ADR (yyTComb [   3])
         , (*  32*) ADR (yyTComb [  41]) , (*  33*) ADR (yyTComb [   2])
         , (*  34*) ADR (yyTComb [  14]) , (*  35*) ADR (yyTComb [  16])
         , (*  36*) ADR (yyTComb [   4]) , (*  37*) ADR (yyTComb [  34])
         , (*  38*) ADR (yyTComb [   5]) , (*  39*) ADR (yyTComb [  56])
         , (*  40*) ADR (yyTComb [  38]) , (*  41*) ADR (yyTComb [  23])
         , (*  42*) ADR (yyTComb [  50]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [  47]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [  57])
         , (*  48*) ADR (yyTComb [  24]) , (*  49*) ADR (yyTComb [  35])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [  46])
         , (*  52*) ADR (yyTComb [ 116]) , (*  53*) ADR (yyTComb [  19])
         , (*  54*) ADR (yyTComb [  57]) , (*  55*) ADR (yyTComb [  66])
         , (*  56*) ADR (yyTComb [ 124]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [  41]) , (*  59*) ADR (yyTComb [  71])
         , (*  60*) ADR (yyTComb [ 131]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [   4]) , (*  63*) ADR (yyTComb [  65])
         , (*  64*) ADR (yyTComb [  46]) , (*  65*) ADR (yyTComb [   6])
         , (*  66*) ADR (yyTComb [ 124]) , (*  67*) ADR (yyTComb [   7])
         , (*  68*) ADR (yyTComb [  49]) , (*  69*) ADR (yyTComb [  78])
         , (*  70*) ADR (yyTComb [ 105]) , (*  71*) ADR (yyTComb [  81])
         , (*  72*) ADR (yyTComb [ 141]) , (*  73*) ADR (yyTComb [  54])
         , (*  74*) ADR (yyTComb [  87]) , (*  75*) ADR (yyTComb [ 149])
         , (*  76*) ADR (yyTComb [ 156]) , (*  77*) ADR (yyTComb [ 188])
         , (*  78*) ADR (yyTComb [  59]) , (*  79*) ADR (yyTComb [   0])
         , (*  80*) ADR (yyTComb [  61]) , (*  81*) ADR (yyTComb [  62])
         , (*  82*) ADR (yyTComb [  95]) , (*  83*) ADR (yyTComb [  67])
         , (*  84*) ADR (yyTComb [  98]) , (*  85*) ADR (yyTComb [  76])
         , (*  86*) ADR (yyTComb [  77]) , (*  87*) ADR (yyTComb [ 107])
         , (*  88*) ADR (yyTComb [ 108]) , (*  89*) ADR (yyTComb [ 112])
         , (*  90*) ADR (yyTComb [   0]) , (*  91*) ADR (yyTComb [   0])
         , (*  92*) ADR (yyTComb [  85]) , (*  93*) ADR (yyTComb [ 115])
         , (*  94*) ADR (yyTComb [   0]) , (*  95*) ADR (yyTComb [   2])
         , (*  96*) ADR (yyTComb [  90]) , (*  97*) ADR (yyTComb [ 123])
         , (*  98*) ADR (yyTComb [ 127]) , (*  99*) ADR (yyTComb [ 195])
         , (* 100*) ADR (yyTComb [ 191]) , (* 101*) ADR (yyTComb [   8])
         , (* 102*) ADR (yyTComb [ 100]) , (* 103*) ADR (yyTComb [ 129])
         , (* 104*) ADR (yyTComb [ 133]) , (* 105*) ADR (yyTComb [ 108])
         , (* 106*) ADR (yyTComb [   0]) , (* 107*) ADR (yyTComb [ 146])
         , (* 108*) ADR (yyTComb [ 150]) , (* 109*) ADR (yyTComb [  12])
         , (* 110*) ADR (yyTComb [ 113]) , (* 111*) ADR (yyTComb [ 144])
         , (* 112*) ADR (yyTComb [ 128]) , (* 113*) ADR (yyTComb [ 200])
         , (* 114*) ADR (yyTComb [ 131]) , (* 115*) ADR (yyTComb [ 161])
         , (* 116*) ADR (yyTComb [ 133]) , (* 117*) ADR (yyTComb [ 167])
         , (* 118*) ADR (yyTComb [ 164]) , (* 119*) ADR (yyTComb [ 230])
         , (* 120*) ADR (yyTComb [ 227]) , (* 121*) ADR (yyTComb [ 142])
         , (* 122*) ADR (yyTComb [ 173]) , (* 123*) ADR (yyTComb [ 174])
         , (* 124*) ADR (yyTComb [ 148]) , (* 125*) ADR (yyTComb [ 177])
         , (* 126*) ADR (yyTComb [  16]) , (* 127*) ADR (yyTComb [ 152])
         , (* 128*) ADR (yyTComb [ 182])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 109])
         , (*   8*) ADR (yyNComb [ 109]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 109])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 109])
         , (*  16*) ADR (yyNComb [ 109]) , (*  17*) ADR (yyNComb [ 109])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 109])
         , (*  22*) ADR (yyNComb [ 116]) , (*  23*) ADR (yyNComb [ 118])
         , (*  24*) ADR (yyNComb [ 109]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 118]) , (*  27*) ADR (yyNComb [ 109])
         , (*  28*) ADR (yyNComb [ 109]) , (*  29*) ADR (yyNComb [ 109])
         , (*  30*) ADR (yyNComb [ 145]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 113]) , (*  33*) ADR (yyNComb [ 109])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 109])
         , (*  36*) ADR (yyNComb [ 109]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 109]) , (*  39*) ADR (yyNComb [ 117])
         , (*  40*) ADR (yyNComb [ 110]) , (*  41*) ADR (yyNComb [ 122])
         , (*  42*) ADR (yyNComb [ 112]) , (*  43*) ADR (yyNComb [ 143])
         , (*  44*) ADR (yyNComb [ 122]) , (*  45*) ADR (yyNComb [ 141])
         , (*  46*) ADR (yyNComb [ 115]) , (*  47*) ADR (yyNComb [ 109])
         , (*  48*) ADR (yyNComb [ 109]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 142]) , (*  51*) ADR (yyNComb [ 109])
         , (*  52*) ADR (yyNComb [ 145]) , (*  53*) ADR (yyNComb [ 109])
         , (*  54*) ADR (yyNComb [ 136]) , (*  55*) ADR (yyNComb [ 127])
         , (*  56*) ADR (yyNComb [ 126]) , (*  57*) ADR (yyNComb [ 176])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 109])
         , (*  60*) ADR (yyNComb [ 128]) , (*  61*) ADR (yyNComb [ 109])
         , (*  62*) ADR (yyNComb [ 153]) , (*  63*) ADR (yyNComb [ 109])
         , (*  64*) ADR (yyNComb [ 154]) , (*  65*) ADR (yyNComb [ 109])
         , (*  66*) ADR (yyNComb [ 112]) , (*  67*) ADR (yyNComb [ 155])
         , (*  68*) ADR (yyNComb [ 164]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 162]) , (*  71*) ADR (yyNComb [ 109])
         , (*  72*) ADR (yyNComb [ 109]) , (*  73*) ADR (yyNComb [ 182])
         , (*  74*) ADR (yyNComb [ 109]) , (*  75*) ADR (yyNComb [ 145])
         , (*  76*) ADR (yyNComb [ 111]) , (*  77*) ADR (yyNComb [ 171])
         , (*  78*) ADR (yyNComb [ 109]) , (*  79*) ADR (yyNComb [ 109])
         , (*  80*) ADR (yyNComb [ 109]) , (*  81*) ADR (yyNComb [ 171])
         , (*  82*) ADR (yyNComb [ 109]) , (*  83*) ADR (yyNComb [ 109])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 109]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 110]) , (*  89*) ADR (yyNComb [ 109])
         , (*  90*) ADR (yyNComb [ 199]) , (*  91*) ADR (yyNComb [ 190])
         , (*  92*) ADR (yyNComb [ 109]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 109])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 109])
         , (*  98*) ADR (yyNComb [ 109]) , (*  99*) ADR (yyNComb [ 201])
         , (* 100*) ADR (yyNComb [ 193]) , (* 101*) ADR (yyNComb [ 109])
         , (* 102*) ADR (yyNComb [ 109]) , (* 103*) ADR (yyNComb [ 109])
         , (* 104*) ADR (yyNComb [ 109]) , (* 105*) ADR (yyNComb [ 109])
         , (* 106*) ADR (yyNComb [ 110]) , (* 107*) ADR (yyNComb [ 184])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 109])
         , (* 110*) ADR (yyNComb [ 109]) , (* 111*) ADR (yyNComb [ 109])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 109])
         , (* 114*) ADR (yyNComb [ 188]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 109]) , (* 117*) ADR (yyNComb [ 109])
         , (* 118*) ADR (yyNComb [ 109]) , (* 119*) ADR (yyNComb [ 202])
         , (* 120*) ADR (yyNComb [ 197]) , (* 121*) ADR (yyNComb [ 109])
         , (* 122*) ADR (yyNComb [ 109]) , (* 123*) ADR (yyNComb [ 109])
         , (* 124*) ADR (yyNComb [ 109]) , (* 125*) ADR (yyNComb [ 193])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 109])
         , (* 128*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)   88 , (*   6*)  107 , (*   7*)  108
         , (*   8*)    0 , (*   9*)    0 , (*  10*)   99 , (*  11*)  100
         , (*  12*)    0 , (*  13*)    0 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)   70 , (*  19*)   54
         , (*  20*)    0 , (*  21*)    0 , (*  22*)   70 , (*  23*)   73
         , (*  24*)    0 , (*  25*)   73 , (*  26*)   70 , (*  27*)    0
         , (*  28*)   64 , (*  29*)   66 , (*  30*)   73 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)    0 , (*  41*)   39 , (*  42*)    0 , (*  43*)   70
         , (*  44*)    0 , (*  45*)   64 , (*  46*)   73 , (*  47*)    0
         , (*  48*)    0 , (*  49*)    0 , (*  50*)   64 , (*  51*)    0
         , (*  52*)   16 , (*  53*)    0 , (*  54*)    0 , (*  55*)    0
         , (*  56*)    0 , (*  57*)  120 , (*  58*)    0 , (*  59*)    0
         , (*  60*)    0 , (*  61*)    0 , (*  62*)   64 , (*  63*)    0
         , (*  64*)    0 , (*  65*)    0 , (*  66*)    0 , (*  67*)   64
         , (*  68*)    0 , (*  69*)    0 , (*  70*)    0 , (*  71*)    0
         , (*  72*)   68 , (*  73*)    0 , (*  74*)    0 , (*  75*)   73
         , (*  76*)    0 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)    0 , (*  89*)    0 , (*  90*)  119 , (*  91*)  120
         , (*  92*)    0 , (*  93*)    0 , (*  94*)    0 , (*  95*)    0
         , (*  96*)    0 , (*  97*)    0 , (*  98*)    0 , (*  99*)    0
         , (* 100*)    0 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)  125 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    0 , (* 126*)    0 , (* 127*)    0
         , (* 128*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {  94,  207} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {  33,  139} , (*   9*) yyTCombType {  61,   62}
         , (*  10*) yyTCombType {  15,  309} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {  15,   16}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  12,   13}
         , (*  20*) yyTCombType {  15,  309} , (*  21*) yyTCombType {  30,  229}
         , (*  22*) yyTCombType {  31,  138} , (*  23*) yyTCombType {  62,  319}
         , (*  24*) yyTCombType {  27,  275} , (*  25*) yyTCombType {  65,  149}
         , (*  26*) yyTCombType {  67,  229} , (*  27*) yyTCombType { 101,  102}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType {  21,  297}
         , (*  30*) yyTCombType {  79,   80} , (*  31*) yyTCombType { 109,  110}
         , (*  32*) yyTCombType {   1,  227} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {  95,   96} , (*  35*) yyTCombType { 126,  127}
         , (*  36*) yyTCombType {  24,  273} , (*  37*) yyTCombType {   1,  227}
         , (*  38*) yyTCombType {   2,   86} , (*  39*) yyTCombType {  95,  112}
         , (*  40*) yyTCombType {   0,    0} , (*  41*) yyTCombType {   0,    0}
         , (*  42*) yyTCombType {   0,    0} , (*  43*) yyTCombType {   0,    0}
         , (*  44*) yyTCombType {  15,   53} , (*  45*) yyTCombType {   0,    0}
         , (*  46*) yyTCombType {   0,    0} , (*  47*) yyTCombType {   0,    0}
         , (*  48*) yyTCombType {   0,    0} , (*  49*) yyTCombType {   0,    0}
         , (*  50*) yyTCombType {   0,    0} , (*  51*) yyTCombType {   0,    0}
         , (*  52*) yyTCombType {   0,    0} , (*  53*) yyTCombType {   0,    0}
         , (*  54*) yyTCombType {   0,    0} , (*  55*) yyTCombType {  21,  297}
         , (*  56*) yyTCombType {   0,    0} , (*  57*) yyTCombType {  20,  283}
         , (*  58*) yyTCombType {  15,   68} , (*  59*) yyTCombType {   1,  159}
         , (*  60*) yyTCombType {  32,  300} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {  15,  151} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  14,  131}
         , (*  68*) yyTCombType {  17,  266} , (*  69*) yyTCombType {   4,  216}
         , (*  70*) yyTCombType {   7,  129} , (*  71*) yyTCombType {  27,  275}
         , (*  72*) yyTCombType {  17,   18} , (*  73*) yyTCombType {  20,  283}
         , (*  74*) yyTCombType {  20,  283} , (*  75*) yyTCombType {  29,   30}
         , (*  76*) yyTCombType {  21,  297} , (*  77*) yyTCombType {  33,   34}
         , (*  78*) yyTCombType {  21,  297} , (*  79*) yyTCombType {  27,   28}
         , (*  80*) yyTCombType {  21,  297} , (*  81*) yyTCombType {  20,  132}
         , (*  82*) yyTCombType {  21,   22} , (*  83*) yyTCombType {  24,  273}
         , (*  84*) yyTCombType {  21,  297} , (*  85*) yyTCombType {  34,  239}
         , (*  86*) yyTCombType {  32,   33} , (*  87*) yyTCombType {  35,   36}
         , (*  88*) yyTCombType {  24,   25} , (*  89*) yyTCombType {  24,   26}
         , (*  90*) yyTCombType {  34,  239} , (*  91*) yyTCombType {  24,  273}
         , (*  92*) yyTCombType {  35,  141} , (*  93*) yyTCombType {  41,  229}
         , (*  94*) yyTCombType {  48,  145} , (*  95*) yyTCombType {   3,    4}
         , (*  96*) yyTCombType {   8,  130} , (*  97*) yyTCombType {  13,   14}
         , (*  98*) yyTCombType {  16,   17} , (*  99*) yyTCombType {  36,   37}
         , (* 100*) yyTCombType {  38,  140} , (* 101*) yyTCombType {  37,   38}
         , (* 102*) yyTCombType {  39,  142} , (* 103*) yyTCombType {  49,   50}
         , (* 104*) yyTCombType {  40,   41} , (* 105*) yyTCombType {  37,  240}
         , (* 106*) yyTCombType {  20,  283} , (* 107*) yyTCombType {  32,  300}
         , (* 108*) yyTCombType {  40,  230} , (* 109*) yyTCombType {  32,  300}
         , (* 110*) yyTCombType {  37,  240} , (* 111*) yyTCombType {  32,  300}
         , (* 112*) yyTCombType {  51,  146} , (* 113*) yyTCombType {  44,  295}
         , (* 114*) yyTCombType {  53,   54} , (* 115*) yyTCombType {  32,  300}
         , (* 116*) yyTCombType {  42,  293} , (* 117*) yyTCombType {  44,  295}
         , (* 118*) yyTCombType {  39,  143} , (* 119*) yyTCombType {  39,  144}
         , (* 120*) yyTCombType {  42,  293} , (* 121*) yyTCombType {  44,   45}
         , (* 122*) yyTCombType {  42,   43} , (* 123*) yyTCombType {  47,  287}
         , (* 124*) yyTCombType {  42,  293} , (* 125*) yyTCombType {  52,  261}
         , (* 126*) yyTCombType {  54,   20} , (* 127*) yyTCombType {  47,  287}
         , (* 128*) yyTCombType {  47,   25} , (* 129*) yyTCombType {  47,  287}
         , (* 130*) yyTCombType {  52,  261} , (* 131*) yyTCombType {  47,  287}
         , (* 132*) yyTCombType {  55,  147} , (* 133*) yyTCombType {  56,  304}
         , (* 134*) yyTCombType {  55,   56} , (* 135*) yyTCombType {  52,  261}
         , (* 136*) yyTCombType {  58,   59} , (* 137*) yyTCombType {  59,  148}
         , (* 138*) yyTCombType {  56,  304} , (* 139*) yyTCombType {  63,   64}
         , (* 140*) yyTCombType {  60,  311} , (* 141*) yyTCombType {  64,  136}
         , (* 142*) yyTCombType {  64,  137} , (* 143*) yyTCombType {  66,  230}
         , (* 144*) yyTCombType {  68,   69} , (* 145*) yyTCombType {  60,  311}
         , (* 146*) yyTCombType {  69,   70} , (* 147*) yyTCombType {  71,  150}
         , (* 148*) yyTCombType {  70,   19} , (* 149*) yyTCombType {  73,  135}
         , (* 150*) yyTCombType {  72,  257} , (* 151*) yyTCombType {  39,  291}
         , (* 152*) yyTCombType {  70,  133} , (* 153*) yyTCombType {  74,   75}
         , (* 154*) yyTCombType {  78,   79} , (* 155*) yyTCombType {  72,  257}
         , (* 156*) yyTCombType {  80,  152} , (* 157*) yyTCombType {  81,  153}
         , (* 158*) yyTCombType {  75,  267} , (* 159*) yyTCombType {  52,  261}
         , (* 160*) yyTCombType {  72,  257} , (* 161*) yyTCombType {  82,  154}
         , (* 162*) yyTCombType {  83,  155} , (* 163*) yyTCombType {  75,  267}
         , (* 164*) yyTCombType {  84,  156} , (* 165*) yyTCombType {  76,  246}
         , (* 166*) yyTCombType {  82,   83} , (* 167*) yyTCombType {  56,  304}
         , (* 168*) yyTCombType {  75,  267} , (* 169*) yyTCombType {  84,   85}
         , (* 170*) yyTCombType {  76,  246} , (* 171*) yyTCombType {  85,  157}
         , (* 172*) yyTCombType {  86,   87} , (* 173*) yyTCombType {  52,  261}
         , (* 174*) yyTCombType {  60,  311} , (* 175*) yyTCombType {  76,  246}
         , (* 176*) yyTCombType {  87,  217} , (* 177*) yyTCombType {  88,    6}
         , (* 178*) yyTCombType {  89,   90} , (* 179*) yyTCombType {  52,  261}
         , (* 180*) yyTCombType {  92,   93} , (* 181*) yyTCombType {  56,  304}
         , (* 182*) yyTCombType {  93,  158} , (* 183*) yyTCombType {  76,  246}
         , (* 184*) yyTCombType {  72,  257} , (* 185*) yyTCombType {  96,   97}
         , (* 186*) yyTCombType {  76,  246} , (* 187*) yyTCombType {  56,  304}
         , (* 188*) yyTCombType {  60,  311} , (* 189*) yyTCombType {  97,  214}
         , (* 190*) yyTCombType {  66,   67} , (* 191*) yyTCombType {  97,  218}
         , (* 192*) yyTCombType {  75,  267} , (* 193*) yyTCombType {  98,   99}
         , (* 194*) yyTCombType {  60,  311} , (* 195*) yyTCombType { 102,  103}
         , (* 196*) yyTCombType { 103,  160} , (* 197*) yyTCombType {  77,  244}
         , (* 198*) yyTCombType {  72,  257} , (* 199*) yyTCombType {  76,  246}
         , (* 200*) yyTCombType {  70,  134} , (* 201*) yyTCombType { 104,  105}
         , (* 202*) yyTCombType {  77,  244} , (* 203*) yyTCombType { 105,  106}
         , (* 204*) yyTCombType {  72,  257} , (* 205*) yyTCombType { 100,  311}
         , (* 206*) yyTCombType {  75,  267} , (* 207*) yyTCombType {  77,  244}
         , (* 208*) yyTCombType { 110,  111} , (* 209*) yyTCombType {  99,  243}
         , (* 210*) yyTCombType { 100,  311} , (* 211*) yyTCombType { 111,  162}
         , (* 212*) yyTCombType {  75,  267} , (* 213*) yyTCombType {  76,  246}
         , (* 214*) yyTCombType {  99,  243} , (* 215*) yyTCombType {  77,   78}
         , (* 216*) yyTCombType { 107,  237} , (* 217*) yyTCombType { 107,  237}
         , (* 218*) yyTCombType {  77,   81} , (* 219*) yyTCombType {  76,  246}
         , (* 220*) yyTCombType { 108,  161} , (* 221*) yyTCombType { 108,    8}
         , (* 222*) yyTCombType {  99,  243} , (* 223*) yyTCombType { 112,  113}
         , (* 224*) yyTCombType { 113,  114} , (* 225*) yyTCombType {  99,  243}
         , (* 226*) yyTCombType { 114,  163} , (* 227*) yyTCombType { 115,  253}
         , (* 228*) yyTCombType { 116,  164} , (* 229*) yyTCombType { 115,  253}
         , (* 230*) yyTCombType { 118,  119} , (* 231*) yyTCombType {  77,  244}
         , (* 232*) yyTCombType { 115,  116} , (* 233*) yyTCombType { 117,  215}
         , (* 234*) yyTCombType { 100,  311} , (* 235*) yyTCombType { 117,  219}
         , (* 236*) yyTCombType { 120,  308} , (* 237*) yyTCombType { 121,  122}
         , (* 238*) yyTCombType {  99,  243} , (* 239*) yyTCombType { 119,  243}
         , (* 240*) yyTCombType { 122,  165} , (* 241*) yyTCombType { 120,  308}
         , (* 242*) yyTCombType { 123,  124} , (* 243*) yyTCombType { 124,  125}
         , (* 244*) yyTCombType { 119,  243} , (* 245*) yyTCombType {  77,  244}
         , (* 246*) yyTCombType { 125,  107} , (* 247*) yyTCombType { 127,  128}
         , (* 248*) yyTCombType { 100,  311} , (* 249*) yyTCombType { 128,  166}
         , (* 250*) yyTCombType {   0,    0} , (* 251*) yyTCombType {  77,  244}
         , (* 252*) yyTCombType {  99,  243} , (* 253*) yyTCombType {   0,    0}
         , (* 254*) yyTCombType { 100,  311} , (* 255*) yyTCombType {   0,    0}
         , (* 256*) yyTCombType {   0,    0} , (* 257*) yyTCombType { 119,  243}
         , (* 258*) yyTCombType {  99,  243} , (* 259*) yyTCombType {   0,    0}
         , (* 260*) yyTCombType { 119,  243} , (* 261*) yyTCombType {   0,    0}
         , (* 262*) yyTCombType {   0,    0} , (* 263*) yyTCombType {   0,    0}
         , (* 264*) yyTCombType {   0,    0} , (* 265*) yyTCombType {   0,    0}
         , (* 266*) yyTCombType { 113,  254} , (* 267*) yyTCombType {   0,    0}
         , (* 268*) yyTCombType { 113,  254} , (* 269*) yyTCombType {   0,    0}
         , (* 270*) yyTCombType { 120,  308} , (* 271*) yyTCombType {   0,    0}
         , (* 272*) yyTCombType {   0,    0} , (* 273*) yyTCombType { 119,  243}
         , (* 274*) yyTCombType {   0,    0} , (* 275*) yyTCombType {   0,    0}
         , (* 276*) yyTCombType {   0,    0} , (* 277*) yyTCombType {   0,    0}
         , (* 278*) yyTCombType {   0,    0} , (* 279*) yyTCombType {   0,    0}
         , (* 280*) yyTCombType {   0,    0} , (* 281*) yyTCombType {   0,    0}
         , (* 282*) yyTCombType {   0,    0} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType { 120,  308} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType {   0,    0} , (* 287*) yyTCombType { 119,  243}
         , (* 288*) yyTCombType {   0,    0} , (* 289*) yyTCombType {   0,    0}
         , (* 290*) yyTCombType { 120,  308} , (* 291*) yyTCombType {   0,    0}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType { 119,  243}
         , (* 294*) yyTCombType {   0,    0} , (* 295*) yyTCombType {   0,    0}
         , (* 296*) yyTCombType {   0,    0} , (* 297*) yyTCombType {   0,    0}
         , (* 298*) yyTCombType {   0,    0} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType {   0,    0} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {   0,    0} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {   0,    0}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType {   0,    0} , (* 315*) yyTCombType {   0,    0}
         , (* 316*) yyTCombType {   0,    0} , (* 317*) yyTCombType {   0,    0}
         , (* 318*) yyTCombType {   0,    0} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {   0,    0} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {   0,    0} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {   0,    0} , (* 325*) yyTCombType {   0,    0}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType {   0,    0}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        to them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  201 , (* 110*)   94 , (* 111*)  202 , (* 112*)  203
         , (* 113*)  204 , (* 114*)  205 , (* 115*)  206 , (* 116*)   98
         , (* 117*)  118 , (* 118*)    5 , (* 119*)   88 , (* 120*)  104
         , (* 121*)  123 , (* 122*)   95 , (* 123*)   11 , (* 124*)   12
         , (* 125*)  117 , (* 126*)    0 , (* 127*)    9 , (* 128*)   89
         , (* 129*)  109 , (* 130*)   31 , (* 131*)   48 , (* 132*)  170
         , (* 133*)  189 , (* 134*)    7 , (* 135*)   35 , (* 136*)  176
         , (* 137*)   76 , (* 138*)  169 , (* 139*)   47 , (* 140*)   77
         , (* 141*)  169 , (* 142*)   24 , (* 143*)   61 , (* 144*)  194
         , (* 145*)  192 , (* 146*)  183 , (* 147*)   52 , (* 148*)  195
         , (* 149*)  185 , (* 150*)   49 , (* 151*)  172 , (* 152*)   73
         , (* 153*)  168 , (* 154*)  196 , (* 155*)  171 , (* 156*)   27
         , (* 157*)  173 , (* 158*)   23 , (* 159*)  167 , (* 160*)   21
         , (* 161*)   32 , (* 162*)   29 , (* 163*)   39 , (* 164*)  175
         , (* 165*)   23 , (* 166*)  177 , (* 167*)   23 , (* 168*)  169
         , (* 169*)   24 , (* 170*)   44 , (* 171*)  197 , (* 172*)   40
         , (* 173*)  182 , (* 174*)   42 , (* 175*)   15 , (* 176*)  198
         , (* 177*)   46 , (* 178*)  178 , (* 179*)   42 , (* 180*)  179
         , (* 181*)  181 , (* 182*)   46 , (* 183*)  180 , (* 184*)   51
         , (* 185*)  184 , (* 186*)   55 , (* 187*)   21 , (* 188*)  191
         , (* 189*)   57 , (* 190*)   39 , (* 191*)  174 , (* 192*)   23
         , (* 193*)   58 , (* 194*)   15 , (* 195*)   63 , (* 196*)  186
         , (* 197*)   63 , (* 198*)   72 , (* 199*)   71 , (* 200*)  193
         , (* 201*)  199 , (* 202*)  200 , (* 203*)   82 , (* 204*)   84
         , (* 205*)  169 , (* 206*)   24 , (* 207*)   92 , (* 208*)  101
         , (* 209*)  108 , (* 210*)  115 , (* 211*)   23 , (* 212*)  126
         , (* 213*)   91 , (* 214*)  121 , (* 215*)  100 , (* 216*)  120
         , (* 217*)    0 , (* 218*)   65 , (* 219*)    0 , (* 220*)    0
         , (* 221*)   66 , (* 222*)  190 , (* 223*)  188 , (* 224*)  187
         , (* 225*)  188 , (* 226*)   74 , (* 227*)   76 , (* 228*)  175
         , (* 229*)   76 , (* 230*)   76 , (* 231*)    0 , (* 232*)    0
         , (* 233*)    0 , (* 234*)    0 , (* 235*)    0 , (* 236*)    0
         , (* 237*)    0 , (* 238*)    0 , (* 239*)    0 , (* 240*)   60
         , (* 241*)    0 , (* 242*)    0 , (* 243*)    0 , (* 244*)    0
         , (* 245*)    0 , (* 246*)    0 , (* 247*)    0 , (* 248*)    0
         , (* 249*)    0 , (* 250*)    0 , (* 251*)    0 , (* 252*)    0
         , (* 253*)    0 , (* 254*)   60 , (* 255*)    0 , (* 256*)    0
         , (* 257*)    0 , (* 258*)    0 , (* 259*)   15 , (* 260*)    0
         , (* 261*)   60 , (* 262*)    0 , (* 263*)    0 , (* 264*)    0
         , (* 265*)    0 , (* 266*)    0 , (* 267*)    0 , (* 268*)    0
         , (* 269*)    0 , (* 270*)    0 , (* 271*)    0 , (* 272*)    0
         , (* 273*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 207(P   1)*)    2 , (*A 208(P   2)*)    1 , (*A 209(P   3)*)    1
         , (*A 210(P   4)*)    1 , (*A 211(P   5)*)    1 , (*A 212(P   6)*)    1
         , (*A 213(P   7)*)    1 , (*A 214(P   8)*)    0 , (*A 215(P   9)*)    0
         , (*A 216(P  10)*)    0 , (*A 217(P  11)*)    0 , (*A 218(P  12)*)    0
         , (*A 219(P  13)*)    0 , (*A 220(P  14)*)   10 , (*A 221(P  15)*)   10
         , (*A 222(P  16)*)   11 , (*A 223(P  17)*)   10 , (*A 224(P  18)*)   10
         , (*A 225(P  19)*)   11 , (*A 226(P  20)*)    1 , (*A 227(P  21)*)    0
         , (*A 228(P  22)*)    0 , (*A 229(P  23)*)    1 , (*A 230(P  24)*)    0
         , (*A 231(P  25)*)    1 , (*A 232(P  26)*)    3 , (*A 233(P  27)*)    1
         , (*A 234(P  28)*)    1 , (*A 235(P  29)*)    3 , (*A 236(P  30)*)    3
         , (*A 237(P  31)*)    0 , (*A 238(P  32)*)    3 , (*A 239(P  33)*)    0
         , (*A 240(P  34)*)    1 , (*A 241(P  35)*)    3 , (*A 242(P  36)*)    3
         , (*A 243(P  37)*)    0 , (*A 244(P  38)*)    0 , (*A 245(P  39)*)    2
         , (*A 246(P  40)*)    0 , (*A 247(P  41)*)    3 , (*A 248(P  42)*)    1
         , (*A 249(P  43)*)    3 , (*A 250(P  44)*)    2 , (*A 251(P  45)*)    4
         , (*A 252(P  46)*)    3 , (*A 253(P  47)*)    2 , (*A 254(P  48)*)    0
         , (*A 255(P  49)*)    3 , (*A 256(P  50)*)    3 , (*A 257(P  51)*)    2
         , (*A 258(P  52)*)    1 , (*A 259(P  53)*)    2 , (*A 260(P  54)*)    4
         , (*A 261(P  55)*)    2 , (*A 262(P  56)*)    1 , (*A 263(P  57)*)    2
         , (*A 264(P  58)*)    5 , (*A 265(P  59)*)    2 , (*A 266(P  60)*)    0
         , (*A 267(P  61)*)    3 , (*A 268(P  62)*)    1 , (*A 269(P  63)*)    1
         , (*A 270(P  64)*)    3 , (*A 271(P  65)*)    3 , (*A 272(P  66)*)    2
         , (*A 273(P  67)*)    0 , (*A 274(P  68)*)    2 , (*A 275(P  69)*)    0
         , (*A 276(P  70)*)    1 , (*A 277(P  71)*)    4 , (*A 278(P  72)*)    1
         , (*A 279(P  73)*)    2 , (*A 280(P  74)*)    3 , (*A 281(P  75)*)    2
         , (*A 282(P  76)*)    4 , (*A 283(P  77)*)    1 , (*A 284(P  78)*)    3
         , (*A 285(P  79)*)    1 , (*A 286(P  80)*)    3 , (*A 287(P  81)*)    2
         , (*A 288(P  82)*)    1 , (*A 289(P  83)*)    1 , (*A 290(P  84)*)    1
         , (*A 291(P  85)*)    0 , (*A 292(P  86)*)    2 , (*A 293(P  87)*)    0
         , (*A 294(P  88)*)    2 , (*A 295(P  89)*)    0 , (*A 296(P  90)*)    2
         , (*A 297(P  91)*)    0 , (*A 298(P  92)*)    2 , (*A 299(P  93)*)    4
         , (*A 300(P  94)*)    0 , (*A 301(P  95)*)    4 , (*A 302(P  96)*)    1
         , (*A 303(P  97)*)    5 , (*A 304(P  98)*)    0 , (*A 305(P  99)*)    1
         , (*A 306(P 100)*)    1 , (*A 307(P 101)*)    5 , (*A 308(P 102)*)    0
         , (*A 309(P 103)*)    1 , (*A 310(P 104)*)    2 , (*A 311(P 105)*)    0
         , (*A 312(P 106)*)    1 , (*A 313(P 107)*)    1 , (*A 314(P 108)*)    1
         , (*A 315(P 109)*)    1 , (*A 316(P 110)*)    2 , (*A 317(P 111)*)    1
         , (*A 318(P 112)*)    3 , (*A 319(P 113)*)    0 , (*A 320(P 114)*)    1
         , (*A 321(P 115)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 207(P   1)*)  180 , (*A 208(P   2)*)  110 , (*A 209(P   3)*)  110
         , (*A 210(P   4)*)  110 , (*A 211(P   5)*)  110 , (*A 212(P   6)*)  110
         , (*A 213(P   7)*)  110 , (*A 214(P   8)*)  116 , (*A 215(P   9)*)  117
         , (*A 216(P  10)*)  118 , (*A 217(P  11)*)  119 , (*A 218(P  12)*)  120
         , (*A 219(P  13)*)  121 , (*A 220(P  14)*)  109 , (*A 221(P  15)*)  111
         , (*A 222(P  16)*)  112 , (*A 223(P  17)*)  113 , (*A 224(P  18)*)  114
         , (*A 225(P  19)*)  115 , (*A 226(P  20)*)  122 , (*A 227(P  21)*)  122
         , (*A 228(P  22)*)  129 , (*A 229(P  23)*)  130 , (*A 230(P  24)*)  130
         , (*A 231(P  25)*)  131 , (*A 232(P  26)*)  131 , (*A 233(P  27)*)  132
         , (*A 234(P  28)*)  133 , (*A 235(P  29)*)  133 , (*A 236(P  30)*)  134
         , (*A 237(P  31)*)  134 , (*A 238(P  32)*)  135 , (*A 239(P  33)*)  135
         , (*A 240(P  34)*)  136 , (*A 241(P  35)*)  136 , (*A 242(P  36)*)  123
         , (*A 243(P  37)*)  137 , (*A 244(P  38)*)  139 , (*A 245(P  39)*)  138
         , (*A 246(P  40)*)  138 , (*A 247(P  41)*)  140 , (*A 248(P  42)*)  141
         , (*A 249(P  43)*)  141 , (*A 250(P  44)*)  140 , (*A 251(P  45)*)  142
         , (*A 252(P  46)*)  142 , (*A 253(P  47)*)  125 , (*A 254(P  48)*)  125
         , (*A 255(P  49)*)  127 , (*A 256(P  50)*)  128 , (*A 257(P  51)*)  144
         , (*A 258(P  52)*)  143 , (*A 259(P  53)*)  143 , (*A 260(P  54)*)  145
         , (*A 261(P  55)*)  148 , (*A 262(P  56)*)  147 , (*A 263(P  57)*)  147
         , (*A 264(P  58)*)  149 , (*A 265(P  59)*)  150 , (*A 266(P  60)*)  150
         , (*A 267(P  61)*)  154 , (*A 268(P  62)*)  152 , (*A 269(P  63)*)  153
         , (*A 270(P  64)*)  153 , (*A 271(P  65)*)  155 , (*A 272(P  66)*)  156
         , (*A 273(P  67)*)  156 , (*A 274(P  68)*)  157 , (*A 275(P  69)*)  157
         , (*A 276(P  70)*)  146 , (*A 277(P  71)*)  146 , (*A 278(P  72)*)  158
         , (*A 279(P  73)*)  146 , (*A 280(P  74)*)  159 , (*A 281(P  75)*)  160
         , (*A 282(P  76)*)  160 , (*A 283(P  77)*)  163 , (*A 284(P  78)*)  164
         , (*A 285(P  79)*)  164 , (*A 286(P  80)*)  165 , (*A 287(P  81)*)  166
         , (*A 288(P  82)*)  169 , (*A 289(P  83)*)  169 , (*A 290(P  84)*)  169
         , (*A 291(P  85)*)  169 , (*A 292(P  86)*)  167 , (*A 293(P  87)*)  167
         , (*A 294(P  88)*)  168 , (*A 295(P  89)*)  168 , (*A 296(P  90)*)  161
         , (*A 297(P  91)*)  161 , (*A 298(P  92)*)  162 , (*A 299(P  93)*)  162
         , (*A 300(P  94)*)  162 , (*A 301(P  95)*)  171 , (*A 302(P  96)*)  170
         , (*A 303(P  97)*)  170 , (*A 304(P  98)*)  172 , (*A 305(P  99)*)  151
         , (*A 306(P 100)*)  151 , (*A 307(P 101)*)  126 , (*A 308(P 102)*)  173
         , (*A 309(P 103)*)  124 , (*A 310(P 104)*)  175 , (*A 311(P 105)*)  175
         , (*A 312(P 106)*)  176 , (*A 313(P 107)*)  176 , (*A 314(P 108)*)  176
         , (*A 315(P 109)*)  176 , (*A 316(P 110)*)  174 , (*A 317(P 111)*)  177
         , (*A 318(P 112)*)  177 , (*A 319(P 113)*)  174 , (*A 320(P 114)*)  178
         , (*A 321(P 115)*)  179
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   69 , (*:   5*)   69
         , (*:   6*)   70 , (*:   7*)   70 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   19 , (*:  13*)   95 , (*:  14*)   67
         , (*:  15*)    9 , (*:  16*)   95 , (*:  17*)   68
         , (*:  18*)   95 , (*:  19*)   69 , (*:  20*)   70
         , (*:  21*)   19 , (*:  22*)   95 , (*:  23*)   95
         , (*:  24*)   19 , (*:  25*)   95 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   19
         , (*:  30*)   19 , (*:  31*)   19 , (*:  32*)   19
         , (*:  33*)    6 , (*:  34*)   71 , (*:  35*)   76
         , (*:  36*)   95 , (*:  37*)   71 , (*:  38*)   95
         , (*:  39*)   95 , (*:  40*)   70 , (*:  41*)   70
         , (*:  42*)   66 , (*:  43*)   95 , (*:  44*)   66
         , (*:  45*)   95 , (*:  46*)   95 , (*:  47*)   66
         , (*:  48*)   70 , (*:  49*)   68 , (*:  50*)   95
         , (*:  51*)   66 , (*:  52*)    9 , (*:  53*)   95
         , (*:  54*)   69 , (*:  55*)   66 , (*:  56*)    9
         , (*:  57*)    9 , (*:  58*)   95 , (*:  59*)   66
         , (*:  60*)    9 , (*:  61*)    9 , (*:  62*)   19
         , (*:  63*)   74 , (*:  64*)   95 , (*:  65*)   19
         , (*:  66*)   19 , (*:  67*)   19 , (*:  68*)   95
         , (*:  69*)   68 , (*:  70*)   95 , (*:  71*)   66
         , (*:  72*)    9 , (*:  73*)   95 , (*:  74*)   66
         , (*:  75*)    9 , (*:  76*)    9 , (*:  77*)    9
         , (*:  78*)   95 , (*:  79*)   30 , (*:  80*)   95
         , (*:  81*)   95 , (*:  82*)   66 , (*:  83*)   95
         , (*:  84*)   66 , (*:  85*)   95 , (*:  86*)   95
         , (*:  87*)   69 , (*:  88*)   69 , (*:  89*)   66
         , (*:  90*)    9 , (*:  91*)    9 , (*:  92*)   95
         , (*:  93*)   67 , (*:  94*)    0 , (*:  95*)   32
         , (*:  96*)   95 , (*:  97*)   66 , (*:  98*)   66
         , (*:  99*)   14 , (*: 100*)   14 , (*: 101*)   19
         , (*: 102*)   95 , (*: 103*)   67 , (*: 104*)   68
         , (*: 105*)   95 , (*: 106*)   69 , (*: 107*)   70
         , (*: 108*)   70 , (*: 109*)   19 , (*: 110*)   95
         , (*: 111*)   67 , (*: 112*)   95 , (*: 113*)   66
         , (*: 114*)   95 , (*: 115*)   66 , (*: 116*)   95
         , (*: 117*)   66 , (*: 118*)   66 , (*: 119*)    9
         , (*: 120*)    9 , (*: 121*)   95 , (*: 122*)   67
         , (*: 123*)   68 , (*: 124*)   95 , (*: 125*)   69
         , (*: 126*)   19 , (*: 127*)   95 , (*: 128*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 129)*)  255 (*P48*) , (*RR: 130)*)  236 (*P29*)
         , (*RR: 131)*)  222 (*P15*) , (*RR: 132)*)  281 (*P74*)
         , (*RR: 133)*)  278 (*P71*) , (*RR: 134)*)  276 (*P69*)
         , (*RR: 135)*)  233 (*P26*) , (*RR: 136)*)  305 (*P98*)
         , (*RR: 137)*)  306 (*P99*) , (*RR: 138)*)  277 (*P70*)
         , (*RR: 139)*)  298 (*P91*) , (*RR: 140)*)  241 (*P34*)
         , (*RR: 141)*)  299 (*P92*) , (*RR: 142)*)  290 (*P83*)
         , (*RR: 143)*)  288 (*P81*) , (*RR: 144)*)  289 (*P82*)
         , (*RR: 145)*)  282 (*P75*) , (*RR: 146)*)  264 (*P57*)
         , (*RR: 147)*)  302 (*P95*) , (*RR: 148)*)  303 (*P96*)
         , (*RR: 149)*)  307 (*P100*) , (*RR: 150)*)  260 (*P53*)
         , (*RR: 151)*)  268 (*P61*) , (*RR: 152)*)  251 (*P44*)
         , (*RR: 153)*)  248 (*P41*) , (*RR: 154)*)  247 (*P40*)
         , (*RR: 155)*)  249 (*P42*) , (*RR: 156)*)  250 (*P43*)
         , (*RR: 157)*)  252 (*P45*) , (*RR: 158)*)  223 (*P16*)
         , (*RR: 159)*)  226 (*P19*) , (*RR: 160)*)  220 (*P13*)
         , (*RR: 161)*)  256 (*P49*) , (*RR: 162)*)  224 (*P17*)
         , (*RR: 163)*)  231 (*P24*) , (*RR: 164)*)  232 (*P25*)
         , (*RR: 165)*)  221 (*P14*) , (*RR: 166)*)  225 (*P18*)
         , (*RR: 167)*)  279 (*P72*) , (*RR: 168)*)  296 (*P89*)
         , (*RR: 169)*)  234 (*P27*) , (*RR: 170)*)  235 (*P28*)
         , (*RR: 171)*)  272 (*P65*) , (*RR: 172)*)  274 (*P67*)
         , (*RR: 173)*)  271 (*P64*) , (*RR: 174)*)  270 (*P63*)
         , (*RR: 175)*)  269 (*P62*) , (*RR: 176)*)  238 (*P31*)
         , (*RR: 177)*)  280 (*P73*) , (*RR: 178)*)  284 (*P77*)
         , (*RR: 179)*)  292 (*P85*) , (*RR: 180)*)  294 (*P87*)
         , (*RR: 181)*)  286 (*P79*) , (*RR: 182)*)  285 (*P78*)
         , (*RR: 183)*)  265 (*P58*) , (*RR: 184)*)  263 (*P56*)
         , (*RR: 185)*)  262 (*P55*) , (*RR: 186)*)  321 (*P114*)
         , (*RR: 187)*)  318 (*P111*) , (*RR: 188)*)  320 (*P113*)
         , (*RR: 189)*)  316 (*P109*) , (*RR: 190)*)  317 (*P110*)
         , (*RR: 191)*)  301 (*P94*) , (*RR: 192)*)  259 (*P52*)
         , (*RR: 193)*)  258 (*P51*) , (*RR: 194)*)  314 (*P107*)
         , (*RR: 195)*)  312 (*P105*) , (*RR: 196)*)  313 (*P106*)
         , (*RR: 197)*)  315 (*P108*) , (*RR: 198)*)  310 (*P103*)
         , (*RR: 199)*)  242 (*P35*) , (*RR: 200)*)  245 (*P38*)
         , (*RR: 201)*)  208 (*P1*) , (*RR: 202)*)  209 (*P2*)
         , (*RR: 203)*)  210 (*P3*) , (*RR: 204)*)  211 (*P4*)
         , (*RR: 205)*)  212 (*P5*) , (*RR: 206)*)  213 (*P6*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkReBegin.  Use it messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkReservedId";
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer.  If the
   reduce is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

   (* Declarations from the LOCAL section of the .lalr file: *) 
(* line 51 "FM3Parser.lalr" *)
 TYPE Sk = FM3Scopes . ScopeKindTyp ;
    TYPE Dk = FM3Decls . DeclKindTyp ; 
    TYPE Uk = FM3Units . UnitKindTyp ; 
  
   (* End of declarations from the LOCAL section of the .lalr file: *)
   
   VAR
      yyOldUnnestCoord  : LONGINT; 
      yyState           : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
                       PushUnnestStk (WParsAttr);
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
                PushUnnestStk (WParsAttr);
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repair's been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull; 

             (* Inserted semantic action code from the .lalr file: **)
              CASE yyState OF
              | 207 => (* P1 _0000_ (180): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 208,201 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 209,202 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 210,203 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 211,204 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 212,205 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 213,206 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 214 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 221 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInterface ; 
              | 215 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 224 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkModule ; 
              | 216 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 227 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenInterface ; 
              | 217 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 230 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenModule ; 
              | 218 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 233 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstInterface ; 
              | 219 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 236 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstModule ; 
              | 220,160 => (* P14 Interface (109): OptUnsafe StkRwINTERFACE StkIdent InterfaceKind StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 109;

              | 221,165 => (* P15 Module (111): OptUnsafe StkRwMODULE StkIdent Exports ModuleKind StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 111;

              | 222,131 => (* P16 GenInterface (112): StkRwGENERIC StkRwINTERFACE StkIdent GenInterfaceKind GenFormalList StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 112;

              | 223,158 => (* P17 GenModule (113): StkRwGENERIC StkRwMODULE StkIdent GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 113;

              | 224,162 => (* P18 InstInterface (114): OptUnsafe StkRwINTERFACE StkIdent InstInterfaceKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 114;

              | 225,166 => (* P19 InstModule (115): OptUnsafe StkRwMODULE StkIdent Exports InstModuleKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 115;

              | 226,159 => (* P20 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 262 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 227 => (* P21 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 263 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 228 => (* P22 CaptureCoord (129): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 129;
                (* line 266 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 229 => (* P23 OptSemicolon (130): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;

              | 230 => (* P24 OptSemicolon (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;

              | 231,163 => (* P25 IdPlusList (131): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 131;
                (* line 276 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 232,164 => (* P26 IdPlusList (131): IdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 280 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 233,135 => (* P27 DeclIdent (132): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 132;
                (* line 285 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaTok ; 
              | 234,169 => (* P28 DeclIdPlusList (133): DeclIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 133;
                (* line 290 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord is copied from yyAttributeStack^[yyStackPtr+1] to yySynAttribute by parser. *)
                       yySynAttribute . PaInt (* Non-duplicate Id count. *)
                         := ORD ( FM3ParsePass . DeclIdL2R ( ) ) ; 
                     
              | 235,170 => (* P29 DeclIdPlusList (133): DeclIdPlusList StkComma DeclIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 295 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord is copied from yyAttributeStack^[yyStackPtr+1] to yySynAttribute by parser . *)
                       yySynAttribute . PaInt (* Non-duplicate Id count. *)
                         := yyAttributeStack^[yyStackPtr+1] . PaInt + ORD ( FM3ParsePass . DeclIdL2R ( ) ) ; 
                     
              | 236,130 => (* P30 IdStarList (134): IdStarList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 302 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 237 => (* P31 IdStarList (134): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 134;
                (* line 304 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 238,176 => (* P32 QualIdStarList (135): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 308 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 239 => (* P33 QualIdStarList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 310 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 240 => (* P34 QualId (136): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;

              | 241,140 => (* P35 QualId (136): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 315 of "FM3Parser.lalr" *)
                 Push_LCeCr
                         ( Itk . ItkQualIdLt ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord );
                     
              | 242,199 => (* P36 Imports (123): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 322 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 243 => (* P37 ImportsLt (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 244 => (* P38 ImportsRt (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;
                (* line 326 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 245,200 => (* P39 ImportsRecurse (138): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 138;
                (* line 328 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 246 => (* P40 ImportsRecurse (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 332 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 247,154 => (* P41 ImportItem (140): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 338 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 248,153 => (* P42 ImportIntfPlusList (141): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 342 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 249,155 => (* P43 ImportIntfPlusList (141): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 354 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 250,156 => (* P44 ImportItem (140): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 140;
                (* line 368 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 251,152 => (* P45 FromImportPlusList (142): StkRwFROM StkIdent StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 142;
                (* line 372 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 252,157 => (* P46 FromImportPlusList (142): FromImportPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 395 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 253 => (* P47 Exports (125): StkRwEXPORTS IdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 125;
                (* line 434 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk . ItkExportIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 254 => (* P48 Exports (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 438 of "FM3Parser.lalr" *)
                 FM3ParsePass . PushEXPORTSMain ( yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
              | 255,129 => (* P49 GenFormalList (127): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 444 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 256,161 => (* P50 GenActualList (128): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 450 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 257 => (* P51 TypeDeclGroup (144): StkRwTYPE TypeDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 144;

              | 258,193 => (* P52 TypeDecls (143): TypeDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 259,192 => (* P53 TypeDecls (143): TypeDecls TypeDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 143;

              | 260,150 => (* P54 TypeDecl (145): StkIdent StkEqual Type StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 145;
                (* line 460 of "FM3Parser.lalr" *)
                 Push_LCPeCrP
                         ( Itk . ItkTypeDeclLt
                         , yyAttributeStack^[yyStackPtr] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                         ) ; 
                     
              | 261 => (* P55 ConstDeclGroup (148): StkRwCONST ConstDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;

              | 262,185 => (* P56 ConstDecls (147): ConstDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 263,184 => (* P57 ConstDecls (147): ConstDecls ConstDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 147;

              | 264,146 => (* P58 ConstDecl (149): StkIdent OptConstType StkEqual Expr StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 149;

              | 265,183 => (* P59 OptConstType (150): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 150;
                (* line 476 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 266 => (* P60 OptConstType (150): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 150;
                (* line 479 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 267 => (* P61 VarDeclGroup (154): VarDeclsVAR VarDecls StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 486 of "FM3Parser.lalr" *)
                 FM3Decls . PopDeclInfo ( ) ; 
              | 268,151 => (* P62 VarDeclsVAR (152): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 491 of "FM3Parser.lalr" *)
                 FM3Decls . PushDeclInfo ( Dk . DkVar , Itk . ItkVarDeclLt ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 269,175 => (* P63 VarDecls (153): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 498 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ; (* Decl count. *) 
              | 270,174 => (* P64 VarDecls (153): VarDecls StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 500 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 + yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 271,173 => (* P65 VarDecl (155): DeclIdPlusList OptVarType OptVarValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 155;
                (* line 503 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       FM3ParsePass . CheckTypeAndOrValue 
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . Position  
                         , yyAttributeStack^[yyStackPtr+2] . PaBool
                         , yyAttributeStack^[yyStackPtr+3] . PaBool
                         ) ;
                       VAR LDeclKind : FM3Decls . DeclKindTyp ;
                       VAR LDeclIdTok : FM3Base . TokTyp ; 
                
                       BEGIN 
                         FM3Decls . TopDeclInfo ( (*OUT*) LDeclKind , (*OUT*) LDeclIdTok ) ;  
                         Push_LCP_eCP_zCP_rP
                           ( LDeclIdTok 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                          ) ;
                       END (*Block*)
                     
              | 272,171 => (* P66 OptVarType (156): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 528 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 273 => (* P67 OptVarType (156): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 156;
                (* line 533 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 274,172 => (* P68 OptVarValue (157): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 538 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 275 => (* P69 OptVarValue (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 543 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 276,134 => (* P70 Type (146): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;

              | 277,138 => (* P71 Type (146): RecTypeRECORD VarDecls OptSemicolon StkRwEND .*)
                DEC (yyStackPtr, 4); yyNonterminal := 146;
                (* line 555 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCPI_rpi
                         ( Itk . ItkRecDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                         ) ;
                       FM3Decls . PopDeclInfo () ;
                       FM3ParsePass . ScopeRtL2R ( ) ; 
                     
              | 278,133 => (* P72 RecTypeRECORD (158): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 566 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position :=  yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt (* ScopeNo. *) 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkRec , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       FM3Decls . PushDeclInfo ( Dk . DkRecField , Itk . ItkRecFieldLt ) ;
                     
              | 279,167 => (* P73 Type (146): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 146;
                (* line 576 of "FM3Parser.lalr" *)
                 Push_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 280,177 => (* P74 Signature (159): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 582 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         Push_LCP_rp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 281,132 => (* P75 Formals (160): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 594 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3ParsePass . ScopeEmpty ( Sk . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 282,145 => (* P76 Formals (160): FormalsLt FormalsPlusList OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 599 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3ParsePass . ScopeRtL2R ( ) ;
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 283 => (* P77 FormalsLt (163): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 605 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt (* ScopeNo. *) 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkFormals , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 284,178 => (* P78 FormalsPlusList (164): FormalsPlusList StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 164;
                (* line 611 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Formal count. *); 
              | 285,182 => (* P79 FormalsPlusList (164): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 613 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* Formal count. *) ; 
              | 286,181 => (* P80 Formal (165): FormalModeAndIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 165;
                (* line 617 of "FM3Parser.lalr" *)
                 VAR LDeclKind : FM3Decls . DeclKindTyp ; 
                       VAR LDeclIdTok : FM3Base . TokTyp ; 
                       BEGIN (*Block*)  
                         FM3Decls . TopDeclInfo ( (*OUT*) LDeclKind , (*OUT*) LDeclIdTok ) ; 
                         IF LDeclKind = Dk . DkVarFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+2] . PaBool (* Formal type is present (absent). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               );
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal expression is present. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression  (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               );
                           END (*IF*) ;
                         ELSE 
                           FM3ParsePass . CheckTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+2] . PaBool
                             , yyAttributeStack^[yyStackPtr+3] . PaBool
                             )
                         END (*IF*) ;
                       END (*Block*) ; 
                       IF yyAttributeStack^[yyStackPtr+1] . PaInt (* Id count. *) = 0
                       THEN
                (* TODO: Skip entire rest of formal. *)
                       END ;
                       FM3Decls . PopDeclInfo ( ) ; 
                     
              | 287 => (* P81 FormalModeAndIds (166): FormalMode DeclIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 655 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Id count. *) ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;   
                       VAR LDeclKind : FM3Decls . DeclKindTyp ;
                       VAR LDeclIdTok : FM3Base . TokTyp ;
                       BEGIN (*Block*)  
                         FM3Decls . TopDeclInfo ( (*OUT*) LDeclKind , (*OUT*) LDeclIdTok ) ;  
                         MakeListPos ( yySynAttribute , LDeclIdTok, yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       END (*Block*); 
                     
              | 288,143 => (* P82 FormalMode (169): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 667 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       FM3Decls . PushDeclInfo
                         ( Dk . DkValueFormal , Itk . ItkFormalVALUEIdListLt ) ;
                       FM3ParsePass . ScopeRtL2R ( ) ; 
                     
              | 289,144 => (* P83 FormalMode (169): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 674 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       FM3Decls . PushDeclInfo
                         ( Dk . DkVarFormal , Itk . ItkFormalVARIdListLt ) ;
                     
              | 290,142 => (* P84 FormalMode (169): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 679 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       FM3Decls . PushDeclInfo
                         ( Dk . DkROFormal , Itk . ItkFormalREADONLYIdListLt ) ;
                     
              | 291 => (* P85 FormalMode (169): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 169;
                (* line 684 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Decls . PushDeclInfo
                         ( Dk . DkValueFormal , Itk . ItkFormalVALUEIdListLt ) ;
                     
              | 292,179 => (* P86 FormalType (167): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 691 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 293 => (* P87 FormalType (167): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 167;
                (* line 696 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 294,180 => (* P88 FormalExpr (168): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 704 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 295 => (* P89 FormalExpr (168): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 168;
                (* line 710 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 296,168 => (* P90 ResultType (161): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 161;
                (* line 718 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 297 => (* P91 ResultType (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 724 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 298,139 => (* P92 Raises (162): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 732 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkRaisesANY ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 299,141 => (* P93 Raises (162): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 162;
                (* line 739 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position, yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 300 => (* P94 Raises (162): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 162;
                (* line 744 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *);
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkRaisesSetAbsent , FM3Scanner . Attribute . Position ); 
                     
              | 301,191 => (* P95 ProcDecl (171): StkRwPROCEDURE StkIdent Signature OptBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 171;
                (* line 753 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Units . UnitStackTopRef ^ . UntKind OF 
                         | Uk . UkInterface 
                         , Uk . UkGenInterface  
                         , Uk . UkInstInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY 
                                  { " A procedure in an interface must not have a body (2.5.2)." }
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                );  
                
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | Uk . UkModule  
                         , Uk . UkGenModule  
                         , Uk . UkInstModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY
                                    { " A procedure in a module must have a body (2.5)." } 
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         END (*CASE*);
                         Push_LCIri
                           ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord, yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ); 
                       END (*Block*) 
                     
              | 302,147 => (* P96 OptBody (170): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 793 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LP ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 303,148 => (* P97 OptBody (170): StkEqual ProcBodyScopeLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 170;
                (* line 799 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                       yySynAttribute . PaConstructNo := yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCP_rp
                         ( Itk . ItkProcBodyLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       FM3ParsePass . ScopeRtL2R ( ) ; 
                     
              | 304 => (* P98 ProcBodyScopeLt (172): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 172;
                (* line 807 of "FM3Parser.lalr" *)
                 EVAL FM3ParsePass . ScopeLtL2R
                         ( Sk . SkProcBody , yyAttributeStack^[yyStackPtr] . Scan . Position ) ;
                     
              | 305,136 => (* P99 Expr (151): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 306,137 => (* P100 Expr (151): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 307,149 => (* P101 Block (126): BlockLt DeclList StkRwBEGIN Stmts StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 126;
                (* line 819 of "FM3Parser.lalr" *)
                 Push_ECPrP
                         ( Itk . ItkBlockLt , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+5] . Scan . Position
                         ) ;
                     
              | 308 => (* P102 BlockLt (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 826 of "FM3Parser.lalr" *)
                 FM3ParsePass . BeginBlock ( ) ;
                       Push_LP ( Itk . ItkBlockLt , FM3Scanner . Attribute . Position ); 
                     
              | 309 => (* P103 DeclList (124): DeclListRecurse .*)
                DEC (yyStackPtr, 1); yyNonterminal := 124;
                (* line 833 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk . ItkDeclListLt , yyAttributeStack^[yyStackPtr+1] ) ; 
              | 310,198 => (* P104 DeclListRecurse (175): DeclListRecurse Decl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 835 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 311 => (* P105 DeclListRecurse (175): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 175;
                (* line 837 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 312,195 => (* P106 Decl (176): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 313,196 => (* P107 Decl (176): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 314,194 => (* P108 Decl (176): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 315,197 => (* P109 Decl (176): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 316,189 => (* P110 Stmts (174): StmtPlusList OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;

              | 317,190 => (* P111 StmtPlusList (177): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;

              | 318,187 => (* P112 StmtPlusList (177): StmtPlusList StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 177;

              | 319 => (* P113 Stmts (174): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 174;
                (* line 850 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 320,188 => (* P114 Stmt (178): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;

              | 321,186 => (* P115 AssignStmt (179): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 857 of "FM3Parser.lalr" *)
                 Push_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);
             (* End of inserted emantic action code from the .lalr file: **)

               (* Here, a reduction has been partially done.  yyStackPtr has been
                  decremented by the RHS length, yyNonterminal has been set to
                  the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which will have set yySynAttribute.  Now do a nonterminal
                  read transition on yyStateStack^ [yyStackPtr] (* A state*)
                  and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have  a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyOldUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := UnnestCoord ( );
                   ELSE WParsAttr . PaUnnestCoord := yyOldUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ;
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
              PushUnnestStk (WParsAttr);
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 58 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 61 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

