
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -k -i -t -d -D FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* Global insertions from the .lalr file: *)
(* line 29 "FM3Parser.lalr" *)
 IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3ParsePass;
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCPrp , Push_LCPeCrP , Push_ECPrP , 
      Push_LCBr , Push_LCIri , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeList , MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  
(* End of global insertions from the .lalr file: *) 

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* Lalr-generated constants: *) 
   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 177;
   yyTableMax               = 320;
   yyNTableMax              = 261;
   yyFirstReadState         = 1;
   yyLastReadState          = 124;
   yyFirstReadTermState             = 125;
   yyLastReadTermState              = 162;
   yyLastReadNontermState           = 199;
   yyFirstReduceState               = 200;
   yyLastReduceState                = 311;
   yyStartState             = 1;
   yyStopState              = 200;
(* End of lalr-generated constants: *) 

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BIT FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BIT FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, uses in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   0]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   1]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   0]) , (*  13*) ADR (yyTComb [   2])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   3]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   8]) , (*  25*) ADR (yyTComb [   2])
         , (*  26*) ADR (yyTComb [   7]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [  10]) , (*  29*) ADR (yyTComb [  37])
         , (*  30*) ADR (yyTComb [   4]) , (*  31*) ADR (yyTComb [   9])
         , (*  32*) ADR (yyTComb [  39]) , (*  33*) ADR (yyTComb [  16])
         , (*  34*) ADR (yyTComb [   0]) , (*  35*) ADR (yyTComb [   8])
         , (*  36*) ADR (yyTComb [  17]) , (*  37*) ADR (yyTComb [   0])
         , (*  38*) ADR (yyTComb [   2]) , (*  39*) ADR (yyTComb [   3])
         , (*  40*) ADR (yyTComb [  12]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   4]) , (*  43*) ADR (yyTComb [  21])
         , (*  44*) ADR (yyTComb [   5]) , (*  45*) ADR (yyTComb [  44])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [  47])
         , (*  48*) ADR (yyTComb [  13]) , (*  49*) ADR (yyTComb [  35])
         , (*  50*) ADR (yyTComb [  43]) , (*  51*) ADR (yyTComb [   9])
         , (*  52*) ADR (yyTComb [  50]) , (*  53*) ADR (yyTComb [  10])
         , (*  54*) ADR (yyTComb [  45]) , (*  55*) ADR (yyTComb [  52])
         , (*  56*) ADR (yyTComb [  20]) , (*  57*) ADR (yyTComb [  57])
         , (*  58*) ADR (yyTComb [   0]) , (*  59*) ADR (yyTComb [  54])
         , (*  60*) ADR (yyTComb [  37]) , (*  61*) ADR (yyTComb [  30])
         , (*  62*) ADR (yyTComb [  71]) , (*  63*) ADR (yyTComb [  35])
         , (*  64*) ADR (yyTComb [  23]) , (*  65*) ADR (yyTComb [  40])
         , (*  66*) ADR (yyTComb [  68]) , (*  67*) ADR (yyTComb [  91])
         , (*  68*) ADR (yyTComb [  73]) , (*  69*) ADR (yyTComb [ 135])
         , (*  70*) ADR (yyTComb [  51]) , (*  71*) ADR (yyTComb [ 138])
         , (*  72*) ADR (yyTComb [ 139]) , (*  73*) ADR (yyTComb [ 146])
         , (*  74*) ADR (yyTComb [  55]) , (*  75*) ADR (yyTComb [   0])
         , (*  76*) ADR (yyTComb [  56]) , (*  77*) ADR (yyTComb [  61])
         , (*  78*) ADR (yyTComb [  93]) , (*  79*) ADR (yyTComb [  66])
         , (*  80*) ADR (yyTComb [  96]) , (*  81*) ADR (yyTComb [  68])
         , (*  82*) ADR (yyTComb [  73]) , (*  83*) ADR (yyTComb [ 101])
         , (*  84*) ADR (yyTComb [ 102]) , (*  85*) ADR (yyTComb [ 106])
         , (*  86*) ADR (yyTComb [   0]) , (*  87*) ADR (yyTComb [   0])
         , (*  88*) ADR (yyTComb [  79]) , (*  89*) ADR (yyTComb [ 108])
         , (*  90*) ADR (yyTComb [   0]) , (*  91*) ADR (yyTComb [   2])
         , (*  92*) ADR (yyTComb [  82]) , (*  93*) ADR (yyTComb [ 117])
         , (*  94*) ADR (yyTComb [ 113]) , (*  95*) ADR (yyTComb [ 180])
         , (*  96*) ADR (yyTComb [ 192]) , (*  97*) ADR (yyTComb [   6])
         , (*  98*) ADR (yyTComb [  85]) , (*  99*) ADR (yyTComb [ 117])
         , (* 100*) ADR (yyTComb [ 119]) , (* 101*) ADR (yyTComb [  93])
         , (* 102*) ADR (yyTComb [   0]) , (* 103*) ADR (yyTComb [ 120])
         , (* 104*) ADR (yyTComb [ 134]) , (* 105*) ADR (yyTComb [   7])
         , (* 106*) ADR (yyTComb [  98]) , (* 107*) ADR (yyTComb [ 130])
         , (* 108*) ADR (yyTComb [ 105]) , (* 109*) ADR (yyTComb [ 184])
         , (* 110*) ADR (yyTComb [ 117]) , (* 111*) ADR (yyTComb [ 147])
         , (* 112*) ADR (yyTComb [ 119]) , (* 113*) ADR (yyTComb [ 151])
         , (* 114*) ADR (yyTComb [ 150]) , (* 115*) ADR (yyTComb [ 211])
         , (* 116*) ADR (yyTComb [ 213]) , (* 117*) ADR (yyTComb [ 126])
         , (* 118*) ADR (yyTComb [ 157]) , (* 119*) ADR (yyTComb [ 158])
         , (* 120*) ADR (yyTComb [ 133]) , (* 121*) ADR (yyTComb [ 160])
         , (* 122*) ADR (yyTComb [   8]) , (* 123*) ADR (yyTComb [ 135])
         , (* 124*) ADR (yyTComb [ 164])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 108]) , (*  19*) ADR (yyNComb [ 108])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 113])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 109])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 115])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 118])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 111])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 112])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 117])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 121])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 122]) , (*  45*) ADR (yyNComb [ 114])
         , (*  46*) ADR (yyNComb [ 130]) , (*  47*) ADR (yyNComb [ 115])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 108])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 108])
         , (*  54*) ADR (yyNComb [ 132]) , (*  55*) ADR (yyNComb [ 109])
         , (*  56*) ADR (yyNComb [ 119]) , (*  57*) ADR (yyNComb [ 114])
         , (*  58*) ADR (yyNComb [ 145]) , (*  59*) ADR (yyNComb [ 121])
         , (*  60*) ADR (yyNComb [ 141]) , (*  61*) ADR (yyNComb [ 108])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 108])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 108])
         , (*  66*) ADR (yyNComb [ 108]) , (*  67*) ADR (yyNComb [ 157])
         , (*  68*) ADR (yyNComb [ 108]) , (*  69*) ADR (yyNComb [ 159])
         , (*  70*) ADR (yyNComb [ 153]) , (*  71*) ADR (yyNComb [ 152])
         , (*  72*) ADR (yyNComb [ 108]) , (*  73*) ADR (yyNComb [ 108])
         , (*  74*) ADR (yyNComb [ 108]) , (*  75*) ADR (yyNComb [ 108])
         , (*  76*) ADR (yyNComb [ 108]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 108]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 108]) , (*  81*) ADR (yyNComb [ 108])
         , (*  82*) ADR (yyNComb [ 108]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 110]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 184]) , (*  87*) ADR (yyNComb [ 182])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 108])
         , (*  90*) ADR (yyNComb [ 108]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 108]) , (*  95*) ADR (yyNComb [ 186])
         , (*  96*) ADR (yyNComb [ 186]) , (*  97*) ADR (yyNComb [ 108])
         , (*  98*) ADR (yyNComb [ 108]) , (*  99*) ADR (yyNComb [ 108])
         , (* 100*) ADR (yyNComb [ 108]) , (* 101*) ADR (yyNComb [ 108])
         , (* 102*) ADR (yyNComb [ 183]) , (* 103*) ADR (yyNComb [ 179])
         , (* 104*) ADR (yyNComb [ 108]) , (* 105*) ADR (yyNComb [ 108])
         , (* 106*) ADR (yyNComb [ 108]) , (* 107*) ADR (yyNComb [ 108])
         , (* 108*) ADR (yyNComb [ 108]) , (* 109*) ADR (yyNComb [ 108])
         , (* 110*) ADR (yyNComb [ 183]) , (* 111*) ADR (yyNComb [ 108])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 108])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 192])
         , (* 116*) ADR (yyNComb [ 190]) , (* 117*) ADR (yyNComb [ 108])
         , (* 118*) ADR (yyNComb [ 108]) , (* 119*) ADR (yyNComb [ 108])
         , (* 120*) ADR (yyNComb [ 108]) , (* 121*) ADR (yyNComb [ 189])
         , (* 122*) ADR (yyNComb [ 108]) , (* 123*) ADR (yyNComb [ 108])
         , (* 124*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)   84 , (*   6*)  103 , (*   7*)  104
         , (*   8*)    0 , (*   9*)    0 , (*  10*)   95 , (*  11*)   96
         , (*  12*)    0 , (*  13*)    0 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)   67 , (*  19*)   70
         , (*  20*)    0 , (*  21*)   67 , (*  22*)    0 , (*  23*)   60
         , (*  24*)    0 , (*  25*)    0 , (*  26*)    0 , (*  27*)   60
         , (*  28*)    0 , (*  29*)   16 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)  116 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)   60
         , (*  40*)    0 , (*  41*)   60 , (*  42*)    0 , (*  43*)    0
         , (*  44*)   60 , (*  45*)    0 , (*  46*)   67 , (*  47*)    0
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)    0
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)    0
         , (*  56*)   54 , (*  57*)    0 , (*  58*)   67 , (*  59*)    0
         , (*  60*)    0 , (*  61*)    0 , (*  62*)    0 , (*  63*)    0
         , (*  64*)    0 , (*  65*)    0 , (*  66*)    0 , (*  67*)    0
         , (*  68*)    0 , (*  69*)   65 , (*  70*)    0 , (*  71*)   70
         , (*  72*)    0 , (*  73*)    0 , (*  74*)    0 , (*  75*)    0
         , (*  76*)    0 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)    0 , (*  86*)  115 , (*  87*)  116
         , (*  88*)    0 , (*  89*)    0 , (*  90*)    0 , (*  91*)    0
         , (*  92*)    0 , (*  93*)    0 , (*  94*)    0 , (*  95*)    0
         , (*  96*)    0 , (*  97*)    0 , (*  98*)    0 , (*  99*)    0
         , (* 100*)    0 , (* 101*)    0 , (* 102*)  121 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {  90,  200} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  37,  301}
         , (*  10*) yyTCombType {  15,  299} , (*  11*) yyTCombType {  38,   39}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  37,  301} , (*  15*) yyTCombType {  15,   16}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  12,   13}
         , (*  20*) yyTCombType {  15,  299} , (*  21*) yyTCombType {  25,  132}
         , (*  22*) yyTCombType {  39,  309} , (*  23*) yyTCombType {  42,  137}
         , (*  24*) yyTCombType {  44,  222} , (*  25*) yyTCombType {  97,   98}
         , (*  26*) yyTCombType { 105,  106} , (*  27*) yyTCombType { 122,  123}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType {   0,    0}
         , (*  30*) yyTCombType {  75,   76} , (*  31*) yyTCombType {   0,    0}
         , (*  32*) yyTCombType {   1,  220} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {  91,   92} , (*  35*) yyTCombType {   0,    0}
         , (*  36*) yyTCombType {   0,    0} , (*  37*) yyTCombType {   1,  220}
         , (*  38*) yyTCombType {   2,   82} , (*  39*) yyTCombType {  91,  108}
         , (*  40*) yyTCombType {  43,  223} , (*  41*) yyTCombType {   0,    0}
         , (*  42*) yyTCombType {   0,    0} , (*  43*) yyTCombType {  37,  301}
         , (*  44*) yyTCombType {  15,   30} , (*  45*) yyTCombType {   0,    0}
         , (*  46*) yyTCombType {  29,  253} , (*  47*) yyTCombType {   0,    0}
         , (*  48*) yyTCombType {   0,    0} , (*  49*) yyTCombType {   0,    0}
         , (*  50*) yyTCombType {  45,  288} , (*  51*) yyTCombType {  29,  253}
         , (*  52*) yyTCombType {   0,    0} , (*  53*) yyTCombType {  47,  138}
         , (*  54*) yyTCombType {   0,    0} , (*  55*) yyTCombType {   0,    0}
         , (*  56*) yyTCombType {  29,  253} , (*  57*) yyTCombType {  37,  301}
         , (*  58*) yyTCombType {  15,   65} , (*  59*) yyTCombType {   1,  155}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  37,  301}
         , (*  64*) yyTCombType {  15,   70} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  14,  127}
         , (*  68*) yyTCombType {  17,  258} , (*  69*) yyTCombType {   4,  209}
         , (*  70*) yyTCombType {   7,  125} , (*  71*) yyTCombType {  20,  264}
         , (*  72*) yyTCombType {  17,   18} , (*  73*) yyTCombType {  22,  266}
         , (*  74*) yyTCombType {  24,  131} , (*  75*) yyTCombType {  26,   27}
         , (*  76*) yyTCombType {  28,  133} , (*  77*) yyTCombType {  20,   21}
         , (*  78*) yyTCombType {  31,   32} , (*  79*) yyTCombType {  20,  264}
         , (*  80*) yyTCombType {  29,  253} , (*  81*) yyTCombType {  22,   23}
         , (*  82*) yyTCombType {  33,  135} , (*  83*) yyTCombType {  36,  136}
         , (*  84*) yyTCombType {  33,   34} , (*  85*) yyTCombType {  32,  274}
         , (*  86*) yyTCombType {  40,   41} , (*  87*) yyTCombType {  43,   44}
         , (*  88*) yyTCombType {  48,   49} , (*  89*) yyTCombType {  45,  288}
         , (*  90*) yyTCombType {  56,  222} , (*  91*) yyTCombType {  54,  141}
         , (*  92*) yyTCombType {  47,   48} , (*  93*) yyTCombType {  64,  146}
         , (*  94*) yyTCombType {  29,  253} , (*  95*) yyTCombType {   3,    4}
         , (*  96*) yyTCombType {   8,  126} , (*  97*) yyTCombType {  13,   14}
         , (*  98*) yyTCombType {  16,   17} , (*  99*) yyTCombType {  30,   31}
         , (* 100*) yyTCombType {  29,  253} , (* 101*) yyTCombType {  32,  274}
         , (* 102*) yyTCombType {  32,  274} , (* 103*) yyTCombType {  35,   36}
         , (* 104*) yyTCombType {  51,   52} , (* 105*) yyTCombType {  53,  139}
         , (* 106*) yyTCombType {  49,  231} , (* 107*) yyTCombType {  54,  142}
         , (* 108*) yyTCombType {  54,  143} , (* 109*) yyTCombType {  32,  134}
         , (* 110*) yyTCombType {  45,  288} , (* 111*) yyTCombType {  49,  231}
         , (* 112*) yyTCombType {  45,  288} , (* 113*) yyTCombType {  47,  291}
         , (* 114*) yyTCombType {  50,   51} , (* 115*) yyTCombType {  47,  291}
         , (* 116*) yyTCombType {  45,   46} , (* 117*) yyTCombType {  52,   53}
         , (* 118*) yyTCombType {  55,   56} , (* 119*) yyTCombType {  50,  140}
         , (* 120*) yyTCombType {  59,  286} , (* 121*) yyTCombType {  52,  232}
         , (* 122*) yyTCombType {  55,  223} , (* 123*) yyTCombType {  57,  284}
         , (* 124*) yyTCombType {  59,  286} , (* 125*) yyTCombType {  61,  144}
         , (* 126*) yyTCombType {  52,  232} , (* 127*) yyTCombType {  57,  284}
         , (* 128*) yyTCombType {  59,   60} , (* 129*) yyTCombType {  57,   58}
         , (* 130*) yyTCombType {  63,  145} , (* 131*) yyTCombType {  57,  284}
         , (* 132*) yyTCombType {  60,  129} , (* 133*) yyTCombType {  60,  130}
         , (* 134*) yyTCombType {  32,  274} , (* 135*) yyTCombType {  65,   66}
         , (* 136*) yyTCombType {  66,   67} , (* 137*) yyTCombType {  62,  278}
         , (* 138*) yyTCombType {  67,   19} , (* 139*) yyTCombType {  68,  147}
         , (* 140*) yyTCombType {  54,  282} , (* 141*) yyTCombType {  62,  278}
         , (* 142*) yyTCombType {  62,   63} , (* 143*) yyTCombType {  62,  278}
         , (* 144*) yyTCombType {  69,  249} , (* 145*) yyTCombType {  62,  278}
         , (* 146*) yyTCombType {  70,   20} , (* 147*) yyTCombType {  71,  259}
         , (* 148*) yyTCombType {  72,  238} , (* 149*) yyTCombType {  69,  249}
         , (* 150*) yyTCombType {  74,   75} , (* 151*) yyTCombType {  76,  148}
         , (* 152*) yyTCombType {  71,  259} , (* 153*) yyTCombType {  72,  238}
         , (* 154*) yyTCombType {  69,  249} , (* 155*) yyTCombType {  73,  236}
         , (* 156*) yyTCombType {  77,  149} , (* 157*) yyTCombType {  71,  259}
         , (* 158*) yyTCombType {  72,  238} , (* 159*) yyTCombType {  78,  150}
         , (* 160*) yyTCombType {  73,  236} , (* 161*) yyTCombType {  79,  151}
         , (* 162*) yyTCombType {  80,  152} , (* 163*) yyTCombType {  81,  153}
         , (* 164*) yyTCombType {  78,   79} , (* 165*) yyTCombType {  73,  236}
         , (* 166*) yyTCombType {  72,  238} , (* 167*) yyTCombType {  80,   81}
         , (* 168*) yyTCombType {  82,   83} , (* 169*) yyTCombType {  72,  238}
         , (* 170*) yyTCombType {  83,  210} , (* 171*) yyTCombType {  84,    6}
         , (* 172*) yyTCombType {  85,   86} , (* 173*) yyTCombType {  73,   74}
         , (* 174*) yyTCombType {  88,   89} , (* 175*) yyTCombType {  89,  154}
         , (* 176*) yyTCombType {  73,   77} , (* 177*) yyTCombType {  92,   93}
         , (* 178*) yyTCombType {  69,  249} , (* 179*) yyTCombType {  94,   95}
         , (* 180*) yyTCombType {  98,   99} , (* 181*) yyTCombType {  71,  259}
         , (* 182*) yyTCombType {  72,  238} , (* 183*) yyTCombType {  93,  207}
         , (* 184*) yyTCombType {  99,  156} , (* 185*) yyTCombType {  93,  211}
         , (* 186*) yyTCombType {  67,  128} , (* 187*) yyTCombType { 100,  101}
         , (* 188*) yyTCombType { 101,  102} , (* 189*) yyTCombType {  73,  236}
         , (* 190*) yyTCombType { 103,  229} , (* 191*) yyTCombType { 103,  229}
         , (* 192*) yyTCombType {  69,  249} , (* 193*) yyTCombType { 106,  107}
         , (* 194*) yyTCombType {  95,  235} , (* 195*) yyTCombType {  71,  259}
         , (* 196*) yyTCombType {  72,  238} , (* 197*) yyTCombType { 107,  158}
         , (* 198*) yyTCombType {  69,  249} , (* 199*) yyTCombType {  95,  235}
         , (* 200*) yyTCombType { 108,  109} , (* 201*) yyTCombType {  71,  259}
         , (* 202*) yyTCombType {  72,  238} , (* 203*) yyTCombType {  73,  236}
         , (* 204*) yyTCombType { 104,  157} , (* 205*) yyTCombType { 104,    8}
         , (* 206*) yyTCombType {  96,  301} , (* 207*) yyTCombType {  95,  235}
         , (* 208*) yyTCombType { 109,  110} , (* 209*) yyTCombType {  73,  236}
         , (* 210*) yyTCombType {  95,  235} , (* 211*) yyTCombType {  96,  301}
         , (* 212*) yyTCombType { 110,  159} , (* 213*) yyTCombType { 111,  245}
         , (* 214*) yyTCombType { 112,  160} , (* 215*) yyTCombType { 111,  245}
         , (* 216*) yyTCombType { 114,  115} , (* 217*) yyTCombType { 113,  208}
         , (* 218*) yyTCombType { 111,  112} , (* 219*) yyTCombType { 113,  212}
         , (* 220*) yyTCombType { 115,  235} , (* 221*) yyTCombType { 117,  118}
         , (* 222*) yyTCombType { 116,  298} , (* 223*) yyTCombType {  95,  235}
         , (* 224*) yyTCombType { 118,  161} , (* 225*) yyTCombType { 115,  235}
         , (* 226*) yyTCombType { 119,  120} , (* 227*) yyTCombType { 116,  298}
         , (* 228*) yyTCombType { 120,  121} , (* 229*) yyTCombType { 121,  103}
         , (* 230*) yyTCombType { 123,  124} , (* 231*) yyTCombType { 124,  162}
         , (* 232*) yyTCombType {   0,    0} , (* 233*) yyTCombType {   0,    0}
         , (* 234*) yyTCombType {   0,    0} , (* 235*) yyTCombType {  96,  301}
         , (* 236*) yyTCombType {   0,    0} , (* 237*) yyTCombType {  95,  235}
         , (* 238*) yyTCombType { 115,  235} , (* 239*) yyTCombType {   0,    0}
         , (* 240*) yyTCombType {   0,    0} , (* 241*) yyTCombType { 115,  235}
         , (* 242*) yyTCombType {   0,    0} , (* 243*) yyTCombType {  95,  235}
         , (* 244*) yyTCombType {   0,    0} , (* 245*) yyTCombType {   0,    0}
         , (* 246*) yyTCombType {   0,    0} , (* 247*) yyTCombType {   0,    0}
         , (* 248*) yyTCombType {   0,    0} , (* 249*) yyTCombType {  96,  301}
         , (* 250*) yyTCombType { 109,  246} , (* 251*) yyTCombType {   0,    0}
         , (* 252*) yyTCombType { 109,  246} , (* 253*) yyTCombType {   0,    0}
         , (* 254*) yyTCombType { 115,  235} , (* 255*) yyTCombType {  96,  301}
         , (* 256*) yyTCombType { 116,  298} , (* 257*) yyTCombType {   0,    0}
         , (* 258*) yyTCombType {   0,    0} , (* 259*) yyTCombType {   0,    0}
         , (* 260*) yyTCombType {   0,    0} , (* 261*) yyTCombType {   0,    0}
         , (* 262*) yyTCombType {   0,    0} , (* 263*) yyTCombType {   0,    0}
         , (* 264*) yyTCombType {   0,    0} , (* 265*) yyTCombType {   0,    0}
         , (* 266*) yyTCombType {   0,    0} , (* 267*) yyTCombType {   0,    0}
         , (* 268*) yyTCombType { 115,  235} , (* 269*) yyTCombType {   0,    0}
         , (* 270*) yyTCombType { 116,  298} , (* 271*) yyTCombType {   0,    0}
         , (* 272*) yyTCombType {   0,    0} , (* 273*) yyTCombType {   0,    0}
         , (* 274*) yyTCombType { 115,  235} , (* 275*) yyTCombType {   0,    0}
         , (* 276*) yyTCombType { 116,  298} , (* 277*) yyTCombType {   0,    0}
         , (* 278*) yyTCombType {   0,    0} , (* 279*) yyTCombType {   0,    0}
         , (* 280*) yyTCombType {   0,    0} , (* 281*) yyTCombType {   0,    0}
         , (* 282*) yyTCombType {   0,    0} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType {   0,    0} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType {   0,    0} , (* 287*) yyTCombType {   0,    0}
         , (* 288*) yyTCombType {   0,    0} , (* 289*) yyTCombType {   0,    0}
         , (* 290*) yyTCombType {   0,    0} , (* 291*) yyTCombType {   0,    0}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType {   0,    0}
         , (* 294*) yyTCombType {   0,    0} , (* 295*) yyTCombType {   0,    0}
         , (* 296*) yyTCombType {   0,    0} , (* 297*) yyTCombType {   0,    0}
         , (* 298*) yyTCombType {   0,    0} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType {   0,    0} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {   0,    0} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {   0,    0}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType {   0,    0} , (* 315*) yyTCombType {   0,    0}
         , (* 316*) yyTCombType {   0,    0} , (* 317*) yyTCombType {   0,    0}
         , (* 318*) yyTCombType {   0,    0} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        to them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  194 , (* 109*)   90 , (* 110*)  195 , (* 111*)  196
         , (* 112*)  197 , (* 113*)  198 , (* 114*)  199 , (* 115*)   94
         , (* 116*)  114 , (* 117*)    5 , (* 118*)   84 , (* 119*)  100
         , (* 120*)  119 , (* 121*)   91 , (* 122*)   11 , (* 123*)   12
         , (* 124*)  113 , (* 125*)   35 , (* 126*)    9 , (* 127*)   38
         , (* 128*)   85 , (* 129*)  172 , (* 130*)   64 , (* 131*)   62
         , (* 132*)    7 , (* 133*)   50 , (* 134*)  176 , (* 135*)   72
         , (* 136*)   73 , (* 137*)  192 , (* 138*)  193 , (* 139*)   78
         , (* 140*)   80 , (* 141*)   69 , (* 142*)  187 , (* 143*)  184
         , (* 144*)  166 , (* 145*)   29 , (* 146*)  188 , (* 147*)  168
         , (* 148*)   26 , (* 149*)  163 , (* 150*)  165 , (* 151*)  189
         , (* 152*)   25 , (* 153*)   22 , (* 154*)   24 , (* 155*)  164
         , (* 156*)   28 , (* 157*)  167 , (* 158*)   40 , (* 159*)   33
         , (* 160*)  164 , (* 161*)   45 , (* 162*)  169 , (* 163*)   40
         , (* 164*)   54 , (* 165*)   47 , (* 166*)  175 , (* 167*)  177
         , (* 168*)  174 , (* 169*)  190 , (* 170*)   37 , (* 171*)   59
         , (* 172*)   15 , (* 173*)  191 , (* 174*)  178 , (* 175*)   57
         , (* 176*)   15 , (* 177*)  164 , (* 178*)   61 , (* 179*)  181
         , (* 180*)   42 , (* 181*)  179 , (* 182*)  180 , (* 183*)   43
         , (* 184*)  173 , (* 185*)  171 , (* 186*)   55 , (* 187*)  182
         , (* 188*)   57 , (* 189*)  170 , (* 190*)  171 , (* 191*)   61
         , (* 192*)  164 , (* 193*)   68 , (* 194*)  183 , (* 195*)   71
         , (* 196*)  185 , (* 197*)  186 , (* 198*)   87 , (* 199*)   88
         , (* 200*)   96 , (* 201*)   97 , (* 202*)  105 , (* 203*)  104
         , (* 204*)  164 , (* 205*)  111 , (* 206*)  116 , (* 207*)  117
         , (* 208*)  122 , (* 209*)    0 , (* 210*)    0 , (* 211*)   72
         , (* 212*)    0 , (* 213*)   72 , (* 214*)    0 , (* 215*)    0
         , (* 216*)    0 , (* 217*)    0 , (* 218*)    0 , (* 219*)   72
         , (* 220*)    0 , (* 221*)    0 , (* 222*)    0 , (* 223*)    0
         , (* 224*)    0 , (* 225*)    0 , (* 226*)    0 , (* 227*)    0
         , (* 228*)    0 , (* 229*)    0 , (* 230*)    0 , (* 231*)    0
         , (* 232*)    0 , (* 233*)    0 , (* 234*)    0 , (* 235*)    0
         , (* 236*)    0 , (* 237*)    0 , (* 238*)    0 , (* 239*)    0
         , (* 240*)    0 , (* 241*)    0 , (* 242*)    0 , (* 243*)    0
         , (* 244*)   37 , (* 245*)    0 , (* 246*)    0 , (* 247*)    0
         , (* 248*)    0 , (* 249*)    0 , (* 250*)   15 , (* 251*)    0
         , (* 252*)   37 , (* 253*)    0 , (* 254*)    0 , (* 255*)    0
         , (* 256*)    0 , (* 257*)    0 , (* 258*)    0 , (* 259*)    0
         , (* 260*)    0 , (* 261*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 200(P   1)*)    2 , (*A 201(P   2)*)    1 , (*A 202(P   3)*)    1
         , (*A 203(P   4)*)    1 , (*A 204(P   5)*)    1 , (*A 205(P   6)*)    1
         , (*A 206(P   7)*)    1 , (*A 207(P   8)*)    0 , (*A 208(P   9)*)    0
         , (*A 209(P  10)*)    0 , (*A 210(P  11)*)    0 , (*A 211(P  12)*)    0
         , (*A 212(P  13)*)    0 , (*A 213(P  14)*)   10 , (*A 214(P  15)*)   10
         , (*A 215(P  16)*)   11 , (*A 216(P  17)*)   10 , (*A 217(P  18)*)   10
         , (*A 218(P  19)*)   11 , (*A 219(P  20)*)    1 , (*A 220(P  21)*)    0
         , (*A 221(P  22)*)    0 , (*A 222(P  23)*)    1 , (*A 223(P  24)*)    0
         , (*A 224(P  25)*)    1 , (*A 225(P  26)*)    3 , (*A 226(P  27)*)    1
         , (*A 227(P  28)*)    3 , (*A 228(P  29)*)    3 , (*A 229(P  30)*)    0
         , (*A 230(P  31)*)    3 , (*A 231(P  32)*)    0 , (*A 232(P  33)*)    1
         , (*A 233(P  34)*)    3 , (*A 234(P  35)*)    3 , (*A 235(P  36)*)    0
         , (*A 236(P  37)*)    0 , (*A 237(P  38)*)    2 , (*A 238(P  39)*)    0
         , (*A 239(P  40)*)    3 , (*A 240(P  41)*)    1 , (*A 241(P  42)*)    3
         , (*A 242(P  43)*)    2 , (*A 243(P  44)*)    4 , (*A 244(P  45)*)    3
         , (*A 245(P  46)*)    2 , (*A 246(P  47)*)    0 , (*A 247(P  48)*)    3
         , (*A 248(P  49)*)    3 , (*A 249(P  50)*)    2 , (*A 250(P  51)*)    1
         , (*A 251(P  52)*)    2 , (*A 252(P  53)*)    4 , (*A 253(P  54)*)    2
         , (*A 254(P  55)*)    1 , (*A 255(P  56)*)    2 , (*A 256(P  57)*)    5
         , (*A 257(P  58)*)    2 , (*A 258(P  59)*)    0 , (*A 259(P  60)*)    2
         , (*A 260(P  61)*)    1 , (*A 261(P  62)*)    2 , (*A 262(P  63)*)    4
         , (*A 263(P  64)*)    2 , (*A 264(P  65)*)    0 , (*A 265(P  66)*)    2
         , (*A 266(P  67)*)    0 , (*A 267(P  68)*)    1 , (*A 268(P  69)*)    1
         , (*A 269(P  70)*)    3 , (*A 270(P  71)*)    2 , (*A 271(P  72)*)    3
         , (*A 272(P  73)*)    2 , (*A 273(P  74)*)    4 , (*A 274(P  75)*)    1
         , (*A 275(P  76)*)    3 , (*A 276(P  77)*)    1 , (*A 277(P  78)*)    3
         , (*A 278(P  79)*)    2 , (*A 279(P  80)*)    1 , (*A 280(P  81)*)    1
         , (*A 281(P  82)*)    1 , (*A 282(P  83)*)    0 , (*A 283(P  84)*)    2
         , (*A 284(P  85)*)    0 , (*A 285(P  86)*)    2 , (*A 286(P  87)*)    0
         , (*A 287(P  88)*)    2 , (*A 288(P  89)*)    0 , (*A 289(P  90)*)    1
         , (*A 290(P  91)*)    4 , (*A 291(P  92)*)    0 , (*A 292(P  93)*)    4
         , (*A 293(P  94)*)    1 , (*A 294(P  95)*)    4 , (*A 295(P  96)*)    1
         , (*A 296(P  97)*)    1 , (*A 297(P  98)*)    5 , (*A 298(P  99)*)    0
         , (*A 299(P 100)*)    1 , (*A 300(P 101)*)    2 , (*A 301(P 102)*)    0
         , (*A 302(P 103)*)    1 , (*A 303(P 104)*)    1 , (*A 304(P 105)*)    1
         , (*A 305(P 106)*)    1 , (*A 306(P 107)*)    2 , (*A 307(P 108)*)    1
         , (*A 308(P 109)*)    3 , (*A 309(P 110)*)    0 , (*A 310(P 111)*)    1
         , (*A 311(P 112)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 200(P   1)*)  177 , (*A 201(P   2)*)  109 , (*A 202(P   3)*)  109
         , (*A 203(P   4)*)  109 , (*A 204(P   5)*)  109 , (*A 205(P   6)*)  109
         , (*A 206(P   7)*)  109 , (*A 207(P   8)*)  115 , (*A 208(P   9)*)  116
         , (*A 209(P  10)*)  117 , (*A 210(P  11)*)  118 , (*A 211(P  12)*)  119
         , (*A 212(P  13)*)  120 , (*A 213(P  14)*)  108 , (*A 214(P  15)*)  110
         , (*A 215(P  16)*)  111 , (*A 216(P  17)*)  112 , (*A 217(P  18)*)  113
         , (*A 218(P  19)*)  114 , (*A 219(P  20)*)  121 , (*A 220(P  21)*)  121
         , (*A 221(P  22)*)  128 , (*A 222(P  23)*)  129 , (*A 223(P  24)*)  129
         , (*A 224(P  25)*)  130 , (*A 225(P  26)*)  130 , (*A 226(P  27)*)  131
         , (*A 227(P  28)*)  131 , (*A 228(P  29)*)  132 , (*A 229(P  30)*)  132
         , (*A 230(P  31)*)  133 , (*A 231(P  32)*)  133 , (*A 232(P  33)*)  134
         , (*A 233(P  34)*)  134 , (*A 234(P  35)*)  122 , (*A 235(P  36)*)  135
         , (*A 236(P  37)*)  137 , (*A 237(P  38)*)  136 , (*A 238(P  39)*)  136
         , (*A 239(P  40)*)  138 , (*A 240(P  41)*)  139 , (*A 241(P  42)*)  139
         , (*A 242(P  43)*)  138 , (*A 243(P  44)*)  140 , (*A 244(P  45)*)  140
         , (*A 245(P  46)*)  124 , (*A 246(P  47)*)  124 , (*A 247(P  48)*)  126
         , (*A 248(P  49)*)  127 , (*A 249(P  50)*)  142 , (*A 250(P  51)*)  141
         , (*A 251(P  52)*)  141 , (*A 252(P  53)*)  143 , (*A 253(P  54)*)  146
         , (*A 254(P  55)*)  145 , (*A 255(P  56)*)  145 , (*A 256(P  57)*)  147
         , (*A 257(P  58)*)  148 , (*A 258(P  59)*)  148 , (*A 259(P  60)*)  151
         , (*A 260(P  61)*)  150 , (*A 261(P  62)*)  150 , (*A 262(P  63)*)  152
         , (*A 263(P  64)*)  153 , (*A 264(P  65)*)  153 , (*A 265(P  66)*)  154
         , (*A 266(P  67)*)  154 , (*A 267(P  68)*)  144 , (*A 268(P  69)*)  144
         , (*A 269(P  70)*)  155 , (*A 270(P  71)*)  157 , (*A 271(P  72)*)  156
         , (*A 272(P  73)*)  158 , (*A 273(P  74)*)  158 , (*A 274(P  75)*)  161
         , (*A 275(P  76)*)  162 , (*A 276(P  77)*)  162 , (*A 277(P  78)*)  163
         , (*A 278(P  79)*)  164 , (*A 279(P  80)*)  167 , (*A 280(P  81)*)  167
         , (*A 281(P  82)*)  167 , (*A 282(P  83)*)  167 , (*A 283(P  84)*)  165
         , (*A 284(P  85)*)  165 , (*A 285(P  86)*)  166 , (*A 286(P  87)*)  166
         , (*A 287(P  88)*)  159 , (*A 288(P  89)*)  159 , (*A 289(P  90)*)  160
         , (*A 290(P  91)*)  160 , (*A 291(P  92)*)  160 , (*A 292(P  93)*)  169
         , (*A 293(P  94)*)  168 , (*A 294(P  95)*)  168 , (*A 295(P  96)*)  149
         , (*A 296(P  97)*)  149 , (*A 297(P  98)*)  125 , (*A 298(P  99)*)  170
         , (*A 299(P 100)*)  123 , (*A 300(P 101)*)  172 , (*A 301(P 102)*)  172
         , (*A 302(P 103)*)  173 , (*A 303(P 104)*)  173 , (*A 304(P 105)*)  173
         , (*A 305(P 106)*)  173 , (*A 306(P 107)*)  171 , (*A 307(P 108)*)  174
         , (*A 308(P 109)*)  174 , (*A 309(P 110)*)  171 , (*A 310(P 111)*)  175
         , (*A 311(P 112)*)  176
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   69 , (*:   5*)   69
         , (*:   6*)   70 , (*:   7*)   70 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   19 , (*:  13*)   95 , (*:  14*)   67
         , (*:  15*)    9 , (*:  16*)   95 , (*:  17*)   68
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   66 , (*:  25*)   19 , (*:  26*)   68
         , (*:  27*)   95 , (*:  28*)   66 , (*:  29*)    9
         , (*:  30*)   95 , (*:  31*)   69 , (*:  32*)   70
         , (*:  33*)   66 , (*:  34*)    9 , (*:  35*)   95
         , (*:  36*)   66 , (*:  37*)    9 , (*:  38*)    9
         , (*:  39*)   19 , (*:  40*)   74 , (*:  41*)   95
         , (*:  42*)   19 , (*:  43*)   19 , (*:  44*)   19
         , (*:  45*)    6 , (*:  46*)   95 , (*:  47*)   66
         , (*:  48*)   75 , (*:  49*)   71 , (*:  50*)   76
         , (*:  51*)   95 , (*:  52*)   71 , (*:  53*)   95
         , (*:  54*)   95 , (*:  55*)   70 , (*:  56*)   70
         , (*:  57*)   66 , (*:  58*)   95 , (*:  59*)   66
         , (*:  60*)   95 , (*:  61*)   95 , (*:  62*)   66
         , (*:  63*)   95 , (*:  64*)   70 , (*:  65*)   95
         , (*:  66*)   68 , (*:  67*)   95 , (*:  68*)   66
         , (*:  69*)    9 , (*:  70*)   95 , (*:  71*)    9
         , (*:  72*)    9 , (*:  73*)    9 , (*:  74*)   95
         , (*:  75*)   30 , (*:  76*)   95 , (*:  77*)   95
         , (*:  78*)   66 , (*:  79*)   95 , (*:  80*)   66
         , (*:  81*)   95 , (*:  82*)   95 , (*:  83*)   69
         , (*:  84*)   69 , (*:  85*)   66 , (*:  86*)    9
         , (*:  87*)    9 , (*:  88*)   95 , (*:  89*)   67
         , (*:  90*)    0 , (*:  91*)   32 , (*:  92*)   95
         , (*:  93*)   66 , (*:  94*)   66 , (*:  95*)   14
         , (*:  96*)   14 , (*:  97*)   19 , (*:  98*)   95
         , (*:  99*)   67 , (*: 100*)   68 , (*: 101*)   95
         , (*: 102*)   69 , (*: 103*)   70 , (*: 104*)   70
         , (*: 105*)   19 , (*: 106*)   95 , (*: 107*)   67
         , (*: 108*)   95 , (*: 109*)   66 , (*: 110*)   95
         , (*: 111*)   66 , (*: 112*)   95 , (*: 113*)   66
         , (*: 114*)   66 , (*: 115*)    9 , (*: 116*)    9
         , (*: 117*)   95 , (*: 118*)   67 , (*: 119*)   68
         , (*: 120*)   95 , (*: 121*)   69 , (*: 122*)   19
         , (*: 123*)   95 , (*: 124*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 125)*)  247 (*P47*) , (*RR: 126)*)  228 (*P28*)
         , (*RR: 127)*)  215 (*P15*) , (*RR: 128)*)  267 (*P67*)
         , (*RR: 129)*)  295 (*P95*) , (*RR: 130)*)  296 (*P96*)
         , (*RR: 131)*)  262 (*P62*) , (*RR: 132)*)  269 (*P69*)
         , (*RR: 133)*)  256 (*P56*) , (*RR: 134)*)  272 (*P72*)
         , (*RR: 135)*)  293 (*P93*) , (*RR: 136)*)  294 (*P94*)
         , (*RR: 137)*)  297 (*P97*) , (*RR: 138)*)  289 (*P89*)
         , (*RR: 139)*)  233 (*P33*) , (*RR: 140)*)  290 (*P90*)
         , (*RR: 141)*)  281 (*P81*) , (*RR: 142)*)  279 (*P79*)
         , (*RR: 143)*)  280 (*P80*) , (*RR: 144)*)  226 (*P26*)
         , (*RR: 145)*)  227 (*P27*) , (*RR: 146)*)  273 (*P73*)
         , (*RR: 147)*)  252 (*P52*) , (*RR: 148)*)  243 (*P43*)
         , (*RR: 149)*)  240 (*P40*) , (*RR: 150)*)  239 (*P39*)
         , (*RR: 151)*)  241 (*P41*) , (*RR: 152)*)  242 (*P42*)
         , (*RR: 153)*)  244 (*P44*) , (*RR: 154)*)  216 (*P16*)
         , (*RR: 155)*)  219 (*P19*) , (*RR: 156)*)  213 (*P13*)
         , (*RR: 157)*)  248 (*P48*) , (*RR: 158)*)  217 (*P17*)
         , (*RR: 159)*)  224 (*P24*) , (*RR: 160)*)  225 (*P25*)
         , (*RR: 161)*)  214 (*P14*) , (*RR: 162)*)  218 (*P18*)
         , (*RR: 163)*)  263 (*P63*) , (*RR: 164)*)  268 (*P68*)
         , (*RR: 165)*)  265 (*P65*) , (*RR: 166)*)  257 (*P57*)
         , (*RR: 167)*)  255 (*P55*) , (*RR: 168)*)  254 (*P54*)
         , (*RR: 169)*)  311 (*P111*) , (*RR: 170)*)  308 (*P108*)
         , (*RR: 171)*)  310 (*P110*) , (*RR: 172)*)  306 (*P106*)
         , (*RR: 173)*)  307 (*P107*) , (*RR: 174)*)  292 (*P92*)
         , (*RR: 175)*)  287 (*P87*) , (*RR: 176)*)  230 (*P30*)
         , (*RR: 177)*)  271 (*P71*) , (*RR: 178)*)  275 (*P75*)
         , (*RR: 179)*)  283 (*P83*) , (*RR: 180)*)  285 (*P85*)
         , (*RR: 181)*)  277 (*P77*) , (*RR: 182)*)  276 (*P76*)
         , (*RR: 183)*)  251 (*P51*) , (*RR: 184)*)  250 (*P50*)
         , (*RR: 185)*)  261 (*P61*) , (*RR: 186)*)  260 (*P60*)
         , (*RR: 187)*)  304 (*P104*) , (*RR: 188)*)  302 (*P102*)
         , (*RR: 189)*)  303 (*P103*) , (*RR: 190)*)  305 (*P105*)
         , (*RR: 191)*)  300 (*P100*) , (*RR: 192)*)  234 (*P34*)
         , (*RR: 193)*)  237 (*P37*) , (*RR: 194)*)  201 (*P1*)
         , (*RR: 195)*)  202 (*P2*) , (*RR: 196)*)  203 (*P3*)
         , (*RR: 197)*)  204 (*P4*) , (*RR: 198)*)  205 (*P5*)
         , (*RR: 199)*)  206 (*P6*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkReBegin.  Use it messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer.  If the
   reduce is nonempty, this is a copy from the leftmost RHS's attribute.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

   (* Declarations from the LOCAL section of the .lalr file: *) 
(* line 51 "FM3Parser.lalr" *)
 TYPE Sk = FM3Scopes . ScopeKindTyp ;
    TYPE Dk = FM3Decls . DeclKindTyp ; 
    TYPE Uk = FM3Units . UnitKindTyp ; 
  
   (* End of declarations from the LOCAL section of the .lalr file: *)
   
   VAR
      yyOldUnnestCoord  : LONGINT; 
      yyState           : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               they are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;        (* left-hand side symbol *)
      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
                       PushUnnestStk (WParsAttr);
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
                PushUnnestStk (WParsAttr);
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repair's been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull; 

             (* Inserted semantic action code from the .lalr file: **)
              CASE yyState OF
              | 200 => (* P1 _0000_ (177): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 201,194 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 202,195 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 203,196 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 204,197 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 205,198 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 206,199 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 207 => (* P8 InterfaceKind (115): .*)
                yyNonterminal := 115;
                (* line 220 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInterface ; 
              | 208 => (* P9 ModuleKind (116): .*)
                yyNonterminal := 116;
                (* line 223 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkModule ; 
              | 209 => (* P10 GenInterfaceKind (117): .*)
                yyNonterminal := 117;
                (* line 226 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenInterface ; 
              | 210 => (* P11 GenModuleKind (118): .*)
                yyNonterminal := 118;
                (* line 229 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkGenModule ; 
              | 211 => (* P12 InstInterfaceKind (119): .*)
                yyNonterminal := 119;
                (* line 232 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstInterface ; 
              | 212 => (* P13 InstModuleKind (120): .*)
                yyNonterminal := 120;
                (* line 235 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Uk . UkInstModule ; 
              | 213,156 => (* P14 Interface (108): OptUnsafe StkRwINTERFACE StkIdent InterfaceKind StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 108;

              | 214,161 => (* P15 Module (110): OptUnsafe StkRwMODULE StkIdent Exports ModuleKind StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 110;

              | 215,127 => (* P16 GenInterface (111): StkRwGENERIC StkRwINTERFACE StkIdent GenInterfaceKind GenFormalList StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 111;

              | 216,154 => (* P17 GenModule (112): StkRwGENERIC StkRwMODULE StkIdent GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;

              | 217,158 => (* P18 InstInterface (113): OptUnsafe StkRwINTERFACE StkIdent InstInterfaceKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 113;

              | 218,162 => (* P19 InstModule (114): OptUnsafe StkRwMODULE StkIdent Exports InstModuleKind StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 11); yyNonterminal := 114;

              | 219,155 => (* P20 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 261 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 220 => (* P21 OptUnsafe (121): .*)
                yyNonterminal := 121;
                (* line 262 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 221 => (* P22 CaptureCoord (128): .*)
                yyNonterminal := 128;
                (* line 265 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 222 => (* P23 OptSemicolon (129): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 129;

              | 223 => (* P24 OptSemicolon (129): .*)
                yyNonterminal := 129;

              | 224,159 => (* P25 IdPlusList (130): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 275 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 225,160 => (* P26 IdPlusList (130): IdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 130;
                (* line 279 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 226,144 => (* P27 DeclIdPlusList (131): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 131;
                (* line 287 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord is copied from yyAttributeStack^[yyStackPtr+1] to yySynAttribute by parser. *) 
                       yySynAttribute . PaInt (* Non-duplicate Id count. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R ( VAL ( yyAttributeStack^[yyStackPtr] . PaByte , Dk ) ) ) ; 
                     
              | 227,145 => (* P28 DeclIdPlusList (131): DeclIdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 292 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord is copied from yyAttributeStack^[yyStackPtr+1] to yySynAttribute by parser . *)
                       yySynAttribute . PaInt (* Non-duplicate Id count. *)
                         := yyAttributeStack^[yyStackPtr+1] . PaInt
                            + ORD ( FM3ParsePass . DeclIdL2R ( VAL ( yyAttributeStack^[yyStackPtr] . PaByte , Dk ) ) ) ; 
                     
              | 228,126 => (* P29 IdStarList (132): IdStarList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 300 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 229 => (* P30 IdStarList (132): .*)
                yyNonterminal := 132;
                (* line 302 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 230,176 => (* P31 QualIdStarList (133): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 306 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 231 => (* P32 QualIdStarList (133): .*)
                yyNonterminal := 133;
                (* line 308 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 232 => (* P33 QualId (134): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 134;

              | 233,139 => (* P34 QualId (134): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 313 of "FM3Parser.lalr" *)
                 Push_LCeCr
                         ( Itk . ItkQualIdLt ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord );
                     
              | 234,192 => (* P35 Imports (122): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 320 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 235 => (* P36 ImportsLt (135): .*)
                yyNonterminal := 135;
                (* line 323 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 236 => (* P37 ImportsRt (137): .*)
                yyNonterminal := 137;
                (* line 324 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 237,193 => (* P38 ImportsRecurse (136): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 136;
                (* line 326 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 238 => (* P39 ImportsRecurse (136): .*)
                yyNonterminal := 136;
                (* line 330 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 239,150 => (* P40 ImportItem (138): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 336 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 240,149 => (* P41 ImportIntfPlusList (139): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;
                (* line 340 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 241,151 => (* P42 ImportIntfPlusList (139): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;
                (* line 352 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 242,152 => (* P43 ImportItem (138): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 138;
                (* line 366 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 243,148 => (* P44 FromImportPlusList (140): StkRwFROM StkIdent StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 140;
                (* line 370 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 244,153 => (* P45 FromImportPlusList (140): FromImportPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 393 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 245 => (* P46 Exports (124): StkRwEXPORTS IdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;
                (* line 432 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk . ItkExportIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 246 => (* P47 Exports (124): .*)
                yyNonterminal := 124;
                (* line 436 of "FM3Parser.lalr" *)
                 FM3ParsePass . PushEXPORTSMain ( yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
              | 247,125 => (* P48 GenFormalList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 441 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 248,157 => (* P49 GenActualList (127): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 447 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 249 => (* P50 TypeDeclGroup (142): StkRwTYPE TypeDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 142;

              | 250,184 => (* P51 TypeDecls (141): TypeDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;

              | 251,183 => (* P52 TypeDecls (141): TypeDecls TypeDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 141;

              | 252,147 => (* P53 TypeDecl (143): StkIdent StkEqual Type StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 143;
                (* line 457 of "FM3Parser.lalr" *)
                 Push_LCPeCrP
                         ( Itk . ItkTypeDeclLt
                         , yyAttributeStack^[yyStackPtr] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                         ) ; 
                     
              | 253 => (* P54 ConstDeclGroup (146): StkRwCONST ConstDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 146;

              | 254,168 => (* P55 ConstDecls (145): ConstDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;

              | 255,167 => (* P56 ConstDecls (145): ConstDecls ConstDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 145;

              | 256,133 => (* P57 ConstDecl (147): StkIdent OptConstType StkEqual Expr StkSemicolon .*)
                DEC (yyStackPtr, 5); yyNonterminal := 147;

              | 257,166 => (* P58 OptConstType (148): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;
                (* line 473 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 258 => (* P59 OptConstType (148): .*)
                yyNonterminal := 148;
                (* line 476 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 259 => (* P60 VarDeclGroup (151): StkRwVAR VarDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;

              | 260,186 => (* P61 VarDecls (150): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;

              | 261,185 => (* P62 VarDecls (150): VarDecls VarDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 150;

              | 262,131 => (* P63 VarDecl (152): StkIdent OptVarType OptVarValue StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 152;
                (* line 486 of "FM3Parser.lalr" *)
                 IF NOT yyAttributeStack^[yyStackPtr+2] . PaBool AND NOT yyAttributeStack^[yyStackPtr+3] . PaBool
                       THEN
                         FM3Messages . ErrorArr
                           ( ARRAY OF REFANY 
                               { " VAR decl must have a type and/or an initial value. (2.4.3)." } 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           );
                       END (*IF*) 
                     
              | 263,163 => (* P64 OptVarType (153): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 496 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 264 => (* P65 OptVarType (153): .*)
                yyNonterminal := 153;
                (* line 499 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 265,165 => (* P66 OptVarValue (154): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 503 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 266 => (* P67 OptVarValue (154): .*)
                yyNonterminal := 154;
                (* line 506 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 267,128 => (* P68 Type (144): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;

              | 268,164 => (* P69 Type (144): RecordType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;

              | 269,132 => (* P70 RecordType (155): StkRwRECORD VarDecl StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 155;

              | 270 => (* P71 ProcedureType (157): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 518 of "FM3Parser.lalr" *)
                 Push_LCPrp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 271,177 => (* P72 Signature (156): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 526 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         Push_LCPrp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 272,134 => (* P73 Formals (158): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 538 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3ParsePass . ScopeEmpty ( Sk . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 273,146 => (* P74 Formals (158): FormalsLt FormalsPlusList OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 4); yyNonterminal := 158;
                (* line 543 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3ParsePass . ScopeRtL2R ( ) ;
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 274 => (* P75 FormalsLt (161): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 549 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt (* ScopeNo. *) 
                         := FM3ParsePass . ScopeLtL2R
                              ( Sk . SkFormals , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 275,178 => (* P76 FormalsPlusList (162): FormalsPlusList StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 162;
                (* line 555 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Formal count. *); 
              | 276,182 => (* P77 FormalsPlusList (162): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 557 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* Formal count. *) ; 
              | 277,181 => (* P78 Formal (163): FormalModeAndIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 163;
                (* line 561 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaInt (* Id count. *) = 0
                       THEN
                (* TODO: Skip entire rest of formal. *)
                       END ;
                       IF yyAttributeStack^[yyStackPtr+1] . PaByte = ORD ( Dk . DkVarFormal )  
                       THEN
                         IF NOT yyAttributeStack^[yyStackPtr+2] . PaBool (* Formal type is present (absent). *)
                         THEN
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { " VAR formal must have a type (2.2.8)." } 
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             );
                         END (*IF*) ; 
                         IF yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal expression is present. *) 
                         THEN
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                                 { " VAR formal cannot have a default expression  (2.2.8)." }
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             );
                         END (*IF*) ; 
                       ELSIF NOT ( yyAttributeStack^[yyStackPtr+2] . PaBool (* Type is present (absent). *) )
                             AND NOT ( yyAttributeStack^[yyStackPtr+3] . PaBool
                                       (* Default expression is present (absent). *) ) 
                       THEN 
                         FM3Messages . ErrorArr
                           ( ARRAY OF REFANY
                               { " Formal must have a type and/or default expression (2.2.8)." }
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ); 
                       END (*IF*);
                     
              | 278 => (* P79 FormalModeAndIds (164): FormalMode DeclIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 164;
                (* line 596 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := yyAttributeStack^[yyStackPtr+1] . PaByte (* DeclKind, implies Transmission mode. *) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Id count. *) ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;   
                       MakeListPos
                         ( yySynAttribute , yyAttributeStack^[yyStackPtr+1] . PaInt (* List Itk *) , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ); 
                     
              | 279,142 => (* P80 FormalMode (167): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 605 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Dk . DkValueFormal ) (* Conveys mode. *) ;
                       yySynAttribute . PaInt := Itk . ItkFormalVALUEIdListLt (* Token for list. *) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                     
              | 280,143 => (* P81 FormalMode (167): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 610 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Dk . DkVarFormal );
                       yySynAttribute . PaInt := Itk . ItkFormalVARIdListLt; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                     
              | 281,141 => (* P82 FormalMode (167): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 615 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Dk . DkROFormal );
                       yySynAttribute . PaInt := Itk . ItkFormalREADONLYIdListLt; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                     
              | 282 => (* P83 FormalMode (167): .*)
                yyNonterminal := 167;
                (* line 620 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( Dk . DkValueFormal );
                       yySynAttribute . PaInt := Itk . ItkFormalVALUEIdListLt; 
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                     
              | 283,179 => (* P84 FormalType (165): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 627 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCPrp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 284 => (* P85 FormalType (165): .*)
                yyNonterminal := 165;
                (* line 633 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 285,180 => (* P86 FormalExpr (166): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 641 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCPrp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 286 => (* P87 FormalExpr (166): .*)
                yyNonterminal := 166;
                (* line 647 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 287,175 => (* P88 ResultType (159): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 655 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCPrp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 288 => (* P89 ResultType (159): .*)
                yyNonterminal := 159;
                (* line 661 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 289,138 => (* P90 Raises (160): StkRwANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 669 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCPrp
                         ( Itk . ItkRaisesANY ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 290,140 => (* P91 Raises (160): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 676 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position, yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 291 => (* P92 Raises (160): .*)
                yyNonterminal := 160;
                (* line 681 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *);
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       Push_LP
                         ( Itk . ItkRaisesSetAbsent , FM3Scanner . Attribute . Position ); 
                     
              | 292,174 => (* P93 ProcDecl (169): StkRwPROCEDURE StkIdent Signature OptBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 169;
                (* line 690 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Units . UnitStackTopRef ^ . UntKind OF 
                         | Uk . UkInterface 
                         , Uk . UkGenInterface  
                         , Uk . UkInstInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY 
                                  { " A procedure in an interface must not have a body (2.5.2)." }
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                );  
                
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | Uk . UkModule  
                         , Uk . UkGenModule  
                         , Uk . UkInstModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY
                                    { " A procedure in a module must have a body (2.5)." } 
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         END (*CASE*);
                         Push_LCIri
                           ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord, yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ); 
                       END (*Block*) 
                     
              | 293,135 => (* P94 OptBody (168): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 730 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LP ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 294,136 => (* P95 OptBody (168): StkEqual Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 168;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                       yySynAttribute . PaConstructNo := yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       Push_LCPrp
                         ( Itk . ItkProcBodyLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                     
              | 295,129 => (* P96 Expr (149): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;

              | 296,130 => (* P97 Expr (149): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;

              | 297,137 => (* P98 Block (125): BlockLt DeclList StkRwBEGIN Stmts StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 125;
                (* line 753 of "FM3Parser.lalr" *)
                 Push_ECPrP
                         ( Itk . ItkBlockLt , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+5] . Scan . Position
                         ) ;
                     
              | 298 => (* P99 BlockLt (170): .*)
                yyNonterminal := 170;
                (* line 760 of "FM3Parser.lalr" *)
                 FM3ParsePass . BeginBlock ( ) ;
                       Push_LP ( Itk . ItkBlockLt , FM3Scanner . Attribute . Position ); 
                     
              | 299 => (* P100 DeclList (123): DeclListRecurse .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 767 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk . ItkDeclListLt , yyAttributeStack^[yyStackPtr+1] ) ; 
              | 300,191 => (* P101 DeclListRecurse (172): DeclListRecurse Decl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 769 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 301 => (* P102 DeclListRecurse (172): .*)
                yyNonterminal := 172;
                (* line 771 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 302,188 => (* P103 Decl (173): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;

              | 303,189 => (* P104 Decl (173): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;

              | 304,187 => (* P105 Decl (173): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;

              | 305,190 => (* P106 Decl (173): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;

              | 306,172 => (* P107 Stmts (171): StmtPlusList OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;

              | 307,173 => (* P108 StmtPlusList (174): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;

              | 308,170 => (* P109 StmtPlusList (174): StmtPlusList StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 174;

              | 309 => (* P110 Stmts (171): .*)
                yyNonterminal := 171;
                (* line 784 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 310,171 => (* P111 Stmt (175): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;

              | 311,169 => (* P112 AssignStmt (176): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;

              END (*CASE*);
             (* End of inserted emantic action code from the .lalr file: **)

               (* Here, a reduction has been partially done.  yyStackPtr has been
                  decremented by the RHS length, yyNonterminal has been set to
                  the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which will have set yySynAttribute.  Now do a nonterminal
                  read transition on yyStateStack^ [yyStackPtr] (* A state*)
                  and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
               DO
                 yyOldUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := UnnestCoord ( );
                   ELSE WParsAttr . PaUnnestCoord := yyOldUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
              PushUnnestStk (WParsAttr);
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 58 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 61 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

