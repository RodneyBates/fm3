
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 38 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3Extern; 
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 261;
   yyTableMax               = 882;
   yyNTableMax              = 1028;
   yyFirstReadState         = 1;
   yyLastReadState          = 190;
   yyFirstReadTermState             = 191;
   yyLastReadTermState              = 287;
   yyLastReadNontermState           = 383;
   yyFirstReduceState               = 384;
   yyLastReduceState                = 651;
   yyStartState             = 1;
   yyStopState              = 384;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   1])
         , (*   8*) ADR (yyTComb [   2]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [  22]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   5]) , (*  15*) ADR (yyTComb [   3])
         , (*  16*) ADR (yyTComb [   4]) , (*  17*) ADR (yyTComb [   1])
         , (*  18*) ADR (yyTComb [   5]) , (*  19*) ADR (yyTComb [   3])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   6])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   7])
         , (*  26*) ADR (yyTComb [   1]) , (*  27*) ADR (yyTComb [   8])
         , (*  28*) ADR (yyTComb [   4]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   9]) , (*  31*) ADR (yyTComb [   2])
         , (*  32*) ADR (yyTComb [  10]) , (*  33*) ADR (yyTComb [   8])
         , (*  34*) ADR (yyTComb [  67]) , (*  35*) ADR (yyTComb [  68])
         , (*  36*) ADR (yyTComb [  12]) , (*  37*) ADR (yyTComb [  12])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [   0])
         , (*  40*) ADR (yyTComb [   1]) , (*  41*) ADR (yyTComb [  98])
         , (*  42*) ADR (yyTComb [  11]) , (*  43*) ADR (yyTComb [ 109])
         , (*  44*) ADR (yyTComb [   7]) , (*  45*) ADR (yyTComb [  12])
         , (*  46*) ADR (yyTComb [  18]) , (*  47*) ADR (yyTComb [  12])
         , (*  48*) ADR (yyTComb [   3]) , (*  49*) ADR (yyTComb [ 110])
         , (*  50*) ADR (yyTComb [  13]) , (*  51*) ADR (yyTComb [ 120])
         , (*  52*) ADR (yyTComb [ 138]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [   0]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [ 166]) , (*  57*) ADR (yyTComb [  17])
         , (*  58*) ADR (yyTComb [ 183]) , (*  59*) ADR (yyTComb [  20])
         , (*  60*) ADR (yyTComb [ 245]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [ 282]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 303]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 341]) , (*  67*) ADR (yyTComb [   0])
         , (*  68*) ADR (yyTComb [ 359]) , (*  69*) ADR (yyTComb [   0])
         , (*  70*) ADR (yyTComb [ 397]) , (*  71*) ADR (yyTComb [   5])
         , (*  72*) ADR (yyTComb [ 192]) , (*  73*) ADR (yyTComb [ 457])
         , (*  74*) ADR (yyTComb [  18]) , (*  75*) ADR (yyTComb [   0])
         , (*  76*) ADR (yyTComb [ 495]) , (*  77*) ADR (yyTComb [ 544])
         , (*  78*) ADR (yyTComb [ 604]) , (*  79*) ADR (yyTComb [  45])
         , (*  80*) ADR (yyTComb [   0]) , (*  81*) ADR (yyTComb [  44])
         , (*  82*) ADR (yyTComb [  26]) , (*  83*) ADR (yyTComb [  86])
         , (*  84*) ADR (yyTComb [ 642]) , (*  85*) ADR (yyTComb [   4])
         , (*  86*) ADR (yyTComb [  87]) , (*  87*) ADR (yyTComb [   5])
         , (*  88*) ADR (yyTComb [   5]) , (*  89*) ADR (yyTComb [   3])
         , (*  90*) ADR (yyTComb [   6]) , (*  91*) ADR (yyTComb [ 695])
         , (*  92*) ADR (yyTComb [  13]) , (*  93*) ADR (yyTComb [ 168])
         , (*  94*) ADR (yyTComb [ 104]) , (*  95*) ADR (yyTComb [  92])
         , (*  96*) ADR (yyTComb [  94]) , (*  97*) ADR (yyTComb [   0])
         , (*  98*) ADR (yyTComb [  62]) , (*  99*) ADR (yyTComb [  65])
         , (* 100*) ADR (yyTComb [  72]) , (* 101*) ADR (yyTComb [ 153])
         , (* 102*) ADR (yyTComb [  46]) , (* 103*) ADR (yyTComb [ 163])
         , (* 104*) ADR (yyTComb [ 172]) , (* 105*) ADR (yyTComb [   0])
         , (* 106*) ADR (yyTComb [   0]) , (* 107*) ADR (yyTComb [ 484])
         , (* 108*) ADR (yyTComb [   0]) , (* 109*) ADR (yyTComb [ 532])
         , (* 110*) ADR (yyTComb [ 153]) , (* 111*) ADR (yyTComb [  71])
         , (* 112*) ADR (yyTComb [  73]) , (* 113*) ADR (yyTComb [ 119])
         , (* 114*) ADR (yyTComb [  55]) , (* 115*) ADR (yyTComb [ 143])
         , (* 116*) ADR (yyTComb [   0]) , (* 117*) ADR (yyTComb [ 151])
         , (* 118*) ADR (yyTComb [ 141]) , (* 119*) ADR (yyTComb [  95])
         , (* 120*) ADR (yyTComb [   5]) , (* 121*) ADR (yyTComb [  99])
         , (* 122*) ADR (yyTComb [   0]) , (* 123*) ADR (yyTComb [   6])
         , (* 124*) ADR (yyTComb [ 110]) , (* 125*) ADR (yyTComb [   0])
         , (* 126*) ADR (yyTComb [ 125]) , (* 127*) ADR (yyTComb [ 688])
         , (* 128*) ADR (yyTComb [ 690]) , (* 129*) ADR (yyTComb [ 130])
         , (* 130*) ADR (yyTComb [ 138]) , (* 131*) ADR (yyTComb [   0])
         , (* 132*) ADR (yyTComb [ 131]) , (* 133*) ADR (yyTComb [ 729])
         , (* 134*) ADR (yyTComb [ 153]) , (* 135*) ADR (yyTComb [ 356])
         , (* 136*) ADR (yyTComb [ 745]) , (* 137*) ADR (yyTComb [ 134])
         , (* 138*) ADR (yyTComb [ 141]) , (* 139*) ADR (yyTComb [ 748])
         , (* 140*) ADR (yyTComb [ 764]) , (* 141*) ADR (yyTComb [ 154])
         , (* 142*) ADR (yyTComb [ 161]) , (* 143*) ADR (yyTComb [ 161])
         , (* 144*) ADR (yyTComb [ 173]) , (* 145*) ADR (yyTComb [   0])
         , (* 146*) ADR (yyTComb [ 136]) , (* 147*) ADR (yyTComb [ 177])
         , (* 148*) ADR (yyTComb [   0]) , (* 149*) ADR (yyTComb [   1])
         , (* 150*) ADR (yyTComb [   0]) , (* 151*) ADR (yyTComb [   7])
         , (* 152*) ADR (yyTComb [ 171]) , (* 153*) ADR (yyTComb [   8])
         , (* 154*) ADR (yyTComb [ 236]) , (* 155*) ADR (yyTComb [  10])
         , (* 156*) ADR (yyTComb [  41]) , (* 157*) ADR (yyTComb [ 238])
         , (* 158*) ADR (yyTComb [ 161]) , (* 159*) ADR (yyTComb [ 211])
         , (* 160*) ADR (yyTComb [ 163]) , (* 161*) ADR (yyTComb [ 164])
         , (* 162*) ADR (yyTComb [ 209]) , (* 163*) ADR (yyTComb [  35])
         , (* 164*) ADR (yyTComb [ 184]) , (* 165*) ADR (yyTComb [ 213])
         , (* 166*) ADR (yyTComb [ 217]) , (* 167*) ADR (yyTComb [   0])
         , (* 168*) ADR (yyTComb [ 444]) , (* 169*) ADR (yyTComb [   2])
         , (* 170*) ADR (yyTComb [  37]) , (* 171*) ADR (yyTComb [  39])
         , (* 172*) ADR (yyTComb [ 189]) , (* 173*) ADR (yyTComb [ 218])
         , (* 174*) ADR (yyTComb [ 230]) , (* 175*) ADR (yyTComb [   0])
         , (* 176*) ADR (yyTComb [ 237]) , (* 177*) ADR (yyTComb [ 239])
         , (* 178*) ADR (yyTComb [ 234]) , (* 179*) ADR (yyTComb [ 554])
         , (* 180*) ADR (yyTComb [ 775]) , (* 181*) ADR (yyTComb [  42])
         , (* 182*) ADR (yyTComb [ 208]) , (* 183*) ADR (yyTComb [ 238])
         , (* 184*) ADR (yyTComb [ 242]) , (* 185*) ADR (yyTComb [ 249])
         , (* 186*) ADR (yyTComb [ 254]) , (* 187*) ADR (yyTComb [ 773])
         , (* 188*) ADR (yyTComb [ 550]) , (* 189*) ADR (yyTComb [ 228])
         , (* 190*) ADR (yyTComb [ 259])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 108]) , (*  19*) ADR (yyNComb [ 108])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 110])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 110])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 110])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 185])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 108])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 109])
         , (*  48*) ADR (yyNComb [ 138]) , (*  49*) ADR (yyNComb [ 108])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 112])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 113])
         , (*  54*) ADR (yyNComb [ 149]) , (*  55*) ADR (yyNComb [ 175])
         , (*  56*) ADR (yyNComb [ 108]) , (*  57*) ADR (yyNComb [ 108])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 193])
         , (*  60*) ADR (yyNComb [ 108]) , (*  61*) ADR (yyNComb [ 227])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 209])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 247])
         , (*  66*) ADR (yyNComb [ 113]) , (*  67*) ADR (yyNComb [ 259])
         , (*  68*) ADR (yyNComb [ 122]) , (*  69*) ADR (yyNComb [ 268])
         , (*  70*) ADR (yyNComb [ 122]) , (*  71*) ADR (yyNComb [ 277])
         , (*  72*) ADR (yyNComb [ 178]) , (*  73*) ADR (yyNComb [ 119])
         , (*  74*) ADR (yyNComb [ 108]) , (*  75*) ADR (yyNComb [ 295])
         , (*  76*) ADR (yyNComb [ 108]) , (*  77*) ADR (yyNComb [ 122])
         , (*  78*) ADR (yyNComb [ 122]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 313]) , (*  81*) ADR (yyNComb [ 108])
         , (*  82*) ADR (yyNComb [ 329]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 113]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 108]) , (*  87*) ADR (yyNComb [ 140])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 357])
         , (*  90*) ADR (yyNComb [ 108]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 381]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 124]) , (*  95*) ADR (yyNComb [ 113])
         , (*  96*) ADR (yyNComb [ 113]) , (*  97*) ADR (yyNComb [ 124])
         , (*  98*) ADR (yyNComb [ 174]) , (*  99*) ADR (yyNComb [ 108])
         , (* 100*) ADR (yyNComb [ 123]) , (* 101*) ADR (yyNComb [ 110])
         , (* 102*) ADR (yyNComb [ 253]) , (* 103*) ADR (yyNComb [ 108])
         , (* 104*) ADR (yyNComb [ 111]) , (* 105*) ADR (yyNComb [ 434])
         , (* 106*) ADR (yyNComb [ 196]) , (* 107*) ADR (yyNComb [ 122])
         , (* 108*) ADR (yyNComb [ 492]) , (* 109*) ADR (yyNComb [ 123])
         , (* 110*) ADR (yyNComb [ 108]) , (* 111*) ADR (yyNComb [ 316])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 108])
         , (* 114*) ADR (yyNComb [ 118]) , (* 115*) ADR (yyNComb [ 178])
         , (* 116*) ADR (yyNComb [ 496]) , (* 117*) ADR (yyNComb [ 197])
         , (* 118*) ADR (yyNComb [ 263]) , (* 119*) ADR (yyNComb [ 139])
         , (* 120*) ADR (yyNComb [ 302]) , (* 121*) ADR (yyNComb [ 108])
         , (* 122*) ADR (yyNComb [ 509]) , (* 123*) ADR (yyNComb [ 108])
         , (* 124*) ADR (yyNComb [ 108]) , (* 125*) ADR (yyNComb [ 530])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 360])
         , (* 128*) ADR (yyNComb [ 114]) , (* 129*) ADR (yyNComb [ 108])
         , (* 130*) ADR (yyNComb [ 114]) , (* 131*) ADR (yyNComb [ 617])
         , (* 132*) ADR (yyNComb [ 108]) , (* 133*) ADR (yyNComb [ 437])
         , (* 134*) ADR (yyNComb [ 115]) , (* 135*) ADR (yyNComb [ 675])
         , (* 136*) ADR (yyNComb [ 335]) , (* 137*) ADR (yyNComb [ 108])
         , (* 138*) ADR (yyNComb [ 108]) , (* 139*) ADR (yyNComb [ 520])
         , (* 140*) ADR (yyNComb [ 403]) , (* 141*) ADR (yyNComb [ 108])
         , (* 142*) ADR (yyNComb [ 108]) , (* 143*) ADR (yyNComb [ 216])
         , (* 144*) ADR (yyNComb [ 192]) , (* 145*) ADR (yyNComb [ 336])
         , (* 146*) ADR (yyNComb [ 108]) , (* 147*) ADR (yyNComb [ 108])
         , (* 148*) ADR (yyNComb [ 667]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 694]) , (* 151*) ADR (yyNComb [ 108])
         , (* 152*) ADR (yyNComb [ 108]) , (* 153*) ADR (yyNComb [ 737])
         , (* 154*) ADR (yyNComb [ 151]) , (* 155*) ADR (yyNComb [ 750])
         , (* 156*) ADR (yyNComb [ 789]) , (* 157*) ADR (yyNComb [ 108])
         , (* 158*) ADR (yyNComb [ 137]) , (* 159*) ADR (yyNComb [ 108])
         , (* 160*) ADR (yyNComb [ 108]) , (* 161*) ADR (yyNComb [ 108])
         , (* 162*) ADR (yyNComb [ 114]) , (* 163*) ADR (yyNComb [ 108])
         , (* 164*) ADR (yyNComb [ 108]) , (* 165*) ADR (yyNComb [ 108])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 315])
         , (* 168*) ADR (yyNComb [ 862]) , (* 169*) ADR (yyNComb [ 108])
         , (* 170*) ADR (yyNComb [ 830]) , (* 171*) ADR (yyNComb [ 108])
         , (* 172*) ADR (yyNComb [ 108]) , (* 173*) ADR (yyNComb [ 108])
         , (* 174*) ADR (yyNComb [ 108]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 176]) , (* 177*) ADR (yyNComb [ 108])
         , (* 178*) ADR (yyNComb [ 108]) , (* 179*) ADR (yyNComb [ 323])
         , (* 180*) ADR (yyNComb [ 875]) , (* 181*) ADR (yyNComb [ 108])
         , (* 182*) ADR (yyNComb [ 108]) , (* 183*) ADR (yyNComb [ 108])
         , (* 184*) ADR (yyNComb [ 108]) , (* 185*) ADR (yyNComb [ 110])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 361])
         , (* 188*) ADR (yyNComb [ 354]) , (* 189*) ADR (yyNComb [ 108])
         , (* 190*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    4
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  179 , (*  11*)    0
         , (*  12*)    0 , (*  13*)   25 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)   25 , (*  21*)    0 , (*  22*)  162 , (*  23*)  176
         , (*  24*)  177 , (*  25*)    0 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)  180 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)   35 , (*  35*)    0
         , (*  36*)    0 , (*  37*)    0 , (*  38*)  135 , (*  39*)  135
         , (*  40*)    0 , (*  41*)    0 , (*  42*)    0 , (*  43*)    0
         , (*  44*)   47 , (*  45*)    0 , (*  46*)    0 , (*  47*)    0
         , (*  48*)  102 , (*  49*)    0 , (*  50*)    0 , (*  51*)    0
         , (*  52*)    0 , (*  53*)  153 , (*  54*)   71 , (*  55*)  153
         , (*  56*)   60 , (*  57*)    0 , (*  58*)    0 , (*  59*)   82
         , (*  60*)    0 , (*  61*)  153 , (*  62*)   83 , (*  63*)  153
         , (*  64*)   76 , (*  65*)  153 , (*  66*)   84 , (*  67*)   71
         , (*  68*)   77 , (*  69*)   71 , (*  70*)   78 , (*  71*)   72
         , (*  72*)    0 , (*  73*)   58 , (*  74*)    0 , (*  75*)  153
         , (*  76*)    0 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)  153 , (*  81*)    0 , (*  82*)  153 , (*  83*)    0
         , (*  84*)    0 , (*  85*)    0 , (*  86*)   95 , (*  87*)  120
         , (*  88*)    0 , (*  89*)  153 , (*  90*)    0 , (*  91*)    0
         , (*  92*)   48 , (*  93*)    0 , (*  94*)   96 , (*  95*)  154
         , (*  96*)  120 , (*  97*)  143 , (*  98*)  101 , (*  99*)    0
         , (* 100*)    0 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)  135 , (* 106*)  143 , (* 107*)    0
         , (* 108*)  135 , (* 109*)    0 , (* 110*)    0 , (* 111*)  114
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)  153 , (* 117*)    0 , (* 118*)    0 , (* 119*)  154
         , (* 120*)  102 , (* 121*)    0 , (* 122*)  153 , (* 123*)    0
         , (* 124*)    0 , (* 125*)  153 , (* 126*)    0 , (* 127*)  128
         , (* 128*)    0 , (* 129*)    0 , (* 130*)    0 , (* 131*)  135
         , (* 132*)    0 , (* 133*)  136 , (* 134*)    0 , (* 135*)  114
         , (* 136*)  114 , (* 137*)    0 , (* 138*)    0 , (* 139*)  102
         , (* 140*)  102 , (* 141*)    0 , (* 142*)    0 , (* 143*)    0
         , (* 144*)    0 , (* 145*)  188 , (* 146*)    0 , (* 147*)    0
         , (* 148*)  168 , (* 149*)    0 , (* 150*)  170 , (* 151*)    0
         , (* 152*)    0 , (* 153*)   71 , (* 154*)    0 , (* 155*)  153
         , (* 156*)  180 , (* 157*)    0 , (* 158*)    0 , (* 159*)    0
         , (* 160*)    0 , (* 161*)    0 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)  187
         , (* 168*)    0 , (* 169*)    0 , (* 170*)  153 , (* 171*)    0
         , (* 172*)    0 , (* 173*)    0 , (* 174*)    0 , (* 175*)  185
         , (* 176*)    0 , (* 177*)    0 , (* 178*)    0 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  384} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  11,  438}
         , (*  10*) yyTCombType { 149,  150} , (*  11*) yyTCombType { 169,  170}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  11,  438} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {  88,   89} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  11,  438}
         , (*  20*) yyTCombType {  26,   27} , (*  21*) yyTCombType {  31,   32}
         , (*  22*) yyTCombType {  48,  518} , (*  23*) yyTCombType {  85,  254}
         , (*  24*) yyTCombType { 120,  416} , (*  25*) yyTCombType { 123,  264}
         , (*  26*) yyTCombType { 151,  280} , (*  27*) yyTCombType {  11,  438}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 155,  416}
         , (*  30*) yyTCombType {  11,  438} , (*  31*) yyTCombType {  12,  436}
         , (*  32*) yyTCombType {   1,  414} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  14,   15}
         , (*  36*) yyTCombType {  12,  436} , (*  37*) yyTCombType {   1,  414}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  87,  416} , (*  41*) yyTCombType {  12,  436}
         , (*  42*) yyTCombType {  89,  539} , (*  43*) yyTCombType {  11,  438}
         , (*  44*) yyTCombType {  88,  538} , (*  45*) yyTCombType {  90,  255}
         , (*  46*) yyTCombType { 153,   54} , (*  47*) yyTCombType {  87,  416}
         , (*  48*) yyTCombType {  92,  518} , (*  49*) yyTCombType {  12,   13}
         , (*  50*) yyTCombType { 156,  643} , (*  51*) yyTCombType {  11,  438}
         , (*  52*) yyTCombType {  12,   16} , (*  53*) yyTCombType {  40,  214}
         , (*  54*) yyTCombType { 163,  164} , (*  55*) yyTCombType {  92,  518}
         , (*  56*) yyTCombType { 170,  646} , (*  57*) yyTCombType {  11,  438}
         , (*  58*) yyTCombType { 171,  172} , (*  59*) yyTCombType {   1,  192}
         , (*  60*) yyTCombType { 156,  643} , (*  61*) yyTCombType { 181,  182}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  11,  438}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {  12,  436}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  17,  198}
         , (*  68*) yyTCombType {   9,   21} , (*  69*) yyTCombType {  19,  200}
         , (*  70*) yyTCombType {  24,  201} , (*  71*) yyTCombType {  28,  202}
         , (*  72*) yyTCombType {  17,   18} , (*  73*) yyTCombType {  12,  436}
         , (*  74*) yyTCombType {  19,   20} , (*  75*) yyTCombType {  33,  208}
         , (*  76*) yyTCombType {  34,  455} , (*  77*) yyTCombType {  35,  456}
         , (*  78*) yyTCombType {  36,  210} , (*  79*) yyTCombType {  12,  436}
         , (*  80*) yyTCombType {  37,  489} , (*  81*) yyTCombType {  34,  455}
         , (*  82*) yyTCombType {  35,  456} , (*  83*) yyTCombType {  44,  512}
         , (*  84*) yyTCombType {  37,   38} , (*  85*) yyTCombType {  12,  436}
         , (*  86*) yyTCombType {  34,  455} , (*  87*) yyTCombType {  35,  456}
         , (*  88*) yyTCombType {  45,  218} , (*  89*) yyTCombType {  46,   47}
         , (*  90*) yyTCombType {  59,  601} , (*  91*) yyTCombType {  59,  601}
         , (*  92*) yyTCombType {  71,  221} , (*  93*) yyTCombType {  71,  222}
         , (*  94*) yyTCombType {  46,  513} , (*  95*) yyTCombType {   4,  191}
         , (*  96*) yyTCombType {   7,  193} , (*  97*) yyTCombType {   8,  194}
         , (*  98*) yyTCombType {  15,  196} , (*  99*) yyTCombType {  16,  197}
         , (* 100*) yyTCombType {  18,  199} , (* 101*) yyTCombType {  21,   22}
         , (* 102*) yyTCombType {  25,  195} , (* 103*) yyTCombType {  27,   28}
         , (* 104*) yyTCombType {  30,  204} , (* 105*) yyTCombType {  32,   33}
         , (* 106*) yyTCombType {  42,  216} , (* 107*) yyTCombType {  47,  217}
         , (* 108*) yyTCombType {  50,  220} , (* 109*) yyTCombType {  41,  429}
         , (* 110*) yyTCombType {  34,  455} , (* 111*) yyTCombType {  35,  456}
         , (* 112*) yyTCombType {  57,  223} , (* 113*) yyTCombType {  74,  249}
         , (* 114*) yyTCombType {  81,  252} , (* 115*) yyTCombType {  81,   82}
         , (* 116*) yyTCombType {  79,   80} , (* 117*) yyTCombType {  41,  429}
         , (* 118*) yyTCombType {  34,  455} , (* 119*) yyTCombType {  35,  456}
         , (* 120*) yyTCombType {  43,  542} , (* 121*) yyTCombType {  82,   60}
         , (* 122*) yyTCombType {  86,  417} , (* 123*) yyTCombType {  94,  525}
         , (* 124*) yyTCombType {  34,  455} , (* 125*) yyTCombType {  35,  456}
         , (* 126*) yyTCombType {  79,  250} , (* 127*) yyTCombType {  83,   63}
         , (* 128*) yyTCombType {  43,  492} , (* 129*) yyTCombType {  49,  487}
         , (* 130*) yyTCombType {  34,  455} , (* 131*) yyTCombType {  35,  456}
         , (* 132*) yyTCombType {  98,  551} , (* 133*) yyTCombType {  41,  429}
         , (* 134*) yyTCombType {  95,  417} , (* 135*) yyTCombType {  99,  260}
         , (* 136*) yyTCombType {  96,  416} , (* 137*) yyTCombType {  41,  429}
         , (* 138*) yyTCombType { 100,  101} , (* 139*) yyTCombType {  51,  489}
         , (* 140*) yyTCombType {  41,  429} , (* 141*) yyTCombType { 102,  219}
         , (* 142*) yyTCombType { 100,  417} , (* 143*) yyTCombType {  41,  429}
         , (* 144*) yyTCombType {  43,  492} , (* 145*) yyTCombType {  49,  487}
         , (* 146*) yyTCombType {  94,  525} , (* 147*) yyTCombType { 111,  425}
         , (* 148*) yyTCombType {  43,  542} , (* 149*) yyTCombType { 112,  262}
         , (* 150*) yyTCombType { 114,   41} , (* 151*) yyTCombType {  43,  492}
         , (* 152*) yyTCombType {  49,  487} , (* 153*) yyTCombType {  86,   87}
         , (* 154*) yyTCombType {  43,  492} , (* 155*) yyTCombType {  51,  489}
         , (* 156*) yyTCombType {  83,  253} , (* 157*) yyTCombType {  52,  491}
         , (* 158*) yyTCombType {  95,   96} , (* 159*) yyTCombType { 110,  261}
         , (* 160*) yyTCombType { 118,  532} , (* 161*) yyTCombType { 119,  120}
         , (* 162*) yyTCombType {  51,  489} , (* 163*) yyTCombType {  35,  209}
         , (* 164*) yyTCombType {  41,  429} , (* 165*) yyTCombType {  41,   42}
         , (* 166*) yyTCombType {  41,  429} , (* 167*) yyTCombType { 121,  122}
         , (* 168*) yyTCombType {  41,  429} , (* 169*) yyTCombType {  41,  429}
         , (* 170*) yyTCombType { 117,  531} , (* 171*) yyTCombType {  41,  429}
         , (* 172*) yyTCombType {  41,  429} , (* 173*) yyTCombType {  52,  491}
         , (* 174*) yyTCombType {  41,  429} , (* 175*) yyTCombType {  43,  492}
         , (* 176*) yyTCombType {  49,  487} , (* 177*) yyTCombType {  43,  492}
         , (* 178*) yyTCombType { 124,  125} , (* 179*) yyTCombType {  43,  492}
         , (* 180*) yyTCombType {  52,  491} , (* 181*) yyTCombType {  49,   50}
         , (* 182*) yyTCombType {  49,  487} , (* 183*) yyTCombType {  43,  492}
         , (* 184*) yyTCombType {  49,  487} , (* 185*) yyTCombType {  56,  418}
         , (* 186*) yyTCombType {  51,  489} , (* 187*) yyTCombType {  93,  524}
         , (* 188*) yyTCombType {  58,  594} , (* 189*) yyTCombType {  96,  256}
         , (* 190*) yyTCombType { 113,  114} , (* 191*) yyTCombType { 126,  265}
         , (* 192*) yyTCombType {  51,   38} , (* 193*) yyTCombType { 117,  118}
         , (* 194*) yyTCombType {  51,  489} , (* 195*) yyTCombType { 113,  426}
         , (* 196*) yyTCombType { 129,  267} , (* 197*) yyTCombType { 132,  270}
         , (* 198*) yyTCombType {  58,  594} , (* 199*) yyTCombType { 101,  257}
         , (* 200*) yyTCombType { 137,  273} , (* 201*) yyTCombType {  56,  418}
         , (* 202*) yyTCombType {  58,  594} , (* 203*) yyTCombType {  93,   94}
         , (* 204*) yyTCombType {  52,  491} , (* 205*) yyTCombType {  56,  418}
         , (* 206*) yyTCombType { 130,  268} , (* 207*) yyTCombType { 138,  274}
         , (* 208*) yyTCombType {  56,  418} , (* 209*) yyTCombType { 115,  564}
         , (* 210*) yyTCombType {  93,  524} , (* 211*) yyTCombType { 130,  269}
         , (* 212*) yyTCombType {  52,   53} , (* 213*) yyTCombType { 115,  564}
         , (* 214*) yyTCombType {  58,  594} , (* 215*) yyTCombType { 101,  258}
         , (* 216*) yyTCombType { 101,  259} , (* 217*) yyTCombType { 115,  116}
         , (* 218*) yyTCombType {  58,  594} , (* 219*) yyTCombType {  58,  594}
         , (* 220*) yyTCombType { 141,  275} , (* 221*) yyTCombType { 134,  271}
         , (* 222*) yyTCombType {  58,  594} , (* 223*) yyTCombType { 101,  416}
         , (* 224*) yyTCombType {  58,  594} , (* 225*) yyTCombType {  58,  594}
         , (* 226*) yyTCombType { 134,  272} , (* 227*) yyTCombType { 142,  276}
         , (* 228*) yyTCombType { 110,  111} , (* 229*) yyTCombType { 103,  560}
         , (* 230*) yyTCombType { 143,   98} , (* 231*) yyTCombType { 146,  147}
         , (* 232*) yyTCombType {  56,  418} , (* 233*) yyTCombType { 103,  560}
         , (* 234*) yyTCombType { 103,   50} , (* 235*) yyTCombType { 103,  560}
         , (* 236*) yyTCombType { 118,  263} , (* 237*) yyTCombType { 103,  560}
         , (* 238*) yyTCombType { 104,  562} , (* 239*) yyTCombType { 144,  277}
         , (* 240*) yyTCombType {  56,  418} , (* 241*) yyTCombType { 144,  278}
         , (* 242*) yyTCombType { 104,  562} , (* 243*) yyTCombType { 147,  279}
         , (* 244*) yyTCombType { 104,  105} , (* 245*) yyTCombType { 152,  153}
         , (* 246*) yyTCombType { 104,  562} , (* 247*) yyTCombType {  56,  418}
         , (* 248*) yyTCombType { 101,  555} , (* 249*) yyTCombType {  58,  594}
         , (* 250*) yyTCombType {  60,  418} , (* 251*) yyTCombType {  58,  594}
         , (* 252*) yyTCombType {  58,   59} , (* 253*) yyTCombType {  58,  594}
         , (* 254*) yyTCombType {  58,  594} , (* 255*) yyTCombType { 154,  417}
         , (* 256*) yyTCombType { 158,  281} , (* 257*) yyTCombType {  58,  594}
         , (* 258*) yyTCombType { 160,  282} , (* 259*) yyTCombType { 161,  162}
         , (* 260*) yyTCombType {  60,  418} , (* 261*) yyTCombType {  72,   55}
         , (* 262*) yyTCombType { 157,  158} , (* 263*) yyTCombType {  58,   75}
         , (* 264*) yyTCombType {  58,  594} , (* 265*) yyTCombType {  58,  594}
         , (* 266*) yyTCombType {  58,  594} , (* 267*) yyTCombType {  58,  594}
         , (* 268*) yyTCombType {  58,  594} , (* 269*) yyTCombType {  58,  594}
         , (* 270*) yyTCombType {  58,  594} , (* 271*) yyTCombType {  58,  594}
         , (* 272*) yyTCombType {  58,  594} , (* 273*) yyTCombType {  58,  594}
         , (* 274*) yyTCombType {  58,  594} , (* 275*) yyTCombType {  58,  251}
         , (* 276*) yyTCombType {  60,  418} , (* 277*) yyTCombType { 159,  446}
         , (* 278*) yyTCombType { 162,   23} , (* 279*) yyTCombType { 164,  165}
         , (* 280*) yyTCombType { 165,  283} , (* 281*) yyTCombType {  60,  418}
         , (* 282*) yyTCombType { 159,  160} , (* 283*) yyTCombType { 166,  167}
         , (* 284*) yyTCombType { 172,  173} , (* 285*) yyTCombType { 173,  284}
         , (* 286*) yyTCombType {  60,  418} , (* 287*) yyTCombType {  72,   56}
         , (* 288*) yyTCombType {  72,  224} , (* 289*) yyTCombType {  72,  225}
         , (* 290*) yyTCombType {  72,  226} , (* 291*) yyTCombType {  72,  227}
         , (* 292*) yyTCombType {  72,  228} , (* 293*) yyTCombType {  72,  229}
         , (* 294*) yyTCombType {  72,  230} , (* 295*) yyTCombType {  72,  231}
         , (* 296*) yyTCombType {  72,  232} , (* 297*) yyTCombType {  72,  233}
         , (* 298*) yyTCombType {  72,  234} , (* 299*) yyTCombType { 174,  397}
         , (* 300*) yyTCombType { 178,  179} , (* 301*) yyTCombType {  62,  575}
         , (* 302*) yyTCombType { 154,  155} , (* 303*) yyTCombType { 182,  183}
         , (* 304*) yyTCombType { 157,  445} , (* 305*) yyTCombType { 183,  286}
         , (* 306*) yyTCombType { 157,  161} , (* 307*) yyTCombType { 176,  424}
         , (* 308*) yyTCombType { 176,  424} , (* 309*) yyTCombType { 177,  285}
         , (* 310*) yyTCombType { 177,   25} , (* 311*) yyTCombType { 184,  398}
         , (* 312*) yyTCombType {  60,   57} , (* 313*) yyTCombType {  60,  418}
         , (* 314*) yyTCombType {  60,  418} , (* 315*) yyTCombType {  60,  418}
         , (* 316*) yyTCombType {  60,  418} , (* 317*) yyTCombType {  62,  575}
         , (* 318*) yyTCombType { 185,  176} , (* 319*) yyTCombType {  60,   61}
         , (* 320*) yyTCombType { 186,  187} , (* 321*) yyTCombType {  62,  575}
         , (* 322*) yyTCombType {  64,  577} , (* 323*) yyTCombType { 189,  190}
         , (* 324*) yyTCombType {  62,  575} , (* 325*) yyTCombType {  60,  418}
         , (* 326*) yyTCombType { 190,  287} , (* 327*) yyTCombType {  60,  418}
         , (* 328*) yyTCombType {  60,  418} , (* 329*) yyTCombType {  60,  418}
         , (* 330*) yyTCombType {  60,  418} , (* 331*) yyTCombType {  60,  418}
         , (* 332*) yyTCombType {  60,  418} , (* 333*) yyTCombType {  60,  418}
         , (* 334*) yyTCombType {  60,  418} , (* 335*) yyTCombType {  60,  418}
         , (* 336*) yyTCombType {  60,  418} , (* 337*) yyTCombType {  60,  418}
         , (* 338*) yyTCombType {  64,  577} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType {   0,    0} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {  64,  577} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType {  64,  577} , (* 345*) yyTCombType {  64,  577}
         , (* 346*) yyTCombType {  66,  580} , (* 347*) yyTCombType {   0,    0}
         , (* 348*) yyTCombType {  62,  575} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType {  62,  575} , (* 353*) yyTCombType {  62,  575}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {   0,    0}
         , (* 356*) yyTCombType {  62,  575} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType {  66,  580} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {  62,  575}
         , (* 364*) yyTCombType {  68,  583} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType { 135,  541}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {  64,  577}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {  64,  577}
         , (* 374*) yyTCombType {  64,  577} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {  66,  580} , (* 377*) yyTCombType {  64,  577}
         , (* 378*) yyTCombType {  68,  583} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {  66,  580} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {  66,  580} , (* 383*) yyTCombType {  66,  580}
         , (* 384*) yyTCombType {  64,  577} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {  68,  583} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {  68,  583} , (* 395*) yyTCombType { 135,  541}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {  68,  583} , (* 399*) yyTCombType { 135,  211}
         , (* 400*) yyTCombType {  68,  583} , (* 401*) yyTCombType {  68,  583}
         , (* 402*) yyTCombType {  70,  585} , (* 403*) yyTCombType { 135,  212}
         , (* 404*) yyTCombType { 135,   39} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType {  66,  580}
         , (* 408*) yyTCombType { 135,  213} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {   0,    0} , (* 411*) yyTCombType {  66,  580}
         , (* 412*) yyTCombType {  66,  580} , (* 413*) yyTCombType {   0,    0}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {  66,  580}
         , (* 416*) yyTCombType {  70,  585} , (* 417*) yyTCombType { 135,   40}
         , (* 418*) yyTCombType {   0,    0} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType {   0,    0}
         , (* 422*) yyTCombType {  66,  580} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {  68,  583}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType {  68,  583}
         , (* 428*) yyTCombType {  70,  585} , (* 429*) yyTCombType {  68,  583}
         , (* 430*) yyTCombType {  68,  583} , (* 431*) yyTCombType { 135,  215}
         , (* 432*) yyTCombType {  70,  585} , (* 433*) yyTCombType {  68,  583}
         , (* 434*) yyTCombType {   0,    0} , (* 435*) yyTCombType {   0,    0}
         , (* 436*) yyTCombType {  70,  585} , (* 437*) yyTCombType {   0,    0}
         , (* 438*) yyTCombType {  70,  585} , (* 439*) yyTCombType {  70,  585}
         , (* 440*) yyTCombType {  68,  583} , (* 441*) yyTCombType {  68,  583}
         , (* 442*) yyTCombType {  68,  583} , (* 443*) yyTCombType {  68,  583}
         , (* 444*) yyTCombType {  68,  583} , (* 445*) yyTCombType {  68,  583}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {   0,    0}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType { 168,  642}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType { 168,  203} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {  73,  592} , (* 463*) yyTCombType {  70,  585}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {  70,  585}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {  70,  585}
         , (* 468*) yyTCombType {  70,  585} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {   0,    0} , (* 471*) yyTCombType {  70,  585}
         , (* 472*) yyTCombType {  73,  592} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {   0,    0}
         , (* 476*) yyTCombType {  73,  592} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {  70,  585} , (* 479*) yyTCombType {  70,  585}
         , (* 480*) yyTCombType {  70,  585} , (* 481*) yyTCombType {  70,  585}
         , (* 482*) yyTCombType {  70,  585} , (* 483*) yyTCombType {  70,  585}
         , (* 484*) yyTCombType {  70,  585} , (* 485*) yyTCombType {  70,  585}
         , (* 486*) yyTCombType {  70,  585} , (* 487*) yyTCombType { 168,   30}
         , (* 488*) yyTCombType {  73,  592} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {   0,    0}
         , (* 492*) yyTCombType {  73,  592} , (* 493*) yyTCombType {  73,  592}
         , (* 494*) yyTCombType {   0,    0} , (* 495*) yyTCombType { 168,  205}
         , (* 496*) yyTCombType {  73,  592} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {  73,  592} , (* 499*) yyTCombType {  73,  592}
         , (* 500*) yyTCombType {  76,   65} , (* 501*) yyTCombType { 168,  206}
         , (* 502*) yyTCombType {   0,    0} , (* 503*) yyTCombType { 107,  566}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType { 168,  207}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType {   0,    0}
         , (* 510*) yyTCombType {   0,    0} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType {  76,  576} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {   0,    0}
         , (* 518*) yyTCombType {   0,    0} , (* 519*) yyTCombType { 107,  566}
         , (* 520*) yyTCombType {   0,    0} , (* 521*) yyTCombType {   0,    0}
         , (* 522*) yyTCombType {   0,    0} , (* 523*) yyTCombType {  73,  592}
         , (* 524*) yyTCombType {  73,   74} , (* 525*) yyTCombType {  73,  592}
         , (* 526*) yyTCombType { 107,  566} , (* 527*) yyTCombType {  73,  592}
         , (* 528*) yyTCombType {  73,  592} , (* 529*) yyTCombType { 107,  566}
         , (* 530*) yyTCombType {  76,  576} , (* 531*) yyTCombType {  73,  592}
         , (* 532*) yyTCombType {   0,    0} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {  76,  576} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType {  76,  576} , (* 537*) yyTCombType {  76,  576}
         , (* 538*) yyTCombType {  73,  592} , (* 539*) yyTCombType {  73,  592}
         , (* 540*) yyTCombType {  73,  592} , (* 541*) yyTCombType {  73,  592}
         , (* 542*) yyTCombType {  73,  592} , (* 543*) yyTCombType {  73,  592}
         , (* 544*) yyTCombType {  73,  592} , (* 545*) yyTCombType {  73,  592}
         , (* 546*) yyTCombType {  73,  592} , (* 547*) yyTCombType {  73,  592}
         , (* 548*) yyTCombType {  73,  592} , (* 549*) yyTCombType {  77,  582}
         , (* 550*) yyTCombType { 107,  566} , (* 551*) yyTCombType { 109,  567}
         , (* 552*) yyTCombType { 107,  566} , (* 553*) yyTCombType {   0,    0}
         , (* 554*) yyTCombType { 107,  566} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType { 107,  108} , (* 557*) yyTCombType {   0,    0}
         , (* 558*) yyTCombType { 107,  566} , (* 559*) yyTCombType { 188,  634}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {  76,  576}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {  77,  582}
         , (* 564*) yyTCombType { 188,  634} , (* 565*) yyTCombType {  76,  576}
         , (* 566*) yyTCombType {  76,  576} , (* 567*) yyTCombType { 109,  567}
         , (* 568*) yyTCombType { 179,  435} , (* 569*) yyTCombType {  76,  576}
         , (* 570*) yyTCombType {   0,    0} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType {   0,    0} , (* 573*) yyTCombType { 179,  435}
         , (* 574*) yyTCombType { 109,  567} , (* 575*) yyTCombType {  77,  582}
         , (* 576*) yyTCombType {  76,  576} , (* 577*) yyTCombType { 109,  110}
         , (* 578*) yyTCombType {   0,    0} , (* 579*) yyTCombType {  77,  582}
         , (* 580*) yyTCombType {   0,    0} , (* 581*) yyTCombType { 179,  435}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType {  77,  582}
         , (* 584*) yyTCombType { 179,  435} , (* 585*) yyTCombType {  77,  582}
         , (* 586*) yyTCombType {  77,  582} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType { 188,  634}
         , (* 594*) yyTCombType {   0,    0} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType {   0,    0} , (* 597*) yyTCombType { 179,  435}
         , (* 598*) yyTCombType { 109,  567} , (* 599*) yyTCombType {   0,    0}
         , (* 600*) yyTCombType { 109,  567} , (* 601*) yyTCombType { 188,  634}
         , (* 602*) yyTCombType { 109,  567} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType { 179,  435}
         , (* 606*) yyTCombType { 109,  567} , (* 607*) yyTCombType { 188,  634}
         , (* 608*) yyTCombType {   0,    0} , (* 609*) yyTCombType {  78,  584}
         , (* 610*) yyTCombType {  77,  582} , (* 611*) yyTCombType { 179,  435}
         , (* 612*) yyTCombType {  77,  582} , (* 613*) yyTCombType { 188,  634}
         , (* 614*) yyTCombType {  77,  582} , (* 615*) yyTCombType {  77,  582}
         , (* 616*) yyTCombType {   0,    0} , (* 617*) yyTCombType { 179,  435}
         , (* 618*) yyTCombType {  77,  582} , (* 619*) yyTCombType {  78,  245}
         , (* 620*) yyTCombType {   0,    0} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {  78,  584}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {  77,  582}
         , (* 626*) yyTCombType {  77,  582} , (* 627*) yyTCombType {  77,  582}
         , (* 628*) yyTCombType {  77,  582} , (* 629*) yyTCombType {  77,  582}
         , (* 630*) yyTCombType {  77,  582} , (* 631*) yyTCombType {  77,  242}
         , (* 632*) yyTCombType {  77,  243} , (* 633*) yyTCombType {  77,  244}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType {  78,  584}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType {   0,    0} , (* 639*) yyTCombType {  78,  584}
         , (* 640*) yyTCombType {  78,  246} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType {  78,  584}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {  78,  584}
         , (* 646*) yyTCombType {  78,  584} , (* 647*) yyTCombType {  84,  581}
         , (* 648*) yyTCombType {   0,    0} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {   0,    0} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {   0,    0}
         , (* 658*) yyTCombType {   0,    0} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {   0,    0} , (* 661*) yyTCombType {  84,  581}
         , (* 662*) yyTCombType {   0,    0} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {   0,    0} , (* 665*) yyTCombType {   0,    0}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {  78,  584} , (* 671*) yyTCombType {   0,    0}
         , (* 672*) yyTCombType {  78,  584} , (* 673*) yyTCombType {  84,  235}
         , (* 674*) yyTCombType {  78,  584} , (* 675*) yyTCombType {  78,  584}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType {  84,  581}
         , (* 678*) yyTCombType {  78,  584} , (* 679*) yyTCombType {   0,    0}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType {  84,  581}
         , (* 682*) yyTCombType {   0,    0} , (* 683*) yyTCombType {  84,  581}
         , (* 684*) yyTCombType {  84,  581} , (* 685*) yyTCombType {  78,  584}
         , (* 686*) yyTCombType {  78,  584} , (* 687*) yyTCombType {  78,  584}
         , (* 688*) yyTCombType {  78,  584} , (* 689*) yyTCombType {  78,  584}
         , (* 690*) yyTCombType {  78,  584} , (* 691*) yyTCombType {  78,  584}
         , (* 692*) yyTCombType {  78,  584} , (* 693*) yyTCombType {  78,  584}
         , (* 694*) yyTCombType {  78,  247} , (* 695*) yyTCombType {  78,  248}
         , (* 696*) yyTCombType {   0,    0} , (* 697*) yyTCombType { 127,  465}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType { 128,  466}
         , (* 700*) yyTCombType {   0,    0} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType { 127,  465} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType { 128,  466} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {  91,  543} , (* 707*) yyTCombType { 127,  465}
         , (* 708*) yyTCombType {  84,  581} , (* 709*) yyTCombType { 128,  466}
         , (* 710*) yyTCombType {  84,  236} , (* 711*) yyTCombType {   0,    0}
         , (* 712*) yyTCombType {  84,  581} , (* 713*) yyTCombType {  84,  581}
         , (* 714*) yyTCombType {  91,  546} , (* 715*) yyTCombType {   0,    0}
         , (* 716*) yyTCombType {  84,  581} , (* 717*) yyTCombType {   0,    0}
         , (* 718*) yyTCombType {   0,    0} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType {   0,    0} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {  84,  581}
         , (* 724*) yyTCombType {  84,  237} , (* 725*) yyTCombType {  84,  238}
         , (* 726*) yyTCombType {  84,  239} , (* 727*) yyTCombType {  84,  240}
         , (* 728*) yyTCombType {  84,  241} , (* 729*) yyTCombType {   0,    0}
         , (* 730*) yyTCombType {  91,  546} , (* 731*) yyTCombType { 127,  465}
         , (* 732*) yyTCombType {   0,    0} , (* 733*) yyTCombType { 128,  466}
         , (* 734*) yyTCombType {  91,  543} , (* 735*) yyTCombType {   0,    0}
         , (* 736*) yyTCombType {   0,    0} , (* 737*) yyTCombType {  91,  546}
         , (* 738*) yyTCombType { 133,  475} , (* 739*) yyTCombType { 127,  465}
         , (* 740*) yyTCombType {  91,  546} , (* 741*) yyTCombType { 128,  466}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType { 133,  475}
         , (* 744*) yyTCombType {   0,    0} , (* 745*) yyTCombType { 127,  465}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType { 128,  466}
         , (* 748*) yyTCombType { 133,  475} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType { 127,  465}
         , (* 752*) yyTCombType {   0,    0} , (* 753*) yyTCombType { 128,  466}
         , (* 754*) yyTCombType { 136,  476} , (* 755*) yyTCombType {   0,    0}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType { 139,  482}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType { 136,  476}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType {  91,  546}
         , (* 762*) yyTCombType { 139,  482} , (* 763*) yyTCombType {  91,  546}
         , (* 764*) yyTCombType { 136,  476} , (* 765*) yyTCombType {  91,  546}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType { 139,  482}
         , (* 768*) yyTCombType {   0,    0} , (* 769*) yyTCombType {  91,  546}
         , (* 770*) yyTCombType {   0,    0} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType { 133,  475} , (* 773*) yyTCombType { 140,  483}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {   0,    0} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType { 140,  483} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType { 133,  475} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType { 187,  435} , (* 783*) yyTCombType { 140,  483}
         , (* 784*) yyTCombType {   0,    0} , (* 785*) yyTCombType { 128,  266}
         , (* 786*) yyTCombType { 133,  475} , (* 787*) yyTCombType { 187,  435}
         , (* 788*) yyTCombType { 136,  476} , (* 789*) yyTCombType { 180,  203}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType { 139,  482}
         , (* 792*) yyTCombType { 133,  475} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType { 180,  642} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType { 136,  476} , (* 797*) yyTCombType { 136,  213}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType { 139,  482}
         , (* 800*) yyTCombType { 187,  435} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType { 136,  476} , (* 803*) yyTCombType { 187,  435}
         , (* 804*) yyTCombType {   0,    0} , (* 805*) yyTCombType { 139,  482}
         , (* 806*) yyTCombType { 136,   40} , (* 807*) yyTCombType { 140,  483}
         , (* 808*) yyTCombType { 136,  476} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType {   0,    0} , (* 811*) yyTCombType { 139,  482}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType { 140,  483}
         , (* 816*) yyTCombType { 187,  435} , (* 817*) yyTCombType {   0,    0}
         , (* 818*) yyTCombType { 180,   30} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType { 140,  483}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType { 187,  435} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType { 180,  205} , (* 827*) yyTCombType { 140,  483}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType { 187,  435} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType { 180,  206} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType {   0,    0} , (* 835*) yyTCombType {   0,    0}
         , (* 836*) yyTCombType { 187,  435} , (* 837*) yyTCombType {   0,    0}
         , (* 838*) yyTCombType { 180,  207} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType {   0,    0} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType {   0,    0} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType {   0,    0} , (* 855*) yyTCombType {   0,    0}
         , (* 856*) yyTCombType {   0,    0} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType {   0,    0} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType {   0,    0} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  290 , (* 109*)    5 , (* 110*)  291 , (* 111*)  292
         , (* 112*)  293 , (* 113*)  294 , (* 114*)  295 , (* 115*)  288
         , (* 116*)  289 , (* 117*)    0 , (* 118*)  166 , (* 119*)    0
         , (* 120*)    0 , (* 121*)  175 , (* 122*)  185 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    6 , (* 126*)    9 , (* 127*)   26
         , (* 128*)  296 , (* 129*)   29 , (* 130*)   31 , (* 131*)  157
         , (* 132*)  168 , (* 133*)  163 , (* 134*)  174 , (* 135*)  178
         , (* 136*)  184 , (* 137*)  186 , (* 138*)    0 , (* 139*)  341
         , (* 140*)   14 , (* 141*)  299 , (* 142*)  300 , (* 143*)   24
         , (* 144*)  356 , (* 145*)   58 , (* 146*)  302 , (* 147*)   43
         , (* 148*)   11 , (* 149*)   12 , (* 150*)  297 , (* 151*)  298
         , (* 152*)   17 , (* 153*)   19 , (* 154*)  353 , (* 155*)  362
         , (* 156*)  348 , (* 157*)   34 , (* 158*)  301 , (* 159*)  364
         , (* 160*)   35 , (* 161*)  126 , (* 162*)   37 , (* 163*)   36
         , (* 164*)   37 , (* 165*)  124 , (* 166*)  127 , (* 167*)   52
         , (* 168*)  367 , (* 169*)  338 , (* 170*)  359 , (* 171*)  131
         , (* 172*)   49 , (* 173*)  133 , (* 174*)   49 , (* 175*)  370
         , (* 176*)  129 , (* 177*)  130 , (* 178*)  139 , (* 179*)  135
         , (* 180*)  372 , (* 181*)   58 , (* 182*)  377 , (* 183*)  159
         , (* 184*)  339 , (* 185*)  304 , (* 186*)  305 , (* 187*)  306
         , (* 188*)  307 , (* 189*)  308 , (* 190*)  309 , (* 191*)  310
         , (* 192*)  311 , (* 193*)  312 , (* 194*)  313 , (* 195*)  314
         , (* 196*)  315 , (* 197*)  316 , (* 198*)  317 , (* 199*)  318
         , (* 200*)  319 , (* 201*)   44 , (* 202*)   45 , (* 203*)  322
         , (* 204*)   46 , (* 205*)  321 , (* 206*)  320 , (* 207*)   58
         , (* 208*)   48 , (* 209*)  117 , (* 210*)   58 , (* 211*)  177
         , (* 212*)  323 , (* 213*)   51 , (* 214*)  340 , (* 215*)   51
         , (* 216*)  343 , (* 217*)   97 , (* 218*)   90 , (* 219*)   88
         , (* 220*)   91 , (* 221*)   92 , (* 222*)  106 , (* 223*)  302
         , (* 224*)   43 , (* 225*)   58 , (* 226*)   95 , (* 227*)  357
         , (* 228*)   97 , (* 229*)  355 , (* 230*)  344 , (* 231*)  102
         , (* 232*)  303 , (* 233*)  143 , (* 234*)  115 , (* 235*)  379
         , (* 236*)   85 , (* 237*)   86 , (* 238*)  109 , (* 239*)  107
         , (* 240*)  350 , (* 241*)   58 , (* 242*)   62 , (* 243*)   76
         , (* 244*)  330 , (* 245*)   66 , (* 246*)   77 , (* 247*)   67
         , (* 248*)   78 , (* 249*)  334 , (* 250*)  331 , (* 251*)  337
         , (* 252*)  327 , (* 253*)   72 , (* 254*)   73 , (* 255*)  380
         , (* 256*)  381 , (* 257*)  156 , (* 258*)   69 , (* 259*)   58
         , (* 260*)   71 , (* 261*)  333 , (* 262*)  304 , (* 263*)  305
         , (* 264*)  306 , (* 265*)  307 , (* 266*)  308 , (* 267*)  309
         , (* 268*)  310 , (* 269*)  311 , (* 270*)  312 , (* 271*)  313
         , (* 272*)  314 , (* 273*)  315 , (* 274*)  316 , (* 275*)  317
         , (* 276*)  318 , (* 277*)  319 , (* 278*)   44 , (* 279*)   58
         , (* 280*)  322 , (* 281*)   84 , (* 282*)   77 , (* 283*)  324
         , (* 284*)   78 , (* 285*)   48 , (* 286*)  331 , (* 287*)  103
         , (* 288*)  327 , (* 289*)   72 , (* 290*)   73 , (* 291*)   58
         , (* 292*)   99 , (* 293*)  100 , (* 294*)  354 , (* 295*)  102
         , (* 296*)   88 , (* 297*)   91 , (* 298*)   92 , (* 299*)  106
         , (* 300*)   58 , (* 301*)  346 , (* 302*)  352 , (* 303*)  123
         , (* 304*)   83 , (* 305*)   76 , (* 306*)  330 , (* 307*)   66
         , (* 308*)   77 , (* 309*)   58 , (* 310*)   78 , (* 311*)  107
         , (* 312*)  331 , (* 313*)    0 , (* 314*)  327 , (* 315*)   72
         , (* 316*)   73 , (* 317*)  328 , (* 318*)  373 , (* 319*)   73
         , (* 320*)  145 , (* 321*)  144 , (* 322*)   62 , (* 323*)   76
         , (* 324*)  330 , (* 325*)   66 , (* 326*)   77 , (* 327*)   58
         , (* 328*)   78 , (* 329*)    0 , (* 330*)  331 , (* 331*)  107
         , (* 332*)  327 , (* 333*)   72 , (* 334*)   73 , (* 335*)  383
         , (* 336*)   49 , (* 337*)   81 , (* 338*)  336 , (* 339*)   64
         , (* 340*)  330 , (* 341*)   66 , (* 342*)   77 , (* 343*)  180
         , (* 344*)   78 , (* 345*)   58 , (* 346*)  331 , (* 347*)    0
         , (* 348*)  327 , (* 349*)   72 , (* 350*)   73 , (* 351*)  329
         , (* 352*)  112 , (* 353*)  113 , (* 354*)  349 , (* 355*)   11
         , (* 356*)   62 , (* 357*)   76 , (* 358*)  330 , (* 359*)   66
         , (* 360*)   77 , (* 361*)   58 , (* 362*)   78 , (* 363*)   11
         , (* 364*)  331 , (* 365*)  146 , (* 366*)  327 , (* 367*)   72
         , (* 368*)   73 , (* 369*)  332 , (* 370*)  119 , (* 371*)  360
         , (* 372*)  121 , (* 373*)  302 , (* 374*)  134 , (* 375*)  104
         , (* 376*)  358 , (* 377*)   51 , (* 378*)  325 , (* 379*)   66
         , (* 380*)   77 , (* 381*)  188 , (* 382*)   78 , (* 383*)  189
         , (* 384*)  331 , (* 385*)  334 , (* 386*)  327 , (* 387*)   72
         , (* 388*)   73 , (* 389*)   58 , (* 390*)    0 , (* 391*)    0
         , (* 392*)   68 , (* 393*)    0 , (* 394*)   78 , (* 395*)    0
         , (* 396*)  331 , (* 397*)    0 , (* 398*)  327 , (* 399*)   72
         , (* 400*)   73 , (* 401*)   11 , (* 402*)    0 , (* 403*)   70
         , (* 404*)  137 , (* 405*)  331 , (* 406*)    0 , (* 407*)  327
         , (* 408*)   72 , (* 409*)   73 , (* 410*)    0 , (* 411*)    0
         , (* 412*)    0 , (* 413*)  342 , (* 414*)  326 , (* 415*)   49
         , (* 416*)  327 , (* 417*)   72 , (* 418*)   73 , (* 419*)  365
         , (* 420*)    0 , (* 421*)  128 , (* 422*)  132 , (* 423*)  130
         , (* 424*)   62 , (* 425*)   76 , (* 426*)  330 , (* 427*)   66
         , (* 428*)   77 , (* 429*)    0 , (* 430*)   78 , (* 431*)    0
         , (* 432*)  331 , (* 433*)    0 , (* 434*)  327 , (* 435*)   72
         , (* 436*)   73 , (* 437*)   49 , (* 438*)   79 , (* 439*)    0
         , (* 440*)    0 , (* 441*)    0 , (* 442*)   62 , (* 443*)   76
         , (* 444*)  330 , (* 445*)   66 , (* 446*)   77 , (* 447*)    0
         , (* 448*)   78 , (* 449*)    0 , (* 450*)  331 , (* 451*)    0
         , (* 452*)  327 , (* 453*)   72 , (* 454*)   73 , (* 455*)  323
         , (* 456*)   51 , (* 457*)    0 , (* 458*)   62 , (* 459*)   76
         , (* 460*)  330 , (* 461*)   66 , (* 462*)   77 , (* 463*)    0
         , (* 464*)   78 , (* 465*)    0 , (* 466*)  331 , (* 467*)    0
         , (* 468*)  327 , (* 469*)   72 , (* 470*)   73 , (* 471*)    0
         , (* 472*)  302 , (* 473*)   43 , (* 474*)  335 , (* 475*)  302
         , (* 476*)  134 , (* 477*)  141 , (* 478*)   51 , (* 479*)   93
         , (* 480*)   86 , (* 481*)  345 , (* 482*)  148 , (* 483*)    0
         , (* 484*)    0 , (* 485*)    0 , (* 486*)   62 , (* 487*)   76
         , (* 488*)  330 , (* 489*)   66 , (* 490*)   77 , (* 491*)    0
         , (* 492*)   78 , (* 493*)    0 , (* 494*)  331 , (* 495*)    0
         , (* 496*)  327 , (* 497*)   72 , (* 498*)   73 , (* 499*)    0
         , (* 500*)  148 , (* 501*)    0 , (* 502*)    0 , (* 503*)  369
         , (* 504*)    0 , (* 505*)  136 , (* 506*)  138 , (* 507*)    0
         , (* 508*)    0 , (* 509*)    0 , (* 510*)    0 , (* 511*)  304
         , (* 512*)  305 , (* 513*)  306 , (* 514*)  307 , (* 515*)  308
         , (* 516*)  309 , (* 517*)  310 , (* 518*)  311 , (* 519*)  312
         , (* 520*)  313 , (* 521*)  314 , (* 522*)  315 , (* 523*)  316
         , (* 524*)  317 , (* 525*)  318 , (* 526*)  319 , (* 527*)   44
         , (* 528*)   58 , (* 529*)  322 , (* 530*)  302 , (* 531*)   43
         , (* 532*)    0 , (* 533*)    0 , (* 534*)   48 , (* 535*)    0
         , (* 536*)    0 , (* 537*)    0 , (* 538*)    0 , (* 539*)  347
         , (* 540*)    0 , (* 541*)   58 , (* 542*)    0 , (* 543*)    0
         , (* 544*)    0 , (* 545*)   88 , (* 546*)   91 , (* 547*)   92
         , (* 548*)  106 , (* 549*)    0 , (* 550*)    0 , (* 551*)    0
         , (* 552*)  351 , (* 553*)    0 , (* 554*)   49 , (* 555*)    0
         , (* 556*)    0 , (* 557*)    0 , (* 558*)    0 , (* 559*)    0
         , (* 560*)    0 , (* 561*)    0 , (* 562*)   58 , (* 563*)    0
         , (* 564*)    0 , (* 565*)  361 , (* 566*)    0 , (* 567*)    0
         , (* 568*)    0 , (* 569*)  304 , (* 570*)  305 , (* 571*)  306
         , (* 572*)  307 , (* 573*)  308 , (* 574*)  309 , (* 575*)  310
         , (* 576*)  311 , (* 577*)  312 , (* 578*)  313 , (* 579*)  314
         , (* 580*)  315 , (* 581*)  316 , (* 582*)  317 , (* 583*)  318
         , (* 584*)  319 , (* 585*)   44 , (* 586*)  363 , (* 587*)  322
         , (* 588*)    0 , (* 589*)    0 , (* 590*)    0 , (* 591*)  371
         , (* 592*)   48 , (* 593*)  140 , (* 594*)  142 , (* 595*)   51
         , (* 596*)    0 , (* 597*)    0 , (* 598*)    0 , (* 599*)    0
         , (* 600*)    0 , (* 601*)    0 , (* 602*)    0 , (* 603*)   88
         , (* 604*)   91 , (* 605*)   92 , (* 606*)  106 , (* 607*)    0
         , (* 608*)    0 , (* 609*)    0 , (* 610*)    0 , (* 611*)    0
         , (* 612*)    0 , (* 613*)    0 , (* 614*)    0 , (* 615*)    0
         , (* 616*)    0 , (* 617*)    0 , (* 618*)    0 , (* 619*)    0
         , (* 620*)    0 , (* 621*)    0 , (* 622*)    0 , (* 623*)    0
         , (* 624*)    0 , (* 625*)   62 , (* 626*)   76 , (* 627*)  330
         , (* 628*)   66 , (* 629*)   77 , (* 630*)    0 , (* 631*)   78
         , (* 632*)    0 , (* 633*)  331 , (* 634*)    0 , (* 635*)  327
         , (* 636*)   72 , (* 637*)   73 , (* 638*)   62 , (* 639*)   76
         , (* 640*)  330 , (* 641*)   66 , (* 642*)   77 , (* 643*)    0
         , (* 644*)   78 , (* 645*)    0 , (* 646*)  331 , (* 647*)    0
         , (* 648*)  327 , (* 649*)   72 , (* 650*)   73 , (* 651*)    0
         , (* 652*)    0 , (* 653*)    0 , (* 654*)    0 , (* 655*)  302
         , (* 656*)   43 , (* 657*)    0 , (* 658*)    0 , (* 659*)   62
         , (* 660*)   76 , (* 661*)  330 , (* 662*)   66 , (* 663*)   77
         , (* 664*)  366 , (* 665*)   78 , (* 666*)    0 , (* 667*)  331
         , (* 668*)    0 , (* 669*)  327 , (* 670*)   72 , (* 671*)   73
         , (* 672*)    0 , (* 673*)    0 , (* 674*)    0 , (* 675*)    0
         , (* 676*)    0 , (* 677*)    0 , (* 678*)    0 , (* 679*)    0
         , (* 680*)    0 , (* 681*)    0 , (* 682*)    0 , (* 683*)    0
         , (* 684*)    0 , (* 685*)    0 , (* 686*)    0 , (* 687*)    0
         , (* 688*)    0 , (* 689*)  149 , (* 690*)    0 , (* 691*)    0
         , (* 692*)    0 , (* 693*)    0 , (* 694*)  304 , (* 695*)  305
         , (* 696*)  306 , (* 697*)  307 , (* 698*)  308 , (* 699*)  309
         , (* 700*)  310 , (* 701*)  311 , (* 702*)  312 , (* 703*)  313
         , (* 704*)  314 , (* 705*)  315 , (* 706*)  316 , (* 707*)  317
         , (* 708*)  318 , (* 709*)  319 , (* 710*)   44 , (* 711*)    0
         , (* 712*)  322 , (* 713*)  302 , (* 714*)   43 , (* 715*)    0
         , (* 716*)   34 , (* 717*)   48 , (* 718*)  364 , (* 719*)  151
         , (* 720*)    0 , (* 721*)    0 , (* 722*)  368 , (* 723*)    0
         , (* 724*)    0 , (* 725*)  127 , (* 726*)   58 , (* 727*)  367
         , (* 728*)   88 , (* 729*)   91 , (* 730*)   92 , (* 731*)  106
         , (* 732*)  133 , (* 733*)    0 , (* 734*)  370 , (* 735*)    0
         , (* 736*)    0 , (* 737*)  139 , (* 738*)    0 , (* 739*)  372
         , (* 740*)    0 , (* 741*)    0 , (* 742*)    0 , (* 743*)    0
         , (* 744*)    0 , (* 745*)    0 , (* 746*)    0 , (* 747*)    0
         , (* 748*)    0 , (* 749*)    0 , (* 750*)  152 , (* 751*)    0
         , (* 752*)  304 , (* 753*)  305 , (* 754*)  306 , (* 755*)  307
         , (* 756*)  308 , (* 757*)  309 , (* 758*)  310 , (* 759*)  311
         , (* 760*)  312 , (* 761*)  313 , (* 762*)  314 , (* 763*)  315
         , (* 764*)  316 , (* 765*)  317 , (* 766*)  318 , (* 767*)  319
         , (* 768*)   44 , (* 769*)   58 , (* 770*)  322 , (* 771*)    0
         , (* 772*)    0 , (* 773*)    0 , (* 774*)    0 , (* 775*)   48
         , (* 776*)    0 , (* 777*)    0 , (* 778*)    0 , (* 779*)    0
         , (* 780*)    0 , (* 781*)    0 , (* 782*)   58 , (* 783*)    0
         , (* 784*)    0 , (* 785*)    0 , (* 786*)   88 , (* 787*)   91
         , (* 788*)   92 , (* 789*)  106 , (* 790*)    0 , (* 791*)    0
         , (* 792*)  143 , (* 793*)  374 , (* 794*)  379 , (* 795*)    0
         , (* 796*)    0 , (* 797*)    0 , (* 798*)    0 , (* 799*)    0
         , (* 800*)    0 , (* 801*)    0 , (* 802*)    0 , (* 803*)    0
         , (* 804*)    0 , (* 805*)    0 , (* 806*)  152 , (* 807*)    0
         , (* 808*)    0 , (* 809*)    0 , (* 810*)    0 , (* 811*)    0
         , (* 812*)    0 , (* 813*)    0 , (* 814*)  380 , (* 815*)  381
         , (* 816*)  156 , (* 817*)    0 , (* 818*)    0 , (* 819*)    0
         , (* 820*)    0 , (* 821*)    0 , (* 822*)    0 , (* 823*)   62
         , (* 824*)   76 , (* 825*)  330 , (* 826*)   66 , (* 827*)   77
         , (* 828*)    0 , (* 829*)   78 , (* 830*)    0 , (* 831*)  331
         , (* 832*)    0 , (* 833*)  327 , (* 834*)   72 , (* 835*)   73
         , (* 836*)    0 , (* 837*)    0 , (* 838*)   34 , (* 839*)    0
         , (* 840*)  364 , (* 841*)    0 , (* 842*)    0 , (* 843*)    0
         , (* 844*)  154 , (* 845*)  378 , (* 846*)  376 , (* 847*)  127
         , (* 848*)    0 , (* 849*)  367 , (* 850*)    0 , (* 851*)    0
         , (* 852*)    0 , (* 853*)    0 , (* 854*)  133 , (* 855*)  171
         , (* 856*)  370 , (* 857*)    0 , (* 858*)    0 , (* 859*)  139
         , (* 860*)    0 , (* 861*)  372 , (* 862*)   58 , (* 863*)    0
         , (* 864*)    0 , (* 865*)    0 , (* 866*)   62 , (* 867*)   76
         , (* 868*)  330 , (* 869*)   66 , (* 870*)   77 , (* 871*)    0
         , (* 872*)   78 , (* 873*)    0 , (* 874*)  331 , (* 875*)    0
         , (* 876*)  327 , (* 877*)   72 , (* 878*)   73 , (* 879*)   62
         , (* 880*)   76 , (* 881*)  330 , (* 882*)   66 , (* 883*)   77
         , (* 884*)  169 , (* 885*)   78 , (* 886*)  152 , (* 887*)  331
         , (* 888*)    0 , (* 889*)  327 , (* 890*)   72 , (* 891*)   73
         , (* 892*)    0 , (* 893*)    0 , (* 894*)    0 , (* 895*)    0
         , (* 896*)    0 , (* 897*)  181 , (* 898*)    0 , (* 899*)    0
         , (* 900*)    0 , (* 901*)  375 , (* 902*)  376 , (* 903*)    0
         , (* 904*)    0 , (* 905*)    0 , (* 906*)    0 , (* 907*)    0
         , (* 908*)    0 , (* 909*)    0 , (* 910*)    0 , (* 911*)   34
         , (* 912*)    0 , (* 913*)  364 , (* 914*)  143 , (* 915*)    0
         , (* 916*)  379 , (* 917*)    0 , (* 918*)    0 , (* 919*)    0
         , (* 920*)  127 , (* 921*)    0 , (* 922*)  367 , (* 923*)    0
         , (* 924*)   34 , (* 925*)    0 , (* 926*)  364 , (* 927*)  133
         , (* 928*)    0 , (* 929*)  370 , (* 930*)    0 , (* 931*)    0
         , (* 932*)  139 , (* 933*)  127 , (* 934*)  372 , (* 935*)  367
         , (* 936*)  382 , (* 937*)  381 , (* 938*)    0 , (* 939*)    0
         , (* 940*)  133 , (* 941*)    0 , (* 942*)  370 , (* 943*)    0
         , (* 944*)    0 , (* 945*)  139 , (* 946*)    0 , (* 947*)  372
         , (* 948*)    0 , (* 949*)    0 , (* 950*)    0 , (* 951*)    0
         , (* 952*)    0 , (* 953*)    0 , (* 954*)    0 , (* 955*)    0
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)   62
         , (* 960*)   76 , (* 961*)  330 , (* 962*)   66 , (* 963*)   77
         , (* 964*)    0 , (* 965*)   78 , (* 966*)    0 , (* 967*)  331
         , (* 968*)    0 , (* 969*)  327 , (* 970*)   72 , (* 971*)   73
         , (* 972*)    0 , (* 973*)    0 , (* 974*)    0 , (* 975*)    0
         , (* 976*)    0 , (* 977*)    0 , (* 978*)    0 , (* 979*)    0
         , (* 980*)  154 , (* 981*)  378 , (* 982*)  376 , (* 983*)    0
         , (* 984*)    0 , (* 985*)    0 , (* 986*)    0 , (* 987*)  143
         , (* 988*)    0 , (* 989*)  379 , (* 990*)    0 , (* 991*)    0
         , (* 992*)    0 , (* 993*)    0 , (* 994*)    0 , (* 995*)    0
         , (* 996*)    0 , (* 997*)    0 , (* 998*)    0 , (* 999*)    0
         , (*1000*)  143 , (*1001*)    0 , (*1002*)  379 , (*1003*)    0
         , (*1004*)    0 , (*1005*)    0 , (*1006*)    0 , (*1007*)    0
         , (*1008*)    0 , (*1009*)  380 , (*1010*)  381 , (*1011*)  156
         , (*1012*)    0 , (*1013*)    0 , (*1014*)    0 , (*1015*)    0
         , (*1016*)    0 , (*1017*)    0 , (*1018*)    0 , (*1019*)    0
         , (*1020*)    0 , (*1021*)    0 , (*1022*)  380 , (*1023*)  381
         , (*1024*)  156 , (*1025*)    0 , (*1026*)    0 , (*1027*)    0
         , (*1028*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 384(P   1)*)    2 , (*A 385(P   2)*)    1 , (*A 386(P   3)*)    1
         , (*A 387(P   4)*)    1 , (*A 388(P   5)*)    1 , (*A 389(P   6)*)    1
         , (*A 390(P   7)*)    1 , (*A 391(P   8)*)    1 , (*A 392(P   9)*)    1
         , (*A 393(P  10)*)    1 , (*A 394(P  11)*)    2 , (*A 395(P  12)*)    0
         , (*A 396(P  13)*)    0 , (*A 397(P  14)*)    0 , (*A 398(P  15)*)    0
         , (*A 399(P  16)*)    0 , (*A 400(P  17)*)    0 , (*A 401(P  18)*)    3
         , (*A 402(P  19)*)    7 , (*A 403(P  20)*)    3 , (*A 404(P  21)*)    5
         , (*A 405(P  22)*)    3 , (*A 406(P  23)*)    7 , (*A 407(P  24)*)    4
         , (*A 408(P  25)*)    7 , (*A 409(P  26)*)    3 , (*A 410(P  27)*)    9
         , (*A 411(P  28)*)    3 , (*A 412(P  29)*)    8 , (*A 413(P  30)*)    1
         , (*A 414(P  31)*)    0 , (*A 415(P  32)*)    0 , (*A 416(P  33)*)    1
         , (*A 417(P  34)*)    0 , (*A 418(P  35)*)    1 , (*A 419(P  36)*)    1
         , (*A 420(P  37)*)    3 , (*A 421(P  38)*)    1 , (*A 422(P  39)*)    3
         , (*A 423(P  40)*)    3 , (*A 424(P  41)*)    0 , (*A 425(P  42)*)    0
         , (*A 426(P  43)*)    1 , (*A 427(P  44)*)    1 , (*A 428(P  45)*)    3
         , (*A 429(P  46)*)    1 , (*A 430(P  47)*)    3 , (*A 431(P  48)*)    1
         , (*A 432(P  49)*)    1 , (*A 433(P  50)*)    2 , (*A 434(P  51)*)    3
         , (*A 435(P  52)*)    0 , (*A 436(P  53)*)    0 , (*A 437(P  54)*)    2
         , (*A 438(P  55)*)    0 , (*A 439(P  56)*)    3 , (*A 440(P  57)*)    1
         , (*A 441(P  58)*)    3 , (*A 442(P  59)*)    2 , (*A 443(P  60)*)    4
         , (*A 444(P  61)*)    3 , (*A 445(P  62)*)    0 , (*A 446(P  63)*)    2
         , (*A 447(P  64)*)    1 , (*A 448(P  65)*)    3 , (*A 449(P  66)*)    3
         , (*A 450(P  67)*)    3 , (*A 451(P  68)*)    2 , (*A 452(P  69)*)    0
         , (*A 453(P  70)*)    1 , (*A 454(P  71)*)    2 , (*A 455(P  72)*)    0
         , (*A 456(P  73)*)    1 , (*A 457(P  74)*)    2 , (*A 458(P  75)*)    3
         , (*A 459(P  76)*)    1 , (*A 460(P  77)*)    4 , (*A 461(P  78)*)    1
         , (*A 462(P  79)*)    1 , (*A 463(P  80)*)    1 , (*A 464(P  81)*)    2
         , (*A 465(P  82)*)    0 , (*A 466(P  83)*)    1 , (*A 467(P  84)*)    2
         , (*A 468(P  85)*)    3 , (*A 469(P  86)*)    1 , (*A 470(P  87)*)    3
         , (*A 471(P  88)*)    1 , (*A 472(P  89)*)    1 , (*A 473(P  90)*)    1
         , (*A 474(P  91)*)    2 , (*A 475(P  92)*)    0 , (*A 476(P  93)*)    1
         , (*A 477(P  94)*)    2 , (*A 478(P  95)*)    3 , (*A 479(P  96)*)    3
         , (*A 480(P  97)*)    1 , (*A 481(P  98)*)    2 , (*A 482(P  99)*)    0
         , (*A 483(P 100)*)    1 , (*A 484(P 101)*)    2 , (*A 485(P 102)*)    3
         , (*A 486(P 103)*)    3 , (*A 487(P 104)*)    1 , (*A 488(P 105)*)    2
         , (*A 489(P 106)*)    0 , (*A 490(P 107)*)    2 , (*A 491(P 108)*)    0
         , (*A 492(P 109)*)    1 , (*A 493(P 110)*)    2 , (*A 494(P 111)*)    1
         , (*A 495(P 112)*)    1 , (*A 496(P 113)*)    1 , (*A 497(P 114)*)    1
         , (*A 498(P 115)*)    1 , (*A 499(P 116)*)    1 , (*A 500(P 117)*)    1
         , (*A 501(P 118)*)    1 , (*A 502(P 119)*)    1 , (*A 503(P 120)*)    1
         , (*A 504(P 121)*)    1 , (*A 505(P 122)*)    1 , (*A 506(P 123)*)    1
         , (*A 507(P 124)*)    1 , (*A 508(P 125)*)    1 , (*A 509(P 126)*)    1
         , (*A 510(P 127)*)    1 , (*A 511(P 128)*)    3 , (*A 512(P 129)*)    0
         , (*A 513(P 130)*)    1 , (*A 514(P 131)*)    1 , (*A 515(P 132)*)    3
         , (*A 516(P 133)*)    1 , (*A 517(P 134)*)    1 , (*A 518(P 135)*)    0
         , (*A 519(P 136)*)    2 , (*A 520(P 137)*)    1 , (*A 521(P 138)*)    3
         , (*A 522(P 139)*)    1 , (*A 523(P 140)*)    3 , (*A 524(P 141)*)    0
         , (*A 525(P 142)*)    1 , (*A 526(P 143)*)    3 , (*A 527(P 144)*)    1
         , (*A 528(P 145)*)    3 , (*A 529(P 146)*)    1 , (*A 530(P 147)*)    2
         , (*A 531(P 148)*)    0 , (*A 532(P 149)*)    1 , (*A 533(P 150)*)    3
         , (*A 534(P 151)*)    1 , (*A 535(P 152)*)    3 , (*A 536(P 153)*)    1
         , (*A 537(P 154)*)    3 , (*A 538(P 155)*)    0 , (*A 539(P 156)*)    1
         , (*A 540(P 157)*)    2 , (*A 541(P 158)*)    0 , (*A 542(P 159)*)    1
         , (*A 543(P 160)*)    1 , (*A 544(P 161)*)    3 , (*A 545(P 162)*)    5
         , (*A 546(P 163)*)    1 , (*A 547(P 164)*)    1 , (*A 548(P 165)*)    2
         , (*A 549(P 166)*)    3 , (*A 550(P 167)*)    3 , (*A 551(P 168)*)    0
         , (*A 552(P 169)*)    2 , (*A 553(P 170)*)    3 , (*A 554(P 171)*)    1
         , (*A 555(P 172)*)    0 , (*A 556(P 173)*)    1 , (*A 557(P 174)*)    1
         , (*A 558(P 175)*)    1 , (*A 559(P 176)*)    4 , (*A 560(P 177)*)    1
         , (*A 561(P 178)*)    2 , (*A 562(P 179)*)    0 , (*A 563(P 180)*)    2
         , (*A 564(P 181)*)    0 , (*A 565(P 182)*)    2 , (*A 566(P 183)*)    0
         , (*A 567(P 184)*)    0 , (*A 568(P 185)*)    2 , (*A 569(P 186)*)    4
         , (*A 570(P 187)*)    2 , (*A 571(P 188)*)    3 , (*A 572(P 189)*)    1
         , (*A 573(P 190)*)    1 , (*A 574(P 191)*)    4 , (*A 575(P 192)*)    1
         , (*A 576(P 193)*)    1 , (*A 577(P 194)*)    3 , (*A 578(P 195)*)    1
         , (*A 579(P 196)*)    3 , (*A 580(P 197)*)    1 , (*A 581(P 198)*)    2
         , (*A 582(P 199)*)    1 , (*A 583(P 200)*)    3 , (*A 584(P 201)*)    1
         , (*A 585(P 202)*)    3 , (*A 586(P 203)*)    1 , (*A 587(P 204)*)    3
         , (*A 588(P 205)*)    1 , (*A 589(P 206)*)    2 , (*A 590(P 207)*)    2
         , (*A 591(P 208)*)    3 , (*A 592(P 209)*)    1 , (*A 593(P 210)*)    2
         , (*A 594(P 211)*)    1 , (*A 595(P 212)*)    3 , (*A 596(P 213)*)    1
         , (*A 597(P 214)*)    3 , (*A 598(P 215)*)    1 , (*A 599(P 216)*)    3
         , (*A 600(P 217)*)    3 , (*A 601(P 218)*)    0 , (*A 602(P 219)*)    1
         , (*A 603(P 220)*)    3 , (*A 604(P 221)*)    1 , (*A 605(P 222)*)    3
         , (*A 606(P 223)*)    1 , (*A 607(P 224)*)    1 , (*A 608(P 225)*)    1
         , (*A 609(P 226)*)    1 , (*A 610(P 227)*)    1 , (*A 611(P 228)*)    1
         , (*A 612(P 229)*)    1 , (*A 613(P 230)*)    1 , (*A 614(P 231)*)    1
         , (*A 615(P 232)*)    1 , (*A 616(P 233)*)    1 , (*A 617(P 234)*)    3
         , (*A 618(P 235)*)    1 , (*A 619(P 236)*)    1 , (*A 620(P 237)*)    1
         , (*A 621(P 238)*)    1 , (*A 622(P 239)*)    1 , (*A 623(P 240)*)    1
         , (*A 624(P 241)*)    1 , (*A 625(P 242)*)    1 , (*A 626(P 243)*)    1
         , (*A 627(P 244)*)    1 , (*A 628(P 245)*)    1 , (*A 629(P 246)*)    1
         , (*A 630(P 247)*)    1 , (*A 631(P 248)*)    1 , (*A 632(P 249)*)    1
         , (*A 633(P 250)*)    1 , (*A 634(P 251)*)    0 , (*A 635(P 252)*)    5
         , (*A 636(P 253)*)    1 , (*A 637(P 254)*)    1 , (*A 638(P 255)*)    1
         , (*A 639(P 256)*)    1 , (*A 640(P 257)*)    1 , (*A 641(P 258)*)    1
         , (*A 642(P 259)*)    0 , (*A 643(P 260)*)    1 , (*A 644(P 261)*)    1
         , (*A 645(P 262)*)    2 , (*A 646(P 263)*)    0 , (*A 647(P 264)*)    2
         , (*A 648(P 265)*)    1 , (*A 649(P 266)*)    3 , (*A 650(P 267)*)    1
         , (*A 651(P 268)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 384(P   1)*)  261 , (*A 385(P   2)*)  109 , (*A 386(P   3)*)  109
         , (*A 387(P   4)*)  109 , (*A 388(P   5)*)  109 , (*A 389(P   6)*)  109
         , (*A 390(P   7)*)  109 , (*A 391(P   8)*)  115 , (*A 392(P   9)*)  116
         , (*A 393(P  10)*)  117 , (*A 394(P  11)*)  117 , (*A 395(P  12)*)  119
         , (*A 396(P  13)*)  120 , (*A 397(P  14)*)  121 , (*A 398(P  15)*)  122
         , (*A 399(P  16)*)  123 , (*A 400(P  17)*)  124 , (*A 401(P  18)*)  126
         , (*A 402(P  19)*)  113 , (*A 403(P  20)*)  129 , (*A 404(P  21)*)  108
         , (*A 405(P  22)*)  131 , (*A 406(P  23)*)  114 , (*A 407(P  24)*)  132
         , (*A 408(P  25)*)  110 , (*A 409(P  26)*)  134 , (*A 410(P  27)*)  111
         , (*A 411(P  28)*)  136 , (*A 412(P  29)*)  112 , (*A 413(P  30)*)  125
         , (*A 414(P  31)*)  125 , (*A 415(P  32)*)  138 , (*A 416(P  33)*)  139
         , (*A 417(P  34)*)  139 , (*A 418(P  35)*)  140 , (*A 419(P  36)*)  141
         , (*A 420(P  37)*)  141 , (*A 421(P  38)*)  142 , (*A 422(P  39)*)  142
         , (*A 423(P  40)*)  143 , (*A 424(P  41)*)  143 , (*A 425(P  42)*)  144
         , (*A 426(P  43)*)  144 , (*A 427(P  44)*)  145 , (*A 428(P  45)*)  145
         , (*A 429(P  46)*)  146 , (*A 430(P  47)*)  146 , (*A 431(P  48)*)  147
         , (*A 432(P  49)*)  147 , (*A 433(P  50)*)  147 , (*A 434(P  51)*)  128
         , (*A 435(P  52)*)  148 , (*A 436(P  53)*)  150 , (*A 437(P  54)*)  149
         , (*A 438(P  55)*)  149 , (*A 439(P  56)*)  151 , (*A 440(P  57)*)  152
         , (*A 441(P  58)*)  152 , (*A 442(P  59)*)  151 , (*A 443(P  60)*)  153
         , (*A 444(P  61)*)  153 , (*A 445(P  62)*)  118 , (*A 446(P  63)*)  118
         , (*A 447(P  64)*)  154 , (*A 448(P  65)*)  154 , (*A 449(P  66)*)  135
         , (*A 450(P  67)*)  127 , (*A 451(P  68)*)  156 , (*A 452(P  69)*)  156
         , (*A 453(P  70)*)  157 , (*A 454(P  71)*)  159 , (*A 455(P  72)*)  158
         , (*A 456(P  73)*)  158 , (*A 457(P  74)*)  160 , (*A 458(P  75)*)  160
         , (*A 459(P  76)*)  162 , (*A 460(P  77)*)  161 , (*A 461(P  78)*)  165
         , (*A 462(P  79)*)  165 , (*A 463(P  80)*)  166 , (*A 464(P  81)*)  168
         , (*A 465(P  82)*)  167 , (*A 466(P  83)*)  167 , (*A 467(P  84)*)  169
         , (*A 468(P  85)*)  169 , (*A 469(P  86)*)  171 , (*A 470(P  87)*)  170
         , (*A 471(P  88)*)  172 , (*A 472(P  89)*)  172 , (*A 473(P  90)*)  173
         , (*A 474(P  91)*)  175 , (*A 475(P  92)*)  174 , (*A 476(P  93)*)  174
         , (*A 477(P  94)*)  176 , (*A 478(P  95)*)  176 , (*A 479(P  96)*)  177
         , (*A 480(P  97)*)  178 , (*A 481(P  98)*)  180 , (*A 482(P  99)*)  179
         , (*A 483(P 100)*)  179 , (*A 484(P 101)*)  181 , (*A 485(P 102)*)  181
         , (*A 486(P 103)*)  182 , (*A 487(P 104)*)  183 , (*A 488(P 105)*)  163
         , (*A 489(P 106)*)  163 , (*A 490(P 107)*)  184 , (*A 491(P 108)*)  184
         , (*A 492(P 109)*)  155 , (*A 493(P 110)*)  155 , (*A 494(P 111)*)  155
         , (*A 495(P 112)*)  155 , (*A 496(P 113)*)  155 , (*A 497(P 114)*)  155
         , (*A 498(P 115)*)  155 , (*A 499(P 116)*)  155 , (*A 500(P 117)*)  155
         , (*A 501(P 118)*)  155 , (*A 502(P 119)*)  155 , (*A 503(P 120)*)  155
         , (*A 504(P 121)*)  155 , (*A 505(P 122)*)  155 , (*A 506(P 123)*)  155
         , (*A 507(P 124)*)  155 , (*A 508(P 125)*)  155 , (*A 509(P 126)*)  155
         , (*A 510(P 127)*)  201 , (*A 511(P 128)*)  203 , (*A 512(P 129)*)  202
         , (*A 513(P 130)*)  202 , (*A 514(P 131)*)  204 , (*A 515(P 132)*)  204
         , (*A 516(P 133)*)  205 , (*A 517(P 134)*)  155 , (*A 518(P 135)*)  206
         , (*A 519(P 136)*)  206 , (*A 520(P 137)*)  207 , (*A 521(P 138)*)  207
         , (*A 522(P 139)*)  208 , (*A 523(P 140)*)  155 , (*A 524(P 141)*)  209
         , (*A 525(P 142)*)  209 , (*A 526(P 143)*)  209 , (*A 527(P 144)*)  210
         , (*A 528(P 145)*)  210 , (*A 529(P 146)*)  212 , (*A 530(P 147)*)  211
         , (*A 531(P 148)*)  214 , (*A 532(P 149)*)  214 , (*A 533(P 150)*)  214
         , (*A 534(P 151)*)  215 , (*A 535(P 152)*)  215 , (*A 536(P 153)*)  217
         , (*A 537(P 154)*)  216 , (*A 538(P 155)*)  218 , (*A 539(P 156)*)  218
         , (*A 540(P 157)*)  218 , (*A 541(P 158)*)  219 , (*A 542(P 159)*)  219
         , (*A 543(P 160)*)  219 , (*A 544(P 161)*)  221 , (*A 545(P 162)*)  220
         , (*A 546(P 163)*)  155 , (*A 547(P 164)*)  222 , (*A 548(P 165)*)  155
         , (*A 549(P 166)*)  213 , (*A 550(P 167)*)  223 , (*A 551(P 168)*)  226
         , (*A 552(P 169)*)  226 , (*A 553(P 170)*)  227 , (*A 554(P 171)*)  227
         , (*A 555(P 172)*)  229 , (*A 556(P 173)*)  229 , (*A 557(P 174)*)  229
         , (*A 558(P 175)*)  229 , (*A 559(P 176)*)  228 , (*A 560(P 177)*)  230
         , (*A 561(P 178)*)  231 , (*A 562(P 179)*)  231 , (*A 563(P 180)*)  232
         , (*A 564(P 181)*)  232 , (*A 565(P 182)*)  224 , (*A 566(P 183)*)  224
         , (*A 567(P 184)*)  225 , (*A 568(P 185)*)  225 , (*A 569(P 186)*)  225
         , (*A 570(P 187)*)  233 , (*A 571(P 188)*)  235 , (*A 572(P 189)*)  234
         , (*A 573(P 190)*)  236 , (*A 574(P 191)*)  234 , (*A 575(P 192)*)  164
         , (*A 576(P 193)*)  237 , (*A 577(P 194)*)  237 , (*A 578(P 195)*)  238
         , (*A 579(P 196)*)  238 , (*A 580(P 197)*)  239 , (*A 581(P 198)*)  239
         , (*A 582(P 199)*)  240 , (*A 583(P 200)*)  240 , (*A 584(P 201)*)  241
         , (*A 585(P 202)*)  241 , (*A 586(P 203)*)  243 , (*A 587(P 204)*)  243
         , (*A 588(P 205)*)  245 , (*A 589(P 206)*)  245 , (*A 590(P 207)*)  247
         , (*A 591(P 208)*)  247 , (*A 592(P 209)*)  247 , (*A 593(P 210)*)  247
         , (*A 594(P 211)*)  247 , (*A 595(P 212)*)  249 , (*A 596(P 213)*)  250
         , (*A 597(P 214)*)  250 , (*A 598(P 215)*)  251 , (*A 599(P 216)*)  251
         , (*A 600(P 217)*)  250 , (*A 601(P 218)*)  252 , (*A 602(P 219)*)  252
         , (*A 603(P 220)*)  252 , (*A 604(P 221)*)  253 , (*A 605(P 222)*)  253
         , (*A 606(P 223)*)  249 , (*A 607(P 224)*)  249 , (*A 608(P 225)*)  249
         , (*A 609(P 226)*)  249 , (*A 610(P 227)*)  249 , (*A 611(P 228)*)  249
         , (*A 612(P 229)*)  249 , (*A 613(P 230)*)  249 , (*A 614(P 231)*)  249
         , (*A 615(P 232)*)  249 , (*A 616(P 233)*)  249 , (*A 617(P 234)*)  249
         , (*A 618(P 235)*)  242 , (*A 619(P 236)*)  242 , (*A 620(P 237)*)  242
         , (*A 621(P 238)*)  242 , (*A 622(P 239)*)  242 , (*A 623(P 240)*)  242
         , (*A 624(P 241)*)  242 , (*A 625(P 242)*)  244 , (*A 626(P 243)*)  244
         , (*A 627(P 244)*)  244 , (*A 628(P 245)*)  246 , (*A 629(P 246)*)  246
         , (*A 630(P 247)*)  246 , (*A 631(P 248)*)  246 , (*A 632(P 249)*)  248
         , (*A 633(P 250)*)  248 , (*A 634(P 251)*)  254 , (*A 635(P 252)*)  137
         , (*A 636(P 253)*)  255 , (*A 637(P 254)*)  255 , (*A 638(P 255)*)  255
         , (*A 639(P 256)*)  255 , (*A 640(P 257)*)  255 , (*A 641(P 258)*)  255
         , (*A 642(P 259)*)  130 , (*A 643(P 260)*)  130 , (*A 644(P 261)*)  257
         , (*A 645(P 262)*)  257 , (*A 646(P 263)*)  133 , (*A 647(P 264)*)  133
         , (*A 648(P 265)*)  258 , (*A 649(P 266)*)  258 , (*A 650(P 267)*)  259
         , (*A 651(P 268)*)  260
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)    9
         , (*:  12*)    9 , (*:  13*)   95 , (*:  14*)   30
         , (*:  15*)   95 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   66 , (*:  20*)   95
         , (*:  21*)   95 , (*:  22*)   69 , (*:  23*)   70
         , (*:  24*)   70 , (*:  25*)   95 , (*:  26*)   19
         , (*:  27*)   95 , (*:  28*)   67 , (*:  29*)   19
         , (*:  30*)   95 , (*:  31*)   19 , (*:  32*)   95
         , (*:  33*)   67 , (*:  34*)    9 , (*:  35*)    9
         , (*:  36*)   66 , (*:  37*)   68 , (*:  38*)   95
         , (*:  39*)   95 , (*:  40*)   52 , (*:  41*)   11
         , (*:  42*)   95 , (*:  43*)   19 , (*:  44*)   76
         , (*:  45*)   76 , (*:  46*)   76 , (*:  47*)   95
         , (*:  48*)   19 , (*:  49*)   19 , (*:  50*)   95
         , (*:  51*)   19 , (*:  52*)   19 , (*:  53*)   96
         , (*:  54*)   96 , (*:  55*)   96 , (*:  56*)   67
         , (*:  57*)   95 , (*:  58*)    5 , (*:  59*)   70
         , (*:  60*)   67 , (*:  61*)   96 , (*:  62*)   19
         , (*:  63*)   96 , (*:  64*)   19 , (*:  65*)   96
         , (*:  66*)    5 , (*:  67*)   96 , (*:  68*)    5
         , (*:  69*)   96 , (*:  70*)    5 , (*:  71*)   96
         , (*:  72*)   96 , (*:  73*)    5 , (*:  74*)   95
         , (*:  75*)   96 , (*:  76*)   19 , (*:  77*)    5
         , (*:  78*)    5 , (*:  79*)   81 , (*:  80*)   96
         , (*:  81*)   70 , (*:  82*)   96 , (*:  83*)   70
         , (*:  84*)    5 , (*:  85*)   19 , (*:  86*)   19
         , (*:  87*)   19 , (*:  88*)   39 , (*:  89*)   39
         , (*:  90*)   39 , (*:  91*)   19 , (*:  92*)   19
         , (*:  93*)   19 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   69 , (*:  98*)   70
         , (*:  99*)   70 , (*: 100*)   70 , (*: 101*)   70
         , (*: 102*)   95 , (*: 103*)   66 , (*: 104*)   66
         , (*: 105*)   95 , (*: 106*)   69 , (*: 107*)   19
         , (*: 108*)   95 , (*: 109*)   19 , (*: 110*)    6
         , (*: 111*)   76 , (*: 112*)   76 , (*: 113*)   76
         , (*: 114*)   95 , (*: 115*)   66 , (*: 116*)   96
         , (*: 117*)   19 , (*: 118*)   19 , (*: 119*)   19
         , (*: 120*)   19 , (*: 121*)   68 , (*: 122*)   96
         , (*: 123*)   19 , (*: 124*)   68 , (*: 125*)   96
         , (*: 126*)   66 , (*: 127*)    9 , (*: 128*)    9
         , (*: 129*)   66 , (*: 130*)   68 , (*: 131*)   95
         , (*: 132*)   66 , (*: 133*)    9 , (*: 134*)   68
         , (*: 135*)   95 , (*: 136*)    9 , (*: 137*)   66
         , (*: 138*)   66 , (*: 139*)    9 , (*: 140*)    9
         , (*: 141*)   66 , (*: 142*)   66 , (*: 143*)   69
         , (*: 144*)   66 , (*: 145*)    9 , (*: 146*)   95
         , (*: 147*)   66 , (*: 148*)    9 , (*: 149*)    9
         , (*: 150*)   19 , (*: 151*)   19 , (*: 152*)   74
         , (*: 153*)   96 , (*: 154*)   19 , (*: 155*)   19
         , (*: 156*)    9 , (*: 157*)   66 , (*: 158*)   95
         , (*: 159*)   66 , (*: 160*)   95 , (*: 161*)   95
         , (*: 162*)   69 , (*: 163*)   19 , (*: 164*)   95
         , (*: 165*)   67 , (*: 166*)   66 , (*: 167*)    9
         , (*: 168*)    9 , (*: 169*)    9 , (*: 170*)   19
         , (*: 171*)   19 , (*: 172*)   95 , (*: 173*)   67
         , (*: 174*)   69 , (*: 175*)   69 , (*: 176*)   70
         , (*: 177*)   70 , (*: 178*)   66 , (*: 179*)   14
         , (*: 180*)   19 , (*: 181*)   19 , (*: 182*)   95
         , (*: 183*)   67 , (*: 184*)   69 , (*: 185*)   69
         , (*: 186*)   66 , (*: 187*)    9 , (*: 188*)    9
         , (*: 189*)   95 , (*: 190*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 191)*)  391 (*P7*) , (*RR: 192)*)  413 (*P29*)
         , (*RR: 193)*)  401 (*P17*) , (*RR: 194)*)  405 (*P21*)
         , (*RR: 195)*)  418 (*P34*) , (*RR: 196)*)  443 (*P59*)
         , (*RR: 197)*)  440 (*P56*) , (*RR: 198)*)  439 (*P55*)
         , (*RR: 199)*)  441 (*P57*) , (*RR: 200)*)  442 (*P58*)
         , (*RR: 201)*)  450 (*P66*) , (*RR: 202)*)  402 (*P18*)
         , (*RR: 203)*)  453 (*P69*) , (*RR: 204)*)  570 (*P186*)
         , (*RR: 205)*)  473 (*P89*) , (*RR: 206)*)  463 (*P79*)
         , (*RR: 207)*)  480 (*P96*) , (*RR: 208)*)  404 (*P20*)
         , (*RR: 209)*)  459 (*P75*) , (*RR: 210)*)  458 (*P74*)
         , (*RR: 211)*)  547 (*P163*) , (*RR: 212)*)  522 (*P138*)
         , (*RR: 213)*)  432 (*P48*) , (*RR: 214)*)  433 (*P49*)
         , (*RR: 215)*)  510 (*P126*) , (*RR: 216)*)  430 (*P46*)
         , (*RR: 217)*)  516 (*P132*) , (*RR: 218)*)  511 (*P127*)
         , (*RR: 219)*)  421 (*P37*) , (*RR: 220)*)  422 (*P38*)
         , (*RR: 221)*)  632 (*P248*) , (*RR: 222)*)  633 (*P249*)
         , (*RR: 223)*)  595 (*P211*) , (*RR: 224)*)  606 (*P222*)
         , (*RR: 225)*)  607 (*P223*) , (*RR: 226)*)  608 (*P224*)
         , (*RR: 227)*)  609 (*P225*) , (*RR: 228)*)  610 (*P226*)
         , (*RR: 229)*)  611 (*P227*) , (*RR: 230)*)  612 (*P228*)
         , (*RR: 231)*)  615 (*P231*) , (*RR: 232)*)  616 (*P232*)
         , (*RR: 233)*)  613 (*P229*) , (*RR: 234)*)  614 (*P230*)
         , (*RR: 235)*)  624 (*P240*) , (*RR: 236)*)  618 (*P234*)
         , (*RR: 237)*)  619 (*P235*) , (*RR: 238)*)  620 (*P236*)
         , (*RR: 239)*)  621 (*P237*) , (*RR: 240)*)  622 (*P238*)
         , (*RR: 241)*)  623 (*P239*) , (*RR: 242)*)  625 (*P241*)
         , (*RR: 243)*)  626 (*P242*) , (*RR: 244)*)  627 (*P243*)
         , (*RR: 245)*)  630 (*P246*) , (*RR: 246)*)  631 (*P247*)
         , (*RR: 247)*)  628 (*P244*) , (*RR: 248)*)  629 (*P245*)
         , (*RR: 249)*)  591 (*P207*) , (*RR: 250)*)  597 (*P213*)
         , (*RR: 251)*)  596 (*P212*) , (*RR: 252)*)  600 (*P216*)
         , (*RR: 253)*)  617 (*P233*) , (*RR: 254)*)  523 (*P139*)
         , (*RR: 255)*)  544 (*P160*) , (*RR: 256)*)  529 (*P145*)
         , (*RR: 257)*)  558 (*P174*) , (*RR: 258)*)  556 (*P172*)
         , (*RR: 259)*)  557 (*P173*) , (*RR: 260)*)  550 (*P166*)
         , (*RR: 261)*)  568 (*P184*) , (*RR: 262)*)  569 (*P185*)
         , (*RR: 263)*)  536 (*P152*) , (*RR: 264)*)  545 (*P161*)
         , (*RR: 265)*)  457 (*P73*) , (*RR: 266)*)  469 (*P85*)
         , (*RR: 267)*)  468 (*P84*) , (*RR: 268)*)  461 (*P77*)
         , (*RR: 269)*)  462 (*P78*) , (*RR: 270)*)  467 (*P83*)
         , (*RR: 271)*)  471 (*P87*) , (*RR: 272)*)  472 (*P88*)
         , (*RR: 273)*)  478 (*P94*) , (*RR: 274)*)  477 (*P93*)
         , (*RR: 275)*)  485 (*P101*) , (*RR: 276)*)  484 (*P100*)
         , (*RR: 277)*)  572 (*P188*) , (*RR: 278)*)  573 (*P189*)
         , (*RR: 279)*)  574 (*P190*) , (*RR: 280)*)  635 (*P251*)
         , (*RR: 281)*)  447 (*P63*) , (*RR: 282)*)  448 (*P64*)
         , (*RR: 283)*)  406 (*P22*) , (*RR: 284)*)  408 (*P24*)
         , (*RR: 285)*)  449 (*P65*) , (*RR: 286)*)  410 (*P26*)
         , (*RR: 287)*)  412 (*P28*) , (*RR: 288)*)  409 (*P25*)
         , (*RR: 289)*)  411 (*P27*) , (*RR: 290)*)  385 (*P1*)
         , (*RR: 291)*)  386 (*P2*) , (*RR: 292)*)  387 (*P3*)
         , (*RR: 293)*)  388 (*P4*) , (*RR: 294)*)  389 (*P5*)
         , (*RR: 295)*)  390 (*P6*) , (*RR: 296)*)  403 (*P19*)
         , (*RR: 297)*)  434 (*P50*) , (*RR: 298)*)  437 (*P53*)
         , (*RR: 299)*)  444 (*P60*) , (*RR: 300)*)  423 (*P39*)
         , (*RR: 301)*)  454 (*P70*) , (*RR: 302)*)  431 (*P47*)
         , (*RR: 303)*)  493 (*P109*) , (*RR: 304)*)  494 (*P110*)
         , (*RR: 305)*)  495 (*P111*) , (*RR: 306)*)  496 (*P112*)
         , (*RR: 307)*)  497 (*P113*) , (*RR: 308)*)  498 (*P114*)
         , (*RR: 309)*)  499 (*P115*) , (*RR: 310)*)  500 (*P116*)
         , (*RR: 311)*)  501 (*P117*) , (*RR: 312)*)  502 (*P118*)
         , (*RR: 313)*)  503 (*P119*) , (*RR: 314)*)  504 (*P120*)
         , (*RR: 315)*)  505 (*P121*) , (*RR: 316)*)  506 (*P122*)
         , (*RR: 317)*)  507 (*P123*) , (*RR: 318)*)  508 (*P124*)
         , (*RR: 319)*)  509 (*P125*) , (*RR: 320)*)  515 (*P131*)
         , (*RR: 321)*)  514 (*P130*) , (*RR: 322)*)  517 (*P133*)
         , (*RR: 323)*)  520 (*P136*) , (*RR: 324)*)  605 (*P221*)
         , (*RR: 325)*)  579 (*P195*) , (*RR: 326)*)  587 (*P203*)
         , (*RR: 327)*)  588 (*P204*) , (*RR: 328)*)  589 (*P205*)
         , (*RR: 329)*)  598 (*P214*) , (*RR: 330)*)  578 (*P194*)
         , (*RR: 331)*)  586 (*P202*) , (*RR: 332)*)  599 (*P215*)
         , (*RR: 333)*)  590 (*P206*) , (*RR: 334)*)  604 (*P220*)
         , (*RR: 335)*)  603 (*P219*) , (*RR: 336)*)  602 (*P218*)
         , (*RR: 337)*)  593 (*P209*) , (*RR: 338)*)  490 (*P106*)
         , (*RR: 339)*)  486 (*P102*) , (*RR: 340)*)  521 (*P137*)
         , (*RR: 341)*)  519 (*P135*) , (*RR: 342)*)  540 (*P156*)
         , (*RR: 343)*)  528 (*P144*) , (*RR: 344)*)  553 (*P169*)
         , (*RR: 345)*)  561 (*P177*) , (*RR: 346)*)  548 (*P164*)
         , (*RR: 347)*)  565 (*P181*) , (*RR: 348)*)  428 (*P44*)
         , (*RR: 349)*)  427 (*P43*) , (*RR: 350)*)  549 (*P165*)
         , (*RR: 351)*)  563 (*P179*) , (*RR: 352)*)  559 (*P175*)
         , (*RR: 353)*)  552 (*P168*) , (*RR: 354)*)  554 (*P170*)
         , (*RR: 355)*)  530 (*P146*) , (*RR: 356)*)  526 (*P142*)
         , (*RR: 357)*)  527 (*P143*) , (*RR: 358)*)  535 (*P151*)
         , (*RR: 359)*)  533 (*P149*) , (*RR: 360)*)  534 (*P150*)
         , (*RR: 361)*)  537 (*P153*) , (*RR: 362)*)  488 (*P104*)
         , (*RR: 363)*)  460 (*P76*) , (*RR: 364)*)  636 (*P252*)
         , (*RR: 365)*)  464 (*P80*) , (*RR: 366)*)  470 (*P86*)
         , (*RR: 367)*)  637 (*P253*) , (*RR: 368)*)  479 (*P95*)
         , (*RR: 369)*)  474 (*P90*) , (*RR: 370)*)  641 (*P257*)
         , (*RR: 371)*)  481 (*P97*) , (*RR: 372)*)  639 (*P255*)
         , (*RR: 373)*)  571 (*P187*) , (*RR: 374)*)  651 (*P267*)
         , (*RR: 375)*)  649 (*P265*) , (*RR: 376)*)  650 (*P266*)
         , (*RR: 377)*)  647 (*P263*) , (*RR: 378)*)  648 (*P264*)
         , (*RR: 379)*)  640 (*P256*) , (*RR: 380)*)  644 (*P260*)
         , (*RR: 381)*)  638 (*P254*) , (*RR: 382)*)  645 (*P261*)
         , (*RR: 383)*)  407 (*P23*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 72 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 384 => (* P1 _0000_ (261): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 385,290 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 386,291 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 387,292 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 388,293 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 389,294 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 390,295 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 391,191 => (* P8 UnitId (115): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 115;
                (* line 283 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Units . UnitStackTopRef ^ . UntUnitIdentAtom := yySynAttribute . Scan . SaAtom ;
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 392 => (* P9 UnitIdImpliedEXPORTS (116): UnitId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 116;
                (* line 299 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position;
                       EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ; 
                     
              | 393 => (* P10 UnitIdAndExports (117): UnitIdImpliedEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 305 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . SaAtom (* Unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                         yySynAttribute . Scan . Position (* Of unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ;  
                     
              | 394 => (* P11 UnitIdAndExports (117): UnitId Exports .*)
                DEC (yyStackPtr, 2); yyNonterminal := 117;
                (* line 320 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                     
              | 395 => (* P12 InterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 327 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 396 => (* P13 ModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 330 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 397 => (* P14 GenInterfaceKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 333 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 398 => (* P15 GenModuleKind (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 336 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 399 => (* P16 InstInterfaceKind (123): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 123;
                (* line 339 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 400 => (* P17 InstModuleKind (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;
                (* line 342 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 401,193 => (* P18 InterfaceLt (126): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 345 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeNo := LScopeRef ^ . ScpScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 402,202 => (* P19 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 365 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 403,296 => (* P20 InterfaceMiddle (129): InterfaceLt StkSemicolon Imports .*)
                DEC (yyStackPtr, 3); yyNonterminal := 129;
                (* line 368 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 404,208 => (* P21 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 379 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                           , Ukt . UkInterface
                           , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                           ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 405,194 => (* P22 ModuleLt (131): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 406 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         LUnitRef ^ . UntKind := Ukt . UkModule
                           (* ^Could change, if it turns out to be an instantiation. *) ; 
                         FM3Pass1 . ModuleId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 406,283 => (* P23 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 428 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 407,383 => (* P24 ModuleMiddle (132): ModuleLt Exports StkSemicolon Imports .*)
                DEC (yyStackPtr, 4); yyNonterminal := 132;
                (* line 431 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 408,284 => (* P25 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 442 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_ECIP
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , LUnitRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+3] .Scan . Position
                           ) ; 
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+6] . Scan . SaAtom
                           , Ukt . UkModule
                           , yyAttributeStack^[yyStackPtr+6] . Scan . Position 
                           ) ;
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , LUnitRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 409,288 => (* P26 GenInterfaceLt (134): StkRwGENERIC StkRwINTERFACE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 480 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 410,286 => (* P27 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon Imports BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;
                (* line 497 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 411,289 => (* P28 GenModuleLt (136): StkRwGENERIC StkRwMODULE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 503 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Units . UnitStackTopRef ^ . UntScopeNo := LScopeRef . ScpScopeNo ;
                       END ; 
                     
              | 412,287 => (* P29 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 8); yyNonterminal := 112;
                (* line 520 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 413,192 => (* P30 OptUnsafe (125): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 125;
                (* line 526 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 414 => (* P31 OptUnsafe (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 527 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 415 => (* P32 CaptureCoord (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 530 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
              | 416 => (* P33 OptSemicolon (139): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 417 => (* P34 OptSemicolon (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 418,195 => (* P35 IdentRef (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 538 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 419 => (* P36 IdPlusList (141): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 542 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 420 => (* P37 IdPlusList (141): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 546 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 421,219 => (* P38 DeclIdListElems (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 558 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3Pass1 . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 422,220 => (* P39 DeclIdListElems (142): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 569 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 423,300 => (* P40 IdStarList (143): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 582 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 424 => (* P41 IdStarList (143): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 143;
                (* line 584 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 425 => (* P42 QualIdentStarList (144): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 144;
                (* line 588 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 426 => (* P43 QualIdentStarList (144): QualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 590 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 427,349 => (* P44 QualIdentPlusList (145): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 592 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 428,348 => (* P45 QualIdentPlusList (145): QualIdentPlusList StkComma QualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 594 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 429 => (* P46 QualIdent (146): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 597 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 430,216 => (* P47 QualIdent (146): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 600 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 431,302 => (* P48 TypeId (147): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 432,213 => (* P49 TypeId (147): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 609 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 433,214 => (* P50 TypeId (147): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 147;
                (* line 614 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidUNTRACEDROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 434,297 => (* P51 Imports (128): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 621 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 435 => (* P52 ImportsLt (148): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 148;
                (* line 624 of "FM3Parser.lalr" *)
                 FM3Pass1 . ImportsLt ( ) ; 
              | 436 => (* P53 ImportsRt (150): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 150;
                (* line 625 of "FM3Parser.lalr" *)
                 FM3Pass1 . ImportsRt ( ) ; 
              | 437,298 => (* P54 ImportsRecurse (149): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 149;
                (* line 627 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 438 => (* P55 ImportsRecurse (149): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 149;
                (* line 631 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 439,198 => (* P56 ImportItem (151): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 637 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 440,197 => (* P57 ImportIntfPlusList (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 641 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3Pass1 . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3Pass1 . PutBwd_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 441,199 => (* P58 ImportIntfPlusList (152): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 653 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3Pass1 . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       FM3Pass1 . PutBwd_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 442,200 => (* P59 ImportItem (151): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 667 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 443,196 => (* P60 FromImportPlusList (153): StkRwFROM IdentRef StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 153;
                (* line 671 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3Pass1 . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       FM3Pass1 . PutBwd_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 444,299 => (* P61 FromImportPlusList (153): FromImportPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 694 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       FM3Pass1 . PutBwd_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 445 => (* P62 Exports (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 735 of "FM3Parser.lalr" *)
                
                
                       (* FM3Extern . GetExternInterface
                            ( 1 . Scan . SaAtom , IsImport := FALSE ) ;
                       *) 
                     
              | 446 => (* P63 Exports (118): StkRwEXPORTS ExportPlus .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;

              | 447,281 => (* P64 ExportPlus (154): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 745 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 448,282 => (* P65 ExportPlus (154): ExportPlus StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 750 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 449,285 => (* P66 GenFormalList (135): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 758 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 450,201 => (* P67 GenActualList (127): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 764 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 451 => (* P68 OptConstType (156): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 773 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 452 => (* P69 OptConstType (156): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 156;
                (* line 775 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 453,203 => (* P70 ConstDeclGroupLt (157): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 784 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 454,301 => (* P71 ConstDeclGroup (159): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 787 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 455 => (* P72 ConstDeclList (158): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 158;
                (* line 792 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 456 => (* P73 ConstDeclList (158): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 798 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 457,265 => (* P74 ConstDeclPlus (160): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 803 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 458,210 => (* P75 ConstDeclPlus (160): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 160;
                (* line 808 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 459,209 => (* P76 ConstDeclId (162): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 826 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 460,363 => (* P77 ConstDecl (161): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 161;
                (* line 833 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 461,268 => (* P78 TypeRelation (165): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 859 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 462,269 => (* P79 TypeRelation (165): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 861 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 463,206 => (* P80 TypeDeclGroupLt (166): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 872 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 464,365 => (* P81 TypeDeclGroup (168): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 875 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 465 => (* P82 TypeDeclList (167): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 167;
                (* line 880 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 466 => (* P83 TypeDeclList (167): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 886 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 467,270 => (* P84 TypeDeclPlus (169): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 169;
                (* line 891 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 468,267 => (* P85 TypeDeclPlus (169): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 896 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 469,266 => (* P86 TypeDeclId (171): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 912 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 470,366 => (* P87 TypeDecl (170): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 170;
                (* line 919 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 471,271 => (* P88 RevelationRelation (172): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 939 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 472,272 => (* P89 RevelationRelation (172): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 941 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 473,205 => (* P90 RevelationGroupLt (173): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 952 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 474,369 => (* P91 RevelationGroup (175): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 955 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 475 => (* P92 RevelationList (174): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 174;
                (* line 960 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 476 => (* P93 RevelationList (174): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 966 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 477,274 => (* P94 RevelationPlus (176): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 176;
                (* line 971 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 478,273 => (* P95 RevelationPlus (176): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 976 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 479,368 => (* P96 Revelation (177): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 177;
                (* line 992 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 480,207 => (* P97 VarDeclGroupLt (178): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 1019 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 481,371 => (* P98 VarDeclGroup (180): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1033 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 482 => (* P99 VarDeclList (179): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 179;
                (* line 1039 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 483 => (* P100 VarDeclList (179): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 179;
                (* line 1045 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 484,276 => (* P101 VarDeclPlus (181): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 181;
                (* line 1058 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 485,275 => (* P102 VarDeclPlus (181): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1063 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 486,339 => (* P103 VarDecl (182): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 182;
                (* line 1081 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 487 => (* P104 VarDeclIds (183): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 183;
                (* line 1109 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 488,362 => (* P105 OptDeclType (163): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 1121 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 489 => (* P106 OptDeclType (163): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 163;
                (* line 1125 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclTypeAbsent ) ; 
                     
              | 490,338 => (* P107 OptDeclValue (184): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1130 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 491 => (* P108 OptDeclValue (184): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 184;
                (* line 1134 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclValAbsent ) ; 
                     
              | 492 => (* P109 Type (155): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 493,303 => (* P110 Type (155): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 1144 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 494,304 => (* P111 Type (155): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 495,305 => (* P112 Type (155): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 496,306 => (* P113 Type (155): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 497,307 => (* P114 Type (155): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 498,308 => (* P115 Type (155): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 499,309 => (* P116 Type (155): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 500,310 => (* P117 Type (155): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 501,311 => (* P118 Type (155): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 502,312 => (* P119 Type (155): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 503,313 => (* P120 Type (155): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 504,314 => (* P121 Type (155): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 505,315 => (* P122 Type (155): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 506,316 => (* P123 Type (155): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 507,317 => (* P124 Type (155): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 508,318 => (* P125 Type (155): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 509,319 => (* P126 Type (155): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 510,215 => (* P127 EnumTypeLt (201): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 201;
                (* line 1171 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the enum type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 511,218 => (* P128 EnumType (203): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 203;
                (* line 1187 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 512 => (* P129 EnumLitList (202): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 202;
                (* line 1204 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 513 => (* P130 EnumLitList (202): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 202;
                (* line 1207 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 514,321 => (* P131 EnumLitPlus (204): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1210 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 515,320 => (* P132 EnumLitPlus (204): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 204;
                (* line 1213 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 516,217 => (* P133 EnumLit (205): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 205;
                (* line 1216 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 517,322 => (* P134 Type (155): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 518 => (* P135 FieldDeclList (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;
                (* line 1239 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 519,341 => (* P136 FieldDeclList (206): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 206;
                (* line 1247 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 520,323 => (* P137 FieldDeclPlus (207): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1256 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 521,340 => (* P138 FieldDeclPlus (207): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 207;
                (* line 1259 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 522,212 => (* P139 RecTypeLt (208): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1271 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 523,254 => (* P140 Type (155): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 155;
                (* line 1299 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 524 => (* P141 MethodDeclList (209): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 209;
                (* line 1321 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 525 => (* P142 MethodDeclList (209): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1329 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 526,356 => (* P143 MethodDeclList (209): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1334 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 527,357 => (* P144 MethodDeclPlus (210): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1343 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 528,343 => (* P145 MethodDeclPlus (210): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1346 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 529,256 => (* P146 MethodDeclLt (212): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1358 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 530,355 => (* P147 MethodDecl (211): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 211;
                (* line 1381 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 531 => (* P148 OverrideList (214): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 214;
                (* line 1411 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 532 => (* P149 OverrideList (214): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1419 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 533,359 => (* P150 OverrideList (214): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 214;
                (* line 1424 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 534,360 => (* P151 OverridePlus (215): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1433 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 535,358 => (* P152 OverridePlus (215): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1436 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 536,263 => (* P153 OverrideLt (217): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1448 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 537,361 => (* P154 Override (216): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1454 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 538 => (* P155 Brand (218): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 218;
                (* line 1466 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 539 => (* P156 Brand (218): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1471 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 540,342 => (* P157 Brand (218): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 218;
                (* line 1476 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 541 => (* P158 Supertype (219): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 219;
                (* line 1483 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 542 => (* P159 Supertype (219): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1489 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 543 => (* P160 Supertype (219): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1498 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 544,255 => (* P161 ObjTypeLt (221): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 221;
                (* line 1509 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 545,264 => (* P162 ObjType (220): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 220;
                (* line 1537 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 546 => (* P163 Type (155): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;

              | 547,211 => (* P164 ProcTypeLt (222): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 222;
                (* line 1561 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END (*Block*)
                     
              | 548,346 => (* P165 Type (155): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 1576 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 549,350 => (* P166 Signature (213): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1584 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 550,260 => (* P167 Formals (223): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 223;
                (* line 1604 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 551 => (* P168 FormalsList (226): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 226;
                (* line 1623 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 552,353 => (* P169 FormalsList (226): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 226;

              | 553,344 => (* P170 FormalPlus (227): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 227;
                (* line 1628 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 554,354 => (* P171 FormalPlus (227): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1638 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 555 => (* P172 FormalLt (229): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 229;
                (* line 1642 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 556,258 => (* P173 FormalLt (229): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1657 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 557,259 => (* P174 FormalLt (229): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1673 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 558,257 => (* P175 FormalLt (229): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1687 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 559,352 => (* P176 Formal (228): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 228;
                (* line 1704 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , FM3Globals . NextSkipNo
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 560 => (* P177 FormalIds (230): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 230;
                (* line 1762 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 561,345 => (* P178 FormalType (231): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1774 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 562 => (* P179 FormalType (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 563,351 => (* P180 FormalExpr (232): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 232;
                (* line 1791 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 564 => (* P181 FormalExpr (232): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 232;
                (* line 1800 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 565,347 => (* P182 ResultType (224): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1808 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 566 => (* P183 ResultType (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1815 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 567 => (* P184 Raises (225): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 225;
                (* line 1825 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 568,261 => (* P185 Raises (225): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 225;
                (* line 1831 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 569,262 => (* P186 Raises (225): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 225;
                (* line 1838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 570,204 => (* P187 ProcDeclLt (233): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 233;
                (* line 1845 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentlyInModule ( )
                         THEN LScopeKind  := Skt . SkFormalsAndBody ; 
                         ELSE LScopeKind  := Skt . SkFormals ;
                         END (*IF*) ; 
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , LScopeKind 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END (*Block*) 
                     
              | 571,373 => (* P188 ProcDecl (235): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 235;
                (* line 1870 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentlyInModule ( )
                         THEN (* => will have a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => will have no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 572,277 => (* P189 OptProcBody (234): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 234;
                (* line 1914 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 573,278 => (* P190 ProcBodyLt (236): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;
                (* line 1923 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 574,279 => (* P191 OptProcBody (234): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 234;
                (* line 1936 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 575 => (* P192 Expr (164): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;

              | 576 => (* P193 E0 (237): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;

              | 577 => (* P194 E0 (237): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 237;
                (* line 1960 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 578,330 => (* P195 E1 (238): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 238;

              | 579,325 => (* P196 E1 (238): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1970 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 580 => (* P197 E2 (239): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;

              | 581 => (* P198 E2 (239): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 239;
                (* line 1980 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 582 => (* P199 E3 (240): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;

              | 583 => (* P200 E3 (240): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1986 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 584 => (* P201 E4 (241): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;

              | 585 => (* P202 E4 (241): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 241;
                (* line 1996 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 586,331 => (* P203 E5 (243): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;

              | 587,326 => (* P204 E5 (243): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 243;
                (* line 2006 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 588,327 => (* P205 E6 (245): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 589,328 => (* P206 E6 (245): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 245;
                (* line 2016 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 590,333 => (* P207 E7 (247): E8WOId SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 247;
                (* line 2029 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 591,249 => (* P208 E7 (247): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 2038 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 592 => (* P209 E7 (247): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;

              | 593,337 => (* P210 E7 (247): IdentRef SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 247;
                (* line 2049 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 594 => (* P211 E7 (247): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;

              | 595,223 => (* P212 E8WOId (249): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 2063 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 596,251 => (* P213 SelectorWODot (250): StkDeref .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2067 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDerefLt ;
                       yySynAttribute . PaInt := 0 (* Meaningless. *) ;
                     
              | 597,250 => (* P214 SelectorWODot (250): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2073 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubscriptLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 598,329 => (* P215 SsPlusList (251): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2084 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 599,332 => (* P216 SsPlusList (251): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 251;
                (* line 2087 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 600,252 => (* P217 SelectorWODot (250): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2098 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkCallLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 601 => (* P218 ActualList (252): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 252;
                (* line 2109 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 602,336 => (* P219 ActualList (252): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2112 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 603,335 => (* P220 ActualList (252): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2115 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 604,334 => (* P221 Actual (253): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2125 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 605,324 => (* P222 Actual (253): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 253;
                (* line 2130 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedActualLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 606,224 => (* P223 E8WOId (249): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2141 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkIntLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 607,225 => (* P224 E8WOId (249): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2149 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkLongIntLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 608,226 => (* P225 E8WOId (249): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2157 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkBasedLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 609,227 => (* P226 E8WOId (249): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2165 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkLongBasedLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 610,228 => (* P227 E8WOId (249): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2173 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkRealLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 611,229 => (* P228 E8WOId (249): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2181 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkLongRealLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 612,230 => (* P229 E8WOId (249): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2189 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkExtendedLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 613,233 => (* P230 E8WOId (249): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2198 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkCharLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 614,234 => (* P231 E8WOId (249): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2206 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCNP_rnp
                         ( Itk . ItkWideCharLitLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 615,231 => (* P232 E8WOId (249): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2214 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 616,232 => (* P233 E8WOId (249): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2216 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 617,253 => (* P234 E8WOId (249): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;

              | 618,236 => (* P235 ExprRelOp (242): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2220 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 619,237 => (* P236 ExprRelOp (242): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2221 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 620,238 => (* P237 ExprRelOp (242): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2222 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 621,239 => (* P238 ExprRelOp (242): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2223 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 622,240 => (* P239 ExprRelOp (242): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2224 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 623,241 => (* P240 ExprRelOp (242): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2225 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 624,235 => (* P241 ExprRelOp (242): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2226 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 625,242 => (* P242 ExprAddOp (244): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2229 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 626,243 => (* P243 ExprAddOp (244): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2230 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 627,244 => (* P244 ExprAddOp (244): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2231 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 628,247 => (* P245 ExprMulOp (246): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2233 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 629,248 => (* P246 ExprMulOp (246): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2234 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 630,245 => (* P247 ExprMulOp (246): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2235 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 631,246 => (* P248 ExprMulOp (246): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2236 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 632,221 => (* P249 ExprUnaryAddOp (248): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2238 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 633,222 => (* P250 ExprUnaryAddOp (248): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 2239 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 634 => (* P251 BlockLt (254): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 254;
                (* line 2244 of "FM3Parser.lalr" *)
                
                     
              | 635,280 => (* P252 Block (137): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 137;
                (* line 2248 of "FM3Parser.lalr" *)
                
                     
              | 636,364 => (* P253 BlockDecl (255): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2254 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 637,367 => (* P254 BlockDecl (255): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2258 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 638,381 => (* P255 BlockDecl (255): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2262 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 639,372 => (* P256 BlockDecl (255): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2266 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 640,379 => (* P257 BlockDecl (255): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2270 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 641,370 => (* P258 BlockDecl (255): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2274 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 642 => (* P259 BlockDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2282 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 643 => (* P260 BlockDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2290 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 644,380 => (* P261 BlockDeclPlus (257): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2299 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 645,382 => (* P262 BlockDeclPlus (257): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 257;
                (* line 2304 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 646 => (* P263 StmtList (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 2323 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 647,377 => (* P264 StmtList (133): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;
                (* line 2331 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 648,378 => (* P265 StmtPlus (258): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2339 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 649,375 => (* P266 StmtPlus (258): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2342 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 650,376 => (* P267 Stmt (259): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 259;

              | 651,374 => (* P268 AssignStmt (260): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 260;
                (* line 2356 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 89 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 92 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

