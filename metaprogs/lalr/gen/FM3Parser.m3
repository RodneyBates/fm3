
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -k -i -t -d -D FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, Word, Wr;

IMPORT Positions, FrontErrors, Strings, IntSets, System;

IMPORT Errors (* From Reusem3. *);


(* Global insertions from the .lalr file: *)
(* line 24 "FM3Parser.lalr" *)
 IMPORT FM3Base;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3ParsePass;
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT FormalModeTyp;
(*TODO: ^Where does this belong? *) 
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_T , Push_TP , Push_TCr , Push_TCPrp , Push_TCBr , Push_TCIri , 
      Push_TI3 , Push_TI6 , Push_TCoCr , Push_TCIoCri , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeList , MakeList2;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  
(* End of global insertions from the .lalr file: *) 

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* Lalr-generated constants: *) 
   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 180;
   yyTableMax               = 311;
   yyNTableMax              = 267;
   yyFirstReadState         = 1;
   yyLastReadState          = 116;
   yyFirstReadTermState             = 117;
   yyLastReadTermState              = 150;
   yyLastReadNontermState           = 199;
   yyFirstReduceState               = 200;
   yyLastReduceState                = 312;
   yyStartState             = 1;
   yyStopState              = 200;
(* End of lalr-generated constants: *) 

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BIT FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BIT FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, uses in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   0]) , (*   7*) ADR (yyTComb [   1])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   2]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   1]) , (*  15*) ADR (yyTComb [   3])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   5])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   7])
         , (*  22*) ADR (yyTComb [   4]) , (*  23*) ADR (yyTComb [   2])
         , (*  24*) ADR (yyTComb [   1]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   9]) , (*  27*) ADR (yyTComb [   6])
         , (*  28*) ADR (yyTComb [   7]) , (*  29*) ADR (yyTComb [  42])
         , (*  30*) ADR (yyTComb [  44]) , (*  31*) ADR (yyTComb [  12])
         , (*  32*) ADR (yyTComb [  10]) , (*  33*) ADR (yyTComb [  13])
         , (*  34*) ADR (yyTComb [  43]) , (*  35*) ADR (yyTComb [  15])
         , (*  36*) ADR (yyTComb [   0]) , (*  37*) ADR (yyTComb [  17])
         , (*  38*) ADR (yyTComb [  19]) , (*  39*) ADR (yyTComb [  14])
         , (*  40*) ADR (yyTComb [  80]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [  87]) , (*  43*) ADR (yyTComb [  17])
         , (*  44*) ADR (yyTComb [  40]) , (*  45*) ADR (yyTComb [  47])
         , (*  46*) ADR (yyTComb [  24]) , (*  47*) ADR (yyTComb [  53])
         , (*  48*) ADR (yyTComb [  26]) , (*  49*) ADR (yyTComb [  60])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [  27])
         , (*  52*) ADR (yyTComb [  28]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [   2]) , (*  55*) ADR (yyTComb [   3])
         , (*  56*) ADR (yyTComb [  53]) , (*  57*) ADR (yyTComb [ 111])
         , (*  58*) ADR (yyTComb [   4]) , (*  59*) ADR (yyTComb [ 112])
         , (*  60*) ADR (yyTComb [ 114]) , (*  61*) ADR (yyTComb [  39])
         , (*  62*) ADR (yyTComb [  67]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [  70]) , (*  65*) ADR (yyTComb [  72])
         , (*  66*) ADR (yyTComb [  45]) , (*  67*) ADR (yyTComb [  75])
         , (*  68*) ADR (yyTComb [  76]) , (*  69*) ADR (yyTComb [ 140])
         , (*  70*) ADR (yyTComb [ 142]) , (*  71*) ADR (yyTComb [  48])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [  49])
         , (*  74*) ADR (yyTComb [  50]) , (*  75*) ADR (yyTComb [  91])
         , (*  76*) ADR (yyTComb [  52]) , (*  77*) ADR (yyTComb [  92])
         , (*  78*) ADR (yyTComb [  55]) , (*  79*) ADR (yyTComb [  65])
         , (*  80*) ADR (yyTComb [  95]) , (*  81*) ADR (yyTComb [  99])
         , (*  82*) ADR (yyTComb [   0]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [  71]) , (*  85*) ADR (yyTComb [ 101])
         , (*  86*) ADR (yyTComb [   0]) , (*  87*) ADR (yyTComb [   2])
         , (*  88*) ADR (yyTComb [  76]) , (*  89*) ADR (yyTComb [ 107])
         , (*  90*) ADR (yyTComb [ 165]) , (*  91*) ADR (yyTComb [ 167])
         , (*  92*) ADR (yyTComb [   6]) , (*  93*) ADR (yyTComb [  79])
         , (*  94*) ADR (yyTComb [ 109]) , (*  95*) ADR (yyTComb [  85])
         , (*  96*) ADR (yyTComb [   0]) , (*  97*) ADR (yyTComb [ 119])
         , (*  98*) ADR (yyTComb [ 123]) , (*  99*) ADR (yyTComb [   8])
         , (* 100*) ADR (yyTComb [  87]) , (* 101*) ADR (yyTComb [ 120])
         , (* 102*) ADR (yyTComb [  96]) , (* 103*) ADR (yyTComb [ 172])
         , (* 104*) ADR (yyTComb [ 103]) , (* 105*) ADR (yyTComb [ 136])
         , (* 106*) ADR (yyTComb [ 105]) , (* 107*) ADR (yyTComb [ 143])
         , (* 108*) ADR (yyTComb [ 204]) , (* 109*) ADR (yyTComb [ 192])
         , (* 110*) ADR (yyTComb [ 117]) , (* 111*) ADR (yyTComb [ 147])
         , (* 112*) ADR (yyTComb [ 120]) , (* 113*) ADR (yyTComb [ 147])
         , (* 114*) ADR (yyTComb [  10]) , (* 115*) ADR (yyTComb [ 122])
         , (* 116*) ADR (yyTComb [ 152])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 108]) , (*  19*) ADR (yyNComb [ 108])
         , (*  20*) ADR (yyNComb [ 113]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 115])
         , (*  26*) ADR (yyNComb [ 118]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 110]) , (*  29*) ADR (yyNComb [ 110])
         , (*  30*) ADR (yyNComb [ 110]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 112]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 112]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 133]) , (*  37*) ADR (yyNComb [ 117])
         , (*  38*) ADR (yyNComb [ 118]) , (*  39*) ADR (yyNComb [ 108])
         , (*  40*) ADR (yyNComb [ 123]) , (*  41*) ADR (yyNComb [ 137])
         , (*  42*) ADR (yyNComb [ 125]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 108])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 125])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 115])
         , (*  54*) ADR (yyNComb [ 108]) , (*  55*) ADR (yyNComb [ 142])
         , (*  56*) ADR (yyNComb [ 108]) , (*  57*) ADR (yyNComb [ 146])
         , (*  58*) ADR (yyNComb [ 108]) , (*  59*) ADR (yyNComb [ 115])
         , (*  60*) ADR (yyNComb [ 152]) , (*  61*) ADR (yyNComb [ 108])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 160])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 162])
         , (*  66*) ADR (yyNComb [ 156]) , (*  67*) ADR (yyNComb [ 155])
         , (*  68*) ADR (yyNComb [ 108]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 172]) , (*  71*) ADR (yyNComb [ 108])
         , (*  72*) ADR (yyNComb [ 108]) , (*  73*) ADR (yyNComb [ 108])
         , (*  74*) ADR (yyNComb [ 108]) , (*  75*) ADR (yyNComb [ 108])
         , (*  76*) ADR (yyNComb [ 108]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 108]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 109]) , (*  81*) ADR (yyNComb [ 108])
         , (*  82*) ADR (yyNComb [ 189]) , (*  83*) ADR (yyNComb [ 188])
         , (*  84*) ADR (yyNComb [ 108]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 108]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 108])
         , (*  90*) ADR (yyNComb [ 194]) , (*  91*) ADR (yyNComb [ 191])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 108]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 109]) , (*  97*) ADR (yyNComb [ 114])
         , (*  98*) ADR (yyNComb [ 108]) , (*  99*) ADR (yyNComb [ 108])
         , (* 100*) ADR (yyNComb [ 108]) , (* 101*) ADR (yyNComb [ 108])
         , (* 102*) ADR (yyNComb [ 108]) , (* 103*) ADR (yyNComb [ 108])
         , (* 104*) ADR (yyNComb [ 118]) , (* 105*) ADR (yyNComb [ 108])
         , (* 106*) ADR (yyNComb [ 108]) , (* 107*) ADR (yyNComb [ 108])
         , (* 108*) ADR (yyNComb [ 195]) , (* 109*) ADR (yyNComb [ 194])
         , (* 110*) ADR (yyNComb [ 108]) , (* 111*) ADR (yyNComb [ 108])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 191])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 108])
         , (* 116*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)   80 , (*   5*)   97 , (*   6*)   98 , (*   7*)    0
         , (*   8*)    0 , (*   9*)   90 , (*  10*)   91 , (*  11*)    0
         , (*  12*)    0 , (*  13*)    0 , (*  14*)    0 , (*  15*)    0
         , (*  16*)    0 , (*  17*)   63 , (*  18*)   66 , (*  19*)    0
         , (*  20*)   63 , (*  21*)    0 , (*  22*)   57 , (*  23*)    0
         , (*  24*)    0 , (*  25*)    0 , (*  26*)   15 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)    0 , (*  31*)    0
         , (*  32*)   30 , (*  33*)    0 , (*  34*)    0 , (*  35*)    0
         , (*  36*)   63 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)    0 , (*  41*)   63 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)    0 , (*  47*)    0
         , (*  48*)    0 , (*  49*)    0 , (*  50*)  109 , (*  51*)    0
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)   60
         , (*  56*)    0 , (*  57*)    0 , (*  58*)    0 , (*  59*)    0
         , (*  60*)    0 , (*  61*)    0 , (*  62*)    0 , (*  63*)    0
         , (*  64*)    0 , (*  65*)   61 , (*  66*)    0 , (*  67*)   66
         , (*  68*)    0 , (*  69*)    0 , (*  70*)    0 , (*  71*)    0
         , (*  72*)    0 , (*  73*)    0 , (*  74*)    0 , (*  75*)    0
         , (*  76*)    0 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)  108 , (*  83*)  109
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)    0 , (*  89*)    0 , (*  90*)    0 , (*  91*)    0
         , (*  92*)    0 , (*  93*)    0 , (*  94*)    0 , (*  95*)    0
         , (*  96*)  113 , (*  97*)    0 , (*  98*)    0 , (*  99*)    0
         , (* 100*)    0 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {  86,  200} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  53,  301}
         , (*  10*) yyTCombType {  14,  300} , (*  11*) yyTCombType {  54,   55}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  53,  301} , (*  15*) yyTCombType {  14,   15}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  11,   12}
         , (*  20*) yyTCombType {  14,  300} , (*  21*) yyTCombType {  23,  120}
         , (*  22*) yyTCombType {  55,  307} , (*  23*) yyTCombType {  58,  133}
         , (*  24*) yyTCombType {  19,  257} , (*  25*) yyTCombType {  92,   93}
         , (*  26*) yyTCombType {  21,  259} , (*  27*) yyTCombType {  99,  100}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 114,  115}
         , (*  30*) yyTCombType {  72,   73} , (*  31*) yyTCombType {   0,    0}
         , (*  32*) yyTCombType {   1,  214} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {  87,   88} , (*  35*) yyTCombType {   0,    0}
         , (*  36*) yyTCombType {   0,    0} , (*  37*) yyTCombType {   1,  214}
         , (*  38*) yyTCombType {   2,   79} , (*  39*) yyTCombType {  87,  102}
         , (*  40*) yyTCombType {   0,    0} , (*  41*) yyTCombType {   0,    0}
         , (*  42*) yyTCombType {   0,    0} , (*  43*) yyTCombType {  53,  301}
         , (*  44*) yyTCombType {  14,   27} , (*  45*) yyTCombType {   0,    0}
         , (*  46*) yyTCombType {   0,    0} , (*  47*) yyTCombType {  63,   18}
         , (*  48*) yyTCombType {   0,    0} , (*  49*) yyTCombType {   0,    0}
         , (*  50*) yyTCombType {   0,    0} , (*  51*) yyTCombType {   0,    0}
         , (*  52*) yyTCombType {   0,    0} , (*  53*) yyTCombType {   0,    0}
         , (*  54*) yyTCombType {   0,    0} , (*  55*) yyTCombType {   0,    0}
         , (*  56*) yyTCombType {   0,    0} , (*  57*) yyTCombType {  53,  301}
         , (*  58*) yyTCombType {  14,   61} , (*  59*) yyTCombType {   1,  143}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  53,  301}
         , (*  64*) yyTCombType {  14,   66} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,    9} , (*  67*) yyTCombType {  13,  119}
         , (*  68*) yyTCombType {  16,  251} , (*  69*) yyTCombType {  24,   25}
         , (*  70*) yyTCombType {   6,  117} , (*  71*) yyTCombType {  19,  257}
         , (*  72*) yyTCombType {  16,   17} , (*  73*) yyTCombType {  21,  259}
         , (*  74*) yyTCombType {  25,  297} , (*  75*) yyTCombType {  26,  247}
         , (*  76*) yyTCombType {  28,   29} , (*  77*) yyTCombType {  19,   20}
         , (*  78*) yyTCombType {  31,   32} , (*  79*) yyTCombType {  19,  257}
         , (*  80*) yyTCombType {  32,  217} , (*  81*) yyTCombType {  21,   22}
         , (*  82*) yyTCombType {  31,  216} , (*  83*) yyTCombType {  37,  280}
         , (*  84*) yyTCombType {  39,  127} , (*  85*) yyTCombType {  38,  297}
         , (*  86*) yyTCombType {  40,  284} , (*  87*) yyTCombType {  37,  280}
         , (*  88*) yyTCombType {  29,  266} , (*  89*) yyTCombType {  38,  297}
         , (*  90*) yyTCombType {  30,  122} , (*  91*) yyTCombType {  37,   38}
         , (*  92*) yyTCombType {  43,   44} , (*  93*) yyTCombType {  42,  128}
         , (*  94*) yyTCombType {  52,  132} , (*  95*) yyTCombType {   3,    4}
         , (*  96*) yyTCombType {   7,  118} , (*  97*) yyTCombType {  12,   13}
         , (*  98*) yyTCombType {  15,   16} , (*  99*) yyTCombType {  22,  297}
         , (* 100*) yyTCombType {  19,  257} , (* 101*) yyTCombType {  27,   28}
         , (* 102*) yyTCombType {  21,  259} , (* 103*) yyTCombType {  25,  297}
         , (* 104*) yyTCombType {  29,  266} , (* 105*) yyTCombType {  29,  266}
         , (* 106*) yyTCombType {  30,  123} , (* 107*) yyTCombType {  30,  124}
         , (* 108*) yyTCombType {  33,  125} , (* 109*) yyTCombType {  34,  276}
         , (* 110*) yyTCombType {  35,  126} , (* 111*) yyTCombType {  44,  224}
         , (* 112*) yyTCombType {  29,  121} , (* 113*) yyTCombType {  34,  276}
         , (* 114*) yyTCombType {  34,   35} , (* 115*) yyTCombType {  34,   36}
         , (* 116*) yyTCombType {  44,  224} , (* 117*) yyTCombType {  34,  276}
         , (* 118*) yyTCombType {  45,   46} , (* 119*) yyTCombType {  46,   47}
         , (* 120*) yyTCombType {  47,   48} , (* 121*) yyTCombType {  48,  129}
         , (* 122*) yyTCombType {  51,   52} , (* 123*) yyTCombType {  45,  130}
         , (* 124*) yyTCombType {  47,  226} , (* 125*) yyTCombType {  40,  284}
         , (* 126*) yyTCombType {  49,  131} , (* 127*) yyTCombType {  56,   57}
         , (* 128*) yyTCombType {  49,   50} , (* 129*) yyTCombType {  47,  226}
         , (* 130*) yyTCombType {  57,  297} , (* 131*) yyTCombType {  59,  216}
         , (* 132*) yyTCombType {  42,   43} , (* 133*) yyTCombType {  60,  217}
         , (* 134*) yyTCombType {  61,   62} , (* 135*) yyTCombType {  62,   63}
         , (* 136*) yyTCombType {  64,  134} , (* 137*) yyTCombType {  29,  266}
         , (* 138*) yyTCombType {  65,  243} , (* 139*) yyTCombType {  30,  270}
         , (* 140*) yyTCombType {  66,   19} , (* 141*) yyTCombType {  67,  253}
         , (* 142*) yyTCombType {  68,  135} , (* 143*) yyTCombType {  71,   72}
         , (* 144*) yyTCombType {  73,  136} , (* 145*) yyTCombType {  74,  137}
         , (* 146*) yyTCombType {  40,  284} , (* 147*) yyTCombType {  76,  139}
         , (* 148*) yyTCombType {  40,  284} , (* 149*) yyTCombType {  69,  231}
         , (* 150*) yyTCombType {  78,  141} , (* 151*) yyTCombType {  70,  230}
         , (* 152*) yyTCombType {  40,   41} , (* 153*) yyTCombType {  42,  289}
         , (* 154*) yyTCombType {  69,  231} , (* 155*) yyTCombType {  42,  289}
         , (* 156*) yyTCombType {  70,  230} , (* 157*) yyTCombType {  75,  138}
         , (* 158*) yyTCombType {  77,  140} , (* 159*) yyTCombType {  69,  231}
         , (* 160*) yyTCombType {  79,   80} , (* 161*) yyTCombType {  70,  230}
         , (* 162*) yyTCombType {  75,   76} , (* 163*) yyTCombType {  77,   78}
         , (* 164*) yyTCombType {  80,    5} , (* 165*) yyTCombType {  81,   82}
         , (* 166*) yyTCombType {  84,   85} , (* 167*) yyTCombType {  69,  231}
         , (* 168*) yyTCombType {  85,  142} , (* 169*) yyTCombType {  70,   71}
         , (* 170*) yyTCombType {  69,  231} , (* 171*) yyTCombType {  88,   89}
         , (* 172*) yyTCombType {  70,   74} , (* 173*) yyTCombType {  89,   90}
         , (* 174*) yyTCombType {  93,   94} , (* 175*) yyTCombType {  89,   95}
         , (* 176*) yyTCombType {  94,  144} , (* 177*) yyTCombType {  57,  297}
         , (* 178*) yyTCombType {  59,   60} , (* 179*) yyTCombType {  90,  229}
         , (* 180*) yyTCombType {  95,   96} , (* 181*) yyTCombType {  91,  301}
         , (* 182*) yyTCombType { 100,  101} , (* 183*) yyTCombType {  69,  231}
         , (* 184*) yyTCombType {  90,  229} , (* 185*) yyTCombType {  70,  230}
         , (* 186*) yyTCombType {  91,  301} , (* 187*) yyTCombType { 101,  146}
         , (* 188*) yyTCombType {  60,  297} , (* 189*) yyTCombType {  97,  222}
         , (* 190*) yyTCombType {  97,  222} , (* 191*) yyTCombType { 102,  103}
         , (* 192*) yyTCombType {  90,  229} , (* 193*) yyTCombType {  98,  145}
         , (* 194*) yyTCombType {  98,    7} , (* 195*) yyTCombType {  90,  229}
         , (* 196*) yyTCombType { 103,  104} , (* 197*) yyTCombType {  69,  231}
         , (* 198*) yyTCombType { 104,  147} , (* 199*) yyTCombType {  70,  230}
         , (* 200*) yyTCombType { 106,  148} , (* 201*) yyTCombType { 109,  299}
         , (* 202*) yyTCombType { 105,  240} , (* 203*) yyTCombType {  69,  231}
         , (* 204*) yyTCombType { 105,  240} , (* 205*) yyTCombType {  70,  230}
         , (* 206*) yyTCombType { 109,  299} , (* 207*) yyTCombType { 105,  106}
         , (* 208*) yyTCombType {  90,  229} , (* 209*) yyTCombType { 107,  108}
         , (* 210*) yyTCombType {  91,  301} , (* 211*) yyTCombType { 107,  112}
         , (* 212*) yyTCombType { 110,  111} , (* 213*) yyTCombType { 108,  229}
         , (* 214*) yyTCombType { 111,  149} , (* 215*) yyTCombType { 112,  113}
         , (* 216*) yyTCombType { 113,   97} , (* 217*) yyTCombType { 115,  116}
         , (* 218*) yyTCombType { 108,  229} , (* 219*) yyTCombType { 116,  150}
         , (* 220*) yyTCombType {   0,    0} , (* 221*) yyTCombType {   0,    0}
         , (* 222*) yyTCombType {  90,  229} , (* 223*) yyTCombType {   0,    0}
         , (* 224*) yyTCombType {  91,  301} , (* 225*) yyTCombType {   0,    0}
         , (* 226*) yyTCombType {   0,    0} , (* 227*) yyTCombType {   0,    0}
         , (* 228*) yyTCombType {  90,  229} , (* 229*) yyTCombType {   0,    0}
         , (* 230*) yyTCombType {  91,  301} , (* 231*) yyTCombType { 108,  229}
         , (* 232*) yyTCombType {   0,    0} , (* 233*) yyTCombType {   0,    0}
         , (* 234*) yyTCombType { 108,  229} , (* 235*) yyTCombType { 109,  299}
         , (* 236*) yyTCombType {   0,    0} , (* 237*) yyTCombType {   0,    0}
         , (* 238*) yyTCombType { 103,  239} , (* 239*) yyTCombType {   0,    0}
         , (* 240*) yyTCombType { 103,  239} , (* 241*) yyTCombType {   0,    0}
         , (* 242*) yyTCombType {   0,    0} , (* 243*) yyTCombType {   0,    0}
         , (* 244*) yyTCombType {   0,    0} , (* 245*) yyTCombType {   0,    0}
         , (* 246*) yyTCombType {   0,    0} , (* 247*) yyTCombType { 108,  229}
         , (* 248*) yyTCombType {   0,    0} , (* 249*) yyTCombType { 109,  299}
         , (* 250*) yyTCombType {   0,    0} , (* 251*) yyTCombType {   0,    0}
         , (* 252*) yyTCombType {   0,    0} , (* 253*) yyTCombType {   0,    0}
         , (* 254*) yyTCombType {   0,    0} , (* 255*) yyTCombType { 109,  299}
         , (* 256*) yyTCombType {   0,    0} , (* 257*) yyTCombType {   0,    0}
         , (* 258*) yyTCombType {   0,    0} , (* 259*) yyTCombType {   0,    0}
         , (* 260*) yyTCombType {   0,    0} , (* 261*) yyTCombType { 108,  229}
         , (* 262*) yyTCombType {   0,    0} , (* 263*) yyTCombType {   0,    0}
         , (* 264*) yyTCombType {   0,    0} , (* 265*) yyTCombType {   0,    0}
         , (* 266*) yyTCombType {   0,    0} , (* 267*) yyTCombType { 108,  229}
         , (* 268*) yyTCombType {   0,    0} , (* 269*) yyTCombType {   0,    0}
         , (* 270*) yyTCombType {   0,    0} , (* 271*) yyTCombType {   0,    0}
         , (* 272*) yyTCombType {   0,    0} , (* 273*) yyTCombType {   0,    0}
         , (* 274*) yyTCombType {   0,    0} , (* 275*) yyTCombType {   0,    0}
         , (* 276*) yyTCombType {   0,    0} , (* 277*) yyTCombType {   0,    0}
         , (* 278*) yyTCombType {   0,    0} , (* 279*) yyTCombType {   0,    0}
         , (* 280*) yyTCombType {   0,    0} , (* 281*) yyTCombType {   0,    0}
         , (* 282*) yyTCombType {   0,    0} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType {   0,    0} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType {   0,    0} , (* 287*) yyTCombType {   0,    0}
         , (* 288*) yyTCombType {   0,    0} , (* 289*) yyTCombType {   0,    0}
         , (* 290*) yyTCombType {   0,    0} , (* 291*) yyTCombType {   0,    0}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType {   0,    0}
         , (* 294*) yyTCombType {   0,    0} , (* 295*) yyTCombType {   0,    0}
         , (* 296*) yyTCombType {   0,    0} , (* 297*) yyTCombType {   0,    0}
         , (* 298*) yyTCombType {   0,    0} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType {   0,    0} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {   0,    0}
         , (* 308*) yyTCombType {   0,    0} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        to them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  194 , (* 109*)   86 , (* 110*)  195 , (* 111*)  196
         , (* 112*)  197 , (* 113*)  198 , (* 114*)  199 , (* 115*)   87
         , (* 116*)   10 , (* 117*)   11 , (* 118*)  107 , (* 119*)   51
         , (* 120*)    8 , (* 121*)   81 , (* 122*)   99 , (* 123*)   39
         , (* 124*)   54 , (* 125*)   34 , (* 126*)    6 , (* 127*)   45
         , (* 128*)  169 , (* 129*)   69 , (* 130*)  179 , (* 131*)   70
         , (* 132*)   98 , (* 133*)   75 , (* 134*)  105 , (* 135*)   65
         , (* 136*)  188 , (* 137*)  185 , (* 138*)  155 , (* 139*)   26
         , (* 140*)  189 , (* 141*)  158 , (* 142*)   24 , (* 143*)  151
         , (* 144*)  153 , (* 145*)  190 , (* 146*)   23 , (* 147*)   21
         , (* 148*)  154 , (* 149*)  152 , (* 150*)  156 , (* 151*)  157
         , (* 152*)   40 , (* 153*)  161 , (* 154*)  152 , (* 155*)   49
         , (* 156*)   30 , (* 157*)   31 , (* 158*)  167 , (* 159*)   33
         , (* 160*)  159 , (* 161*)   33 , (* 162*)   37 , (* 163*)  160
         , (* 164*)  165 , (* 165*)  166 , (* 166*)   42 , (* 167*)  168
         , (* 168*)  162 , (* 169*)  170 , (* 170*)  191 , (* 171*)  163
         , (* 172*)  164 , (* 173*)   53 , (* 174*)  152 , (* 175*)   14
         , (* 176*)   68 , (* 177*)   56 , (* 178*)  152 , (* 179*)  174
         , (* 180*)  175 , (* 181*)  176 , (* 182*)   14 , (* 183*)  171
         , (* 184*)  172 , (* 185*)  173 , (* 186*)  181 , (* 187*)   56
         , (* 188*)  182 , (* 189*)  183 , (* 190*)   64 , (* 191*)  184
         , (* 192*)   67 , (* 193*)  186 , (* 194*)  187 , (* 195*)  192
         , (* 196*)  193 , (* 197*)   83 , (* 198*)   77 , (* 199*)   84
         , (* 200*)   92 , (* 201*)  152 , (* 202*)   91 , (* 203*)  109
         , (* 204*)  114 , (* 205*)  110 , (* 206*)    0 , (* 207*)    0
         , (* 208*)   58 , (* 209*)    0 , (* 210*)   69 , (* 211*)   59
         , (* 212*)  180 , (* 213*)  178 , (* 214*)    0 , (* 215*)   69
         , (* 216*)   69 , (* 217*)    0 , (* 218*)    0 , (* 219*)    0
         , (* 220*)    0 , (* 221*)    0 , (* 222*)  177 , (* 223*)  178
         , (* 224*)    0 , (* 225*)    0 , (* 226*)    0 , (* 227*)    0
         , (* 228*)    0 , (* 229*)    0 , (* 230*)    0 , (* 231*)    0
         , (* 232*)    0 , (* 233*)    0 , (* 234*)    0 , (* 235*)    0
         , (* 236*)    0 , (* 237*)    0 , (* 238*)    0 , (* 239*)    0
         , (* 240*)    0 , (* 241*)    0 , (* 242*)    0 , (* 243*)    0
         , (* 244*)    0 , (* 245*)    0 , (* 246*)    0 , (* 247*)    0
         , (* 248*)    0 , (* 249*)    0 , (* 250*)    0 , (* 251*)    0
         , (* 252*)    0 , (* 253*)   53 , (* 254*)    0 , (* 255*)    0
         , (* 256*)    0 , (* 257*)    0 , (* 258*)   14 , (* 259*)   53
         , (* 260*)    0 , (* 261*)    0 , (* 262*)    0 , (* 263*)    0
         , (* 264*)    0 , (* 265*)    0 , (* 266*)    0 , (* 267*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 200(P   1)*)    2 , (*A 201(P   2)*)    1 , (*A 202(P   3)*)    1
         , (*A 203(P   4)*)    1 , (*A 204(P   5)*)    1 , (*A 205(P   6)*)    1
         , (*A 206(P   7)*)    1 , (*A 207(P   8)*)    9 , (*A 208(P   9)*)    9
         , (*A 209(P  10)*)   10 , (*A 210(P  11)*)    9 , (*A 211(P  12)*)    9
         , (*A 212(P  13)*)   10 , (*A 213(P  14)*)    1 , (*A 214(P  15)*)    0
         , (*A 215(P  16)*)    0 , (*A 216(P  17)*)    0 , (*A 217(P  18)*)    1
         , (*A 218(P  19)*)    1 , (*A 219(P  20)*)    3 , (*A 220(P  21)*)    1
         , (*A 221(P  22)*)    3 , (*A 222(P  23)*)    0 , (*A 223(P  24)*)    3
         , (*A 224(P  25)*)    0 , (*A 225(P  26)*)    3 , (*A 226(P  27)*)    1
         , (*A 227(P  28)*)    3 , (*A 228(P  29)*)    3 , (*A 229(P  30)*)    0
         , (*A 230(P  31)*)    0 , (*A 231(P  32)*)    0 , (*A 232(P  33)*)    2
         , (*A 233(P  34)*)    3 , (*A 234(P  35)*)    1 , (*A 235(P  36)*)    3
         , (*A 236(P  37)*)    2 , (*A 237(P  38)*)    4 , (*A 238(P  39)*)    3
         , (*A 239(P  40)*)    0 , (*A 240(P  41)*)    2 , (*A 241(P  42)*)    3
         , (*A 242(P  43)*)    3 , (*A 243(P  44)*)    2 , (*A 244(P  45)*)    1
         , (*A 245(P  46)*)    2 , (*A 246(P  47)*)    4 , (*A 247(P  48)*)    2
         , (*A 248(P  49)*)    1 , (*A 249(P  50)*)    2 , (*A 250(P  51)*)    4
         , (*A 251(P  52)*)    0 , (*A 252(P  53)*)    2 , (*A 253(P  54)*)    2
         , (*A 254(P  55)*)    1 , (*A 255(P  56)*)    2 , (*A 256(P  57)*)    3
         , (*A 257(P  58)*)    0 , (*A 258(P  59)*)    2 , (*A 259(P  60)*)    0
         , (*A 260(P  61)*)    2 , (*A 261(P  62)*)    1 , (*A 262(P  63)*)    3
         , (*A 263(P  64)*)    3 , (*A 264(P  65)*)    2 , (*A 265(P  66)*)    5
         , (*A 266(P  67)*)    0 , (*A 267(P  68)*)    1 , (*A 268(P  69)*)    3
         , (*A 269(P  70)*)    4 , (*A 270(P  71)*)    0 , (*A 271(P  72)*)    1
         , (*A 272(P  73)*)    1 , (*A 273(P  74)*)    1 , (*A 274(P  75)*)    1
         , (*A 275(P  76)*)    1 , (*A 276(P  77)*)    0 , (*A 277(P  78)*)    2
         , (*A 278(P  79)*)    1 , (*A 279(P  80)*)    1 , (*A 280(P  81)*)    0
         , (*A 281(P  82)*)    2 , (*A 282(P  83)*)    1 , (*A 283(P  84)*)    1
         , (*A 284(P  85)*)    0 , (*A 285(P  86)*)    2 , (*A 286(P  87)*)    1
         , (*A 287(P  88)*)    1 , (*A 288(P  89)*)    1 , (*A 289(P  90)*)    0
         , (*A 290(P  91)*)    1 , (*A 291(P  92)*)    4 , (*A 292(P  93)*)    4
         , (*A 293(P  94)*)    1 , (*A 294(P  95)*)    1 , (*A 295(P  96)*)    1
         , (*A 296(P  97)*)    4 , (*A 297(P  98)*)    0 , (*A 298(P  99)*)    5
         , (*A 299(P 100)*)    0 , (*A 300(P 101)*)    1 , (*A 301(P 102)*)    0
         , (*A 302(P 103)*)    3 , (*A 303(P 104)*)    1 , (*A 304(P 105)*)    1
         , (*A 305(P 106)*)    1 , (*A 306(P 107)*)    1 , (*A 307(P 108)*)    0
         , (*A 308(P 109)*)    2 , (*A 309(P 110)*)    1 , (*A 310(P 111)*)    3
         , (*A 311(P 112)*)    1 , (*A 312(P 113)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 200(P   1)*)  180 , (*A 201(P   2)*)  109 , (*A 202(P   3)*)  109
         , (*A 203(P   4)*)  109 , (*A 204(P   5)*)  109 , (*A 205(P   6)*)  109
         , (*A 206(P   7)*)  109 , (*A 207(P   8)*)  108 , (*A 208(P   9)*)  110
         , (*A 209(P  10)*)  111 , (*A 210(P  11)*)  112 , (*A 211(P  12)*)  113
         , (*A 212(P  13)*)  114 , (*A 213(P  14)*)  115 , (*A 214(P  15)*)  115
         , (*A 215(P  16)*)  122 , (*A 216(P  17)*)  123 , (*A 217(P  18)*)  123
         , (*A 218(P  19)*)  124 , (*A 219(P  20)*)  124 , (*A 220(P  21)*)  125
         , (*A 221(P  22)*)  125 , (*A 222(P  23)*)  126 , (*A 223(P  24)*)  126
         , (*A 224(P  25)*)  127 , (*A 225(P  26)*)  127 , (*A 226(P  27)*)  128
         , (*A 227(P  28)*)  128 , (*A 228(P  29)*)  116 , (*A 229(P  30)*)  129
         , (*A 230(P  31)*)  131 , (*A 231(P  32)*)  130 , (*A 232(P  33)*)  130
         , (*A 233(P  34)*)  132 , (*A 234(P  35)*)  133 , (*A 235(P  36)*)  133
         , (*A 236(P  37)*)  132 , (*A 237(P  38)*)  134 , (*A 238(P  39)*)  134
         , (*A 239(P  40)*)  118 , (*A 240(P  41)*)  118 , (*A 241(P  42)*)  120
         , (*A 242(P  43)*)  121 , (*A 243(P  44)*)  136 , (*A 244(P  45)*)  135
         , (*A 245(P  46)*)  135 , (*A 246(P  47)*)  137 , (*A 247(P  48)*)  140
         , (*A 248(P  49)*)  139 , (*A 249(P  50)*)  139 , (*A 250(P  51)*)  141
         , (*A 251(P  52)*)  142 , (*A 252(P  53)*)  142 , (*A 253(P  54)*)  145
         , (*A 254(P  55)*)  144 , (*A 255(P  56)*)  144 , (*A 256(P  57)*)  146
         , (*A 257(P  58)*)  147 , (*A 258(P  59)*)  147 , (*A 259(P  60)*)  148
         , (*A 260(P  61)*)  148 , (*A 261(P  62)*)  138 , (*A 262(P  63)*)  149
         , (*A 263(P  64)*)  153 , (*A 264(P  65)*)  150 , (*A 265(P  66)*)  150
         , (*A 266(P  67)*)  154 , (*A 267(P  68)*)  155 , (*A 268(P  69)*)  155
         , (*A 269(P  70)*)  156 , (*A 270(P  71)*)  157 , (*A 271(P  72)*)  157
         , (*A 272(P  73)*)  157 , (*A 273(P  74)*)  157 , (*A 274(P  75)*)  158
         , (*A 275(P  76)*)  158 , (*A 276(P  77)*)  160 , (*A 277(P  78)*)  161
         , (*A 278(P  79)*)  159 , (*A 279(P  80)*)  159 , (*A 280(P  81)*)  162
         , (*A 281(P  82)*)  163 , (*A 282(P  83)*)  151 , (*A 283(P  84)*)  151
         , (*A 284(P  85)*)  164 , (*A 285(P  86)*)  165 , (*A 286(P  87)*)  152
         , (*A 287(P  88)*)  152 , (*A 288(P  89)*)  152 , (*A 289(P  90)*)  166
         , (*A 290(P  91)*)  167 , (*A 291(P  92)*)  168 , (*A 292(P  93)*)  170
         , (*A 293(P  94)*)  169 , (*A 294(P  95)*)  169 , (*A 295(P  96)*)  171
         , (*A 296(P  97)*)  172 , (*A 297(P  98)*)  143 , (*A 298(P  99)*)  119
         , (*A 299(P 100)*)  173 , (*A 300(P 101)*)  117 , (*A 301(P 102)*)  175
         , (*A 302(P 103)*)  175 , (*A 303(P 104)*)  176 , (*A 304(P 105)*)  176
         , (*A 305(P 106)*)  176 , (*A 306(P 107)*)  176 , (*A 307(P 108)*)  174
         , (*A 308(P 109)*)  174 , (*A 309(P 110)*)  177 , (*A 310(P 111)*)  177
         , (*A 311(P 112)*)  178 , (*A 312(P 113)*)  179
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   69 , (*:   5*)   70
         , (*:   6*)   70 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   14 , (*:  10*)   14 , (*:  11*)   19
         , (*:  12*)   95 , (*:  13*)   67 , (*:  14*)    9
         , (*:  15*)   95 , (*:  16*)   68 , (*:  17*)   47
         , (*:  18*)   95 , (*:  19*)   19 , (*:  20*)   47
         , (*:  21*)   19 , (*:  22*)   19 , (*:  23*)   19
         , (*:  24*)   68 , (*:  25*)   66 , (*:  26*)   66
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   95 , (*:  31*)   70 , (*:  32*)   70
         , (*:  33*)   95 , (*:  34*)   66 , (*:  35*)   95
         , (*:  36*)   47 , (*:  37*)   66 , (*:  38*)   66
         , (*:  39*)   70 , (*:  40*)    6 , (*:  41*)   47
         , (*:  42*)   66 , (*:  43*)   75 , (*:  44*)   71
         , (*:  45*)   76 , (*:  46*)   95 , (*:  47*)   71
         , (*:  48*)   95 , (*:  49*)   66 , (*:  50*)    9
         , (*:  51*)   95 , (*:  52*)   66 , (*:  53*)    9
         , (*:  54*)    9 , (*:  55*)   19 , (*:  56*)   74
         , (*:  57*)   19 , (*:  58*)   19 , (*:  59*)   19
         , (*:  60*)   19 , (*:  61*)   95 , (*:  62*)   68
         , (*:  63*)   47 , (*:  64*)   66 , (*:  65*)   66
         , (*:  66*)   95 , (*:  67*)   66 , (*:  68*)   66
         , (*:  69*)    9 , (*:  70*)    9 , (*:  71*)   95
         , (*:  72*)   30 , (*:  73*)   95 , (*:  74*)   95
         , (*:  75*)   66 , (*:  76*)   95 , (*:  77*)   66
         , (*:  78*)   95 , (*:  79*)   95 , (*:  80*)   69
         , (*:  81*)   66 , (*:  82*)    9 , (*:  83*)    9
         , (*:  84*)   95 , (*:  85*)   67 , (*:  86*)    0
         , (*:  87*)   32 , (*:  88*)   95 , (*:  89*)   66
         , (*:  90*)   14 , (*:  91*)   14 , (*:  92*)   19
         , (*:  93*)   95 , (*:  94*)   67 , (*:  95*)   95
         , (*:  96*)   69 , (*:  97*)   70 , (*:  98*)   70
         , (*:  99*)   19 , (*: 100*)   95 , (*: 101*)   67
         , (*: 102*)   95 , (*: 103*)   66 , (*: 104*)   95
         , (*: 105*)   66 , (*: 106*)   95 , (*: 107*)   66
         , (*: 108*)    9 , (*: 109*)    9 , (*: 110*)   95
         , (*: 111*)   67 , (*: 112*)   95 , (*: 113*)   69
         , (*: 114*)   19 , (*: 115*)   95 , (*: 116*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 117)*)  241 (*P41*) , (*RR: 118)*)  223 (*P23*)
         , (*RR: 119)*)  209 (*P9*) , (*RR: 120)*)  262 (*P62*)
         , (*RR: 121)*)  264 (*P64*) , (*RR: 122)*)  273 (*P73*)
         , (*RR: 123)*)  271 (*P71*) , (*RR: 124)*)  272 (*P72*)
         , (*RR: 125)*)  220 (*P20*) , (*RR: 126)*)  221 (*P21*)
         , (*RR: 127)*)  265 (*P65*) , (*RR: 128)*)  290 (*P90*)
         , (*RR: 129)*)  227 (*P27*) , (*RR: 130)*)  291 (*P91*)
         , (*RR: 131)*)  295 (*P95*) , (*RR: 132)*)  296 (*P96*)
         , (*RR: 133)*)  298 (*P98*) , (*RR: 134)*)  246 (*P46*)
         , (*RR: 135)*)  302 (*P102*) , (*RR: 136)*)  237 (*P37*)
         , (*RR: 137)*)  234 (*P34*) , (*RR: 138)*)  233 (*P33*)
         , (*RR: 139)*)  235 (*P35*) , (*RR: 140)*)  236 (*P36*)
         , (*RR: 141)*)  238 (*P38*) , (*RR: 142)*)  210 (*P10*)
         , (*RR: 143)*)  213 (*P13*) , (*RR: 144)*)  207 (*P7*)
         , (*RR: 145)*)  242 (*P42*) , (*RR: 146)*)  211 (*P11*)
         , (*RR: 147)*)  218 (*P18*) , (*RR: 148)*)  219 (*P19*)
         , (*RR: 149)*)  208 (*P8*) , (*RR: 150)*)  212 (*P12*)
         , (*RR: 151)*)  258 (*P58*) , (*RR: 152)*)  261 (*P61*)
         , (*RR: 153)*)  260 (*P60*) , (*RR: 154)*)  256 (*P56*)
         , (*RR: 155)*)  252 (*P52*) , (*RR: 156)*)  250 (*P50*)
         , (*RR: 157)*)  249 (*P49*) , (*RR: 158)*)  248 (*P48*)
         , (*RR: 159)*)  268 (*P68*) , (*RR: 160)*)  277 (*P77*)
         , (*RR: 161)*)  281 (*P81*) , (*RR: 162)*)  269 (*P69*)
         , (*RR: 163)*)  278 (*P78*) , (*RR: 164)*)  279 (*P79*)
         , (*RR: 165)*)  274 (*P74*) , (*RR: 166)*)  275 (*P75*)
         , (*RR: 167)*)  267 (*P67*) , (*RR: 168)*)  285 (*P85*)
         , (*RR: 169)*)  225 (*P25*) , (*RR: 170)*)  263 (*P63*)
         , (*RR: 171)*)  286 (*P86*) , (*RR: 172)*)  287 (*P87*)
         , (*RR: 173)*)  288 (*P88*) , (*RR: 174)*)  282 (*P82*)
         , (*RR: 175)*)  283 (*P83*) , (*RR: 176)*)  312 (*P112*)
         , (*RR: 177)*)  310 (*P110*) , (*RR: 178)*)  311 (*P111*)
         , (*RR: 179)*)  308 (*P108*) , (*RR: 180)*)  309 (*P109*)
         , (*RR: 181)*)  292 (*P92*) , (*RR: 182)*)  293 (*P93*)
         , (*RR: 183)*)  294 (*P94*) , (*RR: 184)*)  245 (*P45*)
         , (*RR: 185)*)  244 (*P44*) , (*RR: 186)*)  255 (*P55*)
         , (*RR: 187)*)  254 (*P54*) , (*RR: 188)*)  305 (*P105*)
         , (*RR: 189)*)  303 (*P103*) , (*RR: 190)*)  304 (*P104*)
         , (*RR: 191)*)  306 (*P106*) , (*RR: 192)*)  228 (*P28*)
         , (*RR: 193)*)  232 (*P32*) , (*RR: 194)*)  201 (*P1*)
         , (*RR: 195)*)  202 (*P2*) , (*RR: 196)*)  203 (*P3*)
         , (*RR: 197)*)  204 (*P4*) , (*RR: 198)*)  205 (*P5*)
         , (*RR: 199)*)  206 (*P6*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
      CASE Token OF
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer.  If the
   reduce is nonempty, this is a copy from the leftmost RHS's attribute.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

   (* Declarations from the LOCAL section of the .lalr file: *) 
(* line 46 "FM3Parser.lalr" *)
 TYPE Sk = FM3Scopes . ScopeKindTyp ; 
  
   (* End of declarations from the LOCAL section of the .lalr file: *)
   
   VAR
      yyOldUnnestCoord  : LONGINT; 
      yyState           : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               they are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, meaning read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;        (* left-hand side symbol *)
      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyIsRepairing     : BOOLEAN;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx     : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyIsRepairing     := FALSE;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyIsRepairing 
               THEN (* repair *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                       (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     FrontErrors.ErrorMessageTraced
                       (FrontErrors.TokenInserted, FrontErrors.Repair,
                       FM3Scanner.Attribute.Position, FrontErrors.eText, yyText 
                       );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
                       PushUnnestStk (WParsAttr);
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyIsRepairing := TRUE;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
                PushUnnestStk (WParsAttr);
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
               yyIsRepairing := FALSE;

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull; 

             (* Inserted semantic action code from the .lalr file: **)
              CASE yyState OF
              | 200 => (* P1 _0000_ (180): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 201,194 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 202,195 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 203,196 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 204,197 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 205,198 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 206,199 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 207,144 => (* P8 Interface (108): OptUnsafe StkRwINTERFACE StkIdent StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 108;

              | 208,149 => (* P9 Module (110): OptUnsafe StkRwMODULE StkIdent Exports StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 110;

              | 209,119 => (* P10 GenInterface (111): StkRwGENERIC StkRwINTERFACE StkIdent GenFormalList StkSemicolon Imports DeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 111;

              | 210,142 => (* P11 GenModule (112): StkRwGENERIC StkRwMODULE StkIdent GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 112;

              | 211,146 => (* P12 InstInterface (113): OptUnsafe StkRwINTERFACE StkIdent StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;

              | 212,150 => (* P13 InstModule (114): OptUnsafe StkRwMODULE StkIdent Exports StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 114;

              | 213,143 => (* P14 OptUnsafe (115): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 115;
                (* line 248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 214 => (* P15 OptUnsafe (115): .*)
                yyNonterminal := 115;
                (* line 249 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 215 => (* P16 CaptureCoord (122): .*)
                yyNonterminal := 122;
                (* line 252 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 216 => (* P17 OptSemicolon (123): .*)
                yyNonterminal := 123;

              | 217 => (* P18 OptSemicolon (123): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;

              | 218,147 => (* P19 IdPlusList (124): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 124;
                (* line 262 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1]. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 219,148 => (* P20 IdPlusList (124): IdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 124;
                (* line 266 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1]. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 220,125 => (* P21 DeclIdPlusList (125): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 125;
                (* line 272 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1]. *) 
                       yySynAttribute . PaInt := 1 ;
                       FM3Scopes . DeclId ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 221,126 => (* P22 DeclIdPlusList (125): DeclIdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 125;
                (* line 277 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1]. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Scopes . DeclId ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                     
              | 222 => (* P23 IdStarList (126): .*)
                yyNonterminal := 126;
                (* line 284 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 223,118 => (* P24 IdStarList (126): IdStarList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 286 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 224 => (* P25 QualIdStarList (127): .*)
                yyNonterminal := 127;
                (* line 290 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 225,169 => (* P26 QualIdStarList (127): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 292 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 226 => (* P27 QualId (128): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 128;

              | 227,129 => (* P28 QualId (128): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 297 of "FM3Parser.lalr" *)
                 Push_TCoCr
                         ( Itk . ItkQualIdLt ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord );
                     
              | 228,192 => (* P29 Imports (116): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 116;
                (* line 304 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 229 => (* P30 ImportsLt (129): .*)
                yyNonterminal := 129;
                (* line 307 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 230 => (* P31 ImportsRt (131): .*)
                yyNonterminal := 131;
                (* line 308 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 231 => (* P32 ImportsRecurse (130): .*)
                yyNonterminal := 130;
                (* line 310 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 232,193 => (* P33 ImportsRecurse (130): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 130;
                (* line 314 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 233,138 => (* P34 ImportItem (132): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 320 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 234,137 => (* P35 ImportIntfPlusList (133): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 133;
                (* line 324 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       Push_TI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 235,139 => (* P36 ImportIntfPlusList (133): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 336 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       Push_TI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 236,140 => (* P37 ImportItem (132): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 132;
                (* line 350 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 237,136 => (* P38 FromImportPlusList (134): StkRwFROM StkIdent StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 134;
                (* line 354 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       Push_TI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 238,141 => (* P39 FromImportPlusList (134): FromImportPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 377 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       Push_TI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 239 => (* P40 Exports (118): .*)
                yyNonterminal := 118;
                (* line 415 of "FM3Parser.lalr" *)
                 FM3ParsePass . PushEXPORTSMain ( yyAttributeStack^[yyStackPtr] . Scan . Position ) ; 
              | 240 => (* P41 Exports (118): StkRwEXPORTS IdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;
                (* line 417 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk . ItkExportIdListLt , yyAttributeStack^[yyStackPtr+2] ) ; 
              | 241,117 => (* P42 GenFormalList (120): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 120;
                (* line 422 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+2] ) ; 
              | 242,145 => (* P43 GenActualList (121): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 121;
                (* line 426 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+2] ) ; 
              | 243 => (* P44 TypeDeclGroup (136): StkRwTYPE TypeDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 136;

              | 244,185 => (* P45 TypeDecls (135): TypeDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;

              | 245,184 => (* P46 TypeDecls (135): TypeDecls TypeDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 135;

              | 246,134 => (* P47 TypeDecl (137): StkIdent StkEqual Type StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 137;

              | 247 => (* P48 ConstDeclGroup (140): StkRwCONST ConstDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 140;

              | 248,158 => (* P49 ConstDecls (139): ConstDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 249,157 => (* P50 ConstDecls (139): ConstDecls ConstDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 139;

              | 250,156 => (* P51 ConstDecl (141): StkIdent OptConstType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 141;

              | 251 => (* P52 OptConstType (142): .*)
                yyNonterminal := 142;
                (* line 442 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 252,155 => (* P53 OptConstType (142): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 142;
                (* line 446 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 253 => (* P54 VarDeclGroup (145): StkRwVAR VarDecls .*)
                DEC (yyStackPtr, 2); yyNonterminal := 145;

              | 254,187 => (* P55 VarDecls (144): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;

              | 255,186 => (* P56 VarDecls (144): VarDecls VarDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 144;

              | 256,154 => (* P57 VarDecl (146): StkIdent OptVarType OptVarValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 455 of "FM3Parser.lalr" *)
                 IF NOT yyAttributeStack^[yyStackPtr+2] . PaBool AND NOT yyAttributeStack^[yyStackPtr+3] . PaBool
                       THEN
                         FM3Messages . Error
                           ( PositionImage ( yyAttributeStack^[yyStackPtr+1] . Scan . Position )
                           , " VAR decl must have a type and/or an initial value. (2.4.3)."
                           );
                       END (*IF*) 
                     
              | 257 => (* P58 OptVarType (147): .*)
                yyNonterminal := 147;
                (* line 464 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 258,151 => (* P59 OptVarType (147): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 147;
                (* line 468 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 259 => (* P60 OptVarValue (148): .*)
                yyNonterminal := 148;
                (* line 471 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ); 
                       yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                     
              | 260,153 => (* P61 OptVarValue (148): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;
                (* line 475 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ;
                       yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 261,152 => (* P62 Type (138): RecordType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 138;

              | 262,120 => (* P63 RecordType (149): StkRwRECORD VarDecl StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 149;

              | 263,170 => (* P64 Signature (153): Formals ResultType RaisesSet .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 487 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         Push_TCPrp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 264,121 => (* P65 Formals (150): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 150;
                (* line 499 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Scopes . ScopeEmpty ( Sk . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 265,127 => (* P66 Formals (150): StkOpenParen FormalsLt FormalsPlusList OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 5); yyNonterminal := 150;
                (* line 504 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Scopes . ScopeRt ( Sk . SkFormals ) ;
                       MakeList ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 266 => (* P67 FormalsLt (154): .*)
                yyNonterminal := 154;
                (* line 509 of "FM3Parser.lalr" *)
                 FM3Scopes . ScopeLt ( Sk . SkFormals ) ; 
              | 267,167 => (* P68 FormalsPlusList (155): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 511 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* Formal count. *) ; 
              | 268,159 => (* P69 FormalsPlusList (155): FormalsPlusList StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 155;
                (* line 513 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Formal count. *); 
              | 269,162 => (* P70 Formal (156): FormalMode DeclIdPlusList FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 156;
                (* line 517 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaByte = ORD ( FormalModeTyp . FmVAR )  
                       THEN
                         IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool
                         THEN
                           FM3Messages . Error
                             ( PositionImage ( yyAttributeStack^[yyStackPtr+2] . Scan . Position )
                             , " VAR formal must have a type (2.2.8)."
                             );
                         END (*IF*) ; 
                         IF yyAttributeStack^[yyStackPtr+4] . PaBool
                         THEN
                           FM3Messages . Error
                             ( PositionImage ( yyAttributeStack^[yyStackPtr+2] . Scan . Position )
                             , " VAR formal cannot have a default expression  (2.2.8)."
                             );
                         END (*IF*) ; 
                       ELSIF NOT yyAttributeStack^[yyStackPtr+3] . PaBool AND NOT yyAttributeStack^[yyStackPtr+4] . PaBool
                       THEN
                         FM3Messages . Error
                           ( PositionImage ( yyAttributeStack^[yyStackPtr+2] . Scan . Position )
                           , " Formal must have a type and/or default expression (2.2.8)." );
                       END (*IF*);
                       MakeList ( yySynAttribute , yyAttributeStack^[yyStackPtr+1] . PaInt , yyAttributeStack^[yyStackPtr+2] ); 
                     
              | 270 => (* P71 FormalMode (157): .*)
                yyNonterminal := 157;
                (* line 544 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( FormalModeTyp . FmVALUE );
                       yySynAttribute . PaInt := Itk . ItkFormalVALUEIdListLt; 
                     
              | 271,123 => (* P72 FormalMode (157): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 548 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( FormalModeTyp . FmVALUE );
                       yySynAttribute . PaInt := Itk . ItkFormalVALUEIdListLt; 
                     
              | 272,124 => (* P73 FormalMode (157): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 552 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( FormalModeTyp . FmVAR );
                       yySynAttribute . PaInt := Itk . ItkFormalVARIdListLt; 
                     
              | 273,122 => (* P74 FormalMode (157): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 556 of "FM3Parser.lalr" *)
                 yySynAttribute . PaByte := ORD ( FormalModeTyp . FmREADONLY );
                       yySynAttribute . PaInt := Itk . ItkFormalREADONLYIdListLt; 
                     
              | 274,165 => (* P75 FormalType (158): FormalTypeAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 275,166 => (* P76 FormalType (158): FormalTypePresent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 276 => (* P77 FormalTypeAbsent (160): .*)
                yyNonterminal := 160;
                (* line 563 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       Push_T ( Itk . ItkFormalTypeAbsent ) ;
                     
              | 277,160 => (* P78 FormalTypePresent (161): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 161;
                (* line 567 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       Push_TCr ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ); 
                     
              | 278,163 => (* P79 FormalExpr (159): FormalExprAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 159;

              | 279,164 => (* P80 FormalExpr (159): FormalExprPresent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 159;

              | 280 => (* P81 FormalExprAbsent (162): .*)
                yyNonterminal := 162;
                (* line 574 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       Push_T ( Itk . ItkFormalExprAbsent ) ;
                     
              | 281,161 => (* P82 FormalExprPresent (163): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 578 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       Push_TCr (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ); 
                     
              | 282,174 => (* P83 ResultType (151): ResultTypeAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 283,175 => (* P84 ResultType (151): ResultTypePresent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 284 => (* P85 ResultTypeAbsent (164): .*)
                yyNonterminal := 164;
                (* line 585 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       Push_T ( Itk . ItkResultTypeAbsent ) ;
                     
              | 285,168 => (* P86 ResultTypePresent (165): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 589 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       Push_TCr (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord ); 
                     
              | 286,171 => (* P87 RaisesSet (152): RaisesSetAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 287,172 => (* P88 RaisesSet (152): RaisesSetANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 288,173 => (* P89 RaisesSet (152): RaisesSetPresent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 289 => (* P90 RaisesSetAbsent (166): .*)
                yyNonterminal := 166;
                (* line 597 of "FM3Parser.lalr" *)
                 Push_T ( Itk . ItkRaisesSetAbsent ) ; 
              | 290,128 => (* P91 RaisesSetANY (167): StkRwANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;
                (* line 599 of "FM3Parser.lalr" *)
                 Push_TP ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
              | 291,130 => (* P92 RaisesSetPresent (168): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 168;
                (* line 602 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 292,181 => (* P93 ProcDecl (170): StkRwPROCEDURE StkIdent Signature OptBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 170;
                (* line 607 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Globals . CurrentUnitRef ^ . UntKind OF 
                         | FM3Units . UnitKindTyp . UkInterface  
                         , FM3Units . UnitKindTyp . UkGenInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . Error
                                ( PositionImage ( yyAttributeStack^[yyStackPtr+4] . Scan . Position )
                                , " A procedure in an interface must not have a body (2.5.2)."
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | FM3Units . UnitKindTyp . UkModule  
                         , FM3Units . UnitKindTyp . UkGenModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . Error
                                ( PositionImage ( yyAttributeStack^[yyStackPtr+4] . Scan . Position )
                                , " A procedure in a module must have a body (2.5)."
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         ELSE (* Can't happen. *) 
                         END (*CASE*);
                         Push_TCIri
                           ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord,  yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 293,182 => (* P94 OptBody (169): OptBodyAbsent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;

              | 294,183 => (* P95 OptBody (169): OptBodyPresent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;

              | 295,131 => (* P96 OptBodyAbsent (171): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 641 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       Push_T ( Itk . ItkProcBodyAbsent ); 
                     
              | 296,132 => (* P97 OptBodyPresent (172): StkEqual Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 172;
                (* line 646 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                       yySynAttribute . PaConstructNo := yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ;
                       Push_TCr ( Itk . ItkProcBodyLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord );
                     
              | 297 => (* P98 Expr (143): .*)
                yyNonterminal := 143;

              | 298,133 => (* P99 Block (119): BlockLt DeclList StkRwBEGIN Stmts StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 119;

              | 299 => (* P100 BlockLt (173): .*)
                yyNonterminal := 173;
                (* line 661 of "FM3Parser.lalr" *)
                 FM3ParsePass . BeginBlock ( ) (* Pushes nothing. *) ; 
              | 300 => (* P101 DeclList (117): DeclListRecurse .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 664 of "FM3Parser.lalr" *)
                 MakeList ( yySynAttribute , Itk . ItkDeclListLt , yyAttributeStack^[yyStackPtr+1] ) ; 
              | 301 => (* P102 DeclListRecurse (175): .*)
                yyNonterminal := 175;
                (* line 666 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 302,135 => (* P103 DeclListRecurse (175): DeclListRecurse Decl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 668 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 303,189 => (* P104 Decl (176): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 304,190 => (* P105 Decl (176): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 305,188 => (* P106 Decl (176): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 306,191 => (* P107 Decl (176): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;

              | 307 => (* P108 Stmts (174): .*)
                yyNonterminal := 174;
                (* line 678 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 308,179 => (* P109 Stmts (174): StmtPlusList OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;

              | 309,180 => (* P110 StmtPlusList (177): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;

              | 310,177 => (* P111 StmtPlusList (177): StmtPlusList StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 177;

              | 311,178 => (* P112 Stmt (178): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;

              | 312,176 => (* P113 AssignStmt (179): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;

              END (*CASE*);
             (* End of inserted emantic action code from the .lalr file: **)

               (* Here, a reduction has been partially done.  yyStackPtr has been
                  decremented by the RHS length, yyNonterminal has been set to
                  the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which will have set yySynAttribute.  Now do a nonterminal
                  read transition on yyStateStack^ [yyStackPtr] (* A state*)
                  and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
               DO
                 yyOldUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := UnnestCoord ( );
                   ELSE WParsAttr . PaUnnestCoord := yyOldUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
              PushUnnestStk (WParsAttr);
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
            yyIsRepairing := FALSE;
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType) =
   VAR
      TokensSkipped     : BOOLEAN;
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenArray        : ARRAY [0..127] OF CHAR;
      TokenText         : TEXT;
      TokenString       : Strings.tString;
      ContinueString    : Strings.tString;
   BEGIN
   (* 1. report the error *)
         TokenName ( Terminal , (*OUT*) TokenText );
         FrontErrors.ErrorMessageTraced
           (FrontErrors.SyntaxError, FrontErrors.Error, 
          FM3Scanner.Attribute.Position, FrontErrors.eText, TokenText);

   (* 2. report the set of expected terminal symbols *)
      ContinueSet:= IntSets . Empty ( ); 
      ComputeContinuation (StateStack, StackSize, StackPtr, ContinueSet);
      Strings.AssignEmpty (ContinueString);
      FOR Token := IntSets.Minimum (ContinueSet) TO IntSets.Maximum (ContinueSet) DO
         IF IntSets.IsElement (Token, ContinueSet) THEN
            TokenName (Token, (*OUT*) TokenText);
            Strings.TextToString (TokenText, TokenString);
            IF (Strings.Length (ContinueString) + Strings.Length (TokenString) + 1 <= Strings.cMaxStrLength) THEN
               Strings.Concatenate (ContinueString, TokenString);
               Strings.Append (ContinueString, ' ');
            END;
         END;
      END;
      FrontErrors.ErrorMessageI
        (FrontErrors.ExpectedTokens, FrontErrors.Information,
       FM3Scanner.Attribute.Position, FrontErrors.eString, ADR (ContinueString));
      ContinueSet := NIL;

   (* 3. compute the set of terminal symbols for restart of the parse *)
      RestartSet := IntSets . Empty ( );
      ComputeRestartPoints (StateStack, StackSize, StackPtr, RestartSet);

   (* 4. skip terminal symbols until a restart point is reached *)
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END;
      RestartSet := NIL;

   (* 5. report the restart point *)
      IF TokensSkipped THEN
       FrontErrors.ErrorMessage (FrontErrors.RestartPoint, FrontErrors.Information, FM3Scanner.Attribute.Position);
      END;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 51 "FM3Parser.lalr" *)
 FrontErrors . SetReportMode ( FrontErrors . tReportMode . eImmediate ); 
  
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 55 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

