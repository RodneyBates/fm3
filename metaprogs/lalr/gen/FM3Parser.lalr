
(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023,       Rodney M. Bates.                                    *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

(* File FM3Parser.lalr.  lalr specification for FM3Parser. *)

SCANNER FM3Scanner

PARSER FM3Parser

/* Stuff to go into the parser interface. */ 
EXPORT
  { IMPORT FM3IntToks;
    IMPORT FM3ParseSem; 

    TYPE tParsAttribute = FM3ParseSem . tParsAttribute; 
  }

(* Stuff to go at front of the parser module, at global scope. *)
GLOBAL

  { IMPORT FM3IntToks AS Itk;
    FROM FM3ParseSem IMPORT PushTok , PushTokPatch;
  }

(* Local declarations of the Parse procedure. *) 
LOCAL { }

(* Parser module initialization. *) 
BEGIN { }

(* Parser module final cleanup. *) 
CLOSE { }

(* Source code terminal tokens. *)
(* Copied in from GeTok output and edited. *) 
TOKEN

(* I tried hard to get this token naming & numbering in just
   one place, but it is just too much tangential work for the
   benefit.  These are manually copied and edited from generated
   FM3SrcToks.i3, which they must be kept in sync with.  Other
   Modula-3 code will use the declarations from FM3SrcToks.i3.
*)

(* These are probably not used by lalr: 
TkMinTok                                     =     1

  StkUnknown                                   =     1 (*16_01 *)
  StkBOF                                       =     2 (*16_02 *)
  StkEOF                                       =     3 (*16_03 *)

*)

    StkRwAND                                     =     5 (*16_05 *)
    StkRwANY                                     =     6 (*16_06 *)
    StkRwARRAY                                   =     7 (*16_07 *)
    StkRwAS                                      =     8 (*16_08 *)
    StkRwBEGIN                                   =     9 (*16_09 *)
    StkRwBITS                                    =    10 (*16_0a *)
    StkRwBRANDED                                 =    11 (*16_0b *)
    StkRwBY                                      =    12 (*16_0c *)
    StkRwCASE                                    =    13 (*16_0d *)
    StkRwCONST                                   =    14 (*16_0e *)
    StkRwDIV                                     =    15 (*16_0f *)
    StkRwDO                                      =    16 (*16_10 *)
    StkRwELSE                                    =    17 (*16_11 *)
    StkRwELSIF                                   =    18 (*16_12 *)
    StkRwEND                                     =    19 (*16_13 *)
    StkRwEVAL                                    =    20 (*16_14 *)
    StkRwEXCEPT                                  =    21 (*16_15 *)
    StkRwEXCEPTION                               =    22 (*16_16 *)
    StkRwEXIT                                    =    23 (*16_17 *)
    StkRwEXPORTS                                 =    24 (*16_18 *)
    StkRwFINALLY                                 =    25 (*16_19 *)
    StkRwFOR                                     =    26 (*16_1a *)
    StkRwFROM                                    =    27 (*16_1b *)
    StkRwGENERIC                                 =    28 (*16_1c *)
    StkRwIF                                      =    29 (*16_1d *)
    StkRwIMPORT                                  =    30 (*16_1e *)
    StkRwIN                                      =    31 (*16_1f *)
    StkRwINTERFACE                               =    32 (*16_20 *)
    StkRwLOCK                                    =    33 (*16_21 *)
    StkRwLOOP                                    =    34 (*16_22 *)
    StkRwMETHODS                                 =    35 (*16_23 *)
    StkRwMOD                                     =    36 (*16_24 *)
    StkRwMODULE                                  =    37 (*16_25 *)
    StkRwNOT                                     =    38 (*16_26 *)
    StkRwOBJECT                                  =    39 (*16_27 *)
    StkRwOF                                      =    40 (*16_28 *)
    StkRwOR                                      =    41 (*16_29 *)
    StkRwOVERRIDES                               =    42 (*16_2a *)
    StkRwPROCEDURE                               =    43 (*16_2b *)
    StkRwRAISE                                   =    44 (*16_2c *)
    StkRwRAISES                                  =    45 (*16_2d *)
    StkRwREADONLY                                =    46 (*16_2e *)
    StkRwRECORD                                  =    47 (*16_2f *)
    StkRwREF                                     =    48 (*16_30 *)
    StkRwREPEAT                                  =    49 (*16_31 *)
    StkRwRETURN                                  =    50 (*16_32 *)
    StkRwREVEAL                                  =    51 (*16_33 *)
    StkRwROOT                                    =    52 (*16_34 *)
    StkRwSET                                     =    53 (*16_35 *)
    StkRwTHEN                                    =    54 (*16_36 *)
    StkRwTO                                      =    55 (*16_37 *)
    StkRwTRY                                     =    56 (*16_38 *)
    StkRwTYPE                                    =    57 (*16_39 *)
    StkRwTYPECASE                                =    58 (*16_3a *)
    StkRwUNSAFE                                  =    59 (*16_3b *)
    StkRwUNTIL                                   =    60 (*16_3c *)
    StkRwUNTRACED                                =    61 (*16_3d *)
    StkRwVALUE                                   =    62 (*16_3e *)
    StkRwVAR                                     =    63 (*16_3f *)
    StkRwWHILE                                   =    64 (*16_c0 00 *)
    StkRwWITH                                    =    65 (*16_c1 00 *)
(* Special character tokens: *)
    StkSemicolon                                 =    66 (*16_c2 00 *)
    StkDot                                       =    67 (*16_c3 00 *)
    StkEqual                                     =    68 (*16_c4 00 *)
    StkOpenParen                                 =    69 (*16_c5 00 *)
    StkCloseParen                                =    70 (*16_c6 00 *)
    StkComma                                     =    71 (*16_c7 00 *)
    StkColon                                     =    72 (*16_c8 00 *)
    StkSubtype                                   =    73 (*16_c9 00 *)
    StkBecomes                                   =    74 (*16_ca 00 *)
    StkOpenBrace                                 =    75 (*16_cb 00 *)
    StkCloseBrace                                =    76 (*16_cc 00 *)
    StkStroke                                    =    77 (*16_cd 00 *)
    StkArrow                                     =    78 (*16_ce 00 *)
    StkEllipsis                                  =    79 (*16_cf 00 *)
    StkOpenBracket                               =    80 (*16_d0 00 *)
    StkCloseBracket                              =    81 (*16_d1 00 *)
    StkUnequal                                   =    82 (*16_d2 00 *)
    StkLess                                      =    83 (*16_d3 00 *)
    StkGreater                                   =    84 (*16_d4 00 *)
    StkLessEqual                                 =    85 (*16_d5 00 *)
    StkGreaterEqual                              =    86 (*16_d6 00 *)
    StkPlus                                      =    87 (*16_d7 00 *)
    StkMinus                                     =    88 (*16_d8 00 *)
    StkAmpersand                                 =    89 (*16_d9 00 *)
    StkStar                                      =    90 (*16_da 00 *)
    StkSlash                                     =    91 (*16_db 00 *)
    StkDeref                                     =    92 (*16_dc 00 *)
    StkOpenPragma                                =    93 (*16_dd 00 *)
    StkClosePragma                               =    94 (*16_de 00 *)
(* Variable tokens: *)
    StkIdent                                     =    95 (*16_df 00 *)
    StkIntLit                                    =    96 (*16_e0 00 *)
    StkLongIntLit                                =    97 (*16_e1 00 *)
    StkBasedLit                                  =    98 (*16_e2 00 *)
    StkLongBasedLit                              =    99 (*16_e3 00 *)
    StkRealLit                                   =   100 (*16_e4 00 *)
    StkLongRealLit                               =   101 (*16_e5 00 *)
    StkExtendedLit                               =   102 (*16_e6 00 *)
    StkTextLit                                   =   103 (*16_e7 00 *)
    StkWideTextLit                               =   104 (*16_e8 00 *)
    StkCharLit                                   =   105 (*16_e9 00 *)
    StkWideCharLit                               =   106 (*16_ea 00 *)
    StkLexErrChars                               =   107 (*16_eb 00 *)
(* End FM3SrcToks.gentok *)

(* END of copied-in token decls from FM3SrcToks.i3. *) 


(* Productions. *) 
RULE

(* Compilation units: *) 

Compilation : GenInterface . 
Compilation : InstInterface . 
Compilation : GenModule . 
Compilation : InstModule .
Compilation : Interface . 
Compilation : Module .
GenInterface :
    StkRwGENERIC StkRwINTERFACE StkIdent GenFormalsList StkSemicolon
    ImportList DeclList StkRwEND StkIdent StkDot . 

InstInterface :
    OptUnsafe StkRwINTERFACE StkIdent StkEqual
    StkIdent GenActals StkRwEND StkIdent StkDot . 

GenModule :
    StkRwGENERIC StkRwMODULE StkIdent GenFormalsList StkSemicolon
    ImportList Block StkRwEND StkIdent StkDot . 

InstModule :
    OptUnsafeTkRwMODULE StkIdent Exports StkEqual
    StkIdent GenActals StkRwEND StkIdent StkDot . 

Interface :
    OptUnsafe StkRwINTERFACE StkIdent StkSemicolon
    ImportList DeclList StkRwEND StkIdent StkDot .

Module :
    OptUnsafe StkRwMODULE StkIdent Exports StkSemicolon
    ImportList Block StkRwEND StkIdent StkDot .

OptUnsafe : StkUNSAFE { $$ . PaBool := TRUE; } .
OptUnsafe : { $$ . PaBool := FALSE; }.

Exports : { } .
Exports : StkRwEXPORTS ExportsList { }.

ExportsList : .
ExportsList : ExportsListSub 
    { WITH i = $1 . PaLong
      DO PushTok ( Itk . ItkExportsListRt , i+1L);
        PushTokPatch ( Itk . ItkExportsListLtPatch , 0L , i+1L);
      END (*WITH*); 
    } .

ExportsListSub : { $$ . PaLong := 0L; } .
ExportsListSub : ExportsListSub StkComma Ident
    { WITH i = $1 . PaLong
      DO PushTok ( Itk . ItkExportsListElemRt , i );
        PushTokPatch ( Itk . ItkExportsListElemLtPatch , 0L , i );
        $$ . PaLong := i+1L;
      END (*WITH*); 
    } .

GenFormalsList : ExportsList . 

GenActuals : ExportsList .

DeclList : . 

Block : .

(* END of FM3Parser.lalr. *)

