
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2025 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
(*
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
*)
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 272;
   yyTableMax               = 958;
   yyNTableMax              = 1261;
   yyFirstReadState         = 1;
   yyLastReadState          = 210;
   yyFirstReadTermState             = 211;
   yyLastReadTermState              = 299;
   yyLastReadNontermState           = 415;
   yyFirstReduceState               = 416;
   yyLastReduceState                = 698;
   yyStartState             = 1;
   yyStopState              = 416;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   1])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   2])
         , (*  12*) ADR (yyTComb [   3]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   4]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   5]) , (*  31*) ADR (yyTComb [   3])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  10]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [   0]) , (*  37*) ADR (yyTComb [   1])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [  13])
         , (*  40*) ADR (yyTComb [  72]) , (*  41*) ADR (yyTComb [  73])
         , (*  42*) ADR (yyTComb [  17]) , (*  43*) ADR (yyTComb [  16])
         , (*  44*) ADR (yyTComb [  17]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [  10]) , (*  47*) ADR (yyTComb [   0])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [  92])
         , (*  50*) ADR (yyTComb [   1]) , (*  51*) ADR (yyTComb [   3])
         , (*  52*) ADR (yyTComb [   0]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [ 103]) , (*  55*) ADR (yyTComb [   4])
         , (*  56*) ADR (yyTComb [  33]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [ 122]) , (*  59*) ADR (yyTComb [   0])
         , (*  60*) ADR (yyTComb [ 156]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [ 175]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 220]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 276]) , (*  67*) ADR (yyTComb [  13])
         , (*  68*) ADR (yyTComb [ 174]) , (*  69*) ADR (yyTComb [ 351])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 439])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [  34])
         , (*  74*) ADR (yyTComb [ 527]) , (*  75*) ADR (yyTComb [  32])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [ 332])
         , (*  78*) ADR (yyTComb [ 601]) , (*  79*) ADR (yyTComb [ 676])
         , (*  80*) ADR (yyTComb [  39]) , (*  81*) ADR (yyTComb [  12])
         , (*  82*) ADR (yyTComb [  47]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [  43]) , (*  85*) ADR (yyTComb [  73])
         , (*  86*) ADR (yyTComb [ 749]) , (*  87*) ADR (yyTComb [   4])
         , (*  88*) ADR (yyTComb [   0]) , (*  89*) ADR (yyTComb [  41])
         , (*  90*) ADR (yyTComb [  43]) , (*  91*) ADR (yyTComb [  50])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [   2])
         , (*  94*) ADR (yyTComb [ 186]) , (*  95*) ADR (yyTComb [  25])
         , (*  96*) ADR (yyTComb [ 113]) , (*  97*) ADR (yyTComb [ 247])
         , (*  98*) ADR (yyTComb [   0]) , (*  99*) ADR (yyTComb [   3])
         , (* 100*) ADR (yyTComb [ 105]) , (* 101*) ADR (yyTComb [   1])
         , (* 102*) ADR (yyTComb [   5]) , (* 103*) ADR (yyTComb [   1])
         , (* 104*) ADR (yyTComb [ 534]) , (* 105*) ADR (yyTComb [  11])
         , (* 106*) ADR (yyTComb [  12]) , (* 107*) ADR (yyTComb [  16])
         , (* 108*) ADR (yyTComb [  97]) , (* 109*) ADR (yyTComb [  22])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 381])
         , (* 112*) ADR (yyTComb [   0]) , (* 113*) ADR (yyTComb [   0])
         , (* 114*) ADR (yyTComb [  63]) , (* 115*) ADR (yyTComb [  74])
         , (* 116*) ADR (yyTComb [  80]) , (* 117*) ADR (yyTComb [ 137])
         , (* 118*) ADR (yyTComb [  52]) , (* 119*) ADR (yyTComb [ 102])
         , (* 120*) ADR (yyTComb [ 168]) , (* 121*) ADR (yyTComb [ 145])
         , (* 122*) ADR (yyTComb [ 426]) , (* 123*) ADR (yyTComb [ 143])
         , (* 124*) ADR (yyTComb [   0]) , (* 125*) ADR (yyTComb [  76])
         , (* 126*) ADR (yyTComb [ 148]) , (* 127*) ADR (yyTComb [   4])
         , (* 128*) ADR (yyTComb [  87]) , (* 129*) ADR (yyTComb [   5])
         , (* 130*) ADR (yyTComb [  86]) , (* 131*) ADR (yyTComb [   0])
         , (* 132*) ADR (yyTComb [   6]) , (* 133*) ADR (yyTComb [   0])
         , (* 134*) ADR (yyTComb [  77]) , (* 135*) ADR (yyTComb [   0])
         , (* 136*) ADR (yyTComb [  78]) , (* 137*) ADR (yyTComb [   5])
         , (* 138*) ADR (yyTComb [   0]) , (* 139*) ADR (yyTComb [  97])
         , (* 140*) ADR (yyTComb [ 110]) , (* 141*) ADR (yyTComb [   0])
         , (* 142*) ADR (yyTComb [ 115]) , (* 143*) ADR (yyTComb [ 326])
         , (* 144*) ADR (yyTComb [ 524]) , (* 145*) ADR (yyTComb [ 120])
         , (* 146*) ADR (yyTComb [ 140]) , (* 147*) ADR (yyTComb [   0])
         , (* 148*) ADR (yyTComb [ 123]) , (* 149*) ADR (yyTComb [ 527])
         , (* 150*) ADR (yyTComb [   3]) , (* 151*) ADR (yyTComb [ 156])
         , (* 152*) ADR (yyTComb [ 618]) , (* 153*) ADR (yyTComb [ 726])
         , (* 154*) ADR (yyTComb [ 136]) , (* 155*) ADR (yyTComb [ 140])
         , (* 156*) ADR (yyTComb [ 542]) , (* 157*) ADR (yyTComb [ 659])
         , (* 158*) ADR (yyTComb [ 143]) , (* 159*) ADR (yyTComb [ 146])
         , (* 160*) ADR (yyTComb [ 151]) , (* 161*) ADR (yyTComb [ 165])
         , (* 162*) ADR (yyTComb [   0]) , (* 163*) ADR (yyTComb [   0])
         , (* 164*) ADR (yyTComb [ 170]) , (* 165*) ADR (yyTComb [   0])
         , (* 166*) ADR (yyTComb [   0]) , (* 167*) ADR (yyTComb [   0])
         , (* 168*) ADR (yyTComb [   7]) , (* 169*) ADR (yyTComb [ 170])
         , (* 170*) ADR (yyTComb [  18]) , (* 171*) ADR (yyTComb [ 231])
         , (* 172*) ADR (yyTComb [   8]) , (* 173*) ADR (yyTComb [ 244])
         , (* 174*) ADR (yyTComb [ 259]) , (* 175*) ADR (yyTComb [   0])
         , (* 176*) ADR (yyTComb [ 221]) , (* 177*) ADR (yyTComb [   0])
         , (* 178*) ADR (yyTComb [   0]) , (* 179*) ADR (yyTComb [ 178])
         , (* 180*) ADR (yyTComb [  10]) , (* 181*) ADR (yyTComb [   0])
         , (* 182*) ADR (yyTComb [ 181]) , (* 183*) ADR (yyTComb [ 198])
         , (* 184*) ADR (yyTComb [   0]) , (* 185*) ADR (yyTComb [   0])
         , (* 186*) ADR (yyTComb [ 742]) , (* 187*) ADR (yyTComb [   1])
         , (* 188*) ADR (yyTComb [  38]) , (* 189*) ADR (yyTComb [  41])
         , (* 190*) ADR (yyTComb [   0]) , (* 191*) ADR (yyTComb [ 198])
         , (* 192*) ADR (yyTComb [ 198]) , (* 193*) ADR (yyTComb [   0])
         , (* 194*) ADR (yyTComb [ 214]) , (* 195*) ADR (yyTComb [ 238])
         , (* 196*) ADR (yyTComb [ 227]) , (* 197*) ADR (yyTComb [ 795])
         , (* 198*) ADR (yyTComb [ 797]) , (* 199*) ADR (yyTComb [ 497])
         , (* 200*) ADR (yyTComb [  42]) , (* 201*) ADR (yyTComb [   0])
         , (* 202*) ADR (yyTComb [ 229]) , (* 203*) ADR (yyTComb [ 229])
         , (* 204*) ADR (yyTComb [ 231]) , (* 205*) ADR (yyTComb [ 244])
         , (* 206*) ADR (yyTComb [ 799]) , (* 207*) ADR (yyTComb [ 850])
         , (* 208*) ADR (yyTComb [ 798]) , (* 209*) ADR (yyTComb [ 217])
         , (* 210*) ADR (yyTComb [ 247])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 114])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 112])
         , (*  16*) ADR (yyNComb [ 114]) , (*  17*) ADR (yyNComb [ 121])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 123])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 125])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 126])
         , (*  24*) ADR (yyNComb [ 127]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 128]) , (*  27*) ADR (yyNComb [ 129])
         , (*  28*) ADR (yyNComb [ 127]) , (*  29*) ADR (yyNComb [ 113])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 109])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 132])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 127])
         , (*  36*) ADR (yyNComb [ 137]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 138]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 152]) , (*  41*) ADR (yyNComb [ 139])
         , (*  42*) ADR (yyNComb [ 109]) , (*  43*) ADR (yyNComb [ 110])
         , (*  44*) ADR (yyNComb [ 109]) , (*  45*) ADR (yyNComb [ 206])
         , (*  46*) ADR (yyNComb [ 109]) , (*  47*) ADR (yyNComb [ 269])
         , (*  48*) ADR (yyNComb [ 109]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 111]) , (*  51*) ADR (yyNComb [ 130])
         , (*  52*) ADR (yyNComb [ 189]) , (*  53*) ADR (yyNComb [ 271])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 109])
         , (*  56*) ADR (yyNComb [ 113]) , (*  57*) ADR (yyNComb [ 307])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 283])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 334])
         , (*  62*) ADR (yyNComb [ 110]) , (*  63*) ADR (yyNComb [ 343])
         , (*  64*) ADR (yyNComb [ 109]) , (*  65*) ADR (yyNComb [ 196])
         , (*  66*) ADR (yyNComb [ 110]) , (*  67*) ADR (yyNComb [ 352])
         , (*  68*) ADR (yyNComb [ 133]) , (*  69*) ADR (yyNComb [ 115])
         , (*  70*) ADR (yyNComb [ 140]) , (*  71*) ADR (yyNComb [ 109])
         , (*  72*) ADR (yyNComb [ 109]) , (*  73*) ADR (yyNComb [ 365])
         , (*  74*) ADR (yyNComb [ 109]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 393]) , (*  77*) ADR (yyNComb [ 109])
         , (*  78*) ADR (yyNComb [ 109]) , (*  79*) ADR (yyNComb [ 110])
         , (*  80*) ADR (yyNComb [ 109]) , (*  81*) ADR (yyNComb [ 425])
         , (*  82*) ADR (yyNComb [ 109]) , (*  83*) ADR (yyNComb [ 455])
         , (*  84*) ADR (yyNComb [ 120]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 110]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 537]) , (*  89*) ADR (yyNComb [ 142])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 109])
         , (*  92*) ADR (yyNComb [ 151]) , (*  93*) ADR (yyNComb [ 133])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 109])
         , (*  96*) ADR (yyNComb [ 110]) , (*  97*) ADR (yyNComb [ 112])
         , (*  98*) ADR (yyNComb [ 547]) , (*  99*) ADR (yyNComb [ 109])
         , (* 100*) ADR (yyNComb [ 124]) , (* 101*) ADR (yyNComb [ 136])
         , (* 102*) ADR (yyNComb [ 115]) , (* 103*) ADR (yyNComb [ 109])
         , (* 104*) ADR (yyNComb [ 109]) , (* 105*) ADR (yyNComb [ 364])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 208])
         , (* 108*) ADR (yyNComb [ 128]) , (* 109*) ADR (yyNComb [ 146])
         , (* 110*) ADR (yyNComb [ 109]) , (* 111*) ADR (yyNComb [ 109])
         , (* 112*) ADR (yyNComb [ 621]) , (* 113*) ADR (yyNComb [ 271])
         , (* 114*) ADR (yyNComb [ 271]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 131]) , (* 117*) ADR (yyNComb [ 109])
         , (* 118*) ADR (yyNComb [ 143]) , (* 119*) ADR (yyNComb [ 109])
         , (* 120*) ADR (yyNComb [ 113]) , (* 121*) ADR (yyNComb [ 113])
         , (* 122*) ADR (yyNComb [ 109]) , (* 123*) ADR (yyNComb [ 109])
         , (* 124*) ADR (yyNComb [ 110]) , (* 125*) ADR (yyNComb [ 109])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 319])
         , (* 128*) ADR (yyNComb [ 132]) , (* 129*) ADR (yyNComb [ 138])
         , (* 130*) ADR (yyNComb [ 109]) , (* 131*) ADR (yyNComb [ 607])
         , (* 132*) ADR (yyNComb [ 109]) , (* 133*) ADR (yyNComb [ 622])
         , (* 134*) ADR (yyNComb [ 109]) , (* 135*) ADR (yyNComb [ 637])
         , (* 136*) ADR (yyNComb [ 109]) , (* 137*) ADR (yyNComb [ 109])
         , (* 138*) ADR (yyNComb [ 743]) , (* 139*) ADR (yyNComb [ 117])
         , (* 140*) ADR (yyNComb [ 109]) , (* 141*) ADR (yyNComb [ 659])
         , (* 142*) ADR (yyNComb [ 109]) , (* 143*) ADR (yyNComb [ 462])
         , (* 144*) ADR (yyNComb [ 401]) , (* 145*) ADR (yyNComb [ 109])
         , (* 146*) ADR (yyNComb [ 116]) , (* 147*) ADR (yyNComb [ 806])
         , (* 148*) ADR (yyNComb [ 109]) , (* 149*) ADR (yyNComb [ 869])
         , (* 150*) ADR (yyNComb [ 109]) , (* 151*) ADR (yyNComb [ 114])
         , (* 152*) ADR (yyNComb [ 904]) , (* 153*) ADR (yyNComb [ 510])
         , (* 154*) ADR (yyNComb [ 109]) , (* 155*) ADR (yyNComb [ 109])
         , (* 156*) ADR (yyNComb [ 384]) , (* 157*) ADR (yyNComb [ 303])
         , (* 158*) ADR (yyNComb [ 109]) , (* 159*) ADR (yyNComb [ 109])
         , (* 160*) ADR (yyNComb [ 315]) , (* 161*) ADR (yyNComb [ 206])
         , (* 162*) ADR (yyNComb [ 175]) , (* 163*) ADR (yyNComb [ 169])
         , (* 164*) ADR (yyNComb [ 109]) , (* 165*) ADR (yyNComb [ 903])
         , (* 166*) ADR (yyNComb [ 109]) , (* 167*) ADR (yyNComb [ 906])
         , (* 168*) ADR (yyNComb [ 109]) , (* 169*) ADR (yyNComb [ 109])
         , (* 170*) ADR (yyNComb [ 942]) , (* 171*) ADR (yyNComb [ 153])
         , (* 172*) ADR (yyNComb [ 969]) , (* 173*) ADR (yyNComb [ 805])
         , (* 174*) ADR (yyNComb [ 161]) , (* 175*) ADR (yyNComb [ 188])
         , (* 176*) ADR (yyNComb [ 109]) , (* 177*) ADR (yyNComb [ 186])
         , (* 178*) ADR (yyNComb [ 173]) , (* 179*) ADR (yyNComb [ 171])
         , (* 180*) ADR (yyNComb [ 109]) , (* 181*) ADR (yyNComb [ 183])
         , (* 182*) ADR (yyNComb [ 109]) , (* 183*) ADR (yyNComb [ 109])
         , (* 184*) ADR (yyNComb [ 181]) , (* 185*) ADR (yyNComb [ 490])
         , (* 186*) ADR (yyNComb [1051]) , (* 187*) ADR (yyNComb [ 109])
         , (* 188*) ADR (yyNComb [1016]) , (* 189*) ADR (yyNComb [ 109])
         , (* 190*) ADR (yyNComb [ 204]) , (* 191*) ADR (yyNComb [ 109])
         , (* 192*) ADR (yyNComb [ 109]) , (* 193*) ADR (yyNComb [ 193])
         , (* 194*) ADR (yyNComb [ 196]) , (* 195*) ADR (yyNComb [ 109])
         , (* 196*) ADR (yyNComb [ 109]) , (* 197*) ADR (yyNComb [ 213])
         , (* 198*) ADR (yyNComb [ 516]) , (* 199*) ADR (yyNComb [1098])
         , (* 200*) ADR (yyNComb [ 109]) , (* 201*) ADR (yyNComb [ 229])
         , (* 202*) ADR (yyNComb [ 109]) , (* 203*) ADR (yyNComb [ 109])
         , (* 204*) ADR (yyNComb [ 216]) , (* 205*) ADR (yyNComb [ 109])
         , (* 206*) ADR (yyNComb [ 231]) , (* 207*) ADR (yyNComb [ 520])
         , (* 208*) ADR (yyNComb [ 246]) , (* 209*) ADR (yyNComb [ 267])
         , (* 210*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  209
         , (*   4*)  209 , (*   5*)    0 , (*   6*)    0 , (*   7*)  209
         , (*   8*)    0 , (*   9*)    0 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)  209 , (*  14*)    0 , (*  15*)  197
         , (*  16*)  198 , (*  17*)  209 , (*  18*)    0 , (*  19*)  209
         , (*  20*)    0 , (*  21*)  209 , (*  22*)    0 , (*  23*)  209
         , (*  24*)  209 , (*  25*)    0 , (*  26*)  209 , (*  27*)  209
         , (*  28*)  179 , (*  29*)  194 , (*  30*)  195 , (*  31*)    0
         , (*  32*)    0 , (*  33*)  209 , (*  34*)    0 , (*  35*)  199
         , (*  36*)  209 , (*  37*)    0 , (*  38*)  209 , (*  39*)    0
         , (*  40*)  209 , (*  41*)  209 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)  152 , (*  46*)    0 , (*  47*)  152
         , (*  48*)  150 , (*  49*)    0 , (*  50*)    0 , (*  51*)  170
         , (*  52*)   67 , (*  53*)  170 , (*  54*)   74 , (*  55*)    0
         , (*  56*)    0 , (*  57*)  170 , (*  58*)   85 , (*  59*)  170
         , (*  60*)   77 , (*  61*)  170 , (*  62*)   86 , (*  63*)   67
         , (*  64*)   78 , (*  65*)   67 , (*  66*)   79 , (*  67*)   68
         , (*  68*)    0 , (*  69*)   56 , (*  70*)  209 , (*  71*)    0
         , (*  72*)   84 , (*  73*)   81 , (*  74*)    0 , (*  75*)    0
         , (*  76*)  170 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)  170 , (*  82*)    0 , (*  83*)  170
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)  152 , (*  89*)  209 , (*  90*)    0 , (*  91*)    0
         , (*  92*)  209 , (*  93*)  118 , (*  94*)    0 , (*  95*)    0
         , (*  96*)    0 , (*  97*)    0 , (*  98*)  170 , (*  99*)    0
         , (* 100*)  108 , (* 101*)  129 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)   93 , (* 106*)    0 , (* 107*)  209
         , (* 108*)  171 , (* 109*)  209 , (* 110*)  160 , (* 111*)    0
         , (* 112*)  152 , (* 113*)  160 , (* 114*)  117 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    0 , (* 126*)    0 , (* 127*)  209
         , (* 128*)  171 , (* 129*)  118 , (* 130*)    0 , (* 131*)  170
         , (* 132*)    0 , (* 133*)  170 , (* 134*)    0 , (* 135*)  170
         , (* 136*)    0 , (* 137*)    0 , (* 138*)  152 , (* 139*)    0
         , (* 140*)    0 , (* 141*)  170 , (* 142*)    0 , (* 143*)  209
         , (* 144*)  209 , (* 145*)    0 , (* 146*)    0 , (* 147*)  152
         , (* 148*)    0 , (* 149*)  153 , (* 150*)    0 , (* 151*)    0
         , (* 152*)    0 , (* 153*)    0 , (* 154*)    0 , (* 155*)    0
         , (* 156*)  118 , (* 157*)  118 , (* 158*)    0 , (* 159*)    0
         , (* 160*)    0 , (* 161*)    0 , (* 162*)  208 , (* 163*)  209
         , (* 164*)    0 , (* 165*)  186 , (* 166*)    0 , (* 167*)  188
         , (* 168*)    0 , (* 169*)    0 , (* 170*)   67 , (* 171*)    0
         , (* 172*)  170 , (* 173*)  199 , (* 174*)    0 , (* 175*)  209
         , (* 176*)    0 , (* 177*)  209 , (* 178*)  209 , (* 179*)    0
         , (* 180*)    0 , (* 181*)  209 , (* 182*)    0 , (* 183*)    0
         , (* 184*)  206 , (* 185*)  207 , (* 186*)    0 , (* 187*)    0
         , (* 188*)  170 , (* 189*)    0 , (* 190*)  209 , (* 191*)    0
         , (* 192*)    0 , (* 193*)  204 , (* 194*)    0 , (* 195*)    0
         , (* 196*)    0 , (* 197*)    0 , (* 198*)    0 , (* 199*)    0
         , (* 200*)    0 , (* 201*)  209 , (* 202*)    0 , (* 203*)    0
         , (* 204*)    0 , (* 205*)    0 , (* 206*)    0 , (* 207*)    0
         , (* 208*)    0 , (* 209*)    0 , (* 210*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  416} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 166,  167}
         , (*  10*) yyTCombType { 187,  188} , (*  11*) yyTCombType {  48,  548}
         , (*  12*) yyTCombType {  50,   51} , (*  13*) yyTCombType {  20,   21}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType { 102,   51} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  32,   33}
         , (*  20*) yyTCombType {  37,   38} , (*  21*) yyTCombType {  93,  563}
         , (*  22*) yyTCombType {  99,  269} , (*  23*) yyTCombType { 127,  577}
         , (*  24*) yyTCombType { 129,  447} , (*  25*) yyTCombType { 132,  278}
         , (*  26*) yyTCombType { 168,  294} , (*  27*) yyTCombType { 172,  447}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 180,  181}
         , (*  30*) yyTCombType {  18,  215} , (*  31*) yyTCombType { 106,  569}
         , (*  32*) yyTCombType {   1,  446} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType { 107,  570}
         , (*  36*) yyTCombType { 101,  447} , (*  37*) yyTCombType {   1,  446}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,   13}
         , (*  40*) yyTCombType { 103,  270} , (*  41*) yyTCombType { 109,  447}
         , (*  42*) yyTCombType {  51,  584} , (*  43*) yyTCombType { 101,  447}
         , (*  44*) yyTCombType { 102,  583} , (*  45*) yyTCombType { 137,  138}
         , (*  46*) yyTCombType { 105,  563} , (*  47*) yyTCombType { 106,  107}
         , (*  48*) yyTCombType {  48,  548} , (*  49*) yyTCombType {  50,  583}
         , (*  50*) yyTCombType {  46,   47} , (*  51*) yyTCombType {  51,  584}
         , (*  52*) yyTCombType {  87,   88} , (*  53*) yyTCombType { 105,  563}
         , (*  54*) yyTCombType { 106,  569} , (*  55*) yyTCombType { 150,  230}
         , (*  56*) yyTCombType { 170,   52} , (*  57*) yyTCombType { 188,  693}
         , (*  58*) yyTCombType { 107,  570} , (*  59*) yyTCombType {   1,  212}
         , (*  60*) yyTCombType { 189,  190} , (*  61*) yyTCombType { 200,  201}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType { 109,  447} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,  433} , (*  67*) yyTCombType {   9,  429}
         , (*  68*) yyTCombType {   8,  433} , (*  69*) yyTCombType {   9,  429}
         , (*  70*) yyTCombType {  14,   15} , (*  71*) yyTCombType {  20,  456}
         , (*  72*) yyTCombType {  14,   27} , (*  73*) yyTCombType {  22,  216}
         , (*  74*) yyTCombType {  25,  217} , (*  75*) yyTCombType {  30,  218}
         , (*  76*) yyTCombType {  20,  456} , (*  77*) yyTCombType {  34,  220}
         , (*  78*) yyTCombType {  22,   23} , (*  79*) yyTCombType {  25,   26}
         , (*  80*) yyTCombType {  39,  225} , (*  81*) yyTCombType {  40,  491}
         , (*  82*) yyTCombType {  41,  492} , (*  83*) yyTCombType {  42,  226}
         , (*  84*) yyTCombType {  43,  496} , (*  85*) yyTCombType {  44,  527}
         , (*  86*) yyTCombType {  40,  491} , (*  87*) yyTCombType {  41,  492}
         , (*  88*) yyTCombType {  43,  496} , (*  89*) yyTCombType {  44,   45}
         , (*  90*) yyTCombType {  46,  133} , (*  91*) yyTCombType {  40,  491}
         , (*  92*) yyTCombType {  41,  492} , (*  93*) yyTCombType {   8,  433}
         , (*  94*) yyTCombType {   9,   10} , (*  95*) yyTCombType {  10,   11}
         , (*  96*) yyTCombType {  11,  213} , (*  97*) yyTCombType {  12,  214}
         , (*  98*) yyTCombType {  31,  219} , (*  99*) yyTCombType {  55,  235}
         , (* 100*) yyTCombType {  67,  233} , (* 101*) yyTCombType {  67,  234}
         , (* 102*) yyTCombType {  56,  639} , (* 103*) yyTCombType {  49,  587}
         , (* 104*) yyTCombType {  73,  647} , (* 105*) yyTCombType {  73,  647}
         , (* 106*) yyTCombType {  75,   76} , (* 107*) yyTCombType {  81,   74}
         , (* 108*) yyTCombType {  10,   12} , (* 109*) yyTCombType {  80,  262}
         , (* 110*) yyTCombType {  80,   81} , (* 111*) yyTCombType {  49,  530}
         , (* 112*) yyTCombType {  84,   73} , (* 113*) yyTCombType {  56,   57}
         , (* 114*) yyTCombType {  85,   59} , (* 115*) yyTCombType {  40,  491}
         , (* 116*) yyTCombType {  41,  492} , (* 117*) yyTCombType {  89,  557}
         , (* 118*) yyTCombType {  82,   83} , (* 119*) yyTCombType {  90,  266}
         , (* 120*) yyTCombType {  95,  268} , (* 121*) yyTCombType {  91,   92}
         , (* 122*) yyTCombType {  54,  641} , (* 123*) yyTCombType {  40,  491}
         , (* 124*) yyTCombType {  41,  492} , (* 125*) yyTCombType {  56,  264}
         , (* 126*) yyTCombType {  91,  558} , (* 127*) yyTCombType {  49,  530}
         , (* 128*) yyTCombType {  82,  263} , (* 129*) yyTCombType {  40,  491}
         , (* 130*) yyTCombType {  41,  492} , (* 131*) yyTCombType {  49,  587}
         , (* 132*) yyTCombType {  96,  527} , (* 133*) yyTCombType { 114,  597}
         , (* 134*) yyTCombType {  49,  530} , (* 135*) yyTCombType {  40,  491}
         , (* 136*) yyTCombType {  41,  492} , (* 137*) yyTCombType {  49,  530}
         , (* 138*) yyTCombType {  54,  641} , (* 139*) yyTCombType { 108,  448}
         , (* 140*) yyTCombType { 100,  448} , (* 141*) yyTCombType {  58,  617}
         , (* 142*) yyTCombType {  54,  641} , (* 143*) yyTCombType {  85,  265}
         , (* 144*) yyTCombType { 115,  275} , (* 145*) yyTCombType {  54,  641}
         , (* 146*) yyTCombType { 116,  117} , (* 147*) yyTCombType { 118,  267}
         , (* 148*) yyTCombType {  96,  527} , (* 149*) yyTCombType { 123,  276}
         , (* 150*) yyTCombType { 116,  448} , (* 151*) yyTCombType {  54,  641}
         , (* 152*) yyTCombType { 125,  277} , (* 153*) yyTCombType { 128,  129}
         , (* 154*) yyTCombType { 130,  131} , (* 155*) yyTCombType {  96,  527}
         , (* 156*) yyTCombType { 134,  135} , (* 157*) yyTCombType {  58,  617}
         , (* 158*) yyTCombType {  49,  530} , (* 159*) yyTCombType { 136,  279}
         , (* 160*) yyTCombType {  49,  530} , (* 161*) yyTCombType {  58,  617}
         , (* 162*) yyTCombType {  49,  530} , (* 163*) yyTCombType { 108,  109}
         , (* 164*) yyTCombType {  58,  617} , (* 165*) yyTCombType { 139,  497}
         , (* 166*) yyTCombType {  49,  530} , (* 167*) yyTCombType { 126,  576}
         , (* 168*) yyTCombType { 119,  606} , (* 169*) yyTCombType {  54,  641}
         , (* 170*) yyTCombType {  58,  617} , (* 171*) yyTCombType { 100,  101}
         , (* 172*) yyTCombType { 119,  606} , (* 173*) yyTCombType { 119,   95}
         , (* 174*) yyTCombType { 119,  606} , (* 175*) yyTCombType {  60,  619}
         , (* 176*) yyTCombType { 119,  606} , (* 177*) yyTCombType {  54,  641}
         , (* 178*) yyTCombType { 140,  141} , (* 179*) yyTCombType {  96,  527}
         , (* 180*) yyTCombType {  62,  622} , (* 181*) yyTCombType { 142,  280}
         , (* 182*) yyTCombType {  54,  641} , (* 183*) yyTCombType { 117,  272}
         , (* 184*) yyTCombType {  54,  641} , (* 185*) yyTCombType {  96,   45}
         , (* 186*) yyTCombType { 145,  281} , (* 187*) yyTCombType {  96,  527}
         , (* 188*) yyTCombType {  58,  617} , (* 189*) yyTCombType { 148,  284}
         , (* 190*) yyTCombType { 126,  127} , (* 191*) yyTCombType {  60,  619}
         , (* 192*) yyTCombType {  58,  617} , (* 193*) yyTCombType {  58,  617}
         , (* 194*) yyTCombType {  62,  622} , (* 195*) yyTCombType {  60,  619}
         , (* 196*) yyTCombType {  58,  617} , (* 197*) yyTCombType {  60,  619}
         , (* 198*) yyTCombType {  60,  619} , (* 199*) yyTCombType { 117,  273}
         , (* 200*) yyTCombType { 117,  274} , (* 201*) yyTCombType {  58,  617}
         , (* 202*) yyTCombType { 154,  287} , (* 203*) yyTCombType {  58,  617}
         , (* 204*) yyTCombType {  60,  619} , (* 205*) yyTCombType {  94,  525}
         , (* 206*) yyTCombType { 155,  288} , (* 207*) yyTCombType { 117,  447}
         , (* 208*) yyTCombType { 146,  282} , (* 209*) yyTCombType { 158,  289}
         , (* 210*) yyTCombType {  62,  622} , (* 211*) yyTCombType { 121,  529}
         , (* 212*) yyTCombType { 159,  290} , (* 213*) yyTCombType { 146,  283}
         , (* 214*) yyTCombType {  62,  622} , (* 215*) yyTCombType { 121,  529}
         , (* 216*) yyTCombType {  62,  622} , (* 217*) yyTCombType {  62,  622}
         , (* 218*) yyTCombType { 123,  124} , (* 219*) yyTCombType { 121,   98}
         , (* 220*) yyTCombType { 160,  271} , (* 221*) yyTCombType {  94,  525}
         , (* 222*) yyTCombType {  60,  619} , (* 223*) yyTCombType {  62,  622}
         , (* 224*) yyTCombType { 151,  285} , (* 225*) yyTCombType {  64,  625}
         , (* 226*) yyTCombType {  60,  619} , (* 227*) yyTCombType {  60,  619}
         , (* 228*) yyTCombType {  94,  525} , (* 229*) yyTCombType { 151,  286}
         , (* 230*) yyTCombType {  60,  619} , (* 231*) yyTCombType { 161,  291}
         , (* 232*) yyTCombType { 117,  601} , (* 233*) yyTCombType { 161,  292}
         , (* 234*) yyTCombType { 120,  527} , (* 235*) yyTCombType {  60,  619}
         , (* 236*) yyTCombType { 164,  293} , (* 237*) yyTCombType {  60,  619}
         , (* 238*) yyTCombType { 120,  527} , (* 239*) yyTCombType {  64,  625}
         , (* 240*) yyTCombType { 120,   45} , (* 241*) yyTCombType {  62,  622}
         , (* 242*) yyTCombType { 120,  527} , (* 243*) yyTCombType {  68,   53}
         , (* 244*) yyTCombType { 169,  170} , (* 245*) yyTCombType {  62,  622}
         , (* 246*) yyTCombType {  62,  622} , (* 247*) yyTCombType { 179,   29}
         , (* 248*) yyTCombType { 182,  295} , (* 249*) yyTCombType {  62,  622}
         , (* 250*) yyTCombType { 171,  448} , (* 251*) yyTCombType {  64,  625}
         , (* 252*) yyTCombType {  94,  525} , (* 253*) yyTCombType { 173,  690}
         , (* 254*) yyTCombType {  62,  622} , (* 255*) yyTCombType {  64,  625}
         , (* 256*) yyTCombType {  62,  622} , (* 257*) yyTCombType {  94,   95}
         , (* 258*) yyTCombType {  94,  525} , (* 259*) yyTCombType {  64,  625}
         , (* 260*) yyTCombType {  94,  525} , (* 261*) yyTCombType {  64,  625}
         , (* 262*) yyTCombType {  64,  625} , (* 263*) yyTCombType { 173,  690}
         , (* 264*) yyTCombType { 183,  184} , (* 265*) yyTCombType { 191,  296}
         , (* 266*) yyTCombType {  97,  529} , (* 267*) yyTCombType { 192,  425}
         , (* 268*) yyTCombType {  64,  625} , (* 269*) yyTCombType {  68,   54}
         , (* 270*) yyTCombType {  68,  236} , (* 271*) yyTCombType {  68,  237}
         , (* 272*) yyTCombType {  68,  238} , (* 273*) yyTCombType {  68,  239}
         , (* 274*) yyTCombType {  68,  240} , (* 275*) yyTCombType {  68,  241}
         , (* 276*) yyTCombType {  68,  242} , (* 277*) yyTCombType {  68,  243}
         , (* 278*) yyTCombType {  68,  244} , (* 279*) yyTCombType {  68,  245}
         , (* 280*) yyTCombType {  68,  246} , (* 281*) yyTCombType {  66,  627}
         , (* 282*) yyTCombType {  97,  529} , (* 283*) yyTCombType { 174,  175}
         , (* 284*) yyTCombType { 194,  476} , (* 285*) yyTCombType { 194,  476}
         , (* 286*) yyTCombType {  64,  625} , (* 287*) yyTCombType { 176,  464}
         , (* 288*) yyTCombType {  64,  625} , (* 289*) yyTCombType {  97,  529}
         , (* 290*) yyTCombType {  64,  625} , (* 291*) yyTCombType {  64,  625}
         , (* 292*) yyTCombType { 176,  177} , (* 293*) yyTCombType { 196,  197}
         , (* 294*) yyTCombType {  64,  625} , (* 295*) yyTCombType {  66,  627}
         , (* 296*) yyTCombType { 202,  298} , (* 297*) yyTCombType { 171,  172}
         , (* 298*) yyTCombType { 203,  426} , (* 299*) yyTCombType {  64,  625}
         , (* 300*) yyTCombType { 204,  194} , (* 301*) yyTCombType {  64,  625}
         , (* 302*) yyTCombType {  64,  625} , (* 303*) yyTCombType {  64,  625}
         , (* 304*) yyTCombType {  64,  625} , (* 305*) yyTCombType {  64,  625}
         , (* 306*) yyTCombType {  64,  625} , (* 307*) yyTCombType {  66,  627}
         , (* 308*) yyTCombType { 195,  297} , (* 309*) yyTCombType { 195,   31}
         , (* 310*) yyTCombType { 205,  206} , (* 311*) yyTCombType {  66,  627}
         , (* 312*) yyTCombType { 209,  211} , (* 313*) yyTCombType {  97,  529}
         , (* 314*) yyTCombType { 210,  299} , (* 315*) yyTCombType {  66,  627}
         , (* 316*) yyTCombType {   0,    0} , (* 317*) yyTCombType {  66,  627}
         , (* 318*) yyTCombType {  66,  627} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {   0,    0} , (* 321*) yyTCombType {  97,   98}
         , (* 322*) yyTCombType {   0,    0} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {  66,  627} , (* 325*) yyTCombType { 174,  463}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType { 174,  178}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType { 143,  503}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {  77,   61}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType { 143,  503} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {  66,  627} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType {  66,  627} , (* 345*) yyTCombType { 143,  503}
         , (* 346*) yyTCombType {  66,  627} , (* 347*) yyTCombType {  66,  627}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType {  66,  627} , (* 351*) yyTCombType {  77,  618}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  66,  627}
         , (* 356*) yyTCombType {  69,  636} , (* 357*) yyTCombType {  66,  627}
         , (* 358*) yyTCombType {  66,  627} , (* 359*) yyTCombType {  66,  627}
         , (* 360*) yyTCombType {  66,  627} , (* 361*) yyTCombType {  66,  627}
         , (* 362*) yyTCombType {  66,  627} , (* 363*) yyTCombType {  66,  627}
         , (* 364*) yyTCombType {  66,  627} , (* 365*) yyTCombType {  66,  627}
         , (* 366*) yyTCombType {  69,  636} , (* 367*) yyTCombType {  77,  618}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType { 143,  503}
         , (* 370*) yyTCombType {  69,  636} , (* 371*) yyTCombType {  77,  618}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {  77,  618}
         , (* 374*) yyTCombType {  77,  618} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType { 143,  503}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {  77,  618} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {  69,  636} , (* 383*) yyTCombType { 143,  503}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {  69,  636} , (* 387*) yyTCombType {  69,  636}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType { 143,  503}
         , (* 390*) yyTCombType {  69,  636} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {  69,  636} , (* 393*) yyTCombType {  69,  636}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {  77,  618} , (* 399*) yyTCombType {  69,  636}
         , (* 400*) yyTCombType { 111,  608} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {  77,  618} , (* 403*) yyTCombType {  77,  618}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {  77,  618} , (* 407*) yyTCombType {   0,    0}
         , (* 408*) yyTCombType {   0,    0} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {   0,    0} , (* 411*) yyTCombType {  77,  618}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType {  77,  618}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType { 111,  608} , (* 417*) yyTCombType {  69,  636}
         , (* 418*) yyTCombType {  69,   70} , (* 419*) yyTCombType {  69,  636}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType {  69,  636}
         , (* 422*) yyTCombType {  69,  636} , (* 423*) yyTCombType { 111,  608}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {  69,  636}
         , (* 426*) yyTCombType { 111,  608} , (* 427*) yyTCombType {   0,    0}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType {   0,    0}
         , (* 430*) yyTCombType {  69,  636} , (* 431*) yyTCombType {   0,    0}
         , (* 432*) yyTCombType {  69,  636} , (* 433*) yyTCombType {  69,  636}
         , (* 434*) yyTCombType {  69,  636} , (* 435*) yyTCombType {  69,  636}
         , (* 436*) yyTCombType {  69,  636} , (* 437*) yyTCombType {  69,  636}
         , (* 438*) yyTCombType {  69,  636} , (* 439*) yyTCombType {  69,  636}
         , (* 440*) yyTCombType {  69,  636} , (* 441*) yyTCombType {  69,  636}
         , (* 442*) yyTCombType {  69,  636} , (* 443*) yyTCombType {  69,  261}
         , (* 444*) yyTCombType {  71,  635} , (* 445*) yyTCombType { 122,  609}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType { 111,  608}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType { 111,  608}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType { 111,  608}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType { 111,  112}
         , (* 454*) yyTCombType {  71,  635} , (* 455*) yyTCombType { 111,  608}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType {  71,  635} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType { 122,  609}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {   0,    0}
         , (* 468*) yyTCombType { 122,  609} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {  71,  635} , (* 471*) yyTCombType { 122,  123}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {  71,  635} , (* 475*) yyTCombType {  71,  635}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {  71,  635} , (* 479*) yyTCombType {   0,    0}
         , (* 480*) yyTCombType {  71,  635} , (* 481*) yyTCombType {  71,  635}
         , (* 482*) yyTCombType {   0,    0} , (* 483*) yyTCombType {   0,    0}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType {   0,    0} , (* 487*) yyTCombType {  71,  635}
         , (* 488*) yyTCombType {   0,    0} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {   0,    0}
         , (* 492*) yyTCombType { 122,  609} , (* 493*) yyTCombType {   0,    0}
         , (* 494*) yyTCombType { 122,  609} , (* 495*) yyTCombType {   0,    0}
         , (* 496*) yyTCombType { 122,  609} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {   0,    0}
         , (* 500*) yyTCombType { 122,  609} , (* 501*) yyTCombType {   0,    0}
         , (* 502*) yyTCombType {   0,    0} , (* 503*) yyTCombType {   0,    0}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {  71,  635}
         , (* 506*) yyTCombType {  71,  652} , (* 507*) yyTCombType {  71,  635}
         , (* 508*) yyTCombType {  71,  652} , (* 509*) yyTCombType {  71,  635}
         , (* 510*) yyTCombType {  71,  635} , (* 511*) yyTCombType { 199,  221}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {  71,  635}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType { 199,  689} , (* 517*) yyTCombType {   0,    0}
         , (* 518*) yyTCombType {  71,  635} , (* 519*) yyTCombType {  71,  652}
         , (* 520*) yyTCombType {  71,  635} , (* 521*) yyTCombType {  71,  635}
         , (* 522*) yyTCombType {  71,  635} , (* 523*) yyTCombType {  71,  635}
         , (* 524*) yyTCombType {  71,  635} , (* 525*) yyTCombType {  71,  635}
         , (* 526*) yyTCombType {  71,  635} , (* 527*) yyTCombType {  71,  635}
         , (* 528*) yyTCombType {  71,  635} , (* 529*) yyTCombType {  71,  635}
         , (* 530*) yyTCombType {  71,  635} , (* 531*) yyTCombType {  71,  652}
         , (* 532*) yyTCombType {  74,  641} , (* 533*) yyTCombType { 144,  504}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType { 149,  513} , (* 537*) yyTCombType {   0,    0}
         , (* 538*) yyTCombType { 144,  504} , (* 539*) yyTCombType {   0,    0}
         , (* 540*) yyTCombType { 199,   36} , (* 541*) yyTCombType { 149,  513}
         , (* 542*) yyTCombType {  74,  641} , (* 543*) yyTCombType { 144,  504}
         , (* 544*) yyTCombType {   0,    0} , (* 545*) yyTCombType { 104,  588}
         , (* 546*) yyTCombType { 149,  513} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType { 199,  222} , (* 549*) yyTCombType {   0,    0}
         , (* 550*) yyTCombType {   0,    0} , (* 551*) yyTCombType { 156,  520}
         , (* 552*) yyTCombType {   0,    0} , (* 553*) yyTCombType { 104,  591}
         , (* 554*) yyTCombType { 199,  223} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType { 156,  520} , (* 557*) yyTCombType {   0,    0}
         , (* 558*) yyTCombType {  74,  641} , (* 559*) yyTCombType {   0,    0}
         , (* 560*) yyTCombType { 199,  224} , (* 561*) yyTCombType { 156,  520}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {  74,  641}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {   0,    0} , (* 567*) yyTCombType { 144,  504}
         , (* 568*) yyTCombType {  74,  641} , (* 569*) yyTCombType { 104,  591}
         , (* 570*) yyTCombType { 149,  513} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType {   0,    0} , (* 573*) yyTCombType { 104,  588}
         , (* 574*) yyTCombType {   0,    0} , (* 575*) yyTCombType { 144,  504}
         , (* 576*) yyTCombType { 104,  591} , (* 577*) yyTCombType {   0,    0}
         , (* 578*) yyTCombType { 149,  513} , (* 579*) yyTCombType { 104,  591}
         , (* 580*) yyTCombType {   0,    0} , (* 581*) yyTCombType { 144,  504}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType {   0,    0}
         , (* 584*) yyTCombType { 149,  513} , (* 585*) yyTCombType { 156,  520}
         , (* 586*) yyTCombType {   0,    0} , (* 587*) yyTCombType { 144,  504}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType { 149,  513} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType { 156,  520}
         , (* 594*) yyTCombType {  74,   55} , (* 595*) yyTCombType {  74,  641}
         , (* 596*) yyTCombType {  74,  469} , (* 597*) yyTCombType {  74,  641}
         , (* 598*) yyTCombType {  74,  641} , (* 599*) yyTCombType { 156,  520}
         , (* 600*) yyTCombType { 104,  591} , (* 601*) yyTCombType {  74,  468}
         , (* 602*) yyTCombType { 104,  591} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType { 104,  591} , (* 605*) yyTCombType { 156,  520}
         , (* 606*) yyTCombType {  78,  624} , (* 607*) yyTCombType {  74,  469}
         , (* 608*) yyTCombType { 104,  591} , (* 609*) yyTCombType {  74,  641}
         , (* 610*) yyTCombType {  74,  641} , (* 611*) yyTCombType {  74,  641}
         , (* 612*) yyTCombType {  74,  641} , (* 613*) yyTCombType {  74,  641}
         , (* 614*) yyTCombType {  74,  641} , (* 615*) yyTCombType {  74,  641}
         , (* 616*) yyTCombType {  74,  641} , (* 617*) yyTCombType {  74,  641}
         , (* 618*) yyTCombType {  74,  641} , (* 619*) yyTCombType {  74,  469}
         , (* 620*) yyTCombType {  78,  624} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType { 152,   46}
         , (* 626*) yyTCombType {   0,    0} , (* 627*) yyTCombType {   0,    0}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType { 152,  547}
         , (* 630*) yyTCombType {   0,    0} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType {  78,  624} , (* 633*) yyTCombType {   0,    0}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {  78,  624} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType {   0,    0} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {  78,  624} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {  78,  624} , (* 643*) yyTCombType {  78,  624}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {   0,    0}
         , (* 646*) yyTCombType {   0,    0} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {   0,    0} , (* 649*) yyTCombType {  78,  624}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {   0,    0} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType { 152,  586}
         , (* 658*) yyTCombType {   0,    0} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {   0,    0} , (* 661*) yyTCombType { 152,  227}
         , (* 662*) yyTCombType {   0,    0} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {   0,    0} , (* 665*) yyTCombType { 152,  228}
         , (* 666*) yyTCombType { 152,  547} , (* 667*) yyTCombType {  78,  624}
         , (* 668*) yyTCombType { 157,  521} , (* 669*) yyTCombType {  78,  624}
         , (* 670*) yyTCombType { 152,  229} , (* 671*) yyTCombType {  78,  624}
         , (* 672*) yyTCombType {  78,  624} , (* 673*) yyTCombType { 157,  521}
         , (* 674*) yyTCombType {   0,    0} , (* 675*) yyTCombType {  78,  624}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType {   0,    0}
         , (* 678*) yyTCombType { 157,  521} , (* 679*) yyTCombType { 152,   48}
         , (* 680*) yyTCombType {  78,  624} , (* 681*) yyTCombType {  79,  626}
         , (* 682*) yyTCombType {  78,  624} , (* 683*) yyTCombType {  78,  624}
         , (* 684*) yyTCombType {  78,  624} , (* 685*) yyTCombType {  78,  624}
         , (* 686*) yyTCombType {  78,  624} , (* 687*) yyTCombType {  78,  624}
         , (* 688*) yyTCombType {  78,  254} , (* 689*) yyTCombType {  78,  255}
         , (* 690*) yyTCombType {  78,  256} , (* 691*) yyTCombType {  79,  257}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType { 152,  231}
         , (* 694*) yyTCombType {   0,    0} , (* 695*) yyTCombType {  79,  626}
         , (* 696*) yyTCombType {   0,    0} , (* 697*) yyTCombType {   0,    0}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType {   0,    0}
         , (* 700*) yyTCombType {   0,    0} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType { 157,  521} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {  79,  626}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType { 157,  521} , (* 711*) yyTCombType {  79,  626}
         , (* 712*) yyTCombType {  79,  258} , (* 713*) yyTCombType { 152,  232}
         , (* 714*) yyTCombType {   0,    0} , (* 715*) yyTCombType {  79,  626}
         , (* 716*) yyTCombType { 157,  521} , (* 717*) yyTCombType {  79,  626}
         , (* 718*) yyTCombType {  79,  626} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType {   0,    0} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType { 157,  521} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {  79,  626} , (* 725*) yyTCombType {   0,    0}
         , (* 726*) yyTCombType {   0,    0} , (* 727*) yyTCombType {   0,    0}
         , (* 728*) yyTCombType {   0,    0} , (* 729*) yyTCombType {   0,    0}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {   0,    0}
         , (* 732*) yyTCombType {   0,    0} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType {   0,    0} , (* 735*) yyTCombType { 153,  514}
         , (* 736*) yyTCombType {   0,    0} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {   0,    0} , (* 739*) yyTCombType {   0,    0}
         , (* 740*) yyTCombType { 153,  514} , (* 741*) yyTCombType {   0,    0}
         , (* 742*) yyTCombType {  79,  626} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType {  79,  626} , (* 745*) yyTCombType { 153,  514}
         , (* 746*) yyTCombType {  79,  626} , (* 747*) yyTCombType {  79,  626}
         , (* 748*) yyTCombType {   0,    0} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {  79,  626} , (* 751*) yyTCombType { 186,  689}
         , (* 752*) yyTCombType {   0,    0} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType {  86,  623} , (* 755*) yyTCombType {  79,  626}
         , (* 756*) yyTCombType { 186,  221} , (* 757*) yyTCombType {  79,  626}
         , (* 758*) yyTCombType {  79,  626} , (* 759*) yyTCombType {  79,  626}
         , (* 760*) yyTCombType {  79,  626} , (* 761*) yyTCombType {  79,  626}
         , (* 762*) yyTCombType {  79,  626} , (* 763*) yyTCombType {  79,  626}
         , (* 764*) yyTCombType {  79,  626} , (* 765*) yyTCombType {  79,  626}
         , (* 766*) yyTCombType {  79,  259} , (* 767*) yyTCombType {  79,  260}
         , (* 768*) yyTCombType {  86,  623} , (* 769*) yyTCombType { 153,  514}
         , (* 770*) yyTCombType {   0,    0} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType {   0,    0} , (* 773*) yyTCombType {   0,    0}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {   0,    0} , (* 777*) yyTCombType { 153,  514}
         , (* 778*) yyTCombType { 153,  229} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType {  86,  247} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType { 153,  514}
         , (* 784*) yyTCombType {  86,  623} , (* 785*) yyTCombType { 186,   36}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType { 153,  150}
         , (* 788*) yyTCombType {  86,  623} , (* 789*) yyTCombType { 153,  514}
         , (* 790*) yyTCombType {  86,  623} , (* 791*) yyTCombType {  86,  623}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType { 186,  222}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType {  86,  623}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType { 186,  223}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {   0,    0} , (* 805*) yyTCombType { 186,  224}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType { 208,  681}
         , (* 808*) yyTCombType { 206,  451} , (* 809*) yyTCombType { 197,  451}
         , (* 810*) yyTCombType {   0,    0} , (* 811*) yyTCombType { 198,  462}
         , (* 812*) yyTCombType { 208,  681} , (* 813*) yyTCombType { 206,  451}
         , (* 814*) yyTCombType { 197,  451} , (* 815*) yyTCombType {  86,  623}
         , (* 816*) yyTCombType { 198,  462} , (* 817*) yyTCombType {  86,  248}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType {  86,  623}
         , (* 820*) yyTCombType {  86,  623} , (* 821*) yyTCombType { 153,  232}
         , (* 822*) yyTCombType { 197,  451} , (* 823*) yyTCombType {  86,  623}
         , (* 824*) yyTCombType { 198,   17} , (* 825*) yyTCombType { 197,  451}
         , (* 826*) yyTCombType { 206,  451} , (* 827*) yyTCombType { 198,   19}
         , (* 828*) yyTCombType {  86,  623} , (* 829*) yyTCombType { 206,  451}
         , (* 830*) yyTCombType {  86,  623} , (* 831*) yyTCombType {  86,  249}
         , (* 832*) yyTCombType {  86,  250} , (* 833*) yyTCombType {  86,  251}
         , (* 834*) yyTCombType {  86,  252} , (* 835*) yyTCombType {  86,  253}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType {   0,    0}
         , (* 838*) yyTCombType { 197,  451} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType { 198,  462} , (* 841*) yyTCombType { 208,  681}
         , (* 842*) yyTCombType { 206,  451} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType { 197,  451} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType { 198,  462} , (* 849*) yyTCombType { 208,  681}
         , (* 850*) yyTCombType { 206,  451} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType { 197,  451} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType { 198,  462} , (* 855*) yyTCombType { 208,  681}
         , (* 856*) yyTCombType { 206,  451} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType { 197,  451} , (* 859*) yyTCombType { 207,  462}
         , (* 860*) yyTCombType { 198,  462} , (* 861*) yyTCombType { 208,  681}
         , (* 862*) yyTCombType { 206,  451} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType { 207,  462} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType {   0,    0} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType { 207,   17}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType { 207,   19} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType {   0,    0} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType {   0,    0}
         , (* 890*) yyTCombType {   0,    0} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType { 207,  462}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType { 207,  462}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType { 207,  462}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType { 207,  462}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType {   0,    0} , (* 919*) yyTCombType {   0,    0}
         , (* 920*) yyTCombType {   0,    0} , (* 921*) yyTCombType {   0,    0}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {   0,    0}
         , (* 926*) yyTCombType {   0,    0} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType {   0,    0} , (* 929*) yyTCombType {   0,    0}
         , (* 930*) yyTCombType {   0,    0} , (* 931*) yyTCombType {   0,    0}
         , (* 932*) yyTCombType {   0,    0} , (* 933*) yyTCombType {   0,    0}
         , (* 934*) yyTCombType {   0,    0} , (* 935*) yyTCombType {   0,    0}
         , (* 936*) yyTCombType {   0,    0} , (* 937*) yyTCombType {   0,    0}
         , (* 938*) yyTCombType {   0,    0} , (* 939*) yyTCombType {   0,    0}
         , (* 940*) yyTCombType {   0,    0} , (* 941*) yyTCombType {   0,    0}
         , (* 942*) yyTCombType {   0,    0} , (* 943*) yyTCombType {   0,    0}
         , (* 944*) yyTCombType {   0,    0} , (* 945*) yyTCombType {   0,    0}
         , (* 946*) yyTCombType {   0,    0} , (* 947*) yyTCombType {   0,    0}
         , (* 948*) yyTCombType {   0,    0} , (* 949*) yyTCombType {   0,    0}
         , (* 950*) yyTCombType {   0,    0} , (* 951*) yyTCombType {   0,    0}
         , (* 952*) yyTCombType {   0,    0} , (* 953*) yyTCombType {   0,    0}
         , (* 954*) yyTCombType {   0,    0} , (* 955*) yyTCombType {   0,    0}
         , (* 956*) yyTCombType {   0,    0} , (* 957*) yyTCombType {   0,    0}
         , (* 958*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  302 , (* 110*)    5 , (* 111*)  303 , (* 112*)  304
         , (* 113*)  305 , (* 114*)  306 , (* 115*)  307 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  193 , (* 119*)  204 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  300 , (* 124*)  301
         , (* 125*)   14 , (* 126*)    8 , (* 127*)    9 , (* 128*)  309
         , (* 129*)   35 , (* 130*)   16 , (* 131*)  308 , (* 132*)  174
         , (* 133*)  313 , (* 134*)  186 , (* 135*)   18 , (* 136*)  192
         , (* 137*)   20 , (* 138*)  203 , (* 139*)  310 , (* 140*)   20
         , (* 141*)  315 , (* 142*)  316 , (* 143*)   28 , (* 144*)   32
         , (* 145*)   30 , (* 146*)   34 , (* 147*)  314 , (* 148*)   37
         , (* 149*)  317 , (* 150*)   24 , (* 151*)  318 , (* 152*)   39
         , (* 153*)  319 , (* 154*)   71 , (* 155*)  371 , (* 156*)  363
         , (* 157*)   22 , (* 158*)  312 , (* 159*)  382 , (* 160*)  372
         , (* 161*)  311 , (* 162*)  379 , (* 163*)  386 , (* 164*)   25
         , (* 165*)  363 , (* 166*)  319 , (* 167*)   44 , (* 168*)  139
         , (* 169*)   97 , (* 170*)   56 , (* 171*)  342 , (* 172*)  121
         , (* 173*)   56 , (* 174*)  342 , (* 175*)  140 , (* 176*)   94
         , (* 177*)  147 , (* 178*)   40 , (* 179*)   94 , (* 180*)  392
         , (* 181*)   94 , (* 182*)  152 , (* 183*)  164 , (* 184*)  406
         , (* 185*)  183 , (* 186*)  119 , (* 187*)  179 , (* 188*)  180
         , (* 189*)  143 , (* 190*)  359 , (* 191*)  396 , (* 192*)  369
         , (* 193*)  378 , (* 194*)   42 , (* 195*)   43 , (* 196*)  149
         , (* 197*)  182 , (* 198*)  399 , (* 199*)  185 , (* 200*)  412
         , (* 201*)  156 , (* 202*)  412 , (* 203*)  401 , (* 204*)  320
         , (* 205*)  163 , (* 206*)   41 , (* 207*)  142 , (* 208*)   43
         , (* 209*)   87 , (* 210*)  137 , (* 211*)  367 , (* 212*)   96
         , (* 213*)  103 , (* 214*)  370 , (* 215*)   96 , (* 216*)  385
         , (* 217*)   96 , (* 218*)  191 , (* 219*)  126 , (* 220*)  321
         , (* 221*)  196 , (* 222*)  372 , (* 223*)  374 , (* 224*)  132
         , (* 225*)  413 , (* 226*)  176 , (* 227*)  414 , (* 228*)  195
         , (* 229*)   56 , (* 230*)  342 , (* 231*)  198 , (* 232*)  111
         , (* 233*)  122 , (* 234*)  381 , (* 235*)  114 , (* 236*)   56
         , (* 237*)  342 , (* 238*)  377 , (* 239*)  118 , (* 240*)   99
         , (* 241*)  100 , (* 242*)  125 , (* 243*)  202 , (* 244*)  205
         , (* 245*)   90 , (* 246*)  322 , (* 247*)   91 , (* 248*)  365
         , (* 249*)  207 , (* 250*)  323 , (* 251*)  324 , (* 252*)   63
         , (* 253*)   65 , (* 254*)   49 , (* 255*)  390 , (* 256*)   67
         , (* 257*)  364 , (* 258*)  373 , (* 259*)  110 , (* 260*)  160
         , (* 261*)  355 , (* 262*)  408 , (* 263*)  357 , (* 264*)   84
         , (* 265*)  348 , (* 266*)   72 , (* 267*)   58 , (* 268*)   77
         , (* 269*)  350 , (* 270*)   62 , (* 271*)   78 , (* 272*)  358
         , (* 273*)   79 , (* 274*)  120 , (* 275*)  351 , (* 276*)  209
         , (* 277*)  346 , (* 278*)   68 , (* 279*)   69 , (* 280*)  347
         , (* 281*)  210 , (* 282*)   69 , (* 283*)  321 , (* 284*)  409
         , (* 285*)  410 , (* 286*)  173 , (* 287*)  326 , (* 288*)  327
         , (* 289*)  328 , (* 290*)  329 , (* 291*)  330 , (* 292*)  331
         , (* 293*)  332 , (* 294*)  333 , (* 295*)  334 , (* 296*)  335
         , (* 297*)  336 , (* 298*)  337 , (* 299*)  338 , (* 300*)  339
         , (* 301*)  340 , (* 302*)  341 , (* 303*)   50 , (* 304*)    0
         , (* 305*)  361 , (* 306*)  362 , (* 307*)    0 , (* 308*)   89
         , (* 309*)  322 , (* 310*)  366 , (* 311*)   56 , (* 312*)  342
         , (* 313*)  323 , (* 314*)  324 , (* 315*)   93 , (* 316*)    0
         , (* 317*)   49 , (* 318*)  325 , (* 319*)  108 , (* 320*)  383
         , (* 321*)  110 , (* 322*)    0 , (* 323*)   56 , (* 324*)  342
         , (* 325*)  102 , (* 326*)  104 , (* 327*)  105 , (* 328*)  113
         , (* 329*)   86 , (* 330*)   78 , (* 331*)  165 , (* 332*)   79
         , (* 333*)  384 , (* 334*)  351 , (* 335*)    0 , (* 336*)  346
         , (* 337*)   68 , (* 338*)   69 , (* 339*)   66 , (* 340*)  402
         , (* 341*)  351 , (* 342*)  162 , (* 343*)  346 , (* 344*)   68
         , (* 345*)   69 , (* 346*)   94 , (* 347*)   56 , (* 348*)  342
         , (* 349*)    0 , (* 350*)  326 , (* 351*)  327 , (* 352*)  328
         , (* 353*)  329 , (* 354*)  330 , (* 355*)  331 , (* 356*)  332
         , (* 357*)  333 , (* 358*)  334 , (* 359*)  335 , (* 360*)  336
         , (* 361*)  337 , (* 362*)  338 , (* 363*)  339 , (* 364*)  340
         , (* 365*)  341 , (* 366*)   50 , (* 367*)  343 , (* 368*)  361
         , (* 369*)  362 , (* 370*)    0 , (* 371*)   89 , (* 372*)    0
         , (* 373*)  366 , (* 374*)   56 , (* 375*)  342 , (* 376*)    0
         , (* 377*)    0 , (* 378*)   93 , (* 379*)   75 , (* 380*)    0
         , (* 381*)  158 , (* 382*)   96 , (* 383*)   56 , (* 384*)  342
         , (* 385*)  376 , (* 386*)    0 , (* 387*)    0 , (* 388*)  102
         , (* 389*)  104 , (* 390*)  105 , (* 391*)  113 , (* 392*)   56
         , (* 393*)  342 , (* 394*)  111 , (* 395*)    0 , (* 396*)    0
         , (* 397*)  114 , (* 398*)  115 , (* 399*)  116 , (* 400*)  380
         , (* 401*)  118 , (* 402*)  165 , (* 403*)    0 , (* 404*)    0
         , (* 405*)   56 , (* 406*)  342 , (* 407*)   94 , (* 408*)   85
         , (* 409*)   77 , (* 410*)  350 , (* 411*)   62 , (* 412*)   78
         , (* 413*)    0 , (* 414*)   79 , (* 415*)  393 , (* 416*)  351
         , (* 417*)    0 , (* 418*)  346 , (* 419*)   68 , (* 420*)   69
         , (* 421*)   60 , (* 422*)  350 , (* 423*)   62 , (* 424*)   78
         , (* 425*)  352 , (* 426*)   79 , (* 427*)   94 , (* 428*)  351
         , (* 429*)  161 , (* 430*)  346 , (* 431*)   68 , (* 432*)   69
         , (* 433*)   56 , (* 434*)  342 , (* 435*)  128 , (* 436*)  387
         , (* 437*)  130 , (* 438*)  111 , (* 439*)   75 , (* 440*)    0
         , (* 441*)  114 , (* 442*)  367 , (* 443*)   96 , (* 444*)   58
         , (* 445*)   77 , (* 446*)  350 , (* 447*)   62 , (* 448*)   78
         , (* 449*)    0 , (* 450*)   79 , (* 451*)    0 , (* 452*)  351
         , (* 453*)  349 , (* 454*)  346 , (* 455*)   68 , (* 456*)   69
         , (* 457*)    0 , (* 458*)    0 , (* 459*)  400 , (* 460*)   82
         , (* 461*)  157 , (* 462*)  159 , (* 463*)   96 , (* 464*)    0
         , (* 465*)   56 , (* 466*)  342 , (* 467*)  145 , (* 468*)  146
         , (* 469*)    0 , (* 470*)    0 , (* 471*)  106 , (* 472*)  100
         , (* 473*)  344 , (* 474*)   62 , (* 475*)   78 , (* 476*)  393
         , (* 477*)   79 , (* 478*)    0 , (* 479*)  351 , (* 480*)    0
         , (* 481*)  346 , (* 482*)   68 , (* 483*)   69 , (* 484*)   64
         , (* 485*)  352 , (* 486*)   79 , (* 487*)    0 , (* 488*)  351
         , (* 489*)    0 , (* 490*)  346 , (* 491*)   68 , (* 492*)   69
         , (* 493*)    0 , (* 494*)    0 , (* 495*)   56 , (* 496*)  342
         , (* 497*)  345 , (* 498*)    0 , (* 499*)  346 , (* 500*)   68
         , (* 501*)   69 , (* 502*)   58 , (* 503*)   77 , (* 504*)  350
         , (* 505*)   62 , (* 506*)   78 , (* 507*)    0 , (* 508*)   79
         , (* 509*)  415 , (* 510*)  351 , (* 511*)    0 , (* 512*)  346
         , (* 513*)   68 , (* 514*)   69 , (* 515*)  356 , (* 516*)    0
         , (* 517*)    0 , (* 518*)    0 , (* 519*)   80 , (* 520*)  354
         , (* 521*)    0 , (* 522*)    0 , (* 523*)  314 , (* 524*)  321
         , (* 525*)  394 , (* 526*)   24 , (* 527*)  144 , (* 528*)  148
         , (* 529*)  146 , (* 530*)   58 , (* 531*)   77 , (* 532*)  350
         , (* 533*)   62 , (* 534*)   78 , (* 535*)  199 , (* 536*)   79
         , (* 537*)    0 , (* 538*)  351 , (* 539*)  208 , (* 540*)  346
         , (* 541*)   68 , (* 542*)   69 , (* 543*)    0 , (* 544*)    0
         , (* 545*)    0 , (* 546*)    0 , (* 547*)    0 , (* 548*)    0
         , (* 549*)  314 , (* 550*)  322 , (* 551*)  321 , (* 552*)   24
         , (* 553*)  314 , (* 554*)  323 , (* 555*)  324 , (* 556*)   24
         , (* 557*)    0 , (* 558*)  151 , (* 559*)    0 , (* 560*)    0
         , (* 561*)    0 , (* 562*)   58 , (* 563*)   77 , (* 564*)  350
         , (* 565*)   62 , (* 566*)   78 , (* 567*)    0 , (* 568*)   79
         , (* 569*)    0 , (* 570*)  351 , (* 571*)    0 , (* 572*)  346
         , (* 573*)   68 , (* 574*)   69 , (* 575*)    0 , (* 576*)    0
         , (* 577*)  322 , (* 578*)    0 , (* 579*)    0 , (* 580*)  353
         , (* 581*)  323 , (* 582*)  324 , (* 583*)  154 , (* 584*)    0
         , (* 585*)   49 , (* 586*)  360 , (* 587*)   56 , (* 588*)  342
         , (* 589*)    0 , (* 590*)    0 , (* 591*)    0 , (* 592*)   58
         , (* 593*)   77 , (* 594*)  350 , (* 595*)   62 , (* 596*)   78
         , (* 597*)    0 , (* 598*)   79 , (* 599*)    0 , (* 600*)  351
         , (* 601*)    0 , (* 602*)  346 , (* 603*)   68 , (* 604*)   69
         , (* 605*)    0 , (* 606*)    0 , (* 607*)  368 , (* 608*)    0
         , (* 609*)    0 , (* 610*)    0 , (* 611*)    0 , (* 612*)    0
         , (* 613*)    0 , (* 614*)    0 , (* 615*)    0 , (* 616*)    0
         , (* 617*)    0 , (* 618*)  326 , (* 619*)  327 , (* 620*)  328
         , (* 621*)  329 , (* 622*)  330 , (* 623*)  331 , (* 624*)  332
         , (* 625*)  333 , (* 626*)  334 , (* 627*)  335 , (* 628*)  336
         , (* 629*)  337 , (* 630*)  338 , (* 631*)  339 , (* 632*)  340
         , (* 633*)  341 , (* 634*)   50 , (* 635*)  321 , (* 636*)  361
         , (* 637*)  362 , (* 638*)    0 , (* 639*)   89 , (* 640*)    0
         , (* 641*)  366 , (* 642*)    0 , (* 643*)    0 , (* 644*)    0
         , (* 645*)    0 , (* 646*)   93 , (* 647*)   56 , (* 648*)  342
         , (* 649*)    0 , (* 650*)    0 , (* 651*)    0 , (* 652*)    0
         , (* 653*)    0 , (* 654*)    0 , (* 655*)    0 , (* 656*)  102
         , (* 657*)  104 , (* 658*)  105 , (* 659*)  113 , (* 660*)    0
         , (* 661*)  322 , (* 662*)   56 , (* 663*)  342 , (* 664*)    0
         , (* 665*)  323 , (* 666*)  324 , (* 667*)  388 , (* 668*)    0
         , (* 669*)   49 , (* 670*)  375 , (* 671*)    0 , (* 672*)    0
         , (* 673*)    0 , (* 674*)    0 , (* 675*)    0 , (* 676*)    0
         , (* 677*)   56 , (* 678*)  342 , (* 679*)    0 , (* 680*)    0
         , (* 681*)    0 , (* 682*)  134 , (* 683*)    0 , (* 684*)   58
         , (* 685*)   77 , (* 686*)  350 , (* 687*)   62 , (* 688*)   78
         , (* 689*)    0 , (* 690*)   79 , (* 691*)    0 , (* 692*)  351
         , (* 693*)    0 , (* 694*)  346 , (* 695*)   68 , (* 696*)   69
         , (* 697*)  136 , (* 698*)    0 , (* 699*)   56 , (* 700*)  342
         , (* 701*)    0 , (* 702*)  326 , (* 703*)  327 , (* 704*)  328
         , (* 705*)  329 , (* 706*)  330 , (* 707*)  331 , (* 708*)  332
         , (* 709*)  333 , (* 710*)  334 , (* 711*)  335 , (* 712*)  336
         , (* 713*)  337 , (* 714*)  338 , (* 715*)  339 , (* 716*)  340
         , (* 717*)  341 , (* 718*)   50 , (* 719*)  391 , (* 720*)  361
         , (* 721*)  362 , (* 722*)    0 , (* 723*)   89 , (* 724*)    0
         , (* 725*)  366 , (* 726*)    0 , (* 727*)    0 , (* 728*)    0
         , (* 729*)    0 , (* 730*)   93 , (* 731*)    0 , (* 732*)    0
         , (* 733*)    0 , (* 734*)    0 , (* 735*)    0 , (* 736*)    0
         , (* 737*)    0 , (* 738*)    0 , (* 739*)    0 , (* 740*)  102
         , (* 741*)  104 , (* 742*)  105 , (* 743*)  113 , (* 744*)   58
         , (* 745*)   77 , (* 746*)  350 , (* 747*)   62 , (* 748*)   78
         , (* 749*)    0 , (* 750*)   79 , (* 751*)    0 , (* 752*)  351
         , (* 753*)    0 , (* 754*)  346 , (* 755*)   68 , (* 756*)   69
         , (* 757*)  321 , (* 758*)    0 , (* 759*)   58 , (* 760*)   77
         , (* 761*)  350 , (* 762*)   62 , (* 763*)   78 , (* 764*)    0
         , (* 765*)   79 , (* 766*)    0 , (* 767*)  351 , (* 768*)    0
         , (* 769*)  346 , (* 770*)   68 , (* 771*)   69 , (* 772*)    0
         , (* 773*)    0 , (* 774*)   58 , (* 775*)   77 , (* 776*)  350
         , (* 777*)   62 , (* 778*)   78 , (* 779*)    0 , (* 780*)   79
         , (* 781*)    0 , (* 782*)  351 , (* 783*)  322 , (* 784*)  346
         , (* 785*)   68 , (* 786*)   69 , (* 787*)  323 , (* 788*)  324
         , (* 789*)    0 , (* 790*)    0 , (* 791*)   49 , (* 792*)  389
         , (* 793*)    0 , (* 794*)    0 , (* 795*)    0 , (* 796*)   58
         , (* 797*)   77 , (* 798*)  350 , (* 799*)   62 , (* 800*)   78
         , (* 801*)    0 , (* 802*)   79 , (* 803*)    0 , (* 804*)  351
         , (* 805*)    0 , (* 806*)  346 , (* 807*)   68 , (* 808*)   69
         , (* 809*)    0 , (* 810*)    0 , (* 811*)    0 , (* 812*)    0
         , (* 813*)    0 , (* 814*)    0 , (* 815*)    0 , (* 816*)    0
         , (* 817*)    0 , (* 818*)    0 , (* 819*)    0 , (* 820*)  321
         , (* 821*)    0 , (* 822*)    0 , (* 823*)    0 , (* 824*)  326
         , (* 825*)  327 , (* 826*)  328 , (* 827*)  329 , (* 828*)  330
         , (* 829*)  331 , (* 830*)  332 , (* 831*)  333 , (* 832*)  334
         , (* 833*)  335 , (* 834*)  336 , (* 835*)  337 , (* 836*)  338
         , (* 837*)  339 , (* 838*)  340 , (* 839*)  341 , (* 840*)   50
         , (* 841*)    0 , (* 842*)  361 , (* 843*)  362 , (* 844*)    0
         , (* 845*)   89 , (* 846*)  322 , (* 847*)  366 , (* 848*)    0
         , (* 849*)    0 , (* 850*)  323 , (* 851*)  324 , (* 852*)   93
         , (* 853*)    0 , (* 854*)   49 , (* 855*)  395 , (* 856*)   40
         , (* 857*)    0 , (* 858*)  392 , (* 859*)    0 , (* 860*)    0
         , (* 861*)    0 , (* 862*)  102 , (* 863*)  104 , (* 864*)  105
         , (* 865*)  113 , (* 866*)    0 , (* 867*)  143 , (* 868*)    0
         , (* 869*)  396 , (* 870*)    0 , (* 871*)    0 , (* 872*)    0
         , (* 873*)    0 , (* 874*)  149 , (* 875*)    0 , (* 876*)  399
         , (* 877*)    0 , (* 878*)    0 , (* 879*)  156 , (* 880*)    0
         , (* 881*)  401 , (* 882*)    0 , (* 883*)  321 , (* 884*)    0
         , (* 885*)    0 , (* 886*)    0 , (* 887*)  326 , (* 888*)  327
         , (* 889*)  328 , (* 890*)  329 , (* 891*)  330 , (* 892*)  331
         , (* 893*)  332 , (* 894*)  333 , (* 895*)  334 , (* 896*)  335
         , (* 897*)  336 , (* 898*)  337 , (* 899*)  338 , (* 900*)  339
         , (* 901*)  340 , (* 902*)  341 , (* 903*)   50 , (* 904*)    0
         , (* 905*)  361 , (* 906*)  362 , (* 907*)    0 , (* 908*)   89
         , (* 909*)  322 , (* 910*)  366 , (* 911*)    0 , (* 912*)    0
         , (* 913*)  323 , (* 914*)  324 , (* 915*)   93 , (* 916*)    0
         , (* 917*)  151 , (* 918*)  321 , (* 919*)    0 , (* 920*)    0
         , (* 921*)    0 , (* 922*)    0 , (* 923*)    0 , (* 924*)  166
         , (* 925*)  102 , (* 926*)  104 , (* 927*)  105 , (* 928*)  113
         , (* 929*)    0 , (* 930*)    0 , (* 931*)    0 , (* 932*)  168
         , (* 933*)    0 , (* 934*)    0 , (* 935*)    0 , (* 936*)    0
         , (* 937*)    0 , (* 938*)  160 , (* 939*)  398 , (* 940*)  408
         , (* 941*)  153 , (* 942*)  155 , (* 943*)    0 , (* 944*)  322
         , (* 945*)    0 , (* 946*)   56 , (* 947*)  342 , (* 948*)  323
         , (* 949*)  324 , (* 950*)    0 , (* 951*)    0 , (* 952*)   49
         , (* 953*)  397 , (* 954*)   40 , (* 955*)    0 , (* 956*)  392
         , (* 957*)    0 , (* 958*)    0 , (* 959*)    0 , (* 960*)    0
         , (* 961*)    0 , (* 962*)  411 , (* 963*)  410 , (* 964*)    0
         , (* 965*)  143 , (* 966*)  169 , (* 967*)  396 , (* 968*)    0
         , (* 969*)    0 , (* 970*)    0 , (* 971*)    0 , (* 972*)  149
         , (* 973*)    0 , (* 974*)  399 , (* 975*)    0 , (* 976*)    0
         , (* 977*)  156 , (* 978*)    0 , (* 979*)  401 , (* 980*)    0
         , (* 981*)    0 , (* 982*)   56 , (* 983*)  342 , (* 984*)    0
         , (* 985*)  326 , (* 986*)  327 , (* 987*)  328 , (* 988*)  329
         , (* 989*)  330 , (* 990*)  331 , (* 991*)  332 , (* 992*)  333
         , (* 993*)  334 , (* 994*)  335 , (* 995*)  336 , (* 996*)  337
         , (* 997*)  338 , (* 998*)  339 , (* 999*)  340 , (*1000*)  341
         , (*1001*)   50 , (*1002*)  403 , (*1003*)  361 , (*1004*)  362
         , (*1005*)    0 , (*1006*)   89 , (*1007*)    0 , (*1008*)  366
         , (*1009*)   56 , (*1010*)  342 , (*1011*)    0 , (*1012*)    0
         , (*1013*)   93 , (*1014*)    0 , (*1015*)    0 , (*1016*)    0
         , (*1017*)    0 , (*1018*)    0 , (*1019*)    0 , (*1020*)    0
         , (*1021*)    0 , (*1022*)    0 , (*1023*)  102 , (*1024*)  104
         , (*1025*)  105 , (*1026*)  113 , (*1027*)    0 , (*1028*)    0
         , (*1029*)  169 , (*1030*)    0 , (*1031*)    0 , (*1032*)    0
         , (*1033*)    0 , (*1034*)    0 , (*1035*)    0 , (*1036*)  160
         , (*1037*)    0 , (*1038*)  408 , (*1039*)    0 , (*1040*)    0
         , (*1041*)    0 , (*1042*)  189 , (*1043*)   58 , (*1044*)   77
         , (*1045*)  350 , (*1046*)   62 , (*1047*)   78 , (*1048*)    0
         , (*1049*)   79 , (*1050*)    0 , (*1051*)  351 , (*1052*)    0
         , (*1053*)  346 , (*1054*)   68 , (*1055*)   69 , (*1056*)   56
         , (*1057*)  342 , (*1058*)    0 , (*1059*)    0 , (*1060*)  409
         , (*1061*)  410 , (*1062*)  173 , (*1063*)    0 , (*1064*)    0
         , (*1065*)    0 , (*1066*)  171 , (*1067*)  407 , (*1068*)  405
         , (*1069*)    0 , (*1070*)    0 , (*1071*)    0 , (*1072*)  187
         , (*1073*)    0 , (*1074*)    0 , (*1075*)    0 , (*1076*)  169
         , (*1077*)    0 , (*1078*)    0 , (*1079*)   58 , (*1080*)   77
         , (*1081*)  350 , (*1082*)   62 , (*1083*)   78 , (*1084*)    0
         , (*1085*)   79 , (*1086*)    0 , (*1087*)  351 , (*1088*)    0
         , (*1089*)  346 , (*1090*)   68 , (*1091*)   69 , (*1092*)    0
         , (*1093*)    0 , (*1094*)    0 , (*1095*)    0 , (*1096*)    0
         , (*1097*)    0 , (*1098*)    0 , (*1099*)    0 , (*1100*)    0
         , (*1101*)    0 , (*1102*)   40 , (*1103*)    0 , (*1104*)  392
         , (*1105*)    0 , (*1106*)   58 , (*1107*)   77 , (*1108*)  350
         , (*1109*)   62 , (*1110*)   78 , (*1111*)    0 , (*1112*)   79
         , (*1113*)  143 , (*1114*)  351 , (*1115*)  396 , (*1116*)  346
         , (*1117*)   68 , (*1118*)   69 , (*1119*)  200 , (*1120*)  149
         , (*1121*)    0 , (*1122*)  399 , (*1123*)    0 , (*1124*)    0
         , (*1125*)  156 , (*1126*)    0 , (*1127*)  401 , (*1128*)    0
         , (*1129*)    0 , (*1130*)  404 , (*1131*)  405 , (*1132*)    0
         , (*1133*)    0 , (*1134*)    0 , (*1135*)    0 , (*1136*)    0
         , (*1137*)    0 , (*1138*)    0 , (*1139*)    0 , (*1140*)    0
         , (*1141*)    0 , (*1142*)    0 , (*1143*)    0 , (*1144*)    0
         , (*1145*)    0 , (*1146*)    0 , (*1147*)    0 , (*1148*)    0
         , (*1149*)   40 , (*1150*)    0 , (*1151*)  392 , (*1152*)    0
         , (*1153*)   58 , (*1154*)   77 , (*1155*)  350 , (*1156*)   62
         , (*1157*)   78 , (*1158*)    0 , (*1159*)   79 , (*1160*)  143
         , (*1161*)  351 , (*1162*)  396 , (*1163*)  346 , (*1164*)   68
         , (*1165*)   69 , (*1166*)    0 , (*1167*)  149 , (*1168*)    0
         , (*1169*)  399 , (*1170*)    0 , (*1171*)    0 , (*1172*)  156
         , (*1173*)    0 , (*1174*)  401 , (*1175*)    0 , (*1176*)  171
         , (*1177*)  407 , (*1178*)  405 , (*1179*)    0 , (*1180*)    0
         , (*1181*)    0 , (*1182*)    0 , (*1183*)    0 , (*1184*)  160
         , (*1185*)    0 , (*1186*)  408 , (*1187*)    0 , (*1188*)    0
         , (*1189*)    0 , (*1190*)    0 , (*1191*)    0 , (*1192*)    0
         , (*1193*)    0 , (*1194*)    0 , (*1195*)    0 , (*1196*)    0
         , (*1197*)    0 , (*1198*)    0 , (*1199*)    0 , (*1200*)    0
         , (*1201*)    0 , (*1202*)    0 , (*1203*)    0 , (*1204*)    0
         , (*1205*)    0 , (*1206*)    0 , (*1207*)    0 , (*1208*)  409
         , (*1209*)  410 , (*1210*)  173 , (*1211*)    0 , (*1212*)    0
         , (*1213*)    0 , (*1214*)    0 , (*1215*)    0 , (*1216*)    0
         , (*1217*)    0 , (*1218*)    0 , (*1219*)    0 , (*1220*)    0
         , (*1221*)    0 , (*1222*)    0 , (*1223*)    0 , (*1224*)    0
         , (*1225*)    0 , (*1226*)    0 , (*1227*)    0 , (*1228*)    0
         , (*1229*)    0 , (*1230*)    0 , (*1231*)  160 , (*1232*)    0
         , (*1233*)  408 , (*1234*)    0 , (*1235*)    0 , (*1236*)    0
         , (*1237*)    0 , (*1238*)    0 , (*1239*)    0 , (*1240*)    0
         , (*1241*)    0 , (*1242*)    0 , (*1243*)    0 , (*1244*)    0
         , (*1245*)    0 , (*1246*)    0 , (*1247*)    0 , (*1248*)    0
         , (*1249*)    0 , (*1250*)    0 , (*1251*)    0 , (*1252*)    0
         , (*1253*)    0 , (*1254*)    0 , (*1255*)  409 , (*1256*)  410
         , (*1257*)  173 , (*1258*)    0 , (*1259*)    0 , (*1260*)    0
         , (*1261*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 416(P   1)*)    2 , (*A 417(P   2)*)    1 , (*A 418(P   3)*)    1
         , (*A 419(P   4)*)    1 , (*A 420(P   5)*)    1 , (*A 421(P   6)*)    1
         , (*A 422(P   7)*)    1 , (*A 423(P   8)*)    0 , (*A 424(P   9)*)    0
         , (*A 425(P  10)*)    0 , (*A 426(P  11)*)    0 , (*A 427(P  12)*)    0
         , (*A 428(P  13)*)    0 , (*A 429(P  14)*)    4 , (*A 430(P  15)*)    7
         , (*A 431(P  16)*)    4 , (*A 432(P  17)*)    5 , (*A 433(P  18)*)    0
         , (*A 434(P  19)*)    2 , (*A 435(P  20)*)    3 , (*A 436(P  21)*)    3
         , (*A 437(P  22)*)    3 , (*A 438(P  23)*)    7 , (*A 439(P  24)*)    5
         , (*A 440(P  25)*)    7 , (*A 441(P  26)*)    3 , (*A 442(P  27)*)   10
         , (*A 443(P  28)*)    3 , (*A 444(P  29)*)    9 , (*A 445(P  30)*)    1
         , (*A 446(P  31)*)    0 , (*A 447(P  32)*)    1 , (*A 448(P  33)*)    0
         , (*A 449(P  34)*)    3 , (*A 450(P  35)*)    3 , (*A 451(P  36)*)    0
         , (*A 452(P  37)*)    2 , (*A 453(P  38)*)    3 , (*A 454(P  39)*)    1
         , (*A 455(P  40)*)    3 , (*A 456(P  41)*)    1 , (*A 457(P  42)*)    3
         , (*A 458(P  43)*)    3 , (*A 459(P  44)*)    3 , (*A 460(P  45)*)    1
         , (*A 461(P  46)*)    3 , (*A 462(P  47)*)    0 , (*A 463(P  48)*)    0
         , (*A 464(P  49)*)    2 , (*A 465(P  50)*)    1 , (*A 466(P  51)*)    3
         , (*A 467(P  52)*)    1 , (*A 468(P  53)*)    1 , (*A 469(P  54)*)    1
         , (*A 470(P  55)*)    3 , (*A 471(P  56)*)    1 , (*A 472(P  57)*)    3
         , (*A 473(P  58)*)    1 , (*A 474(P  59)*)    3 , (*A 475(P  60)*)    3
         , (*A 476(P  61)*)    0 , (*A 477(P  62)*)    1 , (*A 478(P  63)*)    1
         , (*A 479(P  64)*)    1 , (*A 480(P  65)*)    0 , (*A 481(P  66)*)    1
         , (*A 482(P  67)*)    1 , (*A 483(P  68)*)    3 , (*A 484(P  69)*)    1
         , (*A 485(P  70)*)    1 , (*A 486(P  71)*)    2 , (*A 487(P  72)*)    2
         , (*A 488(P  73)*)    0 , (*A 489(P  74)*)    1 , (*A 490(P  75)*)    2
         , (*A 491(P  76)*)    0 , (*A 492(P  77)*)    1 , (*A 493(P  78)*)    2
         , (*A 494(P  79)*)    3 , (*A 495(P  80)*)    1 , (*A 496(P  81)*)    0
         , (*A 497(P  82)*)    0 , (*A 498(P  83)*)    6 , (*A 499(P  84)*)    1
         , (*A 500(P  85)*)    1 , (*A 501(P  86)*)    1 , (*A 502(P  87)*)    2
         , (*A 503(P  88)*)    0 , (*A 504(P  89)*)    1 , (*A 505(P  90)*)    2
         , (*A 506(P  91)*)    3 , (*A 507(P  92)*)    1 , (*A 508(P  93)*)    3
         , (*A 509(P  94)*)    1 , (*A 510(P  95)*)    1 , (*A 511(P  96)*)    1
         , (*A 512(P  97)*)    2 , (*A 513(P  98)*)    0 , (*A 514(P  99)*)    1
         , (*A 515(P 100)*)    2 , (*A 516(P 101)*)    3 , (*A 517(P 102)*)    3
         , (*A 518(P 103)*)    1 , (*A 519(P 104)*)    2 , (*A 520(P 105)*)    0
         , (*A 521(P 106)*)    1 , (*A 522(P 107)*)    2 , (*A 523(P 108)*)    3
         , (*A 524(P 109)*)    3 , (*A 525(P 110)*)    1 , (*A 526(P 111)*)    2
         , (*A 527(P 112)*)    0 , (*A 528(P 113)*)    2 , (*A 529(P 114)*)    0
         , (*A 530(P 115)*)    1 , (*A 531(P 116)*)    1 , (*A 532(P 117)*)    1
         , (*A 533(P 118)*)    1 , (*A 534(P 119)*)    1 , (*A 535(P 120)*)    1
         , (*A 536(P 121)*)    1 , (*A 537(P 122)*)    1 , (*A 538(P 123)*)    1
         , (*A 539(P 124)*)    1 , (*A 540(P 125)*)    1 , (*A 541(P 126)*)    1
         , (*A 542(P 127)*)    1 , (*A 543(P 128)*)    1 , (*A 544(P 129)*)    1
         , (*A 545(P 130)*)    1 , (*A 546(P 131)*)    1 , (*A 547(P 132)*)    0
         , (*A 548(P 133)*)    1 , (*A 549(P 134)*)    4 , (*A 550(P 135)*)    1
         , (*A 551(P 136)*)    3 , (*A 552(P 137)*)    1 , (*A 553(P 138)*)    4
         , (*A 554(P 139)*)    5 , (*A 555(P 140)*)    1 , (*A 556(P 141)*)    3
         , (*A 557(P 142)*)    0 , (*A 558(P 143)*)    1 , (*A 559(P 144)*)    1
         , (*A 560(P 145)*)    3 , (*A 561(P 146)*)    1 , (*A 562(P 147)*)    1
         , (*A 563(P 148)*)    0 , (*A 564(P 149)*)    2 , (*A 565(P 150)*)    1
         , (*A 566(P 151)*)    3 , (*A 567(P 152)*)    1 , (*A 568(P 153)*)    3
         , (*A 569(P 154)*)    0 , (*A 570(P 155)*)    1 , (*A 571(P 156)*)    3
         , (*A 572(P 157)*)    1 , (*A 573(P 158)*)    3 , (*A 574(P 159)*)    1
         , (*A 575(P 160)*)    2 , (*A 576(P 161)*)    0 , (*A 577(P 162)*)    1
         , (*A 578(P 163)*)    3 , (*A 579(P 164)*)    1 , (*A 580(P 165)*)    3
         , (*A 581(P 166)*)    1 , (*A 582(P 167)*)    3 , (*A 583(P 168)*)    0
         , (*A 584(P 169)*)    1 , (*A 585(P 170)*)    2 , (*A 586(P 171)*)    0
         , (*A 587(P 172)*)    1 , (*A 588(P 173)*)    1 , (*A 589(P 174)*)    3
         , (*A 590(P 175)*)    5 , (*A 591(P 176)*)    1 , (*A 592(P 177)*)    1
         , (*A 593(P 178)*)    2 , (*A 594(P 179)*)    3 , (*A 595(P 180)*)    1
         , (*A 596(P 181)*)    3 , (*A 597(P 182)*)    0 , (*A 598(P 183)*)    2
         , (*A 599(P 184)*)    3 , (*A 600(P 185)*)    1 , (*A 601(P 186)*)    0
         , (*A 602(P 187)*)    1 , (*A 603(P 188)*)    1 , (*A 604(P 189)*)    1
         , (*A 605(P 190)*)    4 , (*A 606(P 191)*)    1 , (*A 607(P 192)*)    2
         , (*A 608(P 193)*)    0 , (*A 609(P 194)*)    0 , (*A 610(P 195)*)    2
         , (*A 611(P 196)*)    4 , (*A 612(P 197)*)    2 , (*A 613(P 198)*)    3
         , (*A 614(P 199)*)    1 , (*A 615(P 200)*)    1 , (*A 616(P 201)*)    4
         , (*A 617(P 202)*)    1 , (*A 618(P 203)*)    1 , (*A 619(P 204)*)    3
         , (*A 620(P 205)*)    1 , (*A 621(P 206)*)    3 , (*A 622(P 207)*)    1
         , (*A 623(P 208)*)    2 , (*A 624(P 209)*)    1 , (*A 625(P 210)*)    3
         , (*A 626(P 211)*)    1 , (*A 627(P 212)*)    3 , (*A 628(P 213)*)    1
         , (*A 629(P 214)*)    3 , (*A 630(P 215)*)    1 , (*A 631(P 216)*)    2
         , (*A 632(P 217)*)    2 , (*A 633(P 218)*)    2 , (*A 634(P 219)*)    3
         , (*A 635(P 220)*)    3 , (*A 636(P 221)*)    1 , (*A 637(P 222)*)    2
         , (*A 638(P 223)*)    2 , (*A 639(P 224)*)    0 , (*A 640(P 225)*)    3
         , (*A 641(P 226)*)    1 , (*A 642(P 227)*)    1 , (*A 643(P 228)*)    3
         , (*A 644(P 229)*)    1 , (*A 645(P 230)*)    3 , (*A 646(P 231)*)    3
         , (*A 647(P 232)*)    0 , (*A 648(P 233)*)    1 , (*A 649(P 234)*)    3
         , (*A 650(P 235)*)    1 , (*A 651(P 236)*)    3 , (*A 652(P 237)*)    3
         , (*A 653(P 238)*)    1 , (*A 654(P 239)*)    1 , (*A 655(P 240)*)    1
         , (*A 656(P 241)*)    1 , (*A 657(P 242)*)    1 , (*A 658(P 243)*)    1
         , (*A 659(P 244)*)    1 , (*A 660(P 245)*)    1 , (*A 661(P 246)*)    1
         , (*A 662(P 247)*)    1 , (*A 663(P 248)*)    1 , (*A 664(P 249)*)    3
         , (*A 665(P 250)*)    1 , (*A 666(P 251)*)    1 , (*A 667(P 252)*)    1
         , (*A 668(P 253)*)    1 , (*A 669(P 254)*)    1 , (*A 670(P 255)*)    1
         , (*A 671(P 256)*)    1 , (*A 672(P 257)*)    1 , (*A 673(P 258)*)    1
         , (*A 674(P 259)*)    1 , (*A 675(P 260)*)    1 , (*A 676(P 261)*)    1
         , (*A 677(P 262)*)    1 , (*A 678(P 263)*)    1 , (*A 679(P 264)*)    1
         , (*A 680(P 265)*)    1 , (*A 681(P 266)*)    0 , (*A 682(P 267)*)    5
         , (*A 683(P 268)*)    1 , (*A 684(P 269)*)    1 , (*A 685(P 270)*)    1
         , (*A 686(P 271)*)    1 , (*A 687(P 272)*)    1 , (*A 688(P 273)*)    1
         , (*A 689(P 274)*)    0 , (*A 690(P 275)*)    1 , (*A 691(P 276)*)    1
         , (*A 692(P 277)*)    2 , (*A 693(P 278)*)    0 , (*A 694(P 279)*)    2
         , (*A 695(P 280)*)    1 , (*A 696(P 281)*)    3 , (*A 697(P 282)*)    1
         , (*A 698(P 283)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 416(P   1)*)  272 , (*A 417(P   2)*)  110 , (*A 418(P   3)*)  110
         , (*A 419(P   4)*)  110 , (*A 420(P   5)*)  110 , (*A 421(P   6)*)  110
         , (*A 422(P   7)*)  110 , (*A 423(P   8)*)  116 , (*A 424(P   9)*)  117
         , (*A 425(P  10)*)  118 , (*A 426(P  11)*)  119 , (*A 427(P  12)*)  120
         , (*A 428(P  13)*)  121 , (*A 429(P  14)*)  125 , (*A 430(P  15)*)  114
         , (*A 431(P  16)*)  129 , (*A 432(P  17)*)  109 , (*A 433(P  18)*)  124
         , (*A 434(P  19)*)  124 , (*A 435(P  20)*)  131 , (*A 436(P  21)*)  131
         , (*A 437(P  22)*)  132 , (*A 438(P  23)*)  115 , (*A 439(P  24)*)  134
         , (*A 440(P  25)*)  111 , (*A 441(P  26)*)  136 , (*A 442(P  27)*)  112
         , (*A 443(P  28)*)  138 , (*A 444(P  29)*)  113 , (*A 445(P  30)*)  122
         , (*A 446(P  31)*)  122 , (*A 447(P  32)*)  140 , (*A 448(P  33)*)  140
         , (*A 449(P  34)*)  137 , (*A 450(P  35)*)  126 , (*A 451(P  36)*)  127
         , (*A 452(P  37)*)  127 , (*A 453(P  38)*)  142 , (*A 454(P  39)*)  143
         , (*A 455(P  40)*)  143 , (*A 456(P  41)*)  144 , (*A 457(P  42)*)  144
         , (*A 458(P  43)*)  145 , (*A 459(P  44)*)  142 , (*A 460(P  45)*)  146
         , (*A 461(P  46)*)  146 , (*A 462(P  47)*)  128 , (*A 463(P  48)*)  133
         , (*A 464(P  49)*)  133 , (*A 465(P  50)*)  147 , (*A 466(P  51)*)  147
         , (*A 467(P  52)*)  148 , (*A 468(P  53)*)  123 , (*A 469(P  54)*)  149
         , (*A 470(P  55)*)  150 , (*A 471(P  56)*)  151 , (*A 472(P  57)*)  151
         , (*A 473(P  58)*)  152 , (*A 474(P  59)*)  152 , (*A 475(P  60)*)  141
         , (*A 476(P  61)*)  141 , (*A 477(P  62)*)  153 , (*A 478(P  63)*)  153
         , (*A 479(P  64)*)  154 , (*A 480(P  65)*)  155 , (*A 481(P  66)*)  155
         , (*A 482(P  67)*)  156 , (*A 483(P  68)*)  156 , (*A 484(P  69)*)  157
         , (*A 485(P  70)*)  157 , (*A 486(P  71)*)  157 , (*A 487(P  72)*)  159
         , (*A 488(P  73)*)  159 , (*A 489(P  74)*)  160 , (*A 490(P  75)*)  162
         , (*A 491(P  76)*)  161 , (*A 492(P  77)*)  161 , (*A 493(P  78)*)  163
         , (*A 494(P  79)*)  163 , (*A 495(P  80)*)  165 , (*A 496(P  81)*)  166
         , (*A 497(P  82)*)  167 , (*A 498(P  83)*)  164 , (*A 499(P  84)*)  170
         , (*A 500(P  85)*)  170 , (*A 501(P  86)*)  171 , (*A 502(P  87)*)  173
         , (*A 503(P  88)*)  172 , (*A 504(P  89)*)  172 , (*A 505(P  90)*)  174
         , (*A 506(P  91)*)  174 , (*A 507(P  92)*)  176 , (*A 508(P  93)*)  175
         , (*A 509(P  94)*)  177 , (*A 510(P  95)*)  177 , (*A 511(P  96)*)  178
         , (*A 512(P  97)*)  180 , (*A 513(P  98)*)  179 , (*A 514(P  99)*)  179
         , (*A 515(P 100)*)  181 , (*A 516(P 101)*)  181 , (*A 517(P 102)*)  182
         , (*A 518(P 103)*)  183 , (*A 519(P 104)*)  185 , (*A 520(P 105)*)  184
         , (*A 521(P 106)*)  184 , (*A 522(P 107)*)  186 , (*A 523(P 108)*)  186
         , (*A 524(P 109)*)  187 , (*A 525(P 110)*)  188 , (*A 526(P 111)*)  168
         , (*A 527(P 112)*)  168 , (*A 528(P 113)*)  189 , (*A 529(P 114)*)  189
         , (*A 530(P 115)*)  158 , (*A 531(P 116)*)  158 , (*A 532(P 117)*)  158
         , (*A 533(P 118)*)  158 , (*A 534(P 119)*)  158 , (*A 535(P 120)*)  158
         , (*A 536(P 121)*)  158 , (*A 537(P 122)*)  158 , (*A 538(P 123)*)  158
         , (*A 539(P 124)*)  158 , (*A 540(P 125)*)  158 , (*A 541(P 126)*)  158
         , (*A 542(P 127)*)  158 , (*A 543(P 128)*)  158 , (*A 544(P 129)*)  158
         , (*A 545(P 130)*)  158 , (*A 546(P 131)*)  158 , (*A 547(P 132)*)  206
         , (*A 548(P 133)*)  206 , (*A 549(P 134)*)  158 , (*A 550(P 135)*)  158
         , (*A 551(P 136)*)  208 , (*A 552(P 137)*)  158 , (*A 553(P 138)*)  209
         , (*A 554(P 139)*)  210 , (*A 555(P 140)*)  211 , (*A 556(P 141)*)  213
         , (*A 557(P 142)*)  212 , (*A 558(P 143)*)  212 , (*A 559(P 144)*)  214
         , (*A 560(P 145)*)  214 , (*A 561(P 146)*)  215 , (*A 562(P 147)*)  158
         , (*A 563(P 148)*)  216 , (*A 564(P 149)*)  216 , (*A 565(P 150)*)  217
         , (*A 566(P 151)*)  217 , (*A 567(P 152)*)  218 , (*A 568(P 153)*)  158
         , (*A 569(P 154)*)  219 , (*A 570(P 155)*)  219 , (*A 571(P 156)*)  219
         , (*A 572(P 157)*)  220 , (*A 573(P 158)*)  220 , (*A 574(P 159)*)  222
         , (*A 575(P 160)*)  221 , (*A 576(P 161)*)  224 , (*A 577(P 162)*)  224
         , (*A 578(P 163)*)  224 , (*A 579(P 164)*)  225 , (*A 580(P 165)*)  225
         , (*A 581(P 166)*)  227 , (*A 582(P 167)*)  226 , (*A 583(P 168)*)  207
         , (*A 584(P 169)*)  207 , (*A 585(P 170)*)  207 , (*A 586(P 171)*)  228
         , (*A 587(P 172)*)  228 , (*A 588(P 173)*)  228 , (*A 589(P 174)*)  230
         , (*A 590(P 175)*)  229 , (*A 591(P 176)*)  158 , (*A 592(P 177)*)  231
         , (*A 593(P 178)*)  158 , (*A 594(P 179)*)  223 , (*A 595(P 180)*)  235
         , (*A 596(P 181)*)  232 , (*A 597(P 182)*)  236 , (*A 598(P 183)*)  236
         , (*A 599(P 184)*)  237 , (*A 600(P 185)*)  237 , (*A 601(P 186)*)  239
         , (*A 602(P 187)*)  239 , (*A 603(P 188)*)  239 , (*A 604(P 189)*)  239
         , (*A 605(P 190)*)  238 , (*A 606(P 191)*)  240 , (*A 607(P 192)*)  233
         , (*A 608(P 193)*)  233 , (*A 609(P 194)*)  234 , (*A 610(P 195)*)  234
         , (*A 611(P 196)*)  234 , (*A 612(P 197)*)  242 , (*A 613(P 198)*)  244
         , (*A 614(P 199)*)  243 , (*A 615(P 200)*)  245 , (*A 616(P 201)*)  243
         , (*A 617(P 202)*)  169 , (*A 618(P 203)*)  246 , (*A 619(P 204)*)  246
         , (*A 620(P 205)*)  247 , (*A 621(P 206)*)  247 , (*A 622(P 207)*)  248
         , (*A 623(P 208)*)  248 , (*A 624(P 209)*)  249 , (*A 625(P 210)*)  249
         , (*A 626(P 211)*)  250 , (*A 627(P 212)*)  250 , (*A 628(P 213)*)  252
         , (*A 629(P 214)*)  252 , (*A 630(P 215)*)  254 , (*A 631(P 216)*)  254
         , (*A 632(P 217)*)  256 , (*A 633(P 218)*)  256 , (*A 634(P 219)*)  256
         , (*A 635(P 220)*)  256 , (*A 636(P 221)*)  256 , (*A 637(P 222)*)  256
         , (*A 638(P 223)*)  256 , (*A 639(P 224)*)  260 , (*A 640(P 225)*)  256
         , (*A 641(P 226)*)  256 , (*A 642(P 227)*)  256 , (*A 643(P 228)*)  259
         , (*A 644(P 229)*)  262 , (*A 645(P 230)*)  262 , (*A 646(P 231)*)  261
         , (*A 647(P 232)*)  263 , (*A 648(P 233)*)  263 , (*A 649(P 234)*)  263
         , (*A 650(P 235)*)  264 , (*A 651(P 236)*)  264 , (*A 652(P 237)*)  258
         , (*A 653(P 238)*)  258 , (*A 654(P 239)*)  258 , (*A 655(P 240)*)  258
         , (*A 656(P 241)*)  258 , (*A 657(P 242)*)  258 , (*A 658(P 243)*)  258
         , (*A 659(P 244)*)  258 , (*A 660(P 245)*)  258 , (*A 661(P 246)*)  258
         , (*A 662(P 247)*)  258 , (*A 663(P 248)*)  258 , (*A 664(P 249)*)  258
         , (*A 665(P 250)*)  251 , (*A 666(P 251)*)  251 , (*A 667(P 252)*)  251
         , (*A 668(P 253)*)  251 , (*A 669(P 254)*)  251 , (*A 670(P 255)*)  251
         , (*A 671(P 256)*)  251 , (*A 672(P 257)*)  253 , (*A 673(P 258)*)  253
         , (*A 674(P 259)*)  253 , (*A 675(P 260)*)  255 , (*A 676(P 261)*)  255
         , (*A 677(P 262)*)  255 , (*A 678(P 263)*)  255 , (*A 679(P 264)*)  257
         , (*A 680(P 265)*)  257 , (*A 681(P 266)*)  265 , (*A 682(P 267)*)  139
         , (*A 683(P 268)*)  266 , (*A 684(P 269)*)  266 , (*A 685(P 270)*)  266
         , (*A 686(P 271)*)  266 , (*A 687(P 272)*)  266 , (*A 688(P 273)*)  266
         , (*A 689(P 274)*)  130 , (*A 690(P 275)*)  130 , (*A 691(P 276)*)  268
         , (*A 692(P 277)*)  268 , (*A 693(P 278)*)  135 , (*A 694(P 279)*)  135
         , (*A 695(P 280)*)  269 , (*A 696(P 281)*)  269 , (*A 697(P 282)*)  270
         , (*A 698(P 283)*)  271
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   66 , (*:  10*)  108 , (*:  11*)   94
         , (*:  12*)   94 , (*:  13*)   95 , (*:  14*)   66
         , (*:  15*)   14 , (*:  16*)   14 , (*:  17*)   95
         , (*:  18*)   30 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   95 , (*:  25*)   66 , (*:  26*)   95
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   70 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)   19
         , (*:  36*)   95 , (*:  37*)   19 , (*:  38*)   95
         , (*:  39*)   67 , (*:  40*)    9 , (*:  41*)    9
         , (*:  42*)   66 , (*:  43*)   68 , (*:  44*)   68
         , (*:  45*)   95 , (*:  46*)   40 , (*:  47*)   95
         , (*:  48*)   52 , (*:  49*)   19 , (*:  50*)   48
         , (*:  51*)   39 , (*:  52*)   96 , (*:  53*)   96
         , (*:  54*)    5 , (*:  55*)   95 , (*:  56*)   92
         , (*:  57*)   96 , (*:  58*)   19 , (*:  59*)   96
         , (*:  60*)   19 , (*:  61*)   96 , (*:  62*)    5
         , (*:  63*)   96 , (*:  64*)    5 , (*:  65*)   96
         , (*:  66*)    5 , (*:  67*)   96 , (*:  68*)   96
         , (*:  69*)    5 , (*:  70*)   95 , (*:  71*)   67
         , (*:  72*)   69 , (*:  73*)   70 , (*:  74*)    5
         , (*:  75*)   74 , (*:  76*)   96 , (*:  77*)   19
         , (*:  78*)    5 , (*:  79*)    5 , (*:  80*)   70
         , (*:  81*)   96 , (*:  82*)   81 , (*:  83*)   96
         , (*:  84*)   69 , (*:  85*)   70 , (*:  86*)    5
         , (*:  87*)   48 , (*:  88*)   95 , (*:  89*)   76
         , (*:  90*)   76 , (*:  91*)   76 , (*:  92*)   95
         , (*:  93*)   19 , (*:  94*)   19 , (*:  95*)   95
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   96
         , (*:  99*)   19 , (*: 100*)   19 , (*: 101*)   19
         , (*: 102*)   39 , (*: 103*)   39 , (*: 104*)   19
         , (*: 105*)   19 , (*: 106*)   19 , (*: 107*)   19
         , (*: 108*)   19 , (*: 109*)   19 , (*: 110*)   69
         , (*: 111*)   19 , (*: 112*)   95 , (*: 113*)   69
         , (*: 114*)   70 , (*: 115*)   70 , (*: 116*)   70
         , (*: 117*)   70 , (*: 118*)   95 , (*: 119*)   66
         , (*: 120*)   66 , (*: 121*)   66 , (*: 122*)   19
         , (*: 123*)    6 , (*: 124*)    6 , (*: 125*)   76
         , (*: 126*)   19 , (*: 127*)   19 , (*: 128*)   19
         , (*: 129*)   19 , (*: 130*)   68 , (*: 131*)   96
         , (*: 132*)   19 , (*: 133*)   96 , (*: 134*)   79
         , (*: 135*)   96 , (*: 136*)   81 , (*: 137*)   40
         , (*: 138*)   95 , (*: 139*)   68 , (*: 140*)   68
         , (*: 141*)   96 , (*: 142*)   66 , (*: 143*)    9
         , (*: 144*)    9 , (*: 145*)   66 , (*: 146*)   68
         , (*: 147*)   95 , (*: 148*)   66 , (*: 149*)    9
         , (*: 150*)   52 , (*: 151*)   68 , (*: 152*)   95
         , (*: 153*)    9 , (*: 154*)   66 , (*: 155*)   66
         , (*: 156*)    9 , (*: 157*)    9 , (*: 158*)   66
         , (*: 159*)   66 , (*: 160*)   69 , (*: 161*)   66
         , (*: 162*)    9 , (*: 163*)   95 , (*: 164*)   66
         , (*: 165*)    9 , (*: 166*)    9 , (*: 167*)   19
         , (*: 168*)   19 , (*: 169*)   74 , (*: 170*)   96
         , (*: 171*)   19 , (*: 172*)   19 , (*: 173*)    9
         , (*: 174*)   66 , (*: 175*)   95 , (*: 176*)   66
         , (*: 177*)   95 , (*: 178*)   95 , (*: 179*)   69
         , (*: 180*)   19 , (*: 181*)   95 , (*: 182*)   67
         , (*: 183*)   66 , (*: 184*)    9 , (*: 185*)    9
         , (*: 186*)    9 , (*: 187*)    9 , (*: 188*)   19
         , (*: 189*)   19 , (*: 190*)   95 , (*: 191*)   67
         , (*: 192*)   69 , (*: 193*)   69 , (*: 194*)   70
         , (*: 195*)   70 , (*: 196*)   66 , (*: 197*)   14
         , (*: 198*)   14 , (*: 199*)   19 , (*: 200*)   19
         , (*: 201*)   95 , (*: 202*)   67 , (*: 203*)   69
         , (*: 204*)   69 , (*: 205*)   66 , (*: 206*)    9
         , (*: 207*)    9 , (*: 208*)    9 , (*: 209*)   95
         , (*: 210*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 211)*)  468 (*P52*) , (*RR: 212)*)  445 (*P29*)
         , (*RR: 213)*)  436 (*P20*) , (*RR: 214)*)  435 (*P19*)
         , (*RR: 215)*)  458 (*P42*) , (*RR: 216)*)  453 (*P37*)
         , (*RR: 217)*)  459 (*P43*) , (*RR: 218)*)  450 (*P34*)
         , (*RR: 219)*)  469 (*P53*) , (*RR: 220)*)  430 (*P14*)
         , (*RR: 221)*)  489 (*P73*) , (*RR: 222)*)  511 (*P95*)
         , (*RR: 223)*)  501 (*P85*) , (*RR: 224)*)  518 (*P102*)
         , (*RR: 225)*)  432 (*P16*) , (*RR: 226)*)  494 (*P78*)
         , (*RR: 227)*)  592 (*P176*) , (*RR: 228)*)  567 (*P151*)
         , (*RR: 229)*)  485 (*P69*) , (*RR: 230)*)  486 (*P70*)
         , (*RR: 231)*)  555 (*P139*) , (*RR: 232)*)  469 (*P53*)
         , (*RR: 233)*)  679 (*P263*) , (*RR: 234)*)  680 (*P264*)
         , (*RR: 235)*)  470 (*P54*) , (*RR: 236)*)  653 (*P237*)
         , (*RR: 237)*)  654 (*P238*) , (*RR: 238)*)  655 (*P239*)
         , (*RR: 239)*)  656 (*P240*) , (*RR: 240)*)  657 (*P241*)
         , (*RR: 241)*)  658 (*P242*) , (*RR: 242)*)  659 (*P243*)
         , (*RR: 243)*)  662 (*P246*) , (*RR: 244)*)  663 (*P247*)
         , (*RR: 245)*)  660 (*P244*) , (*RR: 246)*)  661 (*P245*)
         , (*RR: 247)*)  671 (*P255*) , (*RR: 248)*)  665 (*P249*)
         , (*RR: 249)*)  666 (*P250*) , (*RR: 250)*)  667 (*P251*)
         , (*RR: 251)*)  668 (*P252*) , (*RR: 252)*)  669 (*P253*)
         , (*RR: 253)*)  670 (*P254*) , (*RR: 254)*)  672 (*P256*)
         , (*RR: 255)*)  673 (*P257*) , (*RR: 256)*)  674 (*P258*)
         , (*RR: 257)*)  677 (*P261*) , (*RR: 258)*)  678 (*P262*)
         , (*RR: 259)*)  675 (*P259*) , (*RR: 260)*)  676 (*P260*)
         , (*RR: 261)*)  632 (*P216*) , (*RR: 262)*)  646 (*P230*)
         , (*RR: 263)*)  643 (*P227*) , (*RR: 264)*)  637 (*P221*)
         , (*RR: 265)*)  664 (*P248*) , (*RR: 266)*)  556 (*P140*)
         , (*RR: 267)*)  473 (*P57*) , (*RR: 268)*)  474 (*P58*)
         , (*RR: 269)*)  568 (*P152*) , (*RR: 270)*)  589 (*P173*)
         , (*RR: 271)*)  595 (*P179*) , (*RR: 272)*)  604 (*P188*)
         , (*RR: 273)*)  602 (*P186*) , (*RR: 274)*)  603 (*P187*)
         , (*RR: 275)*)  596 (*P180*) , (*RR: 276)*)  610 (*P194*)
         , (*RR: 277)*)  611 (*P195*) , (*RR: 278)*)  590 (*P174*)
         , (*RR: 279)*)  554 (*P138*) , (*RR: 280)*)  493 (*P77*)
         , (*RR: 281)*)  506 (*P90*) , (*RR: 282)*)  499 (*P83*)
         , (*RR: 283)*)  500 (*P84*) , (*RR: 284)*)  505 (*P89*)
         , (*RR: 285)*)  509 (*P93*) , (*RR: 286)*)  510 (*P94*)
         , (*RR: 287)*)  516 (*P100*) , (*RR: 288)*)  515 (*P99*)
         , (*RR: 289)*)  523 (*P107*) , (*RR: 290)*)  522 (*P106*)
         , (*RR: 291)*)  614 (*P198*) , (*RR: 292)*)  615 (*P199*)
         , (*RR: 293)*)  616 (*P200*) , (*RR: 294)*)  682 (*P266*)
         , (*RR: 295)*)  438 (*P22*) , (*RR: 296)*)  440 (*P24*)
         , (*RR: 297)*)  449 (*P33*) , (*RR: 298)*)  442 (*P26*)
         , (*RR: 299)*)  444 (*P28*) , (*RR: 300)*)  441 (*P25*)
         , (*RR: 301)*)  443 (*P27*) , (*RR: 302)*)  417 (*P1*)
         , (*RR: 303)*)  418 (*P2*) , (*RR: 304)*)  419 (*P3*)
         , (*RR: 305)*)  420 (*P4*) , (*RR: 306)*)  421 (*P5*)
         , (*RR: 307)*)  422 (*P6*) , (*RR: 308)*)  434 (*P18*)
         , (*RR: 309)*)  437 (*P21*) , (*RR: 310)*)  457 (*P41*)
         , (*RR: 311)*)  455 (*P39*) , (*RR: 312)*)  454 (*P38*)
         , (*RR: 313)*)  431 (*P15*) , (*RR: 314)*)  452 (*P36*)
         , (*RR: 315)*)  460 (*P44*) , (*RR: 316)*)  461 (*P45*)
         , (*RR: 317)*)  475 (*P59*) , (*RR: 318)*)  612 (*P196*)
         , (*RR: 319)*)  495 (*P79*) , (*RR: 320)*)  490 (*P74*)
         , (*RR: 321)*)  479 (*P63*) , (*RR: 322)*)  477 (*P61*)
         , (*RR: 323)*)  484 (*P68*) , (*RR: 324)*)  478 (*P62*)
         , (*RR: 325)*)  551 (*P135*) , (*RR: 326)*)  531 (*P115*)
         , (*RR: 327)*)  532 (*P116*) , (*RR: 328)*)  533 (*P117*)
         , (*RR: 329)*)  534 (*P118*) , (*RR: 330)*)  535 (*P119*)
         , (*RR: 331)*)  536 (*P120*) , (*RR: 332)*)  537 (*P121*)
         , (*RR: 333)*)  538 (*P122*) , (*RR: 334)*)  539 (*P123*)
         , (*RR: 335)*)  540 (*P124*) , (*RR: 336)*)  541 (*P125*)
         , (*RR: 337)*)  542 (*P126*) , (*RR: 338)*)  543 (*P127*)
         , (*RR: 339)*)  544 (*P128*) , (*RR: 340)*)  545 (*P129*)
         , (*RR: 341)*)  546 (*P130*) , (*RR: 342)*)  642 (*P226*)
         , (*RR: 343)*)  644 (*P228*) , (*RR: 344)*)  621 (*P205*)
         , (*RR: 345)*)  629 (*P213*) , (*RR: 346)*)  630 (*P214*)
         , (*RR: 347)*)  631 (*P215*) , (*RR: 348)*)  633 (*P217*)
         , (*RR: 349)*)  651 (*P235*) , (*RR: 350)*)  620 (*P204*)
         , (*RR: 351)*)  628 (*P212*) , (*RR: 352)*)  650 (*P234*)
         , (*RR: 353)*)  649 (*P233*) , (*RR: 354)*)  648 (*P232*)
         , (*RR: 355)*)  634 (*P218*) , (*RR: 356)*)  645 (*P229*)
         , (*RR: 357)*)  638 (*P222*) , (*RR: 358)*)  640 (*P224*)
         , (*RR: 359)*)  585 (*P169*) , (*RR: 360)*)  549 (*P133*)
         , (*RR: 361)*)  550 (*P134*) , (*RR: 362)*)  552 (*P136*)
         , (*RR: 363)*)  561 (*P145*) , (*RR: 364)*)  560 (*P144*)
         , (*RR: 365)*)  559 (*P143*) , (*RR: 366)*)  562 (*P146*)
         , (*RR: 367)*)  565 (*P149*) , (*RR: 368)*)  528 (*P112*)
         , (*RR: 369)*)  524 (*P108*) , (*RR: 370)*)  566 (*P150*)
         , (*RR: 371)*)  564 (*P148*) , (*RR: 372)*)  574 (*P158*)
         , (*RR: 373)*)  573 (*P157*) , (*RR: 374)*)  575 (*P159*)
         , (*RR: 375)*)  607 (*P191*) , (*RR: 376)*)  593 (*P177*)
         , (*RR: 377)*)  599 (*P183*) , (*RR: 378)*)  605 (*P189*)
         , (*RR: 379)*)  598 (*P182*) , (*RR: 380)*)  600 (*P184*)
         , (*RR: 381)*)  594 (*P178*) , (*RR: 382)*)  571 (*P155*)
         , (*RR: 383)*)  572 (*P156*) , (*RR: 384)*)  581 (*P165*)
         , (*RR: 385)*)  580 (*P164*) , (*RR: 386)*)  578 (*P162*)
         , (*RR: 387)*)  579 (*P163*) , (*RR: 388)*)  582 (*P166*)
         , (*RR: 389)*)  553 (*P137*) , (*RR: 390)*)  526 (*P110*)
         , (*RR: 391)*)  498 (*P82*) , (*RR: 392)*)  683 (*P267*)
         , (*RR: 393)*)  507 (*P91*) , (*RR: 394)*)  502 (*P86*)
         , (*RR: 395)*)  508 (*P92*) , (*RR: 396)*)  684 (*P268*)
         , (*RR: 397)*)  517 (*P101*) , (*RR: 398)*)  512 (*P96*)
         , (*RR: 399)*)  688 (*P272*) , (*RR: 400)*)  519 (*P103*)
         , (*RR: 401)*)  686 (*P270*) , (*RR: 402)*)  613 (*P197*)
         , (*RR: 403)*)  698 (*P282*) , (*RR: 404)*)  696 (*P280*)
         , (*RR: 405)*)  697 (*P281*) , (*RR: 406)*)  694 (*P278*)
         , (*RR: 407)*)  695 (*P279*) , (*RR: 408)*)  687 (*P271*)
         , (*RR: 409)*)  691 (*P275*) , (*RR: 410)*)  685 (*P269*)
         , (*RR: 411)*)  692 (*P276*) , (*RR: 412)*)  467 (*P51*)
         , (*RR: 413)*)  466 (*P50*) , (*RR: 414)*)  465 (*P49*)
         , (*RR: 415)*)  439 (*P23*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 79 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 416 => (* P1 _0000_ (272): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 417,302 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 418,303 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 419,304 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 420,305 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 421,306 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 422,307 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 423 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 293 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 424 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 296 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 425 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 299 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 426 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 302 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 427 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 305 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 428 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 308 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 429 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE NonreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 311 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 430,220 => (* P15 InstInterface (114): InterfaceLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 332 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 431,313 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 339 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 432,225 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 349 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . PopOpenScopeRef ( ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                           
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( ) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                           
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . CheckStdUnitPragma ( FM3Units . UnitStackTopRef ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END ; 
                     
              | 433 => (* P18 IntfPragmas (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 434,308 => (* P19 IntfPragmas (124): IntfPragmas IntfPragma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 435,214 => (* P20 IntfPragma (131): StkOpenPragma StkPragmaId StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 377 of "FM3Parser.lalr" *)
                 FM3Pass1 . RecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 436,213 => (* P21 IntfPragma (131): StkOpenPragma StkIdent StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 380 of "FM3Parser.lalr" *)
                 FM3Pass1 . UnrecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 437,309 => (* P22 ModuleLt (132): OptUnsafe StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 383 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 438,295 => (* P23 InstModule (115): ModuleLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 405 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 439,415 => (* P24 ModuleMiddle (134): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 412 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 440,296 => (* P25 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 424 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 441,300 => (* P26 GenInterfaceLt (136): StkRwGENERIC StkRwINTERFACE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 450 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 442,298 => (* P27 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 471 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 443,301 => (* P28 GenModuleLt (138): StkRwGENERIC StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 479 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 444,299 => (* P29 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 499 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeRt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 445,212 => (* P30 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 509 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;  
                     
              | 446 => (* P31 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 513 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe? *) := FALSE (* Safe. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 447 => (* P32 OptSemicolon (140): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;

              | 448 => (* P33 OptSemicolon (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;

              | 449,297 => (* P34 GenFormalList (137): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 524 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 450,218 => (* P35 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 530 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 451 => (* P36 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 452,314 => (* P37 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 453,216 => (* P38 Import (142): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 454,312 => (* P39 ImportItemPlusList (143): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 455,311 => (* P40 ImportItemPlusList (143): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 456 => (* P41 ImportItem (144): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 549 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 457,310 => (* P42 ImportItem (144): NonreservedIdent StkRwAS NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 552 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 458,215 => (* P43 FromImportLt (145): StkRwFROM NonreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 556 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 459,217 => (* P44 Import (142): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 460,315 => (* P45 FromImportIdPlusList (146): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 567 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 461,316 => (* P46 FromImportIdPlusList (146): FromImportIdPlusList StkComma NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 572 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 462 => (* P47 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 577 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 463 => (* P48 Exports (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 584 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 464 => (* P49 Exports (133): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;

              | 465,414 => (* P50 ExportIdPlusList (147): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 466,413 => (* P51 ExportIdPlusList (147): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;

              | 467,412 => (* P52 ExportIdent (148): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 604 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 468,211,232 => (* P53 NonreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 619 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 469,219 => (* P54 IdentRef (149): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 631 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 470,235 => (* P55 QualIdentRef (150): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 638 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . QualIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 471 => (* P56 IdPlusList (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 646 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 472 => (* P57 IdPlusList (151): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 650 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 473,267 => (* P58 DeclIdListElems (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 662 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 474,268 => (* P59 DeclIdListElems (152): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 674 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 475,317 => (* P60 IdStarList (141): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 690 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 476 => (* P61 IdStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 692 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 477,322 => (* P62 MaybeQualIdent (153): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 697 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                
                     
              | 478,324 => (* P63 MaybeQualIdent (153): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 703 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 479,321 => (* P64 QualIdent (154): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 709 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 480 => (* P65 MaybeQualIdentStarList (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 481 => (* P66 MaybeQualIdentStarList (155): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 719 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 482 => (* P67 MaybeQualIdentPlusList (156): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 721 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 483 => (* P68 MaybeQualIdentPlusList (156): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 723 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 484,323 => (* P69 TypeId (157): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;

              | 485,229 => (* P70 TypeId (157): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 733 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 486,230 => (* P71 TypeId (157): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 738 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 487 => (* P72 OptConstType (159): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 748 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 488 => (* P73 OptConstType (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 489,221 => (* P74 ConstDeclGroupLt (160): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 759 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 490,320 => (* P75 ConstDeclGroup (162): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 762 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 491 => (* P76 ConstDeclList (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 767 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 492 => (* P77 ConstDeclList (161): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 773 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 493,280 => (* P78 ConstDeclPlus (163): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 778 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 494,226 => (* P79 ConstDeclPlus (163): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 163;
                (* line 783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 495,319 => (* P80 ConstDeclId (165): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 801 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, will be 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 496 => (* P81 ConstDeclType (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 806 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP
                         ( Itk . ItkConstDeclType , FM3Scanner . Attribute . Position ) ;
                     
              | 497 => (* P82 ConstDeclValue (167): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 167;
                (* line 812 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP
                         ( Itk . ItkConstDeclValue , FM3Scanner . Attribute . Position ) ;
                     
              | 498,391 => (* P83 ConstDecl (164): ConstDeclId ConstDeclType OptDeclType ConstDeclValue StkEqual Expr .*)
                DEC (yyStackPtr, 6); yyNonterminal := 164;
                (* line 818 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkConstDeclLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 499,282 => (* P84 TypeRelation (170): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 832 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 500,283 => (* P85 TypeRelation (170): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 834 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 501,223 => (* P86 TypeDeclGroupLt (171): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 845 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 502,394 => (* P87 TypeDeclGroup (173): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 173;
                (* line 848 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 503 => (* P88 TypeDeclList (172): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 172;
                (* line 853 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 504 => (* P89 TypeDeclList (172): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 859 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 505,284 => (* P90 TypeDeclPlus (174): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 864 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 506,281 => (* P91 TypeDeclPlus (174): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 174;
                (* line 869 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 507,393 => (* P92 TypeDeclId (176): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 885 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkType , yyAttributeStack^[yyStackPtr+1] ) ) ; 
                     
              | 508,395 => (* P93 TypeDecl (175): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 891 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 509,285 => (* P94 RevelationRelation (177): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 913 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 510,286 => (* P95 RevelationRelation (177): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 915 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 511,222 => (* P96 RevelationGroupLt (178): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 926 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 512,398 => (* P97 RevelationGroup (180): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 929 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 513 => (* P98 RevelationList (179): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 179;
                (* line 934 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 514 => (* P99 RevelationList (179): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 179;
                (* line 940 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 515,288 => (* P100 RevelationPlus (181): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 181;
                (* line 945 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 516,287 => (* P101 RevelationPlus (181): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 950 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 517,397 => (* P102 Revelation (182): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 182;
                (* line 966 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 518,224 => (* P103 VarDeclGroupLt (183): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 183;
                (* line 995 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 519,400 => (* P104 VarDeclGroup (185): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 185;
                (* line 1008 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 520 => (* P105 VarDeclList (184): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 184;
                (* line 1014 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 521 => (* P106 VarDeclList (184): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 184;
                (* line 1020 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 522,290 => (* P107 VarDeclPlus (186): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 186;
                (* line 1033 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 523,289 => (* P108 VarDeclPlus (186): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 186;
                (* line 1038 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 524,369 => (* P109 VarDecl (187): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 187;
                (* line 1055 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                            ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_ZCP 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             ) ; 
                
                           FM3Pass1 . PutBwd_ECP 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             ) ; 
                
                           FM3Pass1 . PutBwd_LCP_rp (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ; 
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 525 => (* P110 VarDeclIds (188): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 188;
                (* line 1090 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 526,390 => (* P111 OptDeclType (168): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 1101 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 527 => (* P112 OptDeclType (168): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 168;
                (* line 1105 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 528,368 => (* P113 OptDeclValue (189): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 189;
                (* line 1111 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 529 => (* P114 OptDeclValue (189): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 189;
                (* line 1115 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 530 => (* P115 Type (158): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;
                (* line 1124 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; (* Needed? *) 
              | 531,326 => (* P116 Type (158): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 532,327 => (* P117 Type (158): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 533,328 => (* P118 Type (158): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 534,329 => (* P119 Type (158): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 535,330 => (* P120 Type (158): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 536,331 => (* P121 Type (158): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 537,332 => (* P122 Type (158): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 538,333 => (* P123 Type (158): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 539,334 => (* P124 Type (158): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 540,335 => (* P125 Type (158): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 541,336 => (* P126 Type (158): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 542,337 => (* P127 Type (158): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 543,338 => (* P128 Type (158): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 544,339 => (* P129 Type (158): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 545,340 => (* P130 Type (158): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 546,341 => (* P131 Type (158): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 547 => (* P132 RefTypeOptUntraced (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;
                (* line 1148 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := FALSE (* Not UNTRACED. *) 
              | 548 => (* P133 RefTypeOptUntraced (206): StkRwUNTRACED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1151 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := TRUE (* UNTRACED. *) 
              | 549,360 => (* P134 Type (158): RefTypeOptUntraced Brand StkRwREF Type .*)
                DEC (yyStackPtr, 4); yyNonterminal := 158;
                (* line 1154 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCBP_eCP_rbP
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaBool (* IsUntraced. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 550,361 => (* P135 Type (158): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 551,325 => (* P136 OpenArrayType (208): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 208;
                (* line 1172 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 552,362 => (* P137 Type (158): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 553,389 => (* P138 FixedArrayType (209): StkRwARRAY SubrType StkRwOF Type .*)
                DEC (yyStackPtr, 4); yyNonterminal := 209;
                (* line 1182 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( Itk . ItkFixedArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 554,279 => (* P139 SubrType (210): StkOpenBracket Expr StkEllipsis Expr StkCloseBracket .*)
                DEC (yyStackPtr, 5); yyNonterminal := 210;
                (* line 1195 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( Itk . ItkSubrTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+3] .  PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                         
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 555,231 => (* P140 EnumTypeLt (211): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1210 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 556,266 => (* P141 EnumType (213): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1225 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 557 => (* P142 EnumLitList (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 558 => (* P143 EnumLitList (212): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1245 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 559,365 => (* P144 EnumLitPlus (214): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 560,364 => (* P145 EnumLitPlus (214): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 214;
                (* line 1251 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 561,363 => (* P146 EnumLit (215): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1254 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 562,366 => (* P147 Type (158): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 563 => (* P148 FieldDeclList (216): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 216;
                (* line 1276 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 564,371 => (* P149 FieldDeclList (216): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 216;
                (* line 1284 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 565,367 => (* P150 FieldDeclPlus (217): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1293 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 566,370 => (* P151 FieldDeclPlus (217): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 217;
                (* line 1296 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 567,228 => (* P152 RecTypeLt (218): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1308 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 568,269 => (* P153 Type (158): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1335 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 569 => (* P154 MethodDeclList (219): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 219;
                (* line 1357 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 570 => (* P155 MethodDeclList (219): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1365 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 571,382 => (* P156 MethodDeclList (219): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1370 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 572,383 => (* P157 MethodDeclPlus (220): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1379 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 573,373 => (* P158 MethodDeclPlus (220): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1382 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 574,372 => (* P159 MethodDeclLt (222): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 222;
                (* line 1394 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 575,374 => (* P160 MethodDecl (221): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 221;
                (* line 1400 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 576 => (* P161 OverrideList (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1422 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 577 => (* P162 OverrideList (224): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1430 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 578,386 => (* P163 OverrideList (224): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 224;
                (* line 1435 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 579,387 => (* P164 OverridePlus (225): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1444 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 580,385 => (* P165 OverridePlus (225): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 225;
                (* line 1447 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 581,384 => (* P166 OverrideLt (227): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1459 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . CheckIdentNotReserved
                                    ( yyAttributeStack^[yyStackPtr+1]
                                    , yyAttributeStack^[yyStackPtr+1] . Scan .Position
                                    , "denote an overridable method."
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN FM3Pass1 . PutBwd_TIP
                              ( Itk . ItkIdRefAtom , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position )
                       END (*IF*) ; 
                     
              | 582,388 => (* P167 Override (226): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 226;
                (* line 1473 of "FM3Parser.lalr" *)
                 IF yyAttributeStack^[yyStackPtr+1] . PaInt < 1
                       THEN (* Skip the whole override. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                       ELSE
                         yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( Itk . ItkOverrideLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*IF*) 
                     
              | 583 => (* P168 Brand (207): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 207;
                (* line 1495 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkBrandAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 584 => (* P169 Brand (207): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1500 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 585,359 => (* P170 Brand (207): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 207;
                (* line 1505 of "FM3Parser.lalr" *)
                 yySynAttribute . PaPass1Coord := yyAttributeStack^[yyStackPtr+2] . PaPass1Coord ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position
                       (* Just let the presence of Expr speak for itself. *) 
                     
              | 586 => (* P171 Supertype (228): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 228;
                (* line 1513 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkSupertypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 587 => (* P172 Supertype (228): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1519 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 588 => (* P173 Supertype (228): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1528 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 589,270 => (* P174 ObjTypeLt (230): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 230;
                (* line 1539 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 590,278 => (* P175 ObjType (229): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 229;
                (* line 1566 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . PopDeclScopeRef ( )  ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 591 => (* P176 Type (158): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 592,227 => (* P177 ProcTypeLt (231): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1589 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                       END (*Block*)
                     
              | 593,376 => (* P178 Type (158): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1595 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 594,381 => (* P179 Signature (223): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 223;
                (* line 1603 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (*Block*) 
                     
              | 595,271 => (* P180 FormalsLt (235): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1620 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END ;
                     
              | 596,275 => (* P181 Formals (232): FormalsLt FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 232;
                (* line 1635 of "FM3Parser.lalr" *)
                 FM3Pass1 . DeclScopeRtL2R ( FM3Scopes . DeclScopeStackTopRef ) ;
                       FM3Pass1 . PutBwd_LI
                         ( Itk . ItkDeclScopeRt
                         , FM3Scopes . DeclScopeStackTopRef ^ . ScpSelfScopeNo
                         ) ;
                       EVAL FM3Scopes . PopDeclScopeRef ( ) ; 
                       MakeListPos
                         ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ Maybe different tokens for different formal modes? *)
                     
              | 597 => (* P182 FormalsList (236): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 236;
                (* line 1647 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 598,379 => (* P183 FormalsList (236): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 236;

              | 599,377 => (* P184 FormalPlus (237): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 237;
                (* line 1652 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 600,380 => (* P185 FormalPlus (237): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1662 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 601 => (* P186 FormalLt (239): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 239;
                (* line 1666 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 602,273 => (* P187 FormalLt (239): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1679 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 603,274 => (* P188 FormalLt (239): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1693 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 604,272 => (* P189 FormalLt (239): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1706 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 605,378 => (* P190 Formal (238): FormalLt FormalIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 4); yyNonterminal := 238;
                (* line 1722 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { "VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { "VAR formal cannot have a default (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 606 => (* P191 FormalIds (240): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 1780 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 607,375 => (* P192 ResultType (233): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 233;
                (* line 1791 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 608 => (* P193 ResultType (233): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 233;
                (* line 1798 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 609 => (* P194 Raises (234): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 234;
                (* line 1808 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 610,276 => (* P195 Raises (234): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 234;
                (* line 1814 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 611,277 => (* P196 Raises (234): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 234;
                (* line 1821 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 612,318 => (* P197 ProcDeclLt (242): StkRwPROCEDURE NonreservedIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 242;
                (* line 1828 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] ) ) ;
                       END (*Block*) 
                     
              | 613,402 => (* P198 ProcDecl (244): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1838 of "FM3Parser.lalr" *)
                 VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { "A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as bodyless, regardless of source. *) 
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 614,291 => (* P199 OptProcBody (243): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 1861 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a source code body? *)
                         := FALSE (* No. Absent. *) ; 
                       IF FM3Units . CurrentUnitIsModule ( )
                       THEN
                         FM3Messages . ErrorArr
                           ( ARRAY OF REFANY
                               { "A procedure in a module must have a body (2.5)." } 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*IF*) ;  
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 615,292 => (* P200 ProcBodyLt (245): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 1876 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN
                           (* Make formals (decl)scope also open. *) 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                           FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                             
                           (* Body scope, for decls and refs:*)
                           LScopeRef 
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkProcBody  
                                  , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                           FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         ELSE 
                           FM3Messages . ErrorArr
                             ( ARRAY OF REFANY 
                               { "A procedure in an interface must not have a body (2.5.2)."
                               }
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             ) ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                         END (*IF*) 
                       END (*Block*) ; 
                     
              | 616,293 => (* P201 OptProcBody (243): ProcBodyLt Block NonreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 243;
                (* line 1916 of "FM3Parser.lalr" *)
                 VAR LScopeRefDecl , LScopeRefOpen : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body? *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN
                           LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                           <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkProcBody *> 
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo  ) ;
                             
                           LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                           <* ASSERT LScopeRefDecl = LScopeRefOpen *>
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo  ) ;
                             
                           LScopeRefOpen := FM3Scopes . PopOpenScopeRef ( ) ; 
                           <* ASSERT LScopeRefOpen ^ . ScpKind = Skt . SkFormals *> 
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkOpenScopeRt , LScopeRefOpen ^ . ScpSelfScopeNo  ) ;
                             
                           LScopeRefDecl := FM3Scopes . PopDeclScopeRef ( ) ;
                           <* ASSERT LScopeRefDecl = LScopeRefOpen *> 
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRefDecl ^ . ScpSelfScopeNo  ) ;
                           FM3Pass1 . PutBwd_LP
                             ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         ELSE
                           FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , FM3Globals . NextSkipNo  
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ; 
                         END (*IF*) 
                       END;
                     
              | 617 => (* P202 Expr (169): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;

              | 618 => (* P203 E0 (246): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 619 => (* P204 E0 (246): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 1965 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 620,350 => (* P205 E1 (247): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;

              | 621,344 => (* P206 E1 (247): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1976 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwAND 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 622 => (* P207 E2 (248): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 623 => (* P208 E2 (248): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 248;
                (* line 1987 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwNOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 624 => (* P209 E3 (249): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;

              | 625 => (* P210 E3 (249): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 1997 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 626 => (* P211 E4 (250): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 627 => (* P212 E4 (250): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2008 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 628,351 => (* P213 E5 (252): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;

              | 629,345 => (* P214 E5 (252): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2019 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 630,346 => (* P215 E6 (254): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;

              | 631,347 => (* P216 E6 (254): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2030 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 632,261 => (* P217 E7 (256): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2049 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 633,348 => (* P218 E7 (256): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2054 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 634,355 => (* P219 E7 (256): E8WOId ActualsLt Actuals .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2063 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCP_rip
                           ( Itk . ItkCallLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+3] . PaInt 
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                           ) ;
                      
              | 635 => (* P220 E7 (256): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2075 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 636 => (* P221 E7 (256): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;

              | 637,264 => (* P222 E7 (256): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2086 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be dereferenced" ) 
                       THEN (* OK *) 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) 
                       END (*IF*) ; 
                     
              | 638,357 => (* P223 E7 (256): IdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 256;
                (* line 2100 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckIdentNotReserved
                            ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] . Scan . Position , "be subscripted" ) 
                       THEN (* OK *)
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkSubscriptLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+2] . PaInt 
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           ) ;
                       ELSE
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                         FM3Pass1 . PutNotUsable ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) 
                       END (*IF*) ; 
                     
              | 639 => (* P224 ActualsLt (260): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 260;
                (* line 2118 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TP 
                         ( Itk . ItkCallActuals  
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 640,358 => (* P225 E7 (256): IdentRef ActualsLt Actuals .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2125 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . CheckReservedActualsCt
                            ( IdAttr := yyAttributeStack^[yyStackPtr+1]
                            , ActualActualsCt := yyAttributeStack^[yyStackPtr+3] . PaInt
                            , Position := yyAttributeStack^[yyStackPtr+3] . Scan . Position
                            ) 
                       THEN (* Actuals non problematic.  Handle it here *)
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkCallLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+3] . PaInt 
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           ) ; 
                       END (*IF*) ; 
                     
              | 641 => (* P226 E7 (256): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2140 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefLone ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 642,342 => (* P227 E7 (256): QualIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;

              | 643,263 => (* P228 Subscripts (259): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 259;
                (* line 2148 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 644,343 => (* P229 SsPlusList (262): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2157 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 645,356 => (* P230 SsPlusList (262): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 262;
                (* line 2160 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 646,262 => (* P231 Actuals (261): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 261;
                (* line 2171 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                     
              | 647 => (* P232 ActualList (263): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 263;
                (* line 2181 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 648,354 => (* P233 ActualList (263): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2184 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 649,353 => (* P234 ActualList (263): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 263;
                (* line 2187 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 650,352 => (* P235 Actual (264): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 264;
                (* line 2197 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 651,349 => (* P236 Actual (264): NonreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 264;
                (* line 2202 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 652 => (* P237 E8WOId (258): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2217 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 653,236 => (* P238 E8WOId (258): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2222 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 654,237 => (* P239 E8WOId (258): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2229 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 655,238 => (* P240 E8WOId (258): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2236 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 656,239 => (* P241 E8WOId (258): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2246 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 657,240 => (* P242 E8WOId (258): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2256 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 658,241 => (* P243 E8WOId (258): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2263 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 659,242 => (* P244 E8WOId (258): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2270 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 660,245 => (* P245 E8WOId (258): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2278 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 661,246 => (* P246 E8WOId (258): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2285 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 662,243 => (* P247 E8WOId (258): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2292 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 663,244 => (* P248 E8WOId (258): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2294 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 664,265 => (* P249 E8WOId (258): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;

              | 665,248 => (* P250 ExprRelOp (251): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2298 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 666,249 => (* P251 ExprRelOp (251): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2299 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 667,250 => (* P252 ExprRelOp (251): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2300 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 668,251 => (* P253 ExprRelOp (251): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2301 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 669,252 => (* P254 ExprRelOp (251): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2302 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 670,253 => (* P255 ExprRelOp (251): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2303 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 671,247 => (* P256 ExprRelOp (251): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2304 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 672,254 => (* P257 ExprAddOp (253): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2307 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 673,255 => (* P258 ExprAddOp (253): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2308 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 674,256 => (* P259 ExprAddOp (253): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2309 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 675,259 => (* P260 ExprMulOp (255): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2311 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 676,260 => (* P261 ExprMulOp (255): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2312 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 677,257 => (* P262 ExprMulOp (255): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2313 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 678,258 => (* P263 ExprMulOp (255): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2314 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 679,233 => (* P264 ExprUnaryAddOp (257): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2317 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 680,234 => (* P265 ExprUnaryAddOp (257): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2318 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 681 => (* P266 BlockLt (265): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 265;
                (* line 2323 of "FM3Parser.lalr" *)
                
                     
              | 682,294 => (* P267 Block (139): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 139;
                (* line 2327 of "FM3Parser.lalr" *)
                
                     
              | 683,392 => (* P268 BlockDecl (266): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2333 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 684,396 => (* P269 BlockDecl (266): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2337 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 685,410 => (* P270 BlockDecl (266): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2341 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 686,401 => (* P271 BlockDecl (266): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2345 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 687,408 => (* P272 BlockDecl (266): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2349 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 688,399 => (* P273 BlockDecl (266): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2353 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 689 => (* P274 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2361 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 690 => (* P275 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2369 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 691,409 => (* P276 BlockDeclPlus (268): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 268;
                (* line 2378 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 692,411 => (* P277 BlockDeclPlus (268): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 268;
                (* line 2383 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 693 => (* P278 StmtList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 2402 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 694,406 => (* P279 StmtList (135): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 135;
                (* line 2410 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 695,407 => (* P280 StmtPlus (269): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 269;
                (* line 2418 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 696,404 => (* P281 StmtPlus (269): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 269;
                (* line 2421 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 697,405 => (* P282 Stmt (270): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 270;

              | 698,403 => (* P283 AssignStmt (271): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 271;
                (* line 2435 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 96 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 99 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

