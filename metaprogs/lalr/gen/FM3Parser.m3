
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 38 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3ParsePass;
    IMPORT FM3Extern; 
    FROM FM3ParsePass IMPORT UnnestCoord;
    FROM FM3ParsePass IMPORT tParsAttribute;
    FROM FM3ParsePass IMPORT ParsAttrNull;
    FROM FM3ParsePass IMPORT PushUnnestStk , PushUnnest, PushUnnestLong;
    FROM FM3ParsePass IMPORT
      Push_L , Push_LP , Push_LCr , Push_LCP_rp , Push_LCP_eCP_rP ,
      Push_LCPeCprp , Push_LIP , Push_LIP_rip , Push_EIP , Push_ECIP , 
      Push_ECIP_riP , Push_LCBr , Push_LCIri , Push_LI3 , Push_LI6 , Push_LCeCr ,
      Push_LCIeCri , Push_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3ParsePass IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 223;
   yyTableMax               = 402;
   yyNTableMax              = 526;
   yyFirstReadState         = 1;
   yyLastReadState          = 141;
   yyFirstReadTermState             = 142;
   yyLastReadTermState              = 210;
   yyLastReadNontermState           = 276;
   yyFirstReduceState               = 277;
   yyLastReduceState                = 462;
   yyStartState             = 1;
   yyStopState              = 277;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   1])
         , (*   8*) ADR (yyTComb [   2]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   3]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   5])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   6])
         , (*  20*) ADR (yyTComb [   0]) , (*  21*) ADR (yyTComb [   3])
         , (*  22*) ADR (yyTComb [   0]) , (*  23*) ADR (yyTComb [  21])
         , (*  24*) ADR (yyTComb [  22]) , (*  25*) ADR (yyTComb [   0])
         , (*  26*) ADR (yyTComb [  12]) , (*  27*) ADR (yyTComb [   7])
         , (*  28*) ADR (yyTComb [   8]) , (*  29*) ADR (yyTComb [   9])
         , (*  30*) ADR (yyTComb [   9]) , (*  31*) ADR (yyTComb [  10])
         , (*  32*) ADR (yyTComb [  10]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  11]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [  45]) , (*  37*) ADR (yyTComb [  20])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [  14])
         , (*  40*) ADR (yyTComb [   8]) , (*  41*) ADR (yyTComb [  44])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [   1])
         , (*  44*) ADR (yyTComb [   8]) , (*  45*) ADR (yyTComb [  65])
         , (*  46*) ADR (yyTComb [  17]) , (*  47*) ADR (yyTComb [  12])
         , (*  48*) ADR (yyTComb [  18]) , (*  49*) ADR (yyTComb [  51])
         , (*  50*) ADR (yyTComb [  24]) , (*  51*) ADR (yyTComb [  60])
         , (*  52*) ADR (yyTComb [   0]) , (*  53*) ADR (yyTComb [   0])
         , (*  54*) ADR (yyTComb [   4]) , (*  55*) ADR (yyTComb [   2])
         , (*  56*) ADR (yyTComb [  75]) , (*  57*) ADR (yyTComb [  29])
         , (*  58*) ADR (yyTComb [   3]) , (*  59*) ADR (yyTComb [ 110])
         , (*  60*) ADR (yyTComb [ 114]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [  73]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [  27]) , (*  65*) ADR (yyTComb [   4])
         , (*  66*) ADR (yyTComb [  24]) , (*  67*) ADR (yyTComb [   5])
         , (*  68*) ADR (yyTComb [  84]) , (*  69*) ADR (yyTComb [   0])
         , (*  70*) ADR (yyTComb [  65]) , (*  71*) ADR (yyTComb [  66])
         , (*  72*) ADR (yyTComb [ 119]) , (*  73*) ADR (yyTComb [ 131])
         , (*  74*) ADR (yyTComb [  81]) , (*  75*) ADR (yyTComb [  85])
         , (*  76*) ADR (yyTComb [  49]) , (*  77*) ADR (yyTComb [   6])
         , (*  78*) ADR (yyTComb [  58]) , (*  79*) ADR (yyTComb [  88])
         , (*  80*) ADR (yyTComb [ 154]) , (*  81*) ADR (yyTComb [ 156])
         , (*  82*) ADR (yyTComb [  93]) , (*  83*) ADR (yyTComb [  94])
         , (*  84*) ADR (yyTComb [ 101]) , (*  85*) ADR (yyTComb [   0])
         , (*  86*) ADR (yyTComb [ 106]) , (*  87*) ADR (yyTComb [ 105])
         , (*  88*) ADR (yyTComb [ 181]) , (*  89*) ADR (yyTComb [ 182])
         , (*  90*) ADR (yyTComb [ 108]) , (*  91*) ADR (yyTComb [ 110])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [ 111])
         , (*  94*) ADR (yyTComb [ 207]) , (*  95*) ADR (yyTComb [   1])
         , (*  96*) ADR (yyTComb [ 135]) , (*  97*) ADR (yyTComb [ 175])
         , (*  98*) ADR (yyTComb [ 228]) , (*  99*) ADR (yyTComb [ 113])
         , (* 100*) ADR (yyTComb [ 126]) , (* 101*) ADR (yyTComb [ 243])
         , (* 102*) ADR (yyTComb [ 247]) , (* 103*) ADR (yyTComb [ 128])
         , (* 104*) ADR (yyTComb [ 136]) , (* 105*) ADR (yyTComb [   7])
         , (* 106*) ADR (yyTComb [ 180]) , (* 107*) ADR (yyTComb [ 114])
         , (* 108*) ADR (yyTComb [ 141]) , (* 109*) ADR (yyTComb [   8])
         , (* 110*) ADR (yyTComb [ 117]) , (* 111*) ADR (yyTComb [ 148])
         , (* 112*) ADR (yyTComb [ 154]) , (* 113*) ADR (yyTComb [ 245])
         , (* 114*) ADR (yyTComb [ 254]) , (* 115*) ADR (yyTComb [   0])
         , (* 116*) ADR (yyTComb [  10]) , (* 117*) ADR (yyTComb [  25])
         , (* 118*) ADR (yyTComb [ 133]) , (* 119*) ADR (yyTComb [ 162])
         , (* 120*) ADR (yyTComb [ 157]) , (* 121*) ADR (yyTComb [ 222])
         , (* 122*) ADR (yyTComb [ 215]) , (* 123*) ADR (yyTComb [ 216])
         , (* 124*) ADR (yyTComb [  26]) , (* 125*) ADR (yyTComb [ 161])
         , (* 126*) ADR (yyTComb [   0]) , (* 127*) ADR (yyTComb [ 170])
         , (* 128*) ADR (yyTComb [ 202]) , (* 129*) ADR (yyTComb [ 177])
         , (* 130*) ADR (yyTComb [ 293]) , (* 131*) ADR (yyTComb [ 295])
         , (* 132*) ADR (yyTComb [  28]) , (* 133*) ADR (yyTComb [ 151])
         , (* 134*) ADR (yyTComb [ 186]) , (* 135*) ADR (yyTComb [ 186])
         , (* 136*) ADR (yyTComb [ 191]) , (* 137*) ADR (yyTComb [ 199])
         , (* 138*) ADR (yyTComb [  27]) , (* 139*) ADR (yyTComb [   0])
         , (* 140*) ADR (yyTComb [ 172]) , (* 141*) ADR (yyTComb [ 202])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 109]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 108]) , (*  19*) ADR (yyNComb [ 108])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 110]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 108])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 108])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 108])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 113]) , (*  45*) ADR (yyNComb [ 120])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 109])
         , (*  48*) ADR (yyNComb [ 110]) , (*  49*) ADR (yyNComb [ 108])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 119])
         , (*  52*) ADR (yyNComb [ 187]) , (*  53*) ADR (yyNComb [ 206])
         , (*  54*) ADR (yyNComb [ 108]) , (*  55*) ADR (yyNComb [ 108])
         , (*  56*) ADR (yyNComb [ 108]) , (*  57*) ADR (yyNComb [ 108])
         , (*  58*) ADR (yyNComb [ 166]) , (*  59*) ADR (yyNComb [ 108])
         , (*  60*) ADR (yyNComb [ 108]) , (*  61*) ADR (yyNComb [ 261])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 118])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 108])
         , (*  66*) ADR (yyNComb [ 126]) , (*  67*) ADR (yyNComb [ 172])
         , (*  68*) ADR (yyNComb [ 121]) , (*  69*) ADR (yyNComb [ 123])
         , (*  70*) ADR (yyNComb [ 108]) , (*  71*) ADR (yyNComb [ 108])
         , (*  72*) ADR (yyNComb [ 129]) , (*  73*) ADR (yyNComb [ 108])
         , (*  74*) ADR (yyNComb [ 123]) , (*  75*) ADR (yyNComb [ 108])
         , (*  76*) ADR (yyNComb [ 124]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 108]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 117]) , (*  81*) ADR (yyNComb [ 111])
         , (*  82*) ADR (yyNComb [ 108]) , (*  83*) ADR (yyNComb [ 117])
         , (*  84*) ADR (yyNComb [ 108]) , (*  85*) ADR (yyNComb [ 192])
         , (*  86*) ADR (yyNComb [ 108]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 170]) , (*  89*) ADR (yyNComb [ 114])
         , (*  90*) ADR (yyNComb [ 108]) , (*  91*) ADR (yyNComb [ 124])
         , (*  92*) ADR (yyNComb [ 280]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 264]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 118]) , (*  97*) ADR (yyNComb [ 335])
         , (*  98*) ADR (yyNComb [ 211]) , (*  99*) ADR (yyNComb [ 108])
         , (* 100*) ADR (yyNComb [ 108]) , (* 101*) ADR (yyNComb [ 319])
         , (* 102*) ADR (yyNComb [ 246]) , (* 103*) ADR (yyNComb [ 108])
         , (* 104*) ADR (yyNComb [ 108]) , (* 105*) ADR (yyNComb [ 337])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 108])
         , (* 108*) ADR (yyNComb [ 114]) , (* 109*) ADR (yyNComb [ 108])
         , (* 110*) ADR (yyNComb [ 108]) , (* 111*) ADR (yyNComb [ 108])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 162])
         , (* 114*) ADR (yyNComb [ 405]) , (* 115*) ADR (yyNComb [ 108])
         , (* 116*) ADR (yyNComb [ 373]) , (* 117*) ADR (yyNComb [ 108])
         , (* 118*) ADR (yyNComb [ 108]) , (* 119*) ADR (yyNComb [ 108])
         , (* 120*) ADR (yyNComb [ 108]) , (* 121*) ADR (yyNComb [ 198])
         , (* 122*) ADR (yyNComb [ 108]) , (* 123*) ADR (yyNComb [ 203])
         , (* 124*) ADR (yyNComb [ 199]) , (* 125*) ADR (yyNComb [ 108])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 202])
         , (* 128*) ADR (yyNComb [ 108]) , (* 129*) ADR (yyNComb [ 108])
         , (* 130*) ADR (yyNComb [ 218]) , (* 131*) ADR (yyNComb [ 411])
         , (* 132*) ADR (yyNComb [ 108]) , (* 133*) ADR (yyNComb [ 108])
         , (* 134*) ADR (yyNComb [ 108]) , (* 135*) ADR (yyNComb [ 108])
         , (* 136*) ADR (yyNComb [ 111]) , (* 137*) ADR (yyNComb [ 108])
         , (* 138*) ADR (yyNComb [ 221]) , (* 139*) ADR (yyNComb [ 213])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    4
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)  106 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)    0 , (*  14*)  108 , (*  15*)  127
         , (*  16*)  128 , (*  17*)   32 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)  130 , (*  23*)    0
         , (*  24*)    0 , (*  25*)   32 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)  131 , (*  34*)    0 , (*  35*)   44
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)    0 , (*  41*)    0 , (*  42*)   97 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)    0 , (*  47*)   45
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)    0
         , (*  52*)   97 , (*  53*)   97 , (*  54*)   95 , (*  55*)    0
         , (*  56*)    0 , (*  57*)    0 , (*  58*)   48 , (*  59*)    0
         , (*  60*)    0 , (*  61*)   97 , (*  62*)    0 , (*  63*)  121
         , (*  64*)   86 , (*  65*)    0 , (*  66*)  123 , (*  67*)   48
         , (*  68*)    0 , (*  69*)  121 , (*  70*)   86 , (*  71*)    0
         , (*  72*)    0 , (*  73*)    0 , (*  74*)    0 , (*  75*)    0
         , (*  76*)    0 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)   81 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)  121 , (*  86*)    0 , (*  87*)    0
         , (*  88*)   89 , (*  89*)    0 , (*  90*)    0 , (*  91*)    0
         , (*  92*)   97 , (*  93*)    0 , (*  94*)   98 , (*  95*)    0
         , (*  96*)    0 , (*  97*)   76 , (*  98*)   76 , (*  99*)    0
         , (* 100*)    0 , (* 101*)   48 , (* 102*)   48 , (* 103*)    0
         , (* 104*)    0 , (* 105*)  131 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)  138 , (* 114*)    0 , (* 115*)    0
         , (* 116*)  121 , (* 117*)    0 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)   76 , (* 122*)   86 , (* 123*)    0
         , (* 124*)  121 , (* 125*)    0 , (* 126*)  136 , (* 127*)    0
         , (* 128*)    0 , (* 129*)    0 , (* 130*)  138 , (* 131*)    0
         , (* 132*)    0 , (* 133*)    0 , (* 134*)    0 , (* 135*)    0
         , (* 136*)    0 , (* 137*)    0 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  277} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 115,  116}
         , (*  10*) yyTCombType {   0,    0} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType { 105,  454} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  18,   19}
         , (*  20*) yyTCombType {  43,  161} , (*  21*) yyTCombType {  55,  169}
         , (*  22*) yyTCombType {  58,  402} , (*  23*) yyTCombType {  65,  184}
         , (*  24*) yyTCombType {  67,  309} , (*  25*) yyTCombType {  77,   78}
         , (*  26*) yyTCombType { 105,  454} , (*  27*) yyTCombType { 109,  110}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 116,  457}
         , (*  30*) yyTCombType {  23,  329} , (*  31*) yyTCombType {  24,  327}
         , (*  32*) yyTCombType {   1,  307} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  23,  329}
         , (*  36*) yyTCombType {  24,  327} , (*  37*) yyTCombType {   1,  307}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  23,  329} , (*  41*) yyTCombType {  24,  327}
         , (*  42*) yyTCombType {  26,   27} , (*  43*) yyTCombType {  54,   55}
         , (*  44*) yyTCombType { 117,  118} , (*  45*) yyTCombType { 124,  309}
         , (*  46*) yyTCombType {  64,  380} , (*  47*) yyTCombType { 132,  133}
         , (*  48*) yyTCombType {  23,  329} , (*  49*) yyTCombType {  24,   25}
         , (*  50*) yyTCombType {   0,    0} , (*  51*) yyTCombType {  23,  329}
         , (*  52*) yyTCombType {  24,   28} , (*  53*) yyTCombType {  95,  170}
         , (*  54*) yyTCombType { 138,  326} , (*  55*) yyTCombType {   0,    0}
         , (*  56*) yyTCombType {   0,    0} , (*  57*) yyTCombType { 138,  326}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  143}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  41,  426}
         , (*  64*) yyTCombType {  23,  329} , (*  65*) yyTCombType {  24,  327}
         , (*  66*) yyTCombType {  11,  336} , (*  67*) yyTCombType {  20,  150}
         , (*  68*) yyTCombType {   9,   13} , (*  69*) yyTCombType {  21,   22}
         , (*  70*) yyTCombType {  16,  148} , (*  71*) yyTCombType {  11,   12}
         , (*  72*) yyTCombType {  23,  329} , (*  73*) yyTCombType {  24,  327}
         , (*  74*) yyTCombType {  40,  160} , (*  75*) yyTCombType {  29,  153}
         , (*  76*) yyTCombType {  31,  155} , (*  77*) yyTCombType {  44,   36}
         , (*  78*) yyTCombType {  23,  329} , (*  79*) yyTCombType {  24,  327}
         , (*  80*) yyTCombType {  29,   30} , (*  81*) yyTCombType {  31,   32}
         , (*  82*) yyTCombType {  47,  309} , (*  83*) yyTCombType {  46,   47}
         , (*  84*) yyTCombType {  23,  329} , (*  85*) yyTCombType {  24,  327}
         , (*  86*) yyTCombType {  37,  158} , (*  87*) yyTCombType {  46,  310}
         , (*  88*) yyTCombType {  37,  159} , (*  89*) yyTCombType {  41,  426}
         , (*  90*) yyTCombType {  66,   67} , (*  91*) yyTCombType {  36,  411}
         , (*  92*) yyTCombType {  62,  381} , (*  93*) yyTCombType {  64,  380}
         , (*  94*) yyTCombType {  56,  320} , (*  95*) yyTCombType {   4,  142}
         , (*  96*) yyTCombType {   7,  144} , (*  97*) yyTCombType {   8,  145}
         , (*  98*) yyTCombType {  10,  146} , (*  99*) yyTCombType {  12,  147}
         , (* 100*) yyTCombType {  13,   14} , (* 101*) yyTCombType {  19,   20}
         , (* 102*) yyTCombType {  27,  151} , (* 103*) yyTCombType {  28,  152}
         , (* 104*) yyTCombType {  30,  154} , (* 105*) yyTCombType {  32,  149}
         , (* 106*) yyTCombType {  34,   35} , (* 107*) yyTCombType {  36,  411}
         , (* 108*) yyTCombType {  36,  411} , (* 109*) yyTCombType {  39,   40}
         , (* 110*) yyTCombType {  41,  426} , (* 111*) yyTCombType {  45,  162}
         , (* 112*) yyTCombType {  41,  426} , (* 113*) yyTCombType {  48,  165}
         , (* 114*) yyTCombType {  41,  426} , (* 115*) yyTCombType {  36,  157}
         , (* 116*) yyTCombType {  41,   42} , (* 117*) yyTCombType {  49,  420}
         , (* 118*) yyTCombType {  41,  426} , (* 119*) yyTCombType {  50,  166}
         , (* 120*) yyTCombType {  56,  320} , (* 121*) yyTCombType {  49,  420}
         , (* 122*) yyTCombType {  49,   50} , (* 123*) yyTCombType {  49,  420}
         , (* 124*) yyTCombType {  57,  171} , (* 125*) yyTCombType {  49,  420}
         , (* 126*) yyTCombType {  51,  422} , (* 127*) yyTCombType {  45,  163}
         , (* 128*) yyTCombType {  45,  164} , (* 129*) yyTCombType {  59,  377}
         , (* 130*) yyTCombType {  51,  422} , (* 131*) yyTCombType {  70,  423}
         , (* 132*) yyTCombType {  51,   52} , (* 133*) yyTCombType {  60,  379}
         , (* 134*) yyTCombType {  51,  422} , (* 135*) yyTCombType {  70,  423}
         , (* 136*) yyTCombType {  71,  185} , (* 137*) yyTCombType {  73,  186}
         , (* 138*) yyTCombType {  72,  429} , (* 139*) yyTCombType {  62,  381}
         , (* 140*) yyTCombType {  36,  411} , (* 141*) yyTCombType {  56,  320}
         , (* 142*) yyTCombType {  56,   57} , (* 143*) yyTCombType {  56,  320}
         , (* 144*) yyTCombType {  76,   56} , (* 145*) yyTCombType {  56,  320}
         , (* 146*) yyTCombType {  56,  320} , (* 147*) yyTCombType {  62,   63}
         , (* 148*) yyTCombType {  56,  320} , (* 149*) yyTCombType {  56,  320}
         , (* 150*) yyTCombType {  68,  424} , (* 151*) yyTCombType {  56,  320}
         , (* 152*) yyTCombType {  74,  319} , (* 153*) yyTCombType {  78,   79}
         , (* 154*) yyTCombType {  68,  424} , (* 155*) yyTCombType {  79,  191}
         , (* 156*) yyTCombType {  75,   76} , (* 157*) yyTCombType {  74,  319}
         , (* 158*) yyTCombType {  68,   69} , (* 159*) yyTCombType {  82,  193}
         , (* 160*) yyTCombType {  45,  415} , (* 161*) yyTCombType {  75,  187}
         , (* 162*) yyTCombType {  83,  379} , (* 163*) yyTCombType {  80,  345}
         , (* 164*) yyTCombType {  72,   73} , (* 165*) yyTCombType {  81,  346}
         , (* 166*) yyTCombType {  83,   61} , (* 167*) yyTCombType {  56,  320}
         , (* 168*) yyTCombType {  80,  345} , (* 169*) yyTCombType {  84,   85}
         , (* 170*) yyTCombType {  81,  346} , (* 171*) yyTCombType {  87,  194}
         , (* 172*) yyTCombType {  86,  350} , (* 173*) yyTCombType {  80,  345}
         , (* 174*) yyTCombType {  90,  196} , (* 175*) yyTCombType {  81,  346}
         , (* 176*) yyTCombType {  59,  377} , (* 177*) yyTCombType {  93,  199}
         , (* 178*) yyTCombType {  91,  197} , (* 179*) yyTCombType {  99,  202}
         , (* 180*) yyTCombType {  60,  379} , (* 181*) yyTCombType {  59,   50}
         , (* 182*) yyTCombType {  59,  377} , (* 183*) yyTCombType {  91,  198}
         , (* 184*) yyTCombType {  59,  377} , (* 185*) yyTCombType {  72,  429}
         , (* 186*) yyTCombType {  60,   61} , (* 187*) yyTCombType {  72,  429}
         , (* 188*) yyTCombType {  60,  379} , (* 189*) yyTCombType {  72,  429}
         , (* 190*) yyTCombType {  88,  355} , (* 191*) yyTCombType {  89,  356}
         , (* 192*) yyTCombType { 100,  203} , (* 193*) yyTCombType {  72,  429}
         , (* 194*) yyTCombType { 103,  204} , (* 195*) yyTCombType {  88,  355}
         , (* 196*) yyTCombType {  89,  356} , (* 197*) yyTCombType {  80,  345}
         , (* 198*) yyTCombType {  86,  183} , (* 199*) yyTCombType {  81,  346}
         , (* 200*) yyTCombType {  88,  355} , (* 201*) yyTCombType {  89,  356}
         , (* 202*) yyTCombType { 104,  205} , (* 203*) yyTCombType {  96,  200}
         , (* 204*) yyTCombType { 106,   10} , (* 205*) yyTCombType {  80,  345}
         , (* 206*) yyTCombType {  73,   74} , (* 207*) yyTCombType {  81,  346}
         , (* 208*) yyTCombType {  96,  201} , (* 209*) yyTCombType { 107,  108}
         , (* 210*) yyTCombType { 108,   15} , (* 211*) yyTCombType {  80,  345}
         , (* 212*) yyTCombType { 110,  111} , (* 213*) yyTCombType {  81,  346}
         , (* 214*) yyTCombType {  97,   43} , (* 215*) yyTCombType { 111,  206}
         , (* 216*) yyTCombType {  94,  365} , (* 217*) yyTCombType {  80,  345}
         , (* 218*) yyTCombType {  97,   44} , (* 219*) yyTCombType {  81,  346}
         , (* 220*) yyTCombType { 112,  113} , (* 221*) yyTCombType {  94,  365}
         , (* 222*) yyTCombType {  97,  167} , (* 223*) yyTCombType {  97,   53}
         , (* 224*) yyTCombType {  88,  355} , (* 225*) yyTCombType {  89,  356}
         , (* 226*) yyTCombType {  94,  365} , (* 227*) yyTCombType {  97,  168}
         , (* 228*) yyTCombType { 118,  119} , (* 229*) yyTCombType { 119,  207}
         , (* 230*) yyTCombType { 125,  290} , (* 231*) yyTCombType { 120,  121}
         , (* 232*) yyTCombType {  88,  355} , (* 233*) yyTCombType {  89,  356}
         , (* 234*) yyTCombType { 122,  462} , (* 235*) yyTCombType { 123,  310}
         , (* 236*) yyTCombType {  97,   54} , (* 237*) yyTCombType {  98,  366}
         , (* 238*) yyTCombType {  88,  355} , (* 239*) yyTCombType {  89,  356}
         , (* 240*) yyTCombType { 127,  317} , (* 241*) yyTCombType { 127,  317}
         , (* 242*) yyTCombType {  98,  366} , (* 243*) yyTCombType { 129,  130}
         , (* 244*) yyTCombType {  88,  355} , (* 245*) yyTCombType {  89,  356}
         , (* 246*) yyTCombType { 133,  134} , (* 247*) yyTCombType {  98,  366}
         , (* 248*) yyTCombType { 106,  107} , (* 249*) yyTCombType { 120,  183}
         , (* 250*) yyTCombType {  94,  365} , (* 251*) yyTCombType {  81,  192}
         , (* 252*) yyTCombType { 101,  372} , (* 253*) yyTCombType { 134,  209}
         , (* 254*) yyTCombType { 113,  326} , (* 255*) yyTCombType { 135,  291}
         , (* 256*) yyTCombType { 102,  373} , (* 257*) yyTCombType { 101,  372}
         , (* 258*) yyTCombType {  94,  365} , (* 259*) yyTCombType { 113,  326}
         , (* 260*) yyTCombType { 136,  127} , (* 261*) yyTCombType { 102,  373}
         , (* 262*) yyTCombType { 101,  372} , (* 263*) yyTCombType { 114,  453}
         , (* 264*) yyTCombType {  94,  365} , (* 265*) yyTCombType { 137,  138}
         , (* 266*) yyTCombType { 102,  373} , (* 267*) yyTCombType { 140,  141}
         , (* 268*) yyTCombType { 114,  156} , (* 269*) yyTCombType { 141,  210}
         , (* 270*) yyTCombType {  94,  365} , (* 271*) yyTCombType {  98,  366}
         , (* 272*) yyTCombType { 128,  208} , (* 273*) yyTCombType { 128,   17}
         , (* 274*) yyTCombType {   0,    0} , (* 275*) yyTCombType {   0,    0}
         , (* 276*) yyTCombType {   0,    0} , (* 277*) yyTCombType {  89,  195}
         , (* 278*) yyTCombType {   0,    0} , (* 279*) yyTCombType {  98,  366}
         , (* 280*) yyTCombType {  98,  168} , (* 281*) yyTCombType { 122,  462}
         , (* 282*) yyTCombType { 123,  124} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType {   0,    0} , (* 285*) yyTCombType {  98,  366}
         , (* 286*) yyTCombType { 101,  372} , (* 287*) yyTCombType {   0,    0}
         , (* 288*) yyTCombType { 113,  326} , (* 289*) yyTCombType {  98,   95}
         , (* 290*) yyTCombType { 102,  373} , (* 291*) yyTCombType {  98,  366}
         , (* 292*) yyTCombType {   0,    0} , (* 293*) yyTCombType {   0,    0}
         , (* 294*) yyTCombType { 101,  372} , (* 295*) yyTCombType {   0,    0}
         , (* 296*) yyTCombType { 113,  326} , (* 297*) yyTCombType { 114,   34}
         , (* 298*) yyTCombType { 102,  373} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType { 101,  372} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType { 113,  326} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType { 102,  373} , (* 305*) yyTCombType { 114,  188}
         , (* 306*) yyTCombType { 101,  372} , (* 307*) yyTCombType { 130,  326}
         , (* 308*) yyTCombType { 113,  326} , (* 309*) yyTCombType { 131,  156}
         , (* 310*) yyTCombType { 102,  373} , (* 311*) yyTCombType { 114,  189}
         , (* 312*) yyTCombType { 130,  326} , (* 313*) yyTCombType {   0,    0}
         , (* 314*) yyTCombType { 131,  453} , (* 315*) yyTCombType {   0,    0}
         , (* 316*) yyTCombType {   0,    0} , (* 317*) yyTCombType { 114,  190}
         , (* 318*) yyTCombType { 121,  172} , (* 319*) yyTCombType { 121,  173}
         , (* 320*) yyTCombType { 121,  174} , (* 321*) yyTCombType { 121,  175}
         , (* 322*) yyTCombType { 121,  176} , (* 323*) yyTCombType { 121,  177}
         , (* 324*) yyTCombType { 121,  178} , (* 325*) yyTCombType { 121,  179}
         , (* 326*) yyTCombType { 121,  180} , (* 327*) yyTCombType { 121,  181}
         , (* 328*) yyTCombType { 121,  182} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {   0,    0}
         , (* 332*) yyTCombType {   0,    0} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType { 130,  326} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType { 131,   34} , (* 339*) yyTCombType {   0,    0}
         , (* 340*) yyTCombType {   0,    0} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {   0,    0} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType { 130,  326} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType { 131,  188} , (* 347*) yyTCombType {   0,    0}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType { 130,  326} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType { 131,  189} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {   0,    0}
         , (* 356*) yyTCombType { 130,  326} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType { 131,  190} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {   0,    0}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {   0,    0}
         , (* 374*) yyTCombType {   0,    0} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType {   0,    0}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {   0,    0}
         , (* 380*) yyTCombType {   0,    0} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {   0,    0}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType {   0,    0}
         , (* 400*) yyTCombType {   0,    0} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  213 , (* 109*)    5 , (* 110*)  214 , (* 111*)  215
         , (* 112*)  216 , (* 113*)  217 , (* 114*)  218 , (* 115*)  211
         , (* 116*)  212 , (* 117*)    0 , (* 118*)   21 , (* 119*)  112
         , (* 120*)    0 , (* 121*)  126 , (* 122*)  136 , (* 123*)    0
         , (* 124*)    0 , (* 125*)    6 , (* 126*)    9 , (* 127*)   18
         , (* 128*)  220 , (* 129*)   33 , (* 130*)   77 , (* 131*)  106
         , (* 132*)  114 , (* 133*)  109 , (* 134*)  125 , (* 135*)  129
         , (* 136*)  135 , (* 137*)   39 , (* 138*)  137 , (* 139*)   71
         , (* 140*)  219 , (* 141*)   26 , (* 142*)  223 , (* 143*)   16
         , (* 144*)   49 , (* 145*)  227 , (* 146*)  228 , (* 147*)   23
         , (* 148*)   24 , (* 149*)  221 , (* 150*)  222 , (* 151*)   29
         , (* 152*)   31 , (* 153*)   11 , (* 154*)  255 , (* 155*)  248
         , (* 156*)   80 , (* 157*)  251 , (* 158*)  259 , (* 159*)   75
         , (* 160*)  248 , (* 161*)  256 , (* 162*)   62 , (* 163*)   82
         , (* 164*)   83 , (* 165*)   88 , (* 166*)  258 , (* 167*)  262
         , (* 168*)   81 , (* 169*)   87 , (* 170*)   83 , (* 171*)   84
         , (* 172*)   94 , (* 173*)   64 , (* 174*)  265 , (* 175*)   90
         , (* 176*)   91 , (* 177*)  101 , (* 178*)   70 , (* 179*)  267
         , (* 180*)   92 , (* 181*)   97 , (* 182*)  272 , (* 183*)  249
         , (* 184*)  230 , (* 185*)  231 , (* 186*)  232 , (* 187*)  233
         , (* 188*)  234 , (* 189*)  235 , (* 190*)  236 , (* 191*)  237
         , (* 192*)  238 , (* 193*)  239 , (* 194*)  240 , (* 195*)  241
         , (* 196*)  242 , (* 197*)  243 , (* 198*)  244 , (* 199*)  245
         , (* 200*)   59 , (* 201*)   23 , (* 202*)   58 , (* 203*)   37
         , (* 204*)   41 , (* 205*)   72 , (* 206*)   59 , (* 207*)   45
         , (* 208*)  225 , (* 209*)   41 , (* 210*)  226 , (* 211*)   48
         , (* 212*)   45 , (* 213*)   51 , (* 214*)  224 , (* 215*)  268
         , (* 216*)   38 , (* 217*)  269 , (* 218*)  270 , (* 219*)  105
         , (* 220*)   46 , (* 221*)  254 , (* 222*)   48 , (* 223*)   68
         , (* 224*)  227 , (* 225*)  228 , (* 226*)  253 , (* 227*)  257
         , (* 228*)  260 , (* 229*)  248 , (* 230*)   89 , (* 231*)   93
         , (* 232*)   91 , (* 233*)  252 , (* 234*)  275 , (* 235*)  248
         , (* 236*)  248 , (* 237*)  128 , (* 238*)  131 , (* 239*)  246
         , (* 240*)   60 , (* 241*)  139 , (* 242*)  140 , (* 243*)  227
         , (* 244*)  228 , (* 245*)  250 , (* 246*)   60 , (* 247*)   86
         , (* 248*)  227 , (* 249*)   96 , (* 250*)    0 , (* 251*)    0
         , (* 252*)  229 , (* 253*)  122 , (* 254*)  120 , (* 255*)    0
         , (* 256*)    0 , (* 257*)   23 , (* 258*)   65 , (* 259*)   66
         , (* 260*)   23 , (* 261*)    0 , (* 262*)    0 , (* 263*)  230
         , (* 264*)  231 , (* 265*)  232 , (* 266*)  233 , (* 267*)  234
         , (* 268*)  235 , (* 269*)  236 , (* 270*)  237 , (* 271*)  238
         , (* 272*)  239 , (* 273*)  240 , (* 274*)  241 , (* 275*)  242
         , (* 276*)  243 , (* 277*)  244 , (* 278*)  245 , (* 279*)   99
         , (* 280*)   59 , (* 281*)   58 , (* 282*)  230 , (* 283*)  231
         , (* 284*)  232 , (* 285*)  233 , (* 286*)  234 , (* 287*)  235
         , (* 288*)  236 , (* 289*)  237 , (* 290*)  238 , (* 291*)  239
         , (* 292*)  240 , (* 293*)  241 , (* 294*)  242 , (* 295*)  243
         , (* 296*)  244 , (* 297*)  245 , (* 298*)  227 , (* 299*)  228
         , (* 300*)   58 , (* 301*)  227 , (* 302*)   96 , (* 303*)    0
         , (* 304*)    0 , (* 305*)    0 , (* 306*)    0 , (* 307*)  247
         , (* 308*)    0 , (* 309*)    0 , (* 310*)    0 , (* 311*)    0
         , (* 312*)  273 , (* 313*)  274 , (* 314*)    0 , (* 315*)    0
         , (* 316*)    0 , (* 317*)  227 , (* 318*)  228 , (* 319*)  103
         , (* 320*)   60 , (* 321*)    0 , (* 322*)    0 , (* 323*)    0
         , (* 324*)    0 , (* 325*)    0 , (* 326*)  261 , (* 327*)    0
         , (* 328*)    0 , (* 329*)  264 , (* 330*)    0 , (* 331*)   98
         , (* 332*)  100 , (* 333*)    0 , (* 334*)    0 , (* 335*)    0
         , (* 336*)    0 , (* 337*)  230 , (* 338*)  231 , (* 339*)  232
         , (* 340*)  233 , (* 341*)  234 , (* 342*)  235 , (* 343*)  236
         , (* 344*)  237 , (* 345*)  238 , (* 346*)  239 , (* 347*)  240
         , (* 348*)  241 , (* 349*)  242 , (* 350*)  243 , (* 351*)  244
         , (* 352*)  245 , (* 353*)   59 , (* 354*)    0 , (* 355*)   58
         , (* 356*)  230 , (* 357*)  231 , (* 358*)  232 , (* 359*)  233
         , (* 360*)  234 , (* 361*)  235 , (* 362*)  236 , (* 363*)  237
         , (* 364*)  238 , (* 365*)  239 , (* 366*)  240 , (* 367*)  241
         , (* 368*)  242 , (* 369*)  243 , (* 370*)  244 , (* 371*)  245
         , (* 372*)  227 , (* 373*)  228 , (* 374*)   58 , (* 375*)    0
         , (* 376*)    0 , (* 377*)    0 , (* 378*)    0 , (* 379*)    0
         , (* 380*)    0 , (* 381*)  263 , (* 382*)    0 , (* 383*)    0
         , (* 384*)    0 , (* 385*)   80 , (* 386*)    0 , (* 387*)  259
         , (* 388*)    0 , (* 389*)  266 , (* 390*)    0 , (* 391*)  102
         , (* 392*)  104 , (* 393*)   60 , (* 394*)   88 , (* 395*)    0
         , (* 396*)  262 , (* 397*)    0 , (* 398*)  117 , (* 399*)    0
         , (* 400*)    0 , (* 401*)   94 , (* 402*)    0 , (* 403*)  265
         , (* 404*)    0 , (* 405*)    0 , (* 406*)  101 , (* 407*)    0
         , (* 408*)  267 , (* 409*)    0 , (* 410*)  248 , (* 411*)  230
         , (* 412*)  231 , (* 413*)  232 , (* 414*)  233 , (* 415*)  234
         , (* 416*)  235 , (* 417*)  236 , (* 418*)  237 , (* 419*)  238
         , (* 420*)  239 , (* 421*)  240 , (* 422*)  241 , (* 423*)  242
         , (* 424*)  243 , (* 425*)  244 , (* 426*)  245 , (* 427*)  115
         , (* 428*)  120 , (* 429*)   58 , (* 430*)    0 , (* 431*)    0
         , (* 432*)    0 , (* 433*)  132 , (* 434*)    0 , (* 435*)    0
         , (* 436*)    0 , (* 437*)    0 , (* 438*)    0 , (* 439*)    0
         , (* 440*)    0 , (* 441*)    0 , (* 442*)    0 , (* 443*)    0
         , (* 444*)  268 , (* 445*)    0 , (* 446*)  271 , (* 447*)  270
         , (* 448*)    0 , (* 449*)    0 , (* 450*)    0 , (* 451*)    0
         , (* 452*)    0 , (* 453*)   80 , (* 454*)    0 , (* 455*)  259
         , (* 456*)    0 , (* 457*)    0 , (* 458*)    0 , (* 459*)   80
         , (* 460*)    0 , (* 461*)  259 , (* 462*)   88 , (* 463*)    0
         , (* 464*)  262 , (* 465*)    0 , (* 466*)    0 , (* 467*)    0
         , (* 468*)   88 , (* 469*)   94 , (* 470*)  262 , (* 471*)  265
         , (* 472*)    0 , (* 473*)    0 , (* 474*)  101 , (* 475*)   94
         , (* 476*)  267 , (* 477*)  265 , (* 478*)    0 , (* 479*)    0
         , (* 480*)  101 , (* 481*)    0 , (* 482*)  267 , (* 483*)    0
         , (* 484*)    0 , (* 485*)  123 , (* 486*)  276 , (* 487*)  274
         , (* 488*)    0 , (* 489*)    0 , (* 490*)    0 , (* 491*)    0
         , (* 492*)    0 , (* 493*)    0 , (* 494*)    0 , (* 495*)    0
         , (* 496*)    0 , (* 497*)    0 , (* 498*)    0 , (* 499*)    0
         , (* 500*)    0 , (* 501*)    0 , (* 502*)    0 , (* 503*)    0
         , (* 504*)    0 , (* 505*)    0 , (* 506*)    0 , (* 507*)    0
         , (* 508*)    0 , (* 509*)    0 , (* 510*)    0 , (* 511*)    0
         , (* 512*)  268 , (* 513*)    0 , (* 514*)  269 , (* 515*)  270
         , (* 516*)  105 , (* 517*)    0 , (* 518*)  268 , (* 519*)    0
         , (* 520*)  269 , (* 521*)  270 , (* 522*)  105 , (* 523*)    0
         , (* 524*)    0 , (* 525*)    0 , (* 526*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 277(P   1)*)    2 , (*A 278(P   2)*)    1 , (*A 279(P   3)*)    1
         , (*A 280(P   4)*)    1 , (*A 281(P   5)*)    1 , (*A 282(P   6)*)    1
         , (*A 283(P   7)*)    1 , (*A 284(P   8)*)    1 , (*A 285(P   9)*)    1
         , (*A 286(P  10)*)    1 , (*A 287(P  11)*)    2 , (*A 288(P  12)*)    0
         , (*A 289(P  13)*)    0 , (*A 290(P  14)*)    0 , (*A 291(P  15)*)    0
         , (*A 292(P  16)*)    0 , (*A 293(P  17)*)    0 , (*A 294(P  18)*)    3
         , (*A 295(P  19)*)    7 , (*A 296(P  20)*)    4 , (*A 297(P  21)*)    5
         , (*A 298(P  22)*)    3 , (*A 299(P  23)*)    7 , (*A 300(P  24)*)    4
         , (*A 301(P  25)*)    7 , (*A 302(P  26)*)    3 , (*A 303(P  27)*)    9
         , (*A 304(P  28)*)    3 , (*A 305(P  29)*)    8 , (*A 306(P  30)*)    1
         , (*A 307(P  31)*)    0 , (*A 308(P  32)*)    0 , (*A 309(P  33)*)    1
         , (*A 310(P  34)*)    0 , (*A 311(P  35)*)    1 , (*A 312(P  36)*)    1
         , (*A 313(P  37)*)    3 , (*A 314(P  38)*)    1 , (*A 315(P  39)*)    3
         , (*A 316(P  40)*)    3 , (*A 317(P  41)*)    0 , (*A 318(P  42)*)    3
         , (*A 319(P  43)*)    0 , (*A 320(P  44)*)    1 , (*A 321(P  45)*)    3
         , (*A 322(P  46)*)    1 , (*A 323(P  47)*)    1 , (*A 324(P  48)*)    2
         , (*A 325(P  49)*)    3 , (*A 326(P  50)*)    0 , (*A 327(P  51)*)    0
         , (*A 328(P  52)*)    2 , (*A 329(P  53)*)    0 , (*A 330(P  54)*)    3
         , (*A 331(P  55)*)    1 , (*A 332(P  56)*)    3 , (*A 333(P  57)*)    2
         , (*A 334(P  58)*)    4 , (*A 335(P  59)*)    3 , (*A 336(P  60)*)    2
         , (*A 337(P  61)*)    1 , (*A 338(P  62)*)    3 , (*A 339(P  63)*)    3
         , (*A 340(P  64)*)    3 , (*A 341(P  65)*)    2 , (*A 342(P  66)*)    0
         , (*A 343(P  67)*)    1 , (*A 344(P  68)*)    2 , (*A 345(P  69)*)    0
         , (*A 346(P  70)*)    1 , (*A 347(P  71)*)    2 , (*A 348(P  72)*)    3
         , (*A 349(P  73)*)    1 , (*A 350(P  74)*)    4 , (*A 351(P  75)*)    1
         , (*A 352(P  76)*)    1 , (*A 353(P  77)*)    1 , (*A 354(P  78)*)    2
         , (*A 355(P  79)*)    0 , (*A 356(P  80)*)    1 , (*A 357(P  81)*)    2
         , (*A 358(P  82)*)    3 , (*A 359(P  83)*)    1 , (*A 360(P  84)*)    3
         , (*A 361(P  85)*)    1 , (*A 362(P  86)*)    1 , (*A 363(P  87)*)    1
         , (*A 364(P  88)*)    2 , (*A 365(P  89)*)    0 , (*A 366(P  90)*)    1
         , (*A 367(P  91)*)    2 , (*A 368(P  92)*)    3 , (*A 369(P  93)*)    3
         , (*A 370(P  94)*)    1 , (*A 371(P  95)*)    2 , (*A 372(P  96)*)    0
         , (*A 373(P  97)*)    1 , (*A 374(P  98)*)    2 , (*A 375(P  99)*)    3
         , (*A 376(P 100)*)    3 , (*A 377(P 101)*)    1 , (*A 378(P 102)*)    2
         , (*A 379(P 103)*)    0 , (*A 380(P 104)*)    2 , (*A 381(P 105)*)    0
         , (*A 382(P 106)*)    1 , (*A 383(P 107)*)    2 , (*A 384(P 108)*)    1
         , (*A 385(P 109)*)    1 , (*A 386(P 110)*)    1 , (*A 387(P 111)*)    1
         , (*A 388(P 112)*)    1 , (*A 389(P 113)*)    1 , (*A 390(P 114)*)    1
         , (*A 391(P 115)*)    1 , (*A 392(P 116)*)    1 , (*A 393(P 117)*)    1
         , (*A 394(P 118)*)    1 , (*A 395(P 119)*)    1 , (*A 396(P 120)*)    1
         , (*A 397(P 121)*)    1 , (*A 398(P 122)*)    1 , (*A 399(P 123)*)    1
         , (*A 400(P 124)*)    2 , (*A 401(P 125)*)    3 , (*A 402(P 126)*)    0
         , (*A 403(P 127)*)    2 , (*A 404(P 128)*)    1 , (*A 405(P 129)*)    3
         , (*A 406(P 130)*)    1 , (*A 407(P 131)*)    3 , (*A 408(P 132)*)    2
         , (*A 409(P 133)*)    3 , (*A 410(P 134)*)    2 , (*A 411(P 135)*)    1
         , (*A 412(P 136)*)    4 , (*A 413(P 137)*)    3 , (*A 414(P 138)*)    1
         , (*A 415(P 139)*)    0 , (*A 416(P 140)*)    1 , (*A 417(P 141)*)    1
         , (*A 418(P 142)*)    1 , (*A 419(P 143)*)    4 , (*A 420(P 144)*)    1
         , (*A 421(P 145)*)    2 , (*A 422(P 146)*)    0 , (*A 423(P 147)*)    2
         , (*A 424(P 148)*)    0 , (*A 425(P 149)*)    2 , (*A 426(P 150)*)    0
         , (*A 427(P 151)*)    2 , (*A 428(P 152)*)    4 , (*A 429(P 153)*)    0
         , (*A 430(P 154)*)    4 , (*A 431(P 155)*)    1 , (*A 432(P 156)*)    1
         , (*A 433(P 157)*)    4 , (*A 434(P 158)*)    1 , (*A 435(P 159)*)    1
         , (*A 436(P 160)*)    1 , (*A 437(P 161)*)    1 , (*A 438(P 162)*)    1
         , (*A 439(P 163)*)    1 , (*A 440(P 164)*)    1 , (*A 441(P 165)*)    1
         , (*A 442(P 166)*)    1 , (*A 443(P 167)*)    1 , (*A 444(P 168)*)    1
         , (*A 445(P 169)*)    1 , (*A 446(P 170)*)    2 , (*A 447(P 171)*)    1
         , (*A 448(P 172)*)    1 , (*A 449(P 173)*)    1 , (*A 450(P 174)*)    1
         , (*A 451(P 175)*)    1 , (*A 452(P 176)*)    1 , (*A 453(P 177)*)    0
         , (*A 454(P 178)*)    1 , (*A 455(P 179)*)    1 , (*A 456(P 180)*)    2
         , (*A 457(P 181)*)    0 , (*A 458(P 182)*)    2 , (*A 459(P 183)*)    1
         , (*A 460(P 184)*)    3 , (*A 461(P 185)*)    1 , (*A 462(P 186)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 277(P   1)*)  223 , (*A 278(P   2)*)  109 , (*A 279(P   3)*)  109
         , (*A 280(P   4)*)  109 , (*A 281(P   5)*)  109 , (*A 282(P   6)*)  109
         , (*A 283(P   7)*)  109 , (*A 284(P   8)*)  115 , (*A 285(P   9)*)  116
         , (*A 286(P  10)*)  117 , (*A 287(P  11)*)  117 , (*A 288(P  12)*)  119
         , (*A 289(P  13)*)  120 , (*A 290(P  14)*)  121 , (*A 291(P  15)*)  122
         , (*A 292(P  16)*)  123 , (*A 293(P  17)*)  124 , (*A 294(P  18)*)  126
         , (*A 295(P  19)*)  113 , (*A 296(P  20)*)  129 , (*A 297(P  21)*)  108
         , (*A 298(P  22)*)  131 , (*A 299(P  23)*)  114 , (*A 300(P  24)*)  132
         , (*A 301(P  25)*)  110 , (*A 302(P  26)*)  134 , (*A 303(P  27)*)  111
         , (*A 304(P  28)*)  136 , (*A 305(P  29)*)  112 , (*A 306(P  30)*)  125
         , (*A 307(P  31)*)  125 , (*A 308(P  32)*)  138 , (*A 309(P  33)*)  139
         , (*A 310(P  34)*)  139 , (*A 311(P  35)*)  140 , (*A 312(P  36)*)  141
         , (*A 313(P  37)*)  141 , (*A 314(P  38)*)  142 , (*A 315(P  39)*)  142
         , (*A 316(P  40)*)  143 , (*A 317(P  41)*)  143 , (*A 318(P  42)*)  144
         , (*A 319(P  43)*)  144 , (*A 320(P  44)*)  145 , (*A 321(P  45)*)  145
         , (*A 322(P  46)*)  146 , (*A 323(P  47)*)  146 , (*A 324(P  48)*)  146
         , (*A 325(P  49)*)  128 , (*A 326(P  50)*)  147 , (*A 327(P  51)*)  149
         , (*A 328(P  52)*)  148 , (*A 329(P  53)*)  148 , (*A 330(P  54)*)  150
         , (*A 331(P  55)*)  151 , (*A 332(P  56)*)  151 , (*A 333(P  57)*)  150
         , (*A 334(P  58)*)  152 , (*A 335(P  59)*)  152 , (*A 336(P  60)*)  118
         , (*A 337(P  61)*)  153 , (*A 338(P  62)*)  153 , (*A 339(P  63)*)  135
         , (*A 340(P  64)*)  127 , (*A 341(P  65)*)  155 , (*A 342(P  66)*)  155
         , (*A 343(P  67)*)  156 , (*A 344(P  68)*)  158 , (*A 345(P  69)*)  157
         , (*A 346(P  70)*)  157 , (*A 347(P  71)*)  159 , (*A 348(P  72)*)  159
         , (*A 349(P  73)*)  161 , (*A 350(P  74)*)  160 , (*A 351(P  75)*)  164
         , (*A 352(P  76)*)  164 , (*A 353(P  77)*)  165 , (*A 354(P  78)*)  167
         , (*A 355(P  79)*)  166 , (*A 356(P  80)*)  166 , (*A 357(P  81)*)  168
         , (*A 358(P  82)*)  168 , (*A 359(P  83)*)  170 , (*A 360(P  84)*)  169
         , (*A 361(P  85)*)  171 , (*A 362(P  86)*)  171 , (*A 363(P  87)*)  172
         , (*A 364(P  88)*)  174 , (*A 365(P  89)*)  173 , (*A 366(P  90)*)  173
         , (*A 367(P  91)*)  175 , (*A 368(P  92)*)  175 , (*A 369(P  93)*)  176
         , (*A 370(P  94)*)  177 , (*A 371(P  95)*)  179 , (*A 372(P  96)*)  178
         , (*A 373(P  97)*)  178 , (*A 374(P  98)*)  180 , (*A 375(P  99)*)  180
         , (*A 376(P 100)*)  181 , (*A 377(P 101)*)  182 , (*A 378(P 102)*)  162
         , (*A 379(P 103)*)  162 , (*A 380(P 104)*)  183 , (*A 381(P 105)*)  183
         , (*A 382(P 106)*)  154 , (*A 383(P 107)*)  154 , (*A 384(P 108)*)  154
         , (*A 385(P 109)*)  154 , (*A 386(P 110)*)  154 , (*A 387(P 111)*)  154
         , (*A 388(P 112)*)  154 , (*A 389(P 113)*)  154 , (*A 390(P 114)*)  154
         , (*A 391(P 115)*)  154 , (*A 392(P 116)*)  154 , (*A 393(P 117)*)  154
         , (*A 394(P 118)*)  154 , (*A 395(P 119)*)  154 , (*A 396(P 120)*)  154
         , (*A 397(P 121)*)  154 , (*A 398(P 122)*)  154 , (*A 399(P 123)*)  154
         , (*A 400(P 124)*)  154 , (*A 401(P 125)*)  154 , (*A 402(P 126)*)  200
         , (*A 403(P 127)*)  200 , (*A 404(P 128)*)  201 , (*A 405(P 129)*)  201
         , (*A 406(P 130)*)  202 , (*A 407(P 131)*)  154 , (*A 408(P 132)*)  154
         , (*A 409(P 133)*)  203 , (*A 410(P 134)*)  204 , (*A 411(P 135)*)  207
         , (*A 412(P 136)*)  204 , (*A 413(P 137)*)  208 , (*A 414(P 138)*)  208
         , (*A 415(P 139)*)  210 , (*A 416(P 140)*)  210 , (*A 417(P 141)*)  210
         , (*A 418(P 142)*)  210 , (*A 419(P 143)*)  209 , (*A 420(P 144)*)  211
         , (*A 421(P 145)*)  212 , (*A 422(P 146)*)  212 , (*A 423(P 147)*)  213
         , (*A 424(P 148)*)  213 , (*A 425(P 149)*)  205 , (*A 426(P 150)*)  205
         , (*A 427(P 151)*)  206 , (*A 428(P 152)*)  206 , (*A 429(P 153)*)  206
         , (*A 430(P 154)*)  215 , (*A 431(P 155)*)  214 , (*A 432(P 156)*)  216
         , (*A 433(P 157)*)  214 , (*A 434(P 158)*)  163 , (*A 435(P 159)*)  163
         , (*A 436(P 160)*)  163 , (*A 437(P 161)*)  163 , (*A 438(P 162)*)  163
         , (*A 439(P 163)*)  163 , (*A 440(P 164)*)  163 , (*A 441(P 165)*)  163
         , (*A 442(P 166)*)  163 , (*A 443(P 167)*)  163 , (*A 444(P 168)*)  163
         , (*A 445(P 169)*)  163 , (*A 446(P 170)*)  163 , (*A 447(P 171)*)  217
         , (*A 448(P 172)*)  217 , (*A 449(P 173)*)  217 , (*A 450(P 174)*)  217
         , (*A 451(P 175)*)  217 , (*A 452(P 176)*)  217 , (*A 453(P 177)*)  130
         , (*A 454(P 178)*)  130 , (*A 455(P 179)*)  219 , (*A 456(P 180)*)  219
         , (*A 457(P 181)*)  133 , (*A 458(P 182)*)  133 , (*A 459(P 183)*)  220
         , (*A 460(P 184)*)  220 , (*A 461(P 185)*)  221 , (*A 462(P 186)*)  222
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   24 , (*:  10*)   95 , (*:  11*)   66
         , (*:  12*)   95 , (*:  13*)   95 , (*:  14*)   69
         , (*:  15*)   70 , (*:  16*)   70 , (*:  17*)   95
         , (*:  18*)   19 , (*:  19*)   95 , (*:  20*)   67
         , (*:  21*)   66 , (*:  22*)   14 , (*:  23*)    9
         , (*:  24*)    9 , (*:  25*)   95 , (*:  26*)   30
         , (*:  27*)   95 , (*:  28*)   95 , (*:  29*)   66
         , (*:  30*)   95 , (*:  31*)   66 , (*:  32*)   95
         , (*:  33*)   19 , (*:  34*)   95 , (*:  35*)   69
         , (*:  36*)   70 , (*:  37*)   66 , (*:  38*)   66
         , (*:  39*)   95 , (*:  40*)   66 , (*:  41*)   19
         , (*:  42*)   95 , (*:  43*)   19 , (*:  44*)   69
         , (*:  45*)   95 , (*:  46*)   70 , (*:  47*)   70
         , (*:  48*)   95 , (*:  49*)   66 , (*:  50*)   95
         , (*:  51*)   66 , (*:  52*)   95 , (*:  53*)   95
         , (*:  54*)   52 , (*:  55*)   19 , (*:  56*)   19
         , (*:  57*)   95 , (*:  58*)   19 , (*:  59*)   19
         , (*:  60*)   19 , (*:  61*)   95 , (*:  62*)   19
         , (*:  63*)   95 , (*:  64*)   19 , (*:  65*)   19
         , (*:  66*)   19 , (*:  67*)   19 , (*:  68*)   66
         , (*:  69*)   95 , (*:  70*)   66 , (*:  71*)   70
         , (*:  72*)   19 , (*:  73*)    6 , (*:  74*)   71
         , (*:  75*)   76 , (*:  76*)   95 , (*:  77*)   19
         , (*:  78*)   95 , (*:  79*)   67 , (*:  80*)    9
         , (*:  81*)    9 , (*:  82*)   66 , (*:  83*)   68
         , (*:  84*)   68 , (*:  85*)   95 , (*:  86*)   66
         , (*:  87*)   66 , (*:  88*)    9 , (*:  89*)    9
         , (*:  90*)   66 , (*:  91*)   68 , (*:  92*)   95
         , (*:  93*)   66 , (*:  94*)    9 , (*:  95*)   52
         , (*:  96*)   68 , (*:  97*)   95 , (*:  98*)    9
         , (*:  99*)   66 , (*: 100*)   66 , (*: 101*)    9
         , (*: 102*)    9 , (*: 103*)   66 , (*: 104*)   66
         , (*: 105*)    9 , (*: 106*)   24 , (*: 107*)   95
         , (*: 108*)   69 , (*: 109*)   19 , (*: 110*)   95
         , (*: 111*)   67 , (*: 112*)   66 , (*: 113*)    9
         , (*: 114*)    9 , (*: 115*)    9 , (*: 116*)   19
         , (*: 117*)   19 , (*: 118*)   95 , (*: 119*)   67
         , (*: 120*)   74 , (*: 121*)   95 , (*: 122*)   19
         , (*: 123*)   19 , (*: 124*)   19 , (*: 125*)   69
         , (*: 126*)   69 , (*: 127*)   70 , (*: 128*)   70
         , (*: 129*)   66 , (*: 130*)   14 , (*: 131*)   19
         , (*: 132*)   19 , (*: 133*)   95 , (*: 134*)   67
         , (*: 135*)   69 , (*: 136*)   69 , (*: 137*)   66
         , (*: 138*)   27 , (*: 139*)   27 , (*: 140*)   95
         , (*: 141*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 142)*)  284 (*P7*) , (*RR: 143)*)  306 (*P29*)
         , (*RR: 144)*)  294 (*P17*) , (*RR: 145)*)  298 (*P21*)
         , (*RR: 146)*)  337 (*P60*) , (*RR: 147)*)  338 (*P61*)
         , (*RR: 148)*)  340 (*P63*) , (*RR: 149)*)  311 (*P34*)
         , (*RR: 150)*)  295 (*P18*) , (*RR: 151)*)  334 (*P57*)
         , (*RR: 152)*)  331 (*P54*) , (*RR: 153)*)  330 (*P53*)
         , (*RR: 154)*)  332 (*P55*) , (*RR: 155)*)  333 (*P56*)
         , (*RR: 156)*)  343 (*P66*) , (*RR: 157)*)  410 (*P133*)
         , (*RR: 158)*)  431 (*P154*) , (*RR: 159)*)  432 (*P155*)
         , (*RR: 160)*)  433 (*P156*) , (*RR: 161)*)  400 (*P123*)
         , (*RR: 162)*)  418 (*P141*) , (*RR: 163)*)  416 (*P139*)
         , (*RR: 164)*)  417 (*P140*) , (*RR: 165)*)  314 (*P37*)
         , (*RR: 166)*)  315 (*P38*) , (*RR: 167)*)  406 (*P129*)
         , (*RR: 168)*)  323 (*P46*) , (*RR: 169)*)  401 (*P124*)
         , (*RR: 170)*)  324 (*P47*) , (*RR: 171)*)  321 (*P44*)
         , (*RR: 172)*)  435 (*P158*) , (*RR: 173)*)  436 (*P159*)
         , (*RR: 174)*)  437 (*P160*) , (*RR: 175)*)  438 (*P161*)
         , (*RR: 176)*)  439 (*P162*) , (*RR: 177)*)  440 (*P163*)
         , (*RR: 178)*)  441 (*P164*) , (*RR: 179)*)  442 (*P165*)
         , (*RR: 180)*)  443 (*P166*) , (*RR: 181)*)  444 (*P167*)
         , (*RR: 182)*)  445 (*P168*) , (*RR: 183)*)  446 (*P169*)
         , (*RR: 184)*)  407 (*P130*) , (*RR: 185)*)  412 (*P135*)
         , (*RR: 186)*)  427 (*P150*) , (*RR: 187)*)  428 (*P151*)
         , (*RR: 188)*)  363 (*P86*) , (*RR: 189)*)  353 (*P76*)
         , (*RR: 190)*)  370 (*P93*) , (*RR: 191)*)  297 (*P20*)
         , (*RR: 192)*)  349 (*P72*) , (*RR: 193)*)  348 (*P71*)
         , (*RR: 194)*)  347 (*P70*) , (*RR: 195)*)  359 (*P82*)
         , (*RR: 196)*)  358 (*P81*) , (*RR: 197)*)  351 (*P74*)
         , (*RR: 198)*)  352 (*P75*) , (*RR: 199)*)  357 (*P80*)
         , (*RR: 200)*)  361 (*P84*) , (*RR: 201)*)  362 (*P85*)
         , (*RR: 202)*)  368 (*P91*) , (*RR: 203)*)  367 (*P90*)
         , (*RR: 204)*)  375 (*P98*) , (*RR: 205)*)  374 (*P97*)
         , (*RR: 206)*)  299 (*P22*) , (*RR: 207)*)  301 (*P24*)
         , (*RR: 208)*)  339 (*P62*) , (*RR: 209)*)  303 (*P26*)
         , (*RR: 210)*)  305 (*P28*) , (*RR: 211)*)  302 (*P25*)
         , (*RR: 212)*)  304 (*P27*) , (*RR: 213)*)  278 (*P1*)
         , (*RR: 214)*)  279 (*P2*) , (*RR: 215)*)  280 (*P3*)
         , (*RR: 216)*)  281 (*P4*) , (*RR: 217)*)  282 (*P5*)
         , (*RR: 218)*)  283 (*P6*) , (*RR: 219)*)  316 (*P39*)
         , (*RR: 220)*)  296 (*P19*) , (*RR: 221)*)  325 (*P48*)
         , (*RR: 222)*)  328 (*P51*) , (*RR: 223)*)  335 (*P58*)
         , (*RR: 224)*)  430 (*P153*) , (*RR: 225)*)  408 (*P131*)
         , (*RR: 226)*)  413 (*P136*) , (*RR: 227)*)  322 (*P45*)
         , (*RR: 228)*)  382 (*P105*) , (*RR: 229)*)  383 (*P106*)
         , (*RR: 230)*)  384 (*P107*) , (*RR: 231)*)  385 (*P108*)
         , (*RR: 232)*)  386 (*P109*) , (*RR: 233)*)  387 (*P110*)
         , (*RR: 234)*)  388 (*P111*) , (*RR: 235)*)  389 (*P112*)
         , (*RR: 236)*)  390 (*P113*) , (*RR: 237)*)  391 (*P114*)
         , (*RR: 238)*)  392 (*P115*) , (*RR: 239)*)  393 (*P116*)
         , (*RR: 240)*)  394 (*P117*) , (*RR: 241)*)  395 (*P118*)
         , (*RR: 242)*)  396 (*P119*) , (*RR: 243)*)  397 (*P120*)
         , (*RR: 244)*)  398 (*P121*) , (*RR: 245)*)  399 (*P122*)
         , (*RR: 246)*)  404 (*P127*) , (*RR: 247)*)  378 (*P101*)
         , (*RR: 248)*)  434 (*P157*) , (*RR: 249)*)  376 (*P99*)
         , (*RR: 250)*)  405 (*P128*) , (*RR: 251)*)  403 (*P126*)
         , (*RR: 252)*)  421 (*P144*) , (*RR: 253)*)  419 (*P142*)
         , (*RR: 254)*)  414 (*P137*) , (*RR: 255)*)  425 (*P148*)
         , (*RR: 256)*)  318 (*P41*) , (*RR: 257)*)  409 (*P132*)
         , (*RR: 258)*)  344 (*P67*) , (*RR: 259)*)  447 (*P170*)
         , (*RR: 260)*)  354 (*P77*) , (*RR: 261)*)  360 (*P83*)
         , (*RR: 262)*)  448 (*P171*) , (*RR: 263)*)  369 (*P92*)
         , (*RR: 264)*)  364 (*P87*) , (*RR: 265)*)  452 (*P175*)
         , (*RR: 266)*)  371 (*P94*) , (*RR: 267)*)  450 (*P173*)
         , (*RR: 268)*)  451 (*P174*) , (*RR: 269)*)  455 (*P178*)
         , (*RR: 270)*)  449 (*P172*) , (*RR: 271)*)  456 (*P179*)
         , (*RR: 272)*)  300 (*P23*) , (*RR: 273)*)  460 (*P183*)
         , (*RR: 274)*)  461 (*P184*) , (*RR: 275)*)  458 (*P181*)
         , (*RR: 276)*)  459 (*P182*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   yyErrMsgWrT          : TextWr . T;
  yyErrorPos           : FM3Scanner.tPosition;
   yyMsgLineLen         : INTEGER;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaUnnestCoord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaUnnestCoord.  For a reduce, and if the semantic
   action doesn't set PaUnnestCoord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 72 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSUnnestCoord        : LONGINT; 
      yyPrereduceUnnestCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       AppendToLine ("Repair token(s) inserted: ");
                     END (*IF*);
                     QuoteAndFillOnLine ( yyText );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*                     PushUnnestStk (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr);
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*              PushUnnestStk (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *) 
                 EmitSyntErrMsg ( );
                 yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceUnnestCoord := UnnestCoord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 277 => (* P1 _0000_ (223): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 278,213 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 279,214 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 280,215 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 281,216 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 282,217 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 283,218 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 284,142 => (* P8 UnitId (115): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 115;
                (* line 289 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Units . UnitStackTopRef ^ . UntUnitIdentAtom := yySynAttribute . Scan . SaAtom ;
                       yySynAttribute . PaRefany
                              := FM3Scopes . NewScopeRef
                                   ( FM3Units . UnitStackTopRef
                                   , Skt . SkModule
                                   , FM3Scanner . Attribute . Position
                                   ) ;
                (* Scope ref
                       FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yySynAttribute . PaConstructNo ) ;
                       (* ^Scope not pushed until after Imports. *)
                *) 
                     
              | 285 => (* P9 UnitIdImpliedEXPORTS (116): UnitId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 116;
                (* line 305 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position;
                       EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ; 
                     
              | 286 => (* P10 UnitIdAndExports (117): UnitIdImpliedEXPORTS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 117;
                (* line 311 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom (* Unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position (* Of unit ident. *) := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaRefany 
                              := FM3Scopes . NewScopeRef
                                   ( FM3Units . UnitStackTopRef
                                   , Skt . SkModule
                                   , FM3Scanner . Attribute . Position
                                   ) ;
                (* Scope ref
                       FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yySynAttribute . PaConstructNo ) ;
                       (* ^Scope not pushed until after Imports. *)
                *) 
                (* FIXME: Scope needs to be pushed between unit id and exports. *) 
                     
              | 287 => (* P11 UnitIdAndExports (117): UnitId Exports .*)
                DEC (yyStackPtr, 2); yyNonterminal := 117;
                (* line 327 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                     
              | 288 => (* P12 InterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 334 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 289 => (* P13 ModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 337 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 290 => (* P14 GenInterfaceKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 340 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 291 => (* P15 GenModuleKind (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 343 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 292 => (* P16 InstInterfaceKind (123): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 123;
                (* line 346 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 293 => (* P17 InstModuleKind (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;
                (* line 349 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 294,144 => (* P18 InterfaceLt (126): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 352 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3ParsePass . InterfaceId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                         yySynAttribute . PaRefany := LScopeRef ;   
                       END ; 
                     
              | 295,150 => (* P19 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 372 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 296,220 => (* P20 InterfaceMiddle (129): InterfaceLt Exports StkSemicolon Imports .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 375 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         yySynAttribute . PaRefany (* ScopeRef *) := yyAttributeStack^[yyStackPtr+1] . PaRefany ;
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 297,191 => (* P21 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 387 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         <* ASSERT FM3Scopes . PopLookupScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         FM3ParsePass . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                           , Ukt . UkInterface
                           ) ; 
                       END ; 
                     
              | 298,145 => (* P22 ModuleLt (131): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 406 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         LUnitRef ^ . UntKind := Ukt . UkModule
                           (* ^Could change, if it turns out to be an instantiation. *) ; 
                         FM3ParsePass . ModuleId
                           ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                         yySynAttribute . PaRefany := LScopeRef ;   
                       END ; 
                     
              | 299,206 => (* P23 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 428 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 300,272 => (* P24 ModuleMiddle (132): ModuleLt Exports StkSemicolon Imports .*)
                DEC (yyStackPtr, 4); yyNonterminal := 132;
                (* line 431 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaRefany (* ScopeRef *) := yyAttributeStack^[yyStackPtr+1] . PaRefany ;
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 301,207 => (* P25 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 443 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         <* ASSERT FM3Scopes . PopLookupScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         FM3ParsePass . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef
                           , yyAttributeStack^[yyStackPtr+6] . Scan . SaAtom
                           , Ukt . UkModule
                           ) ; 
                       END ; 
                     
              | 302,211 => (* P26 GenInterfaceLt (134): StkRwGENERIC StkRwINTERFACE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 462 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                       yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                       yySynAttribute . PaRefany (* ScopeNo *) 
                         := FM3Scopes . NewScopeRef
                              ( FM3Units . UnitStackTopRef
                              , Skt . SkInterface
                              , FM3Scanner . Attribute . Position
                              ) ;
                     
              | 303,209 => (* P27 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon Imports BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;
                (* line 475 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 304,212 => (* P28 GenModuleLt (136): StkRwGENERIC StkRwMODULE UnitId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 481 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                       yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ;
                
                       yySynAttribute . PaRefany 
                         := FM3Scopes . NewScopeRef
                              ( FM3Units . UnitStackTopRef
                              , Skt . SkModule
                              , FM3Scanner . Attribute . Position
                              ) ;
                     
              | 305,210 => (* P29 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon Imports Block StkIdent StkDot .*)
                DEC (yyStackPtr, 8); yyNonterminal := 112;
                (* line 495 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3ParsePass . Push_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                     
              | 306,143 => (* P30 OptUnsafe (125): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 125;
                (* line 501 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 307 => (* P31 OptUnsafe (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 502 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 308 => (* P32 CaptureCoord (138): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 138;
                (* line 505 of "FM3Parser.lalr" *)
                 yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
              | 309 => (* P33 OptSemicolon (139): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 310 => (* P34 OptSemicolon (139): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 139;

              | 311,149 => (* P35 IdentRef (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 513 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 312 => (* P36 IdPlusList (141): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 517 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 313 => (* P37 IdPlusList (141): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 521 of "FM3Parser.lalr" *)
                 (* PaUnnestCoord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 314,165 => (* P38 DeclIdListElems (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 533 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3ParsePass . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 315,166 => (* P39 DeclIdListElems (142): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 544 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 316,219 => (* P40 IdStarList (143): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;
                (* line 557 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 317 => (* P41 IdStarList (143): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 143;
                (* line 559 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 318,256 => (* P42 QualIdStarList (144): QualIdStarList StkComma QualId .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 563 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 319 => (* P43 QualIdStarList (144): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 144;
                (* line 565 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 320 => (* P44 QualId (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 568 of "FM3Parser.lalr" *)
                 FM3ParsePass . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 321,171 => (* P45 QualId (145): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 571 of "FM3Parser.lalr" *)
                 FM3ParsePass . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 322,227 => (* P46 TypeId (146): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;

              | 323,168 => (* P47 TypeId (146): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 580 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 324,170 => (* P48 TypeId (146): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 146;
                (* line 585 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP
                         ( Itk . ItkReservedId , Stk . RidUNTRACEDROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 325,221 => (* P49 Imports (128): ImportsLt ImportsRecurse ImportsRt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 592 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Imported interface Count. *) ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+2] . PaLong (* Imported unqualified Ident Count. *) ;
                     
              | 326 => (* P50 ImportsLt (147): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 147;
                (* line 595 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsLt ( ) ; 
              | 327 => (* P51 ImportsRt (149): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 149;
                (* line 596 of "FM3Parser.lalr" *)
                 FM3ParsePass . ImportsRt ( ) ; 
              | 328,222 => (* P52 ImportsRecurse (148): ImportsRecurse ImportItem .*)
                DEC (yyStackPtr, 2); yyNonterminal := 148;
                (* line 598 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + yyAttributeStack^[yyStackPtr+2] . PaLong ;
                     
              | 329 => (* P53 ImportsRecurse (148): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 148;
                (* line 602 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0; 
                       yySynAttribute . PaLong := 0L; 
                     
              | 330,153 => (* P54 ImportItem (150): StkRwIMPORT ImportIntfPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 608 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       yySynAttribute . PaLong := 0L ; 
                     
              | 331,152 => (* P55 ImportIntfPlusList (151): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 612 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         ) ;
                     
              | 332,154 => (* P56 ImportIntfPlusList (151): ImportIntfPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 624 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       Pop4 ( ) (* Replace the Ident with an ItkImport. *) ; 
                       FM3ParsePass . Import
                         ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , yyAttributeStack^[yyStackPtr+3] . Scan . Position ) ; 
                       FM3ParsePass . Push_LI3
                         ( Itk . ItkImport
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 333,155 => (* P57 ImportItem (150): FromImportPlusList StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 150;
                (* line 638 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong ; 
                     
              | 334,151 => (* P58 FromImportPlusList (152): StkRwFROM IdentRef StkRwIMPORT StkIdent .*)
                DEC (yyStackPtr, 4); yyNonterminal := 152;
                (* line 642 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* InterfaceCt. *) ;
                       yySynAttribute . PaLong := 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                         ) ; 
                       Pop8 ( ) (* Replace the 2 Idents with an ItkFromImport. *) ; 
                       FM3ParsePass . Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+4] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+4] . Scan . Position . Column
                         ) ;
                     
              | 335,223 => (* P59 FromImportPlusList (152): FromImportPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 665 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaLong := yyAttributeStack^[yyStackPtr+1] . PaLong + 1L ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3ParsePass . FromImport
                         ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                         ) ; 
                       Pop4 ( ) (* Replace the Ident with an ItkFromImport. *) ;
                       FM3ParsePass . Push_LI6
                         ( Itk . ItkFromImport
                           (* Interface operands on left, then Decl ID items on Right. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position . Column
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Line
                         , yyAttributeStack^[yyStackPtr+3] . Scan . Position . Column
                         ) ;
                     
              | 336 => (* P60 Exports (118): StkRwEXPORTS ExportPlus .*)
                DEC (yyStackPtr, 2); yyNonterminal := 118;

              | 337,146 => (* P61 ExportPlus (153): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 708 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 338,147 => (* P62 ExportPlus (153): ExportPlus StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 713 of "FM3Parser.lalr" *)
                 EVAL FM3Extern . GetExternInterface
                              ( yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom , IsImport := FALSE ) ;
                     
              | 339,208 => (* P63 GenFormalList (135): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 135;
                (* line 721 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 340,148 => (* P64 GenActualList (127): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 727 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 341 => (* P65 OptConstType (155): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 342 => (* P66 OptConstType (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 738 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 343,156 => (* P67 ConstDeclGroupLt (156): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 747 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 344,258 => (* P68 ConstDeclGroup (158): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 345 => (* P69 ConstDeclList (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 755 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 346 => (* P70 ConstDeclList (157): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 761 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 347,194 => (* P71 ConstDeclPlus (159): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 766 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 348,193 => (* P72 ConstDeclPlus (159): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 771 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 349,192 => (* P73 ConstDeclId (161): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 789 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 350 => (* P74 ConstDecl (160): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 796 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3ParsePass . Push_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCIri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 351,197 => (* P75 TypeRelation (164): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 822 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 352,198 => (* P76 TypeRelation (164): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 824 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 353,189 => (* P77 TypeDeclGroupLt (165): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 835 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 354,260 => (* P78 TypeDeclGroup (167): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 355 => (* P79 TypeDeclList (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 843 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 356 => (* P80 TypeDeclList (166): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 849 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 357,199 => (* P81 TypeDeclPlus (168): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 854 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 358,196 => (* P82 TypeDeclPlus (168): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 168;
                (* line 859 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 359,195 => (* P83 TypeDeclId (170): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 875 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3ParsePass . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 360,261 => (* P84 TypeDecl (169): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 882 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3ParsePass . Push_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCIri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 361,200 => (* P85 RevelationRelation (171): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 902 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 362,201 => (* P86 RevelationRelation (171): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 904 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 363,188 => (* P87 RevelationGroupLt (172): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 915 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 364,264 => (* P88 RevelationGroup (174): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 918 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 365 => (* P89 RevelationList (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 923 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 366 => (* P90 RevelationList (173): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 929 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 367,203 => (* P91 RevelationPlus (175): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 934 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 368,202 => (* P92 RevelationPlus (175): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 939 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3ParsePass . Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 369,263 => (* P93 Revelation (176): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 955 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3ParsePass . Push_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 370,190 => (* P94 VarDeclGroupLt (177): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 982 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 371,266 => (* P95 VarDeclGroup (179): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 996 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 372 => (* P96 VarDeclList (178): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 178;
                (* line 1002 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                        (*Push_LIP_rip
                          ( Itk . ItkVarDeclListLt , 0 , FM3Scanner . Attribute . Position ) ;
                        *)
                      
              | 373 => (* P97 VarDeclList (178): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 1011 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 374,205 => (* P98 VarDeclPlus (180): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1024 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 375,204 => (* P99 VarDeclPlus (180): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 1029 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3ParsePass . Push_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 376,249 => (* P100 VarDecl (181): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1047 of "FM3Parser.lalr" *)
                 IF FM3ParsePass . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3ParsePass . Push_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3ParsePass . Push_LCIri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 377 => (* P101 VarDeclIds (182): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1075 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 378,247 => (* P102 OptDeclType (162): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 1087 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 379 => (* P103 OptDeclType (162): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 162;
                (* line 1091 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 380 => (* P104 OptDeclValue (183): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1095 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 381 => (* P105 OptDeclValue (183): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 183;
                (* line 1099 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                     
              | 382,228 => (* P106 Type (154): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 383,229 => (* P107 Type (154): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1108 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 384,230 => (* P108 Type (154): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 385,231 => (* P109 Type (154): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 386,232 => (* P110 Type (154): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 387,233 => (* P111 Type (154): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 388,234 => (* P112 Type (154): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 389,235 => (* P113 Type (154): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 390,236 => (* P114 Type (154): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 391,237 => (* P115 Type (154): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 392,238 => (* P116 Type (154): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 393,239 => (* P117 Type (154): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 394,240 => (* P118 Type (154): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 395,241 => (* P119 Type (154): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 396,242 => (* P120 Type (154): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 397,243 => (* P121 Type (154): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 398,244 => (* P122 Type (154): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 399,245 => (* P123 Type (154): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 400,161 => (* P124 Type (154): StkRwOBJECT StkRwEND .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;

              | 401,169 => (* P125 Type (154): StkRwUNTRACED StkRwOBJECT StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;

              | 402 => (* P126 FieldDeclList (200): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 200;
                (* line 1140 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP_rip
                          ( Itk . ItkFieldDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                      
              | 403,251 => (* P127 FieldDeclList (200): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 200;
                (* line 1145 of "FM3Parser.lalr" *)
                 FM3ParsePass . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 404,246 => (* P128 FieldDeclPlus (201): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 201;
                (* line 1154 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 405,250 => (* P129 FieldDeclPlus (201): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 201;
                (* line 1157 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 406,167 => (* P130 RecTypeLt (202): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 202;
                (* line 1169 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         yySynAttribute . PaRefany := LScopeRef 
                       END; 
                     
              | 407,184 => (* P131 Type (154): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1196 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         <* ASSERT FM3Scopes . PopDeclScope ( ) = LScopeRef *>  
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         FM3ParsePass . Push_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *) *> 
                       END; 
                     
              | 408,225 => (* P132 Type (154): StkRwPROCEDURE Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1215 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 409,257 => (* P133 Signature (203): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 203;
                (* line 1221 of "FM3Parser.lalr" *)
                 VAR LTok : Itk . TokTyp;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Has result type *) 
                         THEN LTok := Itk . ItkFuncSignatureLt ;
                         ELSE LTok := Itk . ItkProcSignatureLt ;
                         END (*IF*);
                         FM3ParsePass . Push_LCP_rp ( LTok,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END (*Block*) 
                     
              | 410,157 => (* P134 Formals (204): StkOpenParen StkCloseParen .*)
                DEC (yyStackPtr, 2); yyNonterminal := 204;
                (* line 1237 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := 0 ; 
                       FM3ParsePass . ScopeEmpty ( Skt . SkFormals ) ; 
                       PushUnnest ( Itk . ItkFormalsListEmpty )
                     
              | 411 => (* P135 FormalsLt (207): StkOpenParen .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1244 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         yySynAttribute . PaRefany := LScopeRef 
                       END ; 
                     
              | 412,185 => (* P136 Formals (204): FormalsLt FormalPlus OptSemicolon StkCloseParen .*)
                DEC (yyStackPtr, 4); yyNonterminal := 204;
                (* line 1261 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         <* ASSERT FM3Scopes . PopDeclScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* TODO: Save this scope somewhere, for use if there is a proc body. *) 
                (* FIXME^ different tokens for different formal modes. *)
                       END ;
                     
              | 413,226 => (* P137 FormalPlus (208): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 208;
                (* line 1278 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3ParsePass . Push_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 414,254 => (* P138 FormalPlus (208): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1288 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 415 => (* P139 FormalLt (210): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 210;
                (* line 1292 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 416,163 => (* P140 FormalLt (210): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1307 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 417,164 => (* P141 FormalLt (210): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1323 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 418,162 => (* P142 FormalLt (210): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1337 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 419,253 => (* P143 Formal (209): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 209;
                (* line 1354 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3ParsePass . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3ParsePass . Push_LCIri
                             ( Itk . ItkSkipLt
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , FM3Globals . NextSkipNo
                             ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3ParsePass . Push_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaUnnestCoord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 420 => (* P144 FormalIds (211): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1412 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 421,252 => (* P145 FormalType (212): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 212;
                (* line 1424 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 422 => (* P146 FormalType (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1433 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 423 => (* P147 FormalExpr (213): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 213;
                (* line 1441 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3ParsePass . Push_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 424 => (* P148 FormalExpr (213): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 213;
                (* line 1450 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 425,255 => (* P149 ResultType (205): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 205;
                (* line 1458 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       FM3ParsePass . Push_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 426 => (* P150 ResultType (205): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 205;
                (* line 1464 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaUnnestCoord := UnnestCoord ( ) ; 
                     
              | 427,186 => (* P151 Raises (206): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 206;
                (* line 1473 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       FM3ParsePass . Push_LCP_rp
                         ( Itk . ItkRaisesANY ,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 428,187 => (* P152 Raises (206): StkRwRAISES StkOpenBrace QualIdStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 206;
                (* line 1480 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 429 => (* P153 Raises (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;
                (* line 1485 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *);
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3ParsePass . Push_LP
                         ( Itk . ItkRaisesSetAbsent , FM3Scanner . Attribute . Position ); 
                     
              | 430,224 => (* P154 ProcDecl (215): StkRwPROCEDURE StkIdent Signature OptProcBody .*)
                DEC (yyStackPtr, 4); yyNonterminal := 215;
                (* line 1494 of "FM3Parser.lalr" *)
                 VAR LTokLt : Itk . TokTyp; 
                       BEGIN 
                         CASE FM3Units . UnitStackTopRef ^ . UntKind OF 
                         | Ukt . UkInterface 
                         , Ukt . UkGenInterface  
                         , Ukt . UkInstInterface  
                         => IF yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY 
                                  { " A procedure in an interface must not have a body (2.5.2)." }
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                );  
                
                            END (*IF*); 
                            LTokLt := Itk . ItkProcNoBodyLt ; 
                         | Ukt . UkModule  
                         , Ukt . UkGenModule  
                         , Ukt . UkInstModule  
                         => IF NOT yyAttributeStack^[yyStackPtr+4] . PaBool 
                            THEN 
                              FM3Messages . ErrorArr
                                ( ARRAY OF REFANY
                                    { " A procedure in a module must have a body (2.5)." } 
                                , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                                ); 
                            END (*IF*); 
                            LTokLt := Itk . ItkProcWBodyLt ; 
                (* TODO: Error recovery.  Insert or remove body. *) 
                         END (*CASE*);
                         FM3ParsePass . Push_LCIri
                           ( LTokLt,  yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord, yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 431,158 => (* P155 OptProcBody (214): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1530 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       yySynAttribute . PaConstructNo := FM3Base . AtomNull ; 
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                       FM3ParsePass . Push_LP ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 432,159 => (* P156 ProcBodyLt (216): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1537 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3ParsePass . Push_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef
                           := FM3Scopes . NewScopeRef 
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkProcBody 
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                (* TODO: check duplicates between signature scope and body scope. *) 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                (* TODO: Push signature scope onto lookup stack. *) 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                         yySynAttribute . PaRefany := LScopeRef ; 
                       END ; 
                     
              | 433,160 => (* P157 OptProcBody (214): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 214;
                (* line 1561 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . PaConstructNo (* Procedure Id *) := yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ;
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := NARROW ( yyAttributeStack^[yyStackPtr+1] . PaRefany , FM3Scopes . ScopeRefTyp ) ; 
                         FM3ParsePass . DeclScopeRtL2R ( LScopeRef ) ;
                         <* ASSERT FM3Scopes . PopDeclScope ( ) = LScopeRef *>
                         <* ASSERT FM3Scopes . PopLookupScope ( ) = LScopeRef *>
                         FM3ParsePass . Push_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         FM3ParsePass . Push_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         FM3ParsePass . Push_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                       END;
                     
              | 434,248 => (* P158 Expr (163): QualId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 435,172 => (* P159 Expr (163): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 436,173 => (* P160 Expr (163): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 437,174 => (* P161 Expr (163): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 438,175 => (* P162 Expr (163): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 439,176 => (* P163 Expr (163): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 440,177 => (* P164 Expr (163): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 441,178 => (* P165 Expr (163): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 442,179 => (* P166 Expr (163): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 443,180 => (* P167 Expr (163): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 444,181 => (* P168 Expr (163): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 445,182 => (* P169 Expr (163): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 446,183 => (* P170 Expr (163): Expr StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;

              | 447,259 => (* P171 BlockDecl (217): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1628 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 448,262 => (* P172 BlockDecl (217): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1632 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 449,270 => (* P173 BlockDecl (217): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1636 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 450,267 => (* P174 BlockDecl (217): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1640 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 451,268 => (* P175 BlockDecl (217): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1644 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 452,265 => (* P176 BlockDecl (217): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1648 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 453 => (* P177 BlockDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 1656 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP_rip
                         ( Itk . ItkBlockDeclListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                     
              | 454 => (* P178 BlockDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 1661 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 455,269 => (* P179 BlockDeclPlus (219): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1670 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 456,271 => (* P180 BlockDeclPlus (219): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 219;
                (* line 1675 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3ParsePass . Push_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 457 => (* P181 StmtList (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 1694 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LIP_rip
                         ( Itk . ItkStmtListLt , 0 , FM3Scanner . Attribute . Position ) ; 
                     
              | 458,275 => (* P182 StmtList (133): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;
                (* line 1699 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 459,276 => (* P183 StmtPlus (220): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1707 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 460,273 => (* P184 StmtPlus (220): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1710 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3ParsePass . Push_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 461,274 => (* P185 Stmt (221): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;

              | 462 => (* P186 AssignStmt (222): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1724 of "FM3Parser.lalr" *)
                 FM3ParsePass . Push_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . PaUnnestCoord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSUnnestCoord := WParsAttr . PaUnnestCoord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaUnnestCoord = ParsAttrNull . PaUnnestCoord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaUnnestCoord := yyPrereduceUnnestCoord; 
                   ELSE WParsAttr . PaUnnestCoord := yyRHSUnnestCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaUnnestCoord := UnnestCoord ( );
(*            PushUnnestStk (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               EmitSyntErrMsg ( );
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE AppendToLine ( FragText : TEXT ) =
   BEGIN
      Wr.PutText (yyErrMsgWrT , FragText);
      INC (yyMsgLineLen, Text.Length (FragText))
   END AppendToLine;

PROCEDURE QuoteAndFillOnLine ( FragText : TEXT ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF yyMsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND yyMsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent);
        yyMsgLineLen := FM3Messages.IndentLen;
      ELSIF yyMsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar (yyErrMsgWrT , ' ');
        INC ( yyMsgLineLen );
      END (*IF*);
      Wr.PutChar (yyErrMsgWrT , '\"');
      Wr.PutText (yyErrMsgWrT , FragText);
      Wr.PutText (yyErrMsgWrT , "\" ");
      INC (yyMsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine (TokenText);
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
     yyErrorPos := FM3Scanner.Attribute.Position;
      yyErrMsgWrT := TextWr . New ( );
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText (yyErrMsgWrT , "Illegal token: \"");
      Wr.PutText (yyErrMsgWrT , TokenText );
      Wr.PutText (yyErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( yyErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( yyErrMsgWrT, TokenText);  
         Wr.PutText ( yyErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( yyErrMsgWrT, ", expecting one of:");
         Wr.PutText ( yyErrMsgWrT, FM3Messages.NLIndent );
         yyMsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText (yyErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( yyErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

PROCEDURE EmitSyntErrMsg ( ) =
   VAR ErrorMsgText : TEXT;
   BEGIN 
      ErrorMsgText := TextWr.ToText (yyErrMsgWrT);
      FM3Messages.ErrorArr
        ( ARRAY OF REFANY { ErrorMsgText } , yyErrorPos );
      yyErrMsgWrT := NIL; 
   END EmitSyntErrMsg;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 89 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 92 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

