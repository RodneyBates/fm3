
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 259;
   yyTableMax               = 832;
   yyNTableMax              = 1036;
   yyFirstReadState         = 1;
   yyLastReadState          = 193;
   yyFirstReadTermState             = 194;
   yyLastReadTermState              = 291;
   yyLastReadNontermState           = 385;
   yyFirstReduceState               = 386;
   yyLastReduceState                = 649;
   yyStartState             = 1;
   yyStopState              = 386;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   1]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   2])
         , (*   8*) ADR (yyTComb [   3]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   5]) , (*  17*) ADR (yyTComb [   3])
         , (*  18*) ADR (yyTComb [   6]) , (*  19*) ADR (yyTComb [   7])
         , (*  20*) ADR (yyTComb [   4]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   8]) , (*  23*) ADR (yyTComb [   9])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   0])
         , (*  26*) ADR (yyTComb [   3]) , (*  27*) ADR (yyTComb [  10])
         , (*  28*) ADR (yyTComb [   1]) , (*  29*) ADR (yyTComb [  11])
         , (*  30*) ADR (yyTComb [   8]) , (*  31*) ADR (yyTComb [  64])
         , (*  32*) ADR (yyTComb [  13]) , (*  33*) ADR (yyTComb [   2])
         , (*  34*) ADR (yyTComb [  14]) , (*  35*) ADR (yyTComb [   9])
         , (*  36*) ADR (yyTComb [  68]) , (*  37*) ADR (yyTComb [  71])
         , (*  38*) ADR (yyTComb [  13]) , (*  39*) ADR (yyTComb [  16])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [ 101])
         , (*  44*) ADR (yyTComb [  15]) , (*  45*) ADR (yyTComb [ 113])
         , (*  46*) ADR (yyTComb [   5]) , (*  47*) ADR (yyTComb [  10])
         , (*  48*) ADR (yyTComb [  18]) , (*  49*) ADR (yyTComb [  18])
         , (*  50*) ADR (yyTComb [   3]) , (*  51*) ADR (yyTComb [ 114])
         , (*  52*) ADR (yyTComb [  21]) , (*  53*) ADR (yyTComb [ 118])
         , (*  54*) ADR (yyTComb [ 128]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [ 154]) , (*  59*) ADR (yyTComb [  22])
         , (*  60*) ADR (yyTComb [ 190]) , (*  61*) ADR (yyTComb [  21])
         , (*  62*) ADR (yyTComb [ 252]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 172]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 289]) , (*  67*) ADR (yyTComb [   0])
         , (*  68*) ADR (yyTComb [ 310]) , (*  69*) ADR (yyTComb [   0])
         , (*  70*) ADR (yyTComb [ 348]) , (*  71*) ADR (yyTComb [   0])
         , (*  72*) ADR (yyTComb [ 369]) , (*  73*) ADR (yyTComb [  42])
         , (*  74*) ADR (yyTComb [ 199]) , (*  75*) ADR (yyTComb [ 444])
         , (*  76*) ADR (yyTComb [  23]) , (*  77*) ADR (yyTComb [   0])
         , (*  78*) ADR (yyTComb [ 482]) , (*  79*) ADR (yyTComb [ 531])
         , (*  80*) ADR (yyTComb [ 591]) , (*  81*) ADR (yyTComb [  64])
         , (*  82*) ADR (yyTComb [   0]) , (*  83*) ADR (yyTComb [  68])
         , (*  84*) ADR (yyTComb [  28]) , (*  85*) ADR (yyTComb [  23])
         , (*  86*) ADR (yyTComb [ 629]) , (*  87*) ADR (yyTComb [   4])
         , (*  88*) ADR (yyTComb [  91]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [   1]) , (*  91*) ADR (yyTComb [   2])
         , (*  92*) ADR (yyTComb [   5]) , (*  93*) ADR (yyTComb [ 425])
         , (*  94*) ADR (yyTComb [  11]) , (*  95*) ADR (yyTComb [  12])
         , (*  96*) ADR (yyTComb [   6]) , (*  97*) ADR (yyTComb [  99])
         , (*  98*) ADR (yyTComb [ 102]) , (*  99*) ADR (yyTComb [   0])
         , (* 100*) ADR (yyTComb [  72]) , (* 101*) ADR (yyTComb [  80])
         , (* 102*) ADR (yyTComb [ 112]) , (* 103*) ADR (yyTComb [ 153])
         , (* 104*) ADR (yyTComb [  56]) , (* 105*) ADR (yyTComb [ 240])
         , (* 106*) ADR (yyTComb [ 134]) , (* 107*) ADR (yyTComb [   0])
         , (* 108*) ADR (yyTComb [   0]) , (* 109*) ADR (yyTComb [ 327])
         , (* 110*) ADR (yyTComb [   0]) , (* 111*) ADR (yyTComb [ 426])
         , (* 112*) ADR (yyTComb [ 155]) , (* 113*) ADR (yyTComb [  78])
         , (* 114*) ADR (yyTComb [  83]) , (* 115*) ADR (yyTComb [ 127])
         , (* 116*) ADR (yyTComb [  67]) , (* 117*) ADR (yyTComb [ 167])
         , (* 118*) ADR (yyTComb [   0]) , (* 119*) ADR (yyTComb [   7])
         , (* 120*) ADR (yyTComb [ 145]) , (* 121*) ADR (yyTComb [ 110])
         , (* 122*) ADR (yyTComb [   5]) , (* 123*) ADR (yyTComb [ 133])
         , (* 124*) ADR (yyTComb [   0]) , (* 125*) ADR (yyTComb [   8])
         , (* 126*) ADR (yyTComb [ 142]) , (* 127*) ADR (yyTComb [   0])
         , (* 128*) ADR (yyTComb [ 146]) , (* 129*) ADR (yyTComb [ 494])
         , (* 130*) ADR (yyTComb [ 674]) , (* 131*) ADR (yyTComb [ 147])
         , (* 132*) ADR (yyTComb [ 149]) , (* 133*) ADR (yyTComb [   0])
         , (* 134*) ADR (yyTComb [ 152]) , (* 135*) ADR (yyTComb [ 535])
         , (* 136*) ADR (yyTComb [ 151]) , (* 137*) ADR (yyTComb [ 528])
         , (* 138*) ADR (yyTComb [ 675]) , (* 139*) ADR (yyTComb [ 161])
         , (* 140*) ADR (yyTComb [ 168]) , (* 141*) ADR (yyTComb [ 677])
         , (* 142*) ADR (yyTComb [ 710]) , (* 143*) ADR (yyTComb [ 170])
         , (* 144*) ADR (yyTComb [ 173]) , (* 145*) ADR (yyTComb [ 175])
         , (* 146*) ADR (yyTComb [ 179]) , (* 147*) ADR (yyTComb [ 364])
         , (* 148*) ADR (yyTComb [ 154]) , (* 149*) ADR (yyTComb [ 184])
         , (* 150*) ADR (yyTComb [   0]) , (* 151*) ADR (yyTComb [   1])
         , (* 152*) ADR (yyTComb [   0]) , (* 153*) ADR (yyTComb [  10])
         , (* 154*) ADR (yyTComb [ 177]) , (* 155*) ADR (yyTComb [   7])
         , (* 156*) ADR (yyTComb [ 243]) , (* 157*) ADR (yyTComb [  17])
         , (* 158*) ADR (yyTComb [  41]) , (* 159*) ADR (yyTComb [ 309])
         , (* 160*) ADR (yyTComb [   0]) , (* 161*) ADR (yyTComb [ 218])
         , (* 162*) ADR (yyTComb [ 157]) , (* 163*) ADR (yyTComb [ 159])
         , (* 164*) ADR (yyTComb [ 186]) , (* 165*) ADR (yyTComb [  36])
         , (* 166*) ADR (yyTComb [ 168]) , (* 167*) ADR (yyTComb [ 198])
         , (* 168*) ADR (yyTComb [ 200]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [ 586]) , (* 171*) ADR (yyTComb [ 595])
         , (* 172*) ADR (yyTComb [   2]) , (* 173*) ADR (yyTComb [  37])
         , (* 174*) ADR (yyTComb [  39]) , (* 175*) ADR (yyTComb [ 174])
         , (* 176*) ADR (yyTComb [ 218]) , (* 177*) ADR (yyTComb [ 217])
         , (* 178*) ADR (yyTComb [   0]) , (* 179*) ADR (yyTComb [ 220])
         , (* 180*) ADR (yyTComb [ 246]) , (* 181*) ADR (yyTComb [ 221])
         , (* 182*) ADR (yyTComb [ 725]) , (* 183*) ADR (yyTComb [  35])
         , (* 184*) ADR (yyTComb [  42]) , (* 185*) ADR (yyTComb [ 197])
         , (* 186*) ADR (yyTComb [ 240]) , (* 187*) ADR (yyTComb [ 244])
         , (* 188*) ADR (yyTComb [ 249]) , (* 189*) ADR (yyTComb [ 259])
         , (* 190*) ADR (yyTComb [ 721]) , (* 191*) ADR (yyTComb [ 320])
         , (* 192*) ADR (yyTComb [ 232]) , (* 193*) ADR (yyTComb [ 281])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 110]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 108]) , (*  37*) ADR (yyNComb [ 110])
         , (*  38*) ADR (yyNComb [ 108]) , (*  39*) ADR (yyNComb [ 110])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 159])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 113]) , (*  47*) ADR (yyNComb [ 108])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 114])
         , (*  50*) ADR (yyNComb [ 186]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 112])
         , (*  54*) ADR (yyNComb [ 108]) , (*  55*) ADR (yyNComb [ 162])
         , (*  56*) ADR (yyNComb [ 142]) , (*  57*) ADR (yyNComb [ 175])
         , (*  58*) ADR (yyNComb [ 108]) , (*  59*) ADR (yyNComb [ 108])
         , (*  60*) ADR (yyNComb [ 111]) , (*  61*) ADR (yyNComb [ 222])
         , (*  62*) ADR (yyNComb [ 108]) , (*  63*) ADR (yyNComb [ 240])
         , (*  64*) ADR (yyNComb [ 108]) , (*  65*) ADR (yyNComb [ 187])
         , (*  66*) ADR (yyNComb [ 108]) , (*  67*) ADR (yyNComb [ 258])
         , (*  68*) ADR (yyNComb [ 124]) , (*  69*) ADR (yyNComb [ 269])
         , (*  70*) ADR (yyNComb [ 127]) , (*  71*) ADR (yyNComb [ 194])
         , (*  72*) ADR (yyNComb [ 126]) , (*  73*) ADR (yyNComb [ 246])
         , (*  74*) ADR (yyNComb [ 172]) , (*  75*) ADR (yyNComb [ 123])
         , (*  76*) ADR (yyNComb [ 108]) , (*  77*) ADR (yyNComb [ 283])
         , (*  78*) ADR (yyNComb [ 108]) , (*  79*) ADR (yyNComb [ 127])
         , (*  80*) ADR (yyNComb [ 126]) , (*  81*) ADR (yyNComb [ 108])
         , (*  82*) ADR (yyNComb [ 300]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 318]) , (*  85*) ADR (yyNComb [ 108])
         , (*  86*) ADR (yyNComb [ 124]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 139])
         , (*  90*) ADR (yyNComb [ 113]) , (*  91*) ADR (yyNComb [ 336])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 386]) , (*  95*) ADR (yyNComb [ 115])
         , (*  96*) ADR (yyNComb [ 122]) , (*  97*) ADR (yyNComb [ 117])
         , (*  98*) ADR (yyNComb [ 126]) , (*  99*) ADR (yyNComb [ 161])
         , (* 100*) ADR (yyNComb [ 169]) , (* 101*) ADR (yyNComb [ 108])
         , (* 102*) ADR (yyNComb [ 118]) , (* 103*) ADR (yyNComb [ 111])
         , (* 104*) ADR (yyNComb [ 225]) , (* 105*) ADR (yyNComb [ 108])
         , (* 106*) ADR (yyNComb [ 145]) , (* 107*) ADR (yyNComb [ 433])
         , (* 108*) ADR (yyNComb [ 227]) , (* 109*) ADR (yyNComb [ 153])
         , (* 110*) ADR (yyNComb [ 484]) , (* 111*) ADR (yyNComb [ 183])
         , (* 112*) ADR (yyNComb [ 108]) , (* 113*) ADR (yyNComb [ 126])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 108])
         , (* 116*) ADR (yyNComb [ 111]) , (* 117*) ADR (yyNComb [ 197])
         , (* 118*) ADR (yyNComb [ 361]) , (* 119*) ADR (yyNComb [ 111])
         , (* 120*) ADR (yyNComb [ 229]) , (* 121*) ADR (yyNComb [ 120])
         , (* 122*) ADR (yyNComb [ 369]) , (* 123*) ADR (yyNComb [ 108])
         , (* 124*) ADR (yyNComb [ 487]) , (* 125*) ADR (yyNComb [ 108])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 500])
         , (* 128*) ADR (yyNComb [ 108]) , (* 129*) ADR (yyNComb [ 282])
         , (* 130*) ADR (yyNComb [ 114]) , (* 131*) ADR (yyNComb [ 108])
         , (* 132*) ADR (yyNComb [ 115]) , (* 133*) ADR (yyNComb [ 565])
         , (* 134*) ADR (yyNComb [ 108]) , (* 135*) ADR (yyNComb [ 437])
         , (* 136*) ADR (yyNComb [ 110]) , (* 137*) ADR (yyNComb [ 616])
         , (* 138*) ADR (yyNComb [ 319]) , (* 139*) ADR (yyNComb [ 108])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 507])
         , (* 142*) ADR (yyNComb [ 412]) , (* 143*) ADR (yyNComb [ 108])
         , (* 144*) ADR (yyNComb [ 108]) , (* 145*) ADR (yyNComb [ 245])
         , (* 146*) ADR (yyNComb [ 220]) , (* 147*) ADR (yyNComb [ 391])
         , (* 148*) ADR (yyNComb [ 108]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 666]) , (* 151*) ADR (yyNComb [ 108])
         , (* 152*) ADR (yyNComb [ 635]) , (* 153*) ADR (yyNComb [ 108])
         , (* 154*) ADR (yyNComb [ 108]) , (* 155*) ADR (yyNComb [ 692])
         , (* 156*) ADR (yyNComb [ 121]) , (* 157*) ADR (yyNComb [ 705])
         , (* 158*) ADR (yyNComb [ 739]) , (* 159*) ADR (yyNComb [ 108])
         , (* 160*) ADR (yyNComb [ 114]) , (* 161*) ADR (yyNComb [ 108])
         , (* 162*) ADR (yyNComb [ 140]) , (* 163*) ADR (yyNComb [ 108])
         , (* 164*) ADR (yyNComb [ 115]) , (* 165*) ADR (yyNComb [ 108])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 108])
         , (* 168*) ADR (yyNComb [ 108]) , (* 169*) ADR (yyNComb [ 116])
         , (* 170*) ADR (yyNComb [ 108]) , (* 171*) ADR (yyNComb [ 800])
         , (* 172*) ADR (yyNComb [ 108]) , (* 173*) ADR (yyNComb [ 760])
         , (* 174*) ADR (yyNComb [ 108]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 108]) , (* 177*) ADR (yyNComb [ 108])
         , (* 178*) ADR (yyNComb [ 110]) , (* 179*) ADR (yyNComb [ 153])
         , (* 180*) ADR (yyNComb [ 108]) , (* 181*) ADR (yyNComb [ 108])
         , (* 182*) ADR (yyNComb [ 307]) , (* 183*) ADR (yyNComb [ 885])
         , (* 184*) ADR (yyNComb [ 108]) , (* 185*) ADR (yyNComb [ 108])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 108])
         , (* 188*) ADR (yyNComb [ 304]) , (* 189*) ADR (yyNComb [ 108])
         , (* 190*) ADR (yyNComb [ 331]) , (* 191*) ADR (yyNComb [ 520])
         , (* 192*) ADR (yyNComb [ 108]) , (* 193*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  182 , (*  11*)  183
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   18 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)    0 , (*  23*)    0
         , (*  24*)  164 , (*  25*)  179 , (*  26*)  180 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)    0 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)    0
         , (*  36*)   37 , (*  37*)    0 , (*  38*)    0 , (*  39*)    0
         , (*  40*)  137 , (*  41*)  137 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)   49 , (*  47*)    0
         , (*  48*)    0 , (*  49*)    0 , (*  50*)  104 , (*  51*)    0
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)  155
         , (*  56*)   73 , (*  57*)  155 , (*  58*)   62 , (*  59*)    0
         , (*  60*)    0 , (*  61*)   84 , (*  62*)    0 , (*  63*)  155
         , (*  64*)   85 , (*  65*)  155 , (*  66*)   78 , (*  67*)  155
         , (*  68*)   86 , (*  69*)   73 , (*  70*)   79 , (*  71*)   73
         , (*  72*)   80 , (*  73*)   74 , (*  74*)    0 , (*  75*)   60
         , (*  76*)    0 , (*  77*)  155 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)  155 , (*  83*)    0
         , (*  84*)  155 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)   97 , (*  89*)  122 , (*  90*)    0 , (*  91*)  155
         , (*  92*)    0 , (*  93*)    0 , (*  94*)   50 , (*  95*)    0
         , (*  96*)   98 , (*  97*)  156 , (*  98*)  122 , (*  99*)  145
         , (* 100*)  103 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)  137
         , (* 108*)  145 , (* 109*)    0 , (* 110*)  137 , (* 111*)    0
         , (* 112*)    0 , (* 113*)  116 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)  155 , (* 119*)    0
         , (* 120*)    0 , (* 121*)  156 , (* 122*)  104 , (* 123*)    0
         , (* 124*)  155 , (* 125*)    0 , (* 126*)    0 , (* 127*)  155
         , (* 128*)    0 , (* 129*)  130 , (* 130*)    0 , (* 131*)    0
         , (* 132*)    0 , (* 133*)  137 , (* 134*)    0 , (* 135*)  138
         , (* 136*)    0 , (* 137*)  116 , (* 138*)  116 , (* 139*)    0
         , (* 140*)    0 , (* 141*)  104 , (* 142*)  104 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)    0
         , (* 148*)    0 , (* 149*)    0 , (* 150*)  171 , (* 151*)    0
         , (* 152*)  173 , (* 153*)    0 , (* 154*)    0 , (* 155*)   73
         , (* 156*)    0 , (* 157*)  155 , (* 158*)  171 , (* 159*)    0
         , (* 160*)    0 , (* 161*)    0 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)    0 , (* 169*)  190 , (* 170*)  191 , (* 171*)    0
         , (* 172*)    0 , (* 173*)  155 , (* 174*)    0 , (* 175*)    0
         , (* 176*)    0 , (* 177*)    0 , (* 178*)  188 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)   31
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)  147
         , (* 192*)    0 , (* 193*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  386} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  15,   16}
         , (*  10*) yyTCombType { 151,  152} , (*  11*) yyTCombType { 172,  173}
         , (*  12*) yyTCombType {  90,   91} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {  11,  401} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  11,  401}
         , (*  20*) yyTCombType {  28,   29} , (*  21*) yyTCombType {  33,   34}
         , (*  22*) yyTCombType {  50,  516} , (*  23*) yyTCombType {  87,  259}
         , (*  24*) yyTCombType { 122,  413} , (*  25*) yyTCombType {  96,  523}
         , (*  26*) yyTCombType { 119,  529} , (*  27*) yyTCombType { 125,  269}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 153,  285}
         , (*  30*) yyTCombType {  13,  199} , (*  31*) yyTCombType {  95,  522}
         , (*  32*) yyTCombType {   1,  412} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  89,  413}
         , (*  36*) yyTCombType { 157,  413} , (*  37*) yyTCombType {   1,  412}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  90,  536} , (*  41*) yyTCombType {  91,  537}
         , (*  42*) yyTCombType {  89,  413} , (*  43*) yyTCombType {  11,  401}
         , (*  44*) yyTCombType {  92,  260} , (*  45*) yyTCombType { 155,   56}
         , (*  46*) yyTCombType {  94,  516} , (*  47*) yyTCombType {  95,   96}
         , (*  48*) yyTCombType {  96,  523} , (*  49*) yyTCombType { 119,  120}
         , (*  50*) yyTCombType { 158,  641} , (*  51*) yyTCombType {  11,  401}
         , (*  52*) yyTCombType {  42,  219} , (*  53*) yyTCombType {  94,  516}
         , (*  54*) yyTCombType {  95,  522} , (*  55*) yyTCombType { 165,  166}
         , (*  56*) yyTCombType { 173,  644} , (*  57*) yyTCombType {  11,  401}
         , (*  58*) yyTCombType { 174,  175} , (*  59*) yyTCombType {   1,  196}
         , (*  60*) yyTCombType { 158,  641} , (*  61*) yyTCombType { 184,  185}
         , (*  62*) yyTCombType { 183,   12} , (*  63*) yyTCombType {  11,  401}
         , (*  64*) yyTCombType {  85,   65} , (*  65*) yyTCombType { 183,   14}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  15,  422}
         , (*  68*) yyTCombType {   9,   23} , (*  69*) yyTCombType {  17,  201}
         , (*  70*) yyTCombType {  20,  203} , (*  71*) yyTCombType {  21,   22}
         , (*  72*) yyTCombType {  15,  422} , (*  73*) yyTCombType {  26,  205}
         , (*  74*) yyTCombType {  17,   18} , (*  75*) yyTCombType {  30,  207}
         , (*  76*) yyTCombType {  35,  213} , (*  77*) yyTCombType {  36,  453}
         , (*  78*) yyTCombType {  31,  208} , (*  79*) yyTCombType {  38,  215}
         , (*  80*) yyTCombType {  37,  454} , (*  81*) yyTCombType {  46,  510}
         , (*  82*) yyTCombType {  36,  453} , (*  83*) yyTCombType {  31,  640}
         , (*  84*) yyTCombType {  39,  487} , (*  85*) yyTCombType {  37,  454}
         , (*  86*) yyTCombType {  47,  223} , (*  87*) yyTCombType {  36,  453}
         , (*  88*) yyTCombType {  39,   40} , (*  89*) yyTCombType {  48,   49}
         , (*  90*) yyTCombType {  37,  454} , (*  91*) yyTCombType {  61,  599}
         , (*  92*) yyTCombType {  61,  599} , (*  93*) yyTCombType {  85,  258}
         , (*  94*) yyTCombType {  48,  511} , (*  95*) yyTCombType {   3,  194}
         , (*  96*) yyTCombType {   4,  195} , (*  97*) yyTCombType {   7,  197}
         , (*  98*) yyTCombType {   8,  198} , (*  99*) yyTCombType {  12,   13}
         , (* 100*) yyTCombType {  16,  200} , (* 101*) yyTCombType {  18,   15}
         , (* 102*) yyTCombType {  19,  202} , (* 103*) yyTCombType {  22,  204}
         , (* 104*) yyTCombType {  23,   24} , (* 105*) yyTCombType {  27,  206}
         , (* 106*) yyTCombType {  29,   30} , (* 107*) yyTCombType {  31,   32}
         , (* 108*) yyTCombType {  32,  209} , (* 109*) yyTCombType {  34,   35}
         , (* 110*) yyTCombType {  44,  221} , (* 111*) yyTCombType {  36,  453}
         , (* 112*) yyTCombType {  43,  444} , (* 113*) yyTCombType {  49,  222}
         , (* 114*) yyTCombType {  37,  454} , (* 115*) yyTCombType {  31,  210}
         , (* 116*) yyTCombType {  52,  225} , (* 117*) yyTCombType {  59,  228}
         , (* 118*) yyTCombType {  76,  254} , (* 119*) yyTCombType {  36,  453}
         , (* 120*) yyTCombType {  43,  444} , (* 121*) yyTCombType {  31,  211}
         , (* 122*) yyTCombType {  37,  454} , (* 123*) yyTCombType {  84,   62}
         , (* 124*) yyTCombType {  45,  540} , (* 125*) yyTCombType {  36,  453}
         , (* 126*) yyTCombType {  88,  414} , (* 127*) yyTCombType {  31,  212}
         , (* 128*) yyTCombType {  37,  454} , (* 129*) yyTCombType {  73,  226}
         , (* 130*) yyTCombType {  73,  227} , (* 131*) yyTCombType {  36,  453}
         , (* 132*) yyTCombType {  45,  490} , (* 133*) yyTCombType {  51,  485}
         , (* 134*) yyTCombType {  37,  454} , (* 135*) yyTCombType {  81,   82}
         , (* 136*) yyTCombType {  43,  444} , (* 137*) yyTCombType {  53,  487}
         , (* 138*) yyTCombType {  83,  257} , (* 139*) yyTCombType {  83,   84}
         , (* 140*) yyTCombType {  43,  444} , (* 141*) yyTCombType {  97,  414}
         , (* 142*) yyTCombType { 100,  549} , (* 143*) yyTCombType {  43,  444}
         , (* 144*) yyTCombType {  98,  413} , (* 145*) yyTCombType {  81,  255}
         , (* 146*) yyTCombType {  43,  444} , (* 147*) yyTCombType {  54,  489}
         , (* 148*) yyTCombType {  45,  490} , (* 149*) yyTCombType {  51,  485}
         , (* 150*) yyTCombType { 101,  265} , (* 151*) yyTCombType { 104,  224}
         , (* 152*) yyTCombType {  45,  540} , (* 153*) yyTCombType {  53,  487}
         , (* 154*) yyTCombType { 113,  440} , (* 155*) yyTCombType {  45,  490}
         , (* 156*) yyTCombType {  51,  485} , (* 157*) yyTCombType {  88,   89}
         , (* 158*) yyTCombType {  45,  490} , (* 159*) yyTCombType { 114,  267}
         , (* 160*) yyTCombType {  53,  487} , (* 161*) yyTCombType { 112,  266}
         , (* 162*) yyTCombType { 116,   43} , (* 163*) yyTCombType {  54,  489}
         , (* 164*) yyTCombType { 120,  530} , (* 165*) yyTCombType {  97,   98}
         , (* 166*) yyTCombType {  37,  214} , (* 167*) yyTCombType {  43,  444}
         , (* 168*) yyTCombType {  43,   44} , (* 169*) yyTCombType {  43,  444}
         , (* 170*) yyTCombType {  54,  489} , (* 171*) yyTCombType {  43,  444}
         , (* 172*) yyTCombType {  43,  444} , (* 173*) yyTCombType {  58,  433}
         , (* 174*) yyTCombType {  43,  444} , (* 175*) yyTCombType {  43,  444}
         , (* 176*) yyTCombType { 121,  122} , (* 177*) yyTCombType {  43,  444}
         , (* 178*) yyTCombType { 102,  103} , (* 179*) yyTCombType {  45,  490}
         , (* 180*) yyTCombType {  51,  485} , (* 181*) yyTCombType {  45,  490}
         , (* 182*) yyTCombType { 102,  414} , (* 183*) yyTCombType {  45,  490}
         , (* 184*) yyTCombType {  53,  487} , (* 185*) yyTCombType {  51,   52}
         , (* 186*) yyTCombType {  51,  485} , (* 187*) yyTCombType {  45,  490}
         , (* 188*) yyTCombType {  51,  485} , (* 189*) yyTCombType {  58,  433}
         , (* 190*) yyTCombType {  53,   40} , (* 191*) yyTCombType {  64,  573}
         , (* 192*) yyTCombType {  53,  487} , (* 193*) yyTCombType {  58,  433}
         , (* 194*) yyTCombType {  54,  489} , (* 195*) yyTCombType {  60,  592}
         , (* 196*) yyTCombType {  58,  433} , (* 197*) yyTCombType {  98,  261}
         , (* 198*) yyTCombType { 115,  116} , (* 199*) yyTCombType { 103,  262}
         , (* 200*) yyTCombType { 106,  560} , (* 201*) yyTCombType { 123,  124}
         , (* 202*) yyTCombType {  54,   55} , (* 203*) yyTCombType { 115,  441}
         , (* 204*) yyTCombType { 106,  560} , (* 205*) yyTCombType {  60,  592}
         , (* 206*) yyTCombType { 106,  107} , (* 207*) yyTCombType {  64,  573}
         , (* 208*) yyTCombType { 106,  560} , (* 209*) yyTCombType {  60,  592}
         , (* 210*) yyTCombType { 126,  127} , (* 211*) yyTCombType {  64,  573}
         , (* 212*) yyTCombType { 128,  270} , (* 213*) yyTCombType { 131,  272}
         , (* 214*) yyTCombType {  64,  573} , (* 215*) yyTCombType { 103,  263}
         , (* 216*) yyTCombType { 103,  264} , (* 217*) yyTCombType { 132,  273}
         , (* 218*) yyTCombType { 134,  275} , (* 219*) yyTCombType { 136,  276}
         , (* 220*) yyTCombType {  58,  433} , (* 221*) yyTCombType {  60,  592}
         , (* 222*) yyTCombType { 132,  274} , (* 223*) yyTCombType { 103,  413}
         , (* 224*) yyTCombType { 136,  277} , (* 225*) yyTCombType {  60,  592}
         , (* 226*) yyTCombType {  60,  592} , (* 227*) yyTCombType { 139,  278}
         , (* 228*) yyTCombType {  58,  433} , (* 229*) yyTCombType {  60,  592}
         , (* 230*) yyTCombType { 112,  113} , (* 231*) yyTCombType {  60,  592}
         , (* 232*) yyTCombType {  60,  592} , (* 233*) yyTCombType { 117,  562}
         , (* 234*) yyTCombType { 140,  279} , (* 235*) yyTCombType {  58,  433}
         , (* 236*) yyTCombType { 143,  280} , (* 237*) yyTCombType { 117,  562}
         , (* 238*) yyTCombType {  64,  573} , (* 239*) yyTCombType { 144,  281}
         , (* 240*) yyTCombType { 120,  268} , (* 241*) yyTCombType { 117,  118}
         , (* 242*) yyTCombType {  64,  573} , (* 243*) yyTCombType {  64,  573}
         , (* 244*) yyTCombType { 145,  100} , (* 245*) yyTCombType { 146,  282}
         , (* 246*) yyTCombType {  64,  573} , (* 247*) yyTCombType { 146,  283}
         , (* 248*) yyTCombType { 103,  553} , (* 249*) yyTCombType { 148,  149}
         , (* 250*) yyTCombType { 149,  284} , (* 251*) yyTCombType { 154,  155}
         , (* 252*) yyTCombType { 162,  286} , (* 253*) yyTCombType {  64,  573}
         , (* 254*) yyTCombType { 163,  164} , (* 255*) yyTCombType { 164,   25}
         , (* 256*) yyTCombType {  60,  592} , (* 257*) yyTCombType {  62,  433}
         , (* 258*) yyTCombType {  60,  592} , (* 259*) yyTCombType {  60,   61}
         , (* 260*) yyTCombType {  60,  592} , (* 261*) yyTCombType {  60,  592}
         , (* 262*) yyTCombType { 156,  414} , (* 263*) yyTCombType { 166,  167}
         , (* 264*) yyTCombType {  60,  592} , (* 265*) yyTCombType { 167,  287}
         , (* 266*) yyTCombType { 168,  169} , (* 267*) yyTCombType {  62,  433}
         , (* 268*) yyTCombType {  74,   57} , (* 269*) yyTCombType { 175,  176}
         , (* 270*) yyTCombType {  60,   77} , (* 271*) yyTCombType {  60,  592}
         , (* 272*) yyTCombType {  60,  592} , (* 273*) yyTCombType {  60,  592}
         , (* 274*) yyTCombType {  60,  592} , (* 275*) yyTCombType {  60,  592}
         , (* 276*) yyTCombType {  60,  592} , (* 277*) yyTCombType {  60,  592}
         , (* 278*) yyTCombType {  60,  592} , (* 279*) yyTCombType {  60,  592}
         , (* 280*) yyTCombType {  60,  592} , (* 281*) yyTCombType {  60,  592}
         , (* 282*) yyTCombType {  60,  256} , (* 283*) yyTCombType {  62,  433}
         , (* 284*) yyTCombType { 161,  429} , (* 285*) yyTCombType { 176,  288}
         , (* 286*) yyTCombType { 177,  395} , (* 287*) yyTCombType { 181,  182}
         , (* 288*) yyTCombType {  62,  433} , (* 289*) yyTCombType { 161,  162}
         , (* 290*) yyTCombType { 179,  439} , (* 291*) yyTCombType { 179,  439}
         , (* 292*) yyTCombType { 185,  186} , (* 293*) yyTCombType {  62,  433}
         , (* 294*) yyTCombType {  74,   58} , (* 295*) yyTCombType {  74,  229}
         , (* 296*) yyTCombType {  74,  230} , (* 297*) yyTCombType {  74,  231}
         , (* 298*) yyTCombType {  74,  232} , (* 299*) yyTCombType {  74,  233}
         , (* 300*) yyTCombType {  74,  234} , (* 301*) yyTCombType {  74,  235}
         , (* 302*) yyTCombType {  74,  236} , (* 303*) yyTCombType {  74,  237}
         , (* 304*) yyTCombType {  74,  238} , (* 305*) yyTCombType {  74,  239}
         , (* 306*) yyTCombType { 105,  558} , (* 307*) yyTCombType { 186,  290}
         , (* 308*) yyTCombType {  66,  575} , (* 309*) yyTCombType { 156,  157}
         , (* 310*) yyTCombType { 105,  558} , (* 311*) yyTCombType { 105,   52}
         , (* 312*) yyTCombType { 105,  558} , (* 313*) yyTCombType { 187,  396}
         , (* 314*) yyTCombType { 105,  558} , (* 315*) yyTCombType {  68,  578}
         , (* 316*) yyTCombType { 180,  289} , (* 317*) yyTCombType { 180,   27}
         , (* 318*) yyTCombType { 188,  179} , (* 319*) yyTCombType {  62,   59}
         , (* 320*) yyTCombType {  62,  433} , (* 321*) yyTCombType {  62,  433}
         , (* 322*) yyTCombType {  62,  433} , (* 323*) yyTCombType {  62,  433}
         , (* 324*) yyTCombType {  66,  575} , (* 325*) yyTCombType { 189,  190}
         , (* 326*) yyTCombType {  62,   63} , (* 327*) yyTCombType { 192,  193}
         , (* 328*) yyTCombType {  66,  575} , (* 329*) yyTCombType {  68,  578}
         , (* 330*) yyTCombType {  66,  575} , (* 331*) yyTCombType {  66,  575}
         , (* 332*) yyTCombType {  62,  433} , (* 333*) yyTCombType { 159,  160}
         , (* 334*) yyTCombType {  62,  433} , (* 335*) yyTCombType {  62,  433}
         , (* 336*) yyTCombType {  62,  433} , (* 337*) yyTCombType {  62,  433}
         , (* 338*) yyTCombType {  62,  433} , (* 339*) yyTCombType {  62,  433}
         , (* 340*) yyTCombType {  62,  433} , (* 341*) yyTCombType {  62,  433}
         , (* 342*) yyTCombType {  62,  433} , (* 343*) yyTCombType {  62,  433}
         , (* 344*) yyTCombType {  62,  433} , (* 345*) yyTCombType {  68,  578}
         , (* 346*) yyTCombType { 109,  564} , (* 347*) yyTCombType { 191,   12}
         , (* 348*) yyTCombType { 193,  291} , (* 349*) yyTCombType {  68,  578}
         , (* 350*) yyTCombType { 191,   14} , (* 351*) yyTCombType {  68,  578}
         , (* 352*) yyTCombType {  68,  578} , (* 353*) yyTCombType {  70,  581}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  66,  575}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {  66,  575}
         , (* 360*) yyTCombType {  66,  575} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType { 109,  564} , (* 363*) yyTCombType {  66,  575}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {  70,  581}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType { 109,  564}
         , (* 370*) yyTCombType {  66,  575} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType { 109,  564} , (* 373*) yyTCombType { 147,  632}
         , (* 374*) yyTCombType {  72,  583} , (* 375*) yyTCombType { 159,  428}
         , (* 376*) yyTCombType {  68,  578} , (* 377*) yyTCombType { 159,  163}
         , (* 378*) yyTCombType { 147,  632} , (* 379*) yyTCombType {  70,  581}
         , (* 380*) yyTCombType {  68,  578} , (* 381*) yyTCombType {  68,  578}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {  70,  581}
         , (* 384*) yyTCombType {  68,  578} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {  70,  581}
         , (* 388*) yyTCombType {  72,  583} , (* 389*) yyTCombType {  70,  581}
         , (* 390*) yyTCombType {  70,  581} , (* 391*) yyTCombType {  68,  578}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType { 109,  564}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType { 109,  564}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType { 109,  564}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType { 109,  110}
         , (* 400*) yyTCombType {  72,  583} , (* 401*) yyTCombType { 109,  564}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {  72,  583} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType { 147,  632}
         , (* 408*) yyTCombType {  72,  583} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {  72,  583} , (* 411*) yyTCombType {  72,  583}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType {   0,    0}
         , (* 414*) yyTCombType {  70,  581} , (* 415*) yyTCombType { 147,  632}
         , (* 416*) yyTCombType {  70,  581} , (* 417*) yyTCombType {   0,    0}
         , (* 418*) yyTCombType {  70,  581} , (* 419*) yyTCombType {  70,  581}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType { 147,  632}
         , (* 422*) yyTCombType {  70,  581} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {   0,    0}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType { 147,  632}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType {  70,  581}
         , (* 430*) yyTCombType {  70,  581} , (* 431*) yyTCombType {  70,  581}
         , (* 432*) yyTCombType {  70,  581} , (* 433*) yyTCombType {  70,  581}
         , (* 434*) yyTCombType {  70,  581} , (* 435*) yyTCombType {  72,  583}
         , (* 436*) yyTCombType {  93,  541} , (* 437*) yyTCombType {  72,  583}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {  72,  583}
         , (* 440*) yyTCombType {  72,  583} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {  72,  583}
         , (* 444*) yyTCombType {  93,  544} , (* 445*) yyTCombType { 111,  565}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {  75,  590}
         , (* 450*) yyTCombType {  72,  583} , (* 451*) yyTCombType {  72,  583}
         , (* 452*) yyTCombType {  72,  583} , (* 453*) yyTCombType {  72,  583}
         , (* 454*) yyTCombType {  72,  583} , (* 455*) yyTCombType {  72,  583}
         , (* 456*) yyTCombType {  72,  583} , (* 457*) yyTCombType {  72,  583}
         , (* 458*) yyTCombType {  72,  583} , (* 459*) yyTCombType {  75,  590}
         , (* 460*) yyTCombType {  93,  544} , (* 461*) yyTCombType { 111,  565}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {  75,  590}
         , (* 464*) yyTCombType {  93,  541} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType {  93,  544}
         , (* 468*) yyTCombType { 111,  565} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {  93,  544} , (* 471*) yyTCombType { 111,  112}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {  75,  590}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {  75,  590}
         , (* 480*) yyTCombType {  75,  590} , (* 481*) yyTCombType {   0,    0}
         , (* 482*) yyTCombType {   0,    0} , (* 483*) yyTCombType {  75,  590}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {  75,  590}
         , (* 486*) yyTCombType {  75,  590} , (* 487*) yyTCombType {  78,   67}
         , (* 488*) yyTCombType {   0,    0} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {  93,  544}
         , (* 492*) yyTCombType { 111,  565} , (* 493*) yyTCombType {  93,  544}
         , (* 494*) yyTCombType { 111,  565} , (* 495*) yyTCombType {  93,  544}
         , (* 496*) yyTCombType { 111,  565} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  93,  544}
         , (* 500*) yyTCombType { 111,  565} , (* 501*) yyTCombType {  78,  574}
         , (* 502*) yyTCombType {   0,    0} , (* 503*) yyTCombType { 129,  463}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType { 129,  463} , (* 509*) yyTCombType {   0,    0}
         , (* 510*) yyTCombType {  75,  590} , (* 511*) yyTCombType {  75,   76}
         , (* 512*) yyTCombType {  75,  590} , (* 513*) yyTCombType { 129,  463}
         , (* 514*) yyTCombType {  75,  590} , (* 515*) yyTCombType {  75,  590}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {  78,  574}
         , (* 518*) yyTCombType {  75,  590} , (* 519*) yyTCombType {   0,    0}
         , (* 520*) yyTCombType {   0,    0} , (* 521*) yyTCombType {  78,  574}
         , (* 522*) yyTCombType {   0,    0} , (* 523*) yyTCombType {  78,  574}
         , (* 524*) yyTCombType {  78,  574} , (* 525*) yyTCombType {  75,  590}
         , (* 526*) yyTCombType {  75,  590} , (* 527*) yyTCombType {  75,  590}
         , (* 528*) yyTCombType {  75,  590} , (* 529*) yyTCombType {  75,  590}
         , (* 530*) yyTCombType {  75,  590} , (* 531*) yyTCombType {  75,  590}
         , (* 532*) yyTCombType {  75,  590} , (* 533*) yyTCombType {  75,  590}
         , (* 534*) yyTCombType {  75,  590} , (* 535*) yyTCombType {  75,  590}
         , (* 536*) yyTCombType {  79,  580} , (* 537*) yyTCombType { 129,  463}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType { 137,  539}
         , (* 540*) yyTCombType {   0,    0} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {   0,    0} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType { 135,  473} , (* 545*) yyTCombType { 129,  463}
         , (* 546*) yyTCombType {   0,    0} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {  78,  574} , (* 549*) yyTCombType { 135,  473}
         , (* 550*) yyTCombType {  79,  580} , (* 551*) yyTCombType { 129,  463}
         , (* 552*) yyTCombType {  78,  574} , (* 553*) yyTCombType {  78,  574}
         , (* 554*) yyTCombType { 135,  473} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {  78,  574} , (* 557*) yyTCombType { 129,  463}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType {   0,    0}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {  79,  580} , (* 563*) yyTCombType {  78,  574}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {  79,  580} , (* 567*) yyTCombType { 137,  539}
         , (* 568*) yyTCombType {   0,    0} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType {  79,  580} , (* 571*) yyTCombType { 137,  216}
         , (* 572*) yyTCombType {  79,  580} , (* 573*) yyTCombType {  79,  580}
         , (* 574*) yyTCombType {   0,    0} , (* 575*) yyTCombType { 137,  217}
         , (* 576*) yyTCombType { 137,   41} , (* 577*) yyTCombType {   0,    0}
         , (* 578*) yyTCombType { 135,  473} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType { 137,  218} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType {   0,    0}
         , (* 584*) yyTCombType {   0,    0} , (* 585*) yyTCombType {   0,    0}
         , (* 586*) yyTCombType { 135,  473} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType { 137,   42}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType { 135,  473} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType {   0,    0} , (* 595*) yyTCombType { 170,  405}
         , (* 596*) yyTCombType {  80,  582} , (* 597*) yyTCombType {  79,  580}
         , (* 598*) yyTCombType { 135,  473} , (* 599*) yyTCombType {  79,  580}
         , (* 600*) yyTCombType { 170,  405} , (* 601*) yyTCombType {  79,  580}
         , (* 602*) yyTCombType {  79,  580} , (* 603*) yyTCombType { 137,  220}
         , (* 604*) yyTCombType { 171,  640} , (* 605*) yyTCombType {  79,  580}
         , (* 606*) yyTCombType {  80,  250} , (* 607*) yyTCombType {   0,    0}
         , (* 608*) yyTCombType {   0,    0} , (* 609*) yyTCombType { 171,  208}
         , (* 610*) yyTCombType {  80,  582} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType {  79,  580} , (* 613*) yyTCombType {  79,  580}
         , (* 614*) yyTCombType {  79,  580} , (* 615*) yyTCombType {  79,  580}
         , (* 616*) yyTCombType {  79,  580} , (* 617*) yyTCombType {  79,  580}
         , (* 618*) yyTCombType {  79,  247} , (* 619*) yyTCombType {  79,  248}
         , (* 620*) yyTCombType {  79,  249} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {  80,  582} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {   0,    0} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {  80,  582} , (* 627*) yyTCombType {  80,  251}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType { 170,  405}
         , (* 630*) yyTCombType {  80,  582} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType {  80,  582} , (* 633*) yyTCombType {  80,  582}
         , (* 634*) yyTCombType {  86,  579} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType { 170,  405}
         , (* 638*) yyTCombType { 171,   32} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {   0,    0} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType { 170,  405}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType {   0,    0}
         , (* 646*) yyTCombType { 171,  210} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {  86,  579} , (* 649*) yyTCombType { 170,  405}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType { 171,  211} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {  80,  582}
         , (* 658*) yyTCombType { 171,  212} , (* 659*) yyTCombType {  80,  582}
         , (* 660*) yyTCombType {  86,  240} , (* 661*) yyTCombType {  80,  582}
         , (* 662*) yyTCombType {  80,  582} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {  86,  579} , (* 665*) yyTCombType {  80,  582}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {  86,  579} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {  86,  579} , (* 671*) yyTCombType {  86,  579}
         , (* 672*) yyTCombType {  80,  582} , (* 673*) yyTCombType {  80,  582}
         , (* 674*) yyTCombType {  80,  582} , (* 675*) yyTCombType {  80,  582}
         , (* 676*) yyTCombType {  80,  582} , (* 677*) yyTCombType {  80,  582}
         , (* 678*) yyTCombType {  80,  582} , (* 679*) yyTCombType {  80,  582}
         , (* 680*) yyTCombType {  80,  582} , (* 681*) yyTCombType {  80,  252}
         , (* 682*) yyTCombType {  80,  253} , (* 683*) yyTCombType { 130,  464}
         , (* 684*) yyTCombType { 138,  474} , (* 685*) yyTCombType {   0,    0}
         , (* 686*) yyTCombType { 141,  480} , (* 687*) yyTCombType {   0,    0}
         , (* 688*) yyTCombType { 130,  464} , (* 689*) yyTCombType { 138,  474}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType { 141,  480}
         , (* 692*) yyTCombType {   0,    0} , (* 693*) yyTCombType { 130,  464}
         , (* 694*) yyTCombType { 138,  474} , (* 695*) yyTCombType {  86,  579}
         , (* 696*) yyTCombType { 141,  480} , (* 697*) yyTCombType {  86,  241}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType {  86,  579}
         , (* 700*) yyTCombType {  86,  579} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType {   0,    0} , (* 703*) yyTCombType {  86,  579}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {   0,    0}
         , (* 710*) yyTCombType {  86,  579} , (* 711*) yyTCombType {  86,  242}
         , (* 712*) yyTCombType {  86,  243} , (* 713*) yyTCombType {  86,  244}
         , (* 714*) yyTCombType {  86,  245} , (* 715*) yyTCombType {  86,  246}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType { 130,  464}
         , (* 718*) yyTCombType { 138,  474} , (* 719*) yyTCombType { 142,  481}
         , (* 720*) yyTCombType { 141,  480} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType { 142,  481} , (* 725*) yyTCombType { 130,  464}
         , (* 726*) yyTCombType { 138,  474} , (* 727*) yyTCombType { 138,  218}
         , (* 728*) yyTCombType { 141,  480} , (* 729*) yyTCombType { 142,  481}
         , (* 730*) yyTCombType { 190,  417} , (* 731*) yyTCombType { 130,  464}
         , (* 732*) yyTCombType { 138,  474} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType { 141,  480} , (* 735*) yyTCombType { 190,  417}
         , (* 736*) yyTCombType { 138,   42} , (* 737*) yyTCombType { 130,  464}
         , (* 738*) yyTCombType { 138,  474} , (* 739*) yyTCombType { 182,  417}
         , (* 740*) yyTCombType { 141,  480} , (* 741*) yyTCombType {   0,    0}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType { 182,  417} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType { 190,  417} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType { 190,  417}
         , (* 752*) yyTCombType { 182,  417} , (* 753*) yyTCombType { 142,  481}
         , (* 754*) yyTCombType {   0,    0} , (* 755*) yyTCombType { 182,  417}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType {   0,    0} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType { 142,  481}
         , (* 762*) yyTCombType {   0,    0} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType { 190,  417} , (* 765*) yyTCombType {   0,    0}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType { 142,  481}
         , (* 768*) yyTCombType { 182,  417} , (* 769*) yyTCombType { 130,  271}
         , (* 770*) yyTCombType {   0,    0} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType { 190,  417} , (* 773*) yyTCombType { 142,  481}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType { 182,  417} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType { 190,  417} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType {   0,    0} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType { 182,  417} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType { 190,  417} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType {   0,    0}
         , (* 788*) yyTCombType { 182,  417} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType {   0,    0}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {   0,    0} , (* 805*) yyTCombType {   0,    0}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType {   0,    0} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType {   0,    0} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType {   0,    0} , (* 817*) yyTCombType {   0,    0}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType {   0,    0} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType {   0,    0} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  292 , (* 109*)    5 , (* 110*)  293 , (* 111*)  294
         , (* 112*)  295 , (* 113*)  296 , (* 114*)  297 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  178 , (* 118*)  188 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    6 , (* 122*)    9 , (* 123*)   28
         , (* 124*)   11 , (* 125*)   31 , (* 126*)   33 , (* 127*)  159
         , (* 128*)  168 , (* 129*)  171 , (* 130*)  165 , (* 131*)  177
         , (* 132*)  170 , (* 133*)  187 , (* 134*)  181 , (* 135*)  342
         , (* 136*)   26 , (* 137*)  300 , (* 138*)   17 , (* 139*)  299
         , (* 140*)   19 , (* 141*)  298 , (* 142*)   20 , (* 143*)   21
         , (* 144*)  357 , (* 145*)  354 , (* 146*)  301 , (* 147*)  360
         , (* 148*)  378 , (* 149*)  161 , (* 150*)  385 , (* 151*)  303
         , (* 152*)   45 , (* 153*)  363 , (* 154*)  349 , (* 155*)   36
         , (* 156*)  302 , (* 157*)  365 , (* 158*)   37 , (* 159*)  128
         , (* 160*)   39 , (* 161*)   38 , (* 162*)   39 , (* 163*)  126
         , (* 164*)  129 , (* 165*)   54 , (* 166*)  368 , (* 167*)  114
         , (* 168*)  115 , (* 169*)  350 , (* 170*)  133 , (* 171*)  135
         , (* 172*)  137 , (* 173*)  371 , (* 174*)  131 , (* 175*)  132
         , (* 176*)  141 , (* 177*)  384 , (* 178*)  373 , (* 179*)   51
         , (* 180*)   60 , (* 181*)  180 , (* 182*)  340 , (* 183*)  305
         , (* 184*)  306 , (* 185*)  307 , (* 186*)  308 , (* 187*)  309
         , (* 188*)  310 , (* 189*)  311 , (* 190*)  312 , (* 191*)  313
         , (* 192*)  314 , (* 193*)  315 , (* 194*)  316 , (* 195*)  317
         , (* 196*)  318 , (* 197*)  319 , (* 198*)  320 , (* 199*)   46
         , (* 200*)   60 , (* 201*)  323 , (* 202*)  303 , (* 203*)   45
         , (* 204*)  304 , (* 205*)   47 , (* 206*)   50 , (* 207*)   48
         , (* 208*)  322 , (* 209*)  321 , (* 210*)   60 , (* 211*)  341
         , (* 212*)   53 , (* 213*)   60 , (* 214*)  119 , (* 215*)  125
         , (* 216*)  339 , (* 217*)   90 , (* 218*)   93 , (* 219*)   94
         , (* 220*)  108 , (* 221*)   92 , (* 222*)   97 , (* 223*)  358
         , (* 224*)   99 , (* 225*)   60 , (* 226*)   51 , (* 227*)  344
         , (* 228*)   99 , (* 229*)  345 , (* 230*)  104 , (* 231*)  145
         , (* 232*)   60 , (* 233*)  380 , (* 234*)  305 , (* 235*)  306
         , (* 236*)  307 , (* 237*)  308 , (* 238*)  309 , (* 239*)  310
         , (* 240*)  311 , (* 241*)  312 , (* 242*)  313 , (* 243*)  314
         , (* 244*)  315 , (* 245*)  316 , (* 246*)  317 , (* 247*)  318
         , (* 248*)  319 , (* 249*)  320 , (* 250*)   46 , (* 251*)  338
         , (* 252*)  323 , (* 253*)  381 , (* 254*)  382 , (* 255*)  158
         , (* 256*)   69 , (* 257*)   50 , (* 258*)  324 , (* 259*)   53
         , (* 260*)   60 , (* 261*)   71 , (* 262*)   73 , (* 263*)  334
         , (* 264*)  356 , (* 265*)  105 , (* 266*)  117 , (* 267*)  111
         , (* 268*)   90 , (* 269*)   93 , (* 270*)   94 , (* 271*)  108
         , (* 272*)   86 , (* 273*)   79 , (* 274*)  109 , (* 275*)   80
         , (* 276*)  335 , (* 277*)  332 , (* 278*)   60 , (* 279*)  328
         , (* 280*)   74 , (* 281*)   75 , (* 282*)   87 , (* 283*)   88
         , (* 284*)   60 , (* 285*)  101 , (* 286*)  102 , (* 287*)  355
         , (* 288*)  104 , (* 289*)   64 , (* 290*)   78 , (* 291*)  331
         , (* 292*)   68 , (* 293*)   79 , (* 294*)  325 , (* 295*)   80
         , (* 296*)   60 , (* 297*)  332 , (* 298*)  351 , (* 299*)  328
         , (* 300*)   74 , (* 301*)   75 , (* 302*)   85 , (* 303*)   78
         , (* 304*)  331 , (* 305*)   68 , (* 306*)   79 , (* 307*)   60
         , (* 308*)   80 , (* 309*)  329 , (* 310*)  332 , (* 311*)   75
         , (* 312*)  328 , (* 313*)   74 , (* 314*)   75 , (* 315*)   66
         , (* 316*)  331 , (* 317*)   68 , (* 318*)   79 , (* 319*)  353
         , (* 320*)   80 , (* 321*)   60 , (* 322*)  332 , (* 323*)  183
         , (* 324*)  328 , (* 325*)   74 , (* 326*)   75 , (* 327*)   72
         , (* 328*)  189 , (* 329*)  332 , (* 330*)  347 , (* 331*)  328
         , (* 332*)   74 , (* 333*)   75 , (* 334*)  121 , (* 335*)  361
         , (* 336*)  123 , (* 337*)  330 , (* 338*)   60 , (* 339*)  366
         , (* 340*)  109 , (* 341*)  130 , (* 342*)  134 , (* 343*)  132
         , (* 344*)  374 , (* 345*)  106 , (* 346*)  147 , (* 347*)  191
         , (* 348*)  146 , (* 349*)   64 , (* 350*)   78 , (* 351*)  331
         , (* 352*)   68 , (* 353*)   79 , (* 354*)  333 , (* 355*)   80
         , (* 356*)   60 , (* 357*)  332 , (* 358*)  109 , (* 359*)  328
         , (* 360*)   74 , (* 361*)   75 , (* 362*)  303 , (* 363*)  136
         , (* 364*)   83 , (* 365*)  337 , (* 366*)    0 , (* 367*)   64
         , (* 368*)   78 , (* 369*)  331 , (* 370*)   68 , (* 371*)   79
         , (* 372*)  335 , (* 373*)   80 , (* 374*)   60 , (* 375*)  332
         , (* 376*)    0 , (* 377*)  328 , (* 378*)   74 , (* 379*)   75
         , (* 380*)    0 , (* 381*)  327 , (* 382*)    0 , (* 383*)  328
         , (* 384*)   74 , (* 385*)   75 , (* 386*)  139 , (* 387*)  326
         , (* 388*)   68 , (* 389*)   79 , (* 390*)  343 , (* 391*)   80
         , (* 392*)    0 , (* 393*)  332 , (* 394*)    0 , (* 395*)  328
         , (* 396*)   74 , (* 397*)   75 , (* 398*)    0 , (* 399*)   60
         , (* 400*)   70 , (* 401*)    0 , (* 402*)   80 , (* 403*)    0
         , (* 404*)  332 , (* 405*)    0 , (* 406*)  328 , (* 407*)   74
         , (* 408*)   75 , (* 409*)   51 , (* 410*)   64 , (* 411*)   78
         , (* 412*)  331 , (* 413*)   68 , (* 414*)   79 , (* 415*)  352
         , (* 416*)   80 , (* 417*)  148 , (* 418*)  332 , (* 419*)    0
         , (* 420*)  328 , (* 421*)   74 , (* 422*)   75 , (* 423*)    0
         , (* 424*)   81 , (* 425*)    0 , (* 426*)   51 , (* 427*)   64
         , (* 428*)   78 , (* 429*)  331 , (* 430*)   68 , (* 431*)   79
         , (* 432*)    0 , (* 433*)   80 , (* 434*)    0 , (* 435*)  332
         , (* 436*)    0 , (* 437*)  328 , (* 438*)   74 , (* 439*)   75
         , (* 440*)    0 , (* 441*)  359 , (* 442*)   53 , (* 443*)    0
         , (* 444*)    0 , (* 445*)   64 , (* 446*)   78 , (* 447*)  331
         , (* 448*)   68 , (* 449*)   79 , (* 450*)    0 , (* 451*)   80
         , (* 452*)   51 , (* 453*)  332 , (* 454*)    0 , (* 455*)  328
         , (* 456*)   74 , (* 457*)   75 , (* 458*)  324 , (* 459*)   53
         , (* 460*)    0 , (* 461*)  336 , (* 462*)    0 , (* 463*)   64
         , (* 464*)   78 , (* 465*)  331 , (* 466*)   68 , (* 467*)   79
         , (* 468*)    0 , (* 469*)   80 , (* 470*)    0 , (* 471*)  332
         , (* 472*)    0 , (* 473*)  328 , (* 474*)   74 , (* 475*)   75
         , (* 476*)  303 , (* 477*)   45 , (* 478*)  346 , (* 479*)    0
         , (* 480*)  303 , (* 481*)  136 , (* 482*)   95 , (* 483*)   88
         , (* 484*)  143 , (* 485*)   53 , (* 486*)    0 , (* 487*)    0
         , (* 488*)   64 , (* 489*)   78 , (* 490*)  331 , (* 491*)   68
         , (* 492*)   79 , (* 493*)    0 , (* 494*)   80 , (* 495*)    0
         , (* 496*)  332 , (* 497*)    0 , (* 498*)  328 , (* 499*)   74
         , (* 500*)   75 , (* 501*)  370 , (* 502*)    0 , (* 503*)  138
         , (* 504*)  140 , (* 505*)    0 , (* 506*)    0 , (* 507*)    0
         , (* 508*)  305 , (* 509*)  306 , (* 510*)  307 , (* 511*)  308
         , (* 512*)  309 , (* 513*)  310 , (* 514*)  311 , (* 515*)  312
         , (* 516*)  313 , (* 517*)  314 , (* 518*)  315 , (* 519*)  316
         , (* 520*)  317 , (* 521*)  318 , (* 522*)  319 , (* 523*)  320
         , (* 524*)   46 , (* 525*)   60 , (* 526*)  323 , (* 527*)  303
         , (* 528*)   45 , (* 529*)  348 , (* 530*)    0 , (* 531*)   50
         , (* 532*)    0 , (* 533*)    0 , (* 534*)    0 , (* 535*)  150
         , (* 536*)    0 , (* 537*)    0 , (* 538*)   60 , (* 539*)    0
         , (* 540*)    0 , (* 541*)  362 , (* 542*)   90 , (* 543*)   93
         , (* 544*)   94 , (* 545*)  108 , (* 546*)  192 , (* 547*)   51
         , (* 548*)    0 , (* 549*)  300 , (* 550*)    0 , (* 551*)    0
         , (* 552*)   19 , (* 553*)    0 , (* 554*)  364 , (* 555*)    0
         , (* 556*)    0 , (* 557*)    0 , (* 558*)    0 , (* 559*)  305
         , (* 560*)  306 , (* 561*)  307 , (* 562*)  308 , (* 563*)  309
         , (* 564*)  310 , (* 565*)  311 , (* 566*)  312 , (* 567*)  313
         , (* 568*)  314 , (* 569*)  315 , (* 570*)  316 , (* 571*)  317
         , (* 572*)  318 , (* 573*)  319 , (* 574*)  320 , (* 575*)   46
         , (* 576*)  372 , (* 577*)  323 , (* 578*)  142 , (* 579*)  144
         , (* 580*)   53 , (* 581*)    0 , (* 582*)   50 , (* 583*)    0
         , (* 584*)    0 , (* 585*)    0 , (* 586*)    0 , (* 587*)    0
         , (* 588*)    0 , (* 589*)    0 , (* 590*)    0 , (* 591*)    0
         , (* 592*)    0 , (* 593*)   90 , (* 594*)   93 , (* 595*)   94
         , (* 596*)  108 , (* 597*)    0 , (* 598*)    0 , (* 599*)    0
         , (* 600*)    0 , (* 601*)    0 , (* 602*)    0 , (* 603*)    0
         , (* 604*)    0 , (* 605*)    0 , (* 606*)    0 , (* 607*)    0
         , (* 608*)  303 , (* 609*)   45 , (* 610*)  367 , (* 611*)    0
         , (* 612*)    0 , (* 613*)    0 , (* 614*)   64 , (* 615*)   78
         , (* 616*)  331 , (* 617*)   68 , (* 618*)   79 , (* 619*)    0
         , (* 620*)   80 , (* 621*)    0 , (* 622*)  332 , (* 623*)    0
         , (* 624*)  328 , (* 625*)   74 , (* 626*)   75 , (* 627*)   64
         , (* 628*)   78 , (* 629*)  331 , (* 630*)   68 , (* 631*)   79
         , (* 632*)    0 , (* 633*)   80 , (* 634*)    0 , (* 635*)  332
         , (* 636*)    0 , (* 637*)  328 , (* 638*)   74 , (* 639*)   75
         , (* 640*)  305 , (* 641*)  306 , (* 642*)  307 , (* 643*)  308
         , (* 644*)  309 , (* 645*)  310 , (* 646*)  311 , (* 647*)  312
         , (* 648*)  313 , (* 649*)  314 , (* 650*)  315 , (* 651*)  316
         , (* 652*)  317 , (* 653*)  318 , (* 654*)  319 , (* 655*)  320
         , (* 656*)   46 , (* 657*)  153 , (* 658*)  323 , (* 659*)  303
         , (* 660*)   45 , (* 661*)  369 , (* 662*)    0 , (* 663*)   50
         , (* 664*)  150 , (* 665*)    0 , (* 666*)    0 , (* 667*)    0
         , (* 668*)    0 , (* 669*)    0 , (* 670*)    0 , (* 671*)    0
         , (* 672*)    0 , (* 673*)   60 , (* 674*)   90 , (* 675*)   93
         , (* 676*)   94 , (* 677*)  108 , (* 678*)    0 , (* 679*)    0
         , (* 680*)    0 , (* 681*)    0 , (* 682*)    0 , (* 683*)    0
         , (* 684*)  151 , (* 685*)    0 , (* 686*)    0 , (* 687*)    0
         , (* 688*)    0 , (* 689*)  154 , (* 690*)    0 , (* 691*)  305
         , (* 692*)  306 , (* 693*)  307 , (* 694*)  308 , (* 695*)  309
         , (* 696*)  310 , (* 697*)  311 , (* 698*)  312 , (* 699*)  313
         , (* 700*)  314 , (* 701*)  315 , (* 702*)  316 , (* 703*)  317
         , (* 704*)  318 , (* 705*)  319 , (* 706*)  320 , (* 707*)   46
         , (* 708*)    0 , (* 709*)  323 , (* 710*)    0 , (* 711*)    0
         , (* 712*)    0 , (* 713*)   36 , (* 714*)   50 , (* 715*)  365
         , (* 716*)    0 , (* 717*)    0 , (* 718*)    0 , (* 719*)    0
         , (* 720*)    0 , (* 721*)    0 , (* 722*)  129 , (* 723*)    0
         , (* 724*)  368 , (* 725*)   90 , (* 726*)   93 , (* 727*)   94
         , (* 728*)  108 , (* 729*)  135 , (* 730*)   60 , (* 731*)  371
         , (* 732*)    0 , (* 733*)    0 , (* 734*)  141 , (* 735*)    0
         , (* 736*)  373 , (* 737*)    0 , (* 738*)    0 , (* 739*)    0
         , (* 740*)    0 , (* 741*)    0 , (* 742*)    0 , (* 743*)   60
         , (* 744*)    0 , (* 745*)    0 , (* 746*)  375 , (* 747*)    0
         , (* 748*)    0 , (* 749*)    0 , (* 750*)    0 , (* 751*)    0
         , (* 752*)    0 , (* 753*)    0 , (* 754*)    0 , (* 755*)    0
         , (* 756*)    0 , (* 757*)    0 , (* 758*)    0 , (* 759*)  154
         , (* 760*)    0 , (* 761*)    0 , (* 762*)   64 , (* 763*)   78
         , (* 764*)  331 , (* 765*)   68 , (* 766*)   79 , (* 767*)    0
         , (* 768*)   80 , (* 769*)    0 , (* 770*)  332 , (* 771*)    0
         , (* 772*)  328 , (* 773*)   74 , (* 774*)   75 , (* 775*)    0
         , (* 776*)    0 , (* 777*)    0 , (* 778*)    0 , (* 779*)    0
         , (* 780*)    0 , (* 781*)    0 , (* 782*)  174 , (* 783*)  156
         , (* 784*)  379 , (* 785*)  377 , (* 786*)   36 , (* 787*)    0
         , (* 788*)  365 , (* 789*)  145 , (* 790*)    0 , (* 791*)  380
         , (* 792*)    0 , (* 793*)    0 , (* 794*)    0 , (* 795*)  129
         , (* 796*)    0 , (* 797*)  368 , (* 798*)   60 , (* 799*)    0
         , (* 800*)    0 , (* 801*)    0 , (* 802*)  135 , (* 803*)    0
         , (* 804*)  371 , (* 805*)    0 , (* 806*)    0 , (* 807*)  141
         , (* 808*)    0 , (* 809*)  373 , (* 810*)    0 , (* 811*)  381
         , (* 812*)  382 , (* 813*)  158 , (* 814*)  154 , (* 815*)    0
         , (* 816*)    0 , (* 817*)    0 , (* 818*)  172 , (* 819*)   64
         , (* 820*)   78 , (* 821*)  331 , (* 822*)   68 , (* 823*)   79
         , (* 824*)    0 , (* 825*)   80 , (* 826*)    0 , (* 827*)  332
         , (* 828*)    0 , (* 829*)  328 , (* 830*)   74 , (* 831*)   75
         , (* 832*)   64 , (* 833*)   78 , (* 834*)  331 , (* 835*)   68
         , (* 836*)   79 , (* 837*)    0 , (* 838*)   80 , (* 839*)    0
         , (* 840*)  332 , (* 841*)    0 , (* 842*)  328 , (* 843*)   74
         , (* 844*)   75 , (* 845*)    0 , (* 846*)    0 , (* 847*)   36
         , (* 848*)    0 , (* 849*)  365 , (* 850*)    0 , (* 851*)    0
         , (* 852*)    0 , (* 853*)    0 , (* 854*)  376 , (* 855*)  377
         , (* 856*)  129 , (* 857*)    0 , (* 858*)  368 , (* 859*)    0
         , (* 860*)    0 , (* 861*)    0 , (* 862*)  145 , (* 863*)  135
         , (* 864*)  380 , (* 865*)  371 , (* 866*)    0 , (* 867*)    0
         , (* 868*)  141 , (* 869*)    0 , (* 870*)  373 , (* 871*)    0
         , (* 872*)    0 , (* 873*)    0 , (* 874*)    0 , (* 875*)    0
         , (* 876*)    0 , (* 877*)    0 , (* 878*)    0 , (* 879*)    0
         , (* 880*)    0 , (* 881*)    0 , (* 882*)    0 , (* 883*)    0
         , (* 884*)  383 , (* 885*)  382 , (* 886*)    0 , (* 887*)   64
         , (* 888*)   78 , (* 889*)  331 , (* 890*)   68 , (* 891*)   79
         , (* 892*)    0 , (* 893*)   80 , (* 894*)    0 , (* 895*)  332
         , (* 896*)    0 , (* 897*)  328 , (* 898*)   74 , (* 899*)   75
         , (* 900*)    0 , (* 901*)    0 , (* 902*)    0 , (* 903*)  184
         , (* 904*)    0 , (* 905*)    0 , (* 906*)    0 , (* 907*)    0
         , (* 908*)  156 , (* 909*)  379 , (* 910*)  377 , (* 911*)    0
         , (* 912*)    0 , (* 913*)    0 , (* 914*)  300 , (* 915*)    0
         , (* 916*)    0 , (* 917*)   19 , (* 918*)    0 , (* 919*)    0
         , (* 920*)    0 , (* 921*)    0 , (* 922*)    0 , (* 923*)  145
         , (* 924*)    0 , (* 925*)  380 , (* 926*)    0 , (* 927*)    0
         , (* 928*)    0 , (* 929*)    0 , (* 930*)    0 , (* 931*)    0
         , (* 932*)   36 , (* 933*)    0 , (* 934*)  365 , (* 935*)    0
         , (* 936*)    0 , (* 937*)    0 , (* 938*)    0 , (* 939*)    0
         , (* 940*)    0 , (* 941*)  129 , (* 942*)    0 , (* 943*)  368
         , (* 944*)    0 , (* 945*)  381 , (* 946*)  382 , (* 947*)  158
         , (* 948*)  135 , (* 949*)    0 , (* 950*)  371 , (* 951*)    0
         , (* 952*)    0 , (* 953*)  141 , (* 954*)    0 , (* 955*)  373
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)    0
         , (* 960*)    0 , (* 961*)    0 , (* 962*)    0 , (* 963*)    0
         , (* 964*)    0 , (* 965*)    0 , (* 966*)    0 , (* 967*)    0
         , (* 968*)    0 , (* 969*)    0 , (* 970*)    0 , (* 971*)    0
         , (* 972*)    0 , (* 973*)    0 , (* 974*)    0 , (* 975*)    0
         , (* 976*)    0 , (* 977*)    0 , (* 978*)    0 , (* 979*)    0
         , (* 980*)    0 , (* 981*)    0 , (* 982*)    0 , (* 983*)    0
         , (* 984*)    0 , (* 985*)    0 , (* 986*)    0 , (* 987*)    0
         , (* 988*)    0 , (* 989*)    0 , (* 990*)    0 , (* 991*)    0
         , (* 992*)    0 , (* 993*)    0 , (* 994*)    0 , (* 995*)    0
         , (* 996*)    0 , (* 997*)    0 , (* 998*)    0 , (* 999*)    0
         , (*1000*)    0 , (*1001*)    0 , (*1002*)    0 , (*1003*)    0
         , (*1004*)    0 , (*1005*)    0 , (*1006*)    0 , (*1007*)    0
         , (*1008*)  145 , (*1009*)    0 , (*1010*)  380 , (*1011*)    0
         , (*1012*)    0 , (*1013*)    0 , (*1014*)    0 , (*1015*)    0
         , (*1016*)    0 , (*1017*)    0 , (*1018*)    0 , (*1019*)    0
         , (*1020*)    0 , (*1021*)    0 , (*1022*)    0 , (*1023*)    0
         , (*1024*)    0 , (*1025*)    0 , (*1026*)    0 , (*1027*)    0
         , (*1028*)    0 , (*1029*)    0 , (*1030*)  381 , (*1031*)  382
         , (*1032*)  158 , (*1033*)    0 , (*1034*)    0 , (*1035*)    0
         , (*1036*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 386(P   1)*)    2 , (*A 387(P   2)*)    1 , (*A 388(P   3)*)    1
         , (*A 389(P   4)*)    1 , (*A 390(P   5)*)    1 , (*A 391(P   6)*)    1
         , (*A 392(P   7)*)    1 , (*A 393(P   8)*)    0 , (*A 394(P   9)*)    0
         , (*A 395(P  10)*)    0 , (*A 396(P  11)*)    0 , (*A 397(P  12)*)    0
         , (*A 398(P  13)*)    0 , (*A 399(P  14)*)    3 , (*A 400(P  15)*)    7
         , (*A 401(P  16)*)    3 , (*A 402(P  17)*)    5 , (*A 403(P  18)*)    3
         , (*A 404(P  19)*)    7 , (*A 405(P  20)*)    4 , (*A 406(P  21)*)    7
         , (*A 407(P  22)*)    3 , (*A 408(P  23)*)    9 , (*A 409(P  24)*)    3
         , (*A 410(P  25)*)    8 , (*A 411(P  26)*)    1 , (*A 412(P  27)*)    0
         , (*A 413(P  28)*)    1 , (*A 414(P  29)*)    0 , (*A 415(P  30)*)    3
         , (*A 416(P  31)*)    3 , (*A 417(P  32)*)    0 , (*A 418(P  33)*)    2
         , (*A 419(P  34)*)    3 , (*A 420(P  35)*)    1 , (*A 421(P  36)*)    3
         , (*A 422(P  37)*)    1 , (*A 423(P  38)*)    3 , (*A 424(P  39)*)    3
         , (*A 425(P  40)*)    3 , (*A 426(P  41)*)    1 , (*A 427(P  42)*)    3
         , (*A 428(P  43)*)    0 , (*A 429(P  44)*)    2 , (*A 430(P  45)*)    1
         , (*A 431(P  46)*)    3 , (*A 432(P  47)*)    1 , (*A 433(P  48)*)    1
         , (*A 434(P  49)*)    1 , (*A 435(P  50)*)    3 , (*A 436(P  51)*)    1
         , (*A 437(P  52)*)    3 , (*A 438(P  53)*)    3 , (*A 439(P  54)*)    0
         , (*A 440(P  55)*)    0 , (*A 441(P  56)*)    1 , (*A 442(P  57)*)    1
         , (*A 443(P  58)*)    3 , (*A 444(P  59)*)    1 , (*A 445(P  60)*)    3
         , (*A 446(P  61)*)    1 , (*A 447(P  62)*)    1 , (*A 448(P  63)*)    2
         , (*A 449(P  64)*)    2 , (*A 450(P  65)*)    0 , (*A 451(P  66)*)    1
         , (*A 452(P  67)*)    2 , (*A 453(P  68)*)    0 , (*A 454(P  69)*)    1
         , (*A 455(P  70)*)    2 , (*A 456(P  71)*)    3 , (*A 457(P  72)*)    1
         , (*A 458(P  73)*)    4 , (*A 459(P  74)*)    1 , (*A 460(P  75)*)    1
         , (*A 461(P  76)*)    1 , (*A 462(P  77)*)    2 , (*A 463(P  78)*)    0
         , (*A 464(P  79)*)    1 , (*A 465(P  80)*)    2 , (*A 466(P  81)*)    3
         , (*A 467(P  82)*)    1 , (*A 468(P  83)*)    3 , (*A 469(P  84)*)    1
         , (*A 470(P  85)*)    1 , (*A 471(P  86)*)    1 , (*A 472(P  87)*)    2
         , (*A 473(P  88)*)    0 , (*A 474(P  89)*)    1 , (*A 475(P  90)*)    2
         , (*A 476(P  91)*)    3 , (*A 477(P  92)*)    3 , (*A 478(P  93)*)    1
         , (*A 479(P  94)*)    2 , (*A 480(P  95)*)    0 , (*A 481(P  96)*)    1
         , (*A 482(P  97)*)    2 , (*A 483(P  98)*)    3 , (*A 484(P  99)*)    3
         , (*A 485(P 100)*)    1 , (*A 486(P 101)*)    2 , (*A 487(P 102)*)    0
         , (*A 488(P 103)*)    2 , (*A 489(P 104)*)    0 , (*A 490(P 105)*)    1
         , (*A 491(P 106)*)    2 , (*A 492(P 107)*)    1 , (*A 493(P 108)*)    1
         , (*A 494(P 109)*)    1 , (*A 495(P 110)*)    1 , (*A 496(P 111)*)    1
         , (*A 497(P 112)*)    1 , (*A 498(P 113)*)    1 , (*A 499(P 114)*)    1
         , (*A 500(P 115)*)    1 , (*A 501(P 116)*)    1 , (*A 502(P 117)*)    1
         , (*A 503(P 118)*)    1 , (*A 504(P 119)*)    1 , (*A 505(P 120)*)    1
         , (*A 506(P 121)*)    1 , (*A 507(P 122)*)    1 , (*A 508(P 123)*)    1
         , (*A 509(P 124)*)    3 , (*A 510(P 125)*)    0 , (*A 511(P 126)*)    1
         , (*A 512(P 127)*)    1 , (*A 513(P 128)*)    3 , (*A 514(P 129)*)    1
         , (*A 515(P 130)*)    1 , (*A 516(P 131)*)    0 , (*A 517(P 132)*)    2
         , (*A 518(P 133)*)    1 , (*A 519(P 134)*)    3 , (*A 520(P 135)*)    1
         , (*A 521(P 136)*)    3 , (*A 522(P 137)*)    0 , (*A 523(P 138)*)    1
         , (*A 524(P 139)*)    3 , (*A 525(P 140)*)    1 , (*A 526(P 141)*)    3
         , (*A 527(P 142)*)    1 , (*A 528(P 143)*)    2 , (*A 529(P 144)*)    0
         , (*A 530(P 145)*)    1 , (*A 531(P 146)*)    3 , (*A 532(P 147)*)    1
         , (*A 533(P 148)*)    3 , (*A 534(P 149)*)    1 , (*A 535(P 150)*)    3
         , (*A 536(P 151)*)    0 , (*A 537(P 152)*)    1 , (*A 538(P 153)*)    2
         , (*A 539(P 154)*)    0 , (*A 540(P 155)*)    1 , (*A 541(P 156)*)    1
         , (*A 542(P 157)*)    3 , (*A 543(P 158)*)    5 , (*A 544(P 159)*)    1
         , (*A 545(P 160)*)    1 , (*A 546(P 161)*)    2 , (*A 547(P 162)*)    3
         , (*A 548(P 163)*)    3 , (*A 549(P 164)*)    0 , (*A 550(P 165)*)    2
         , (*A 551(P 166)*)    3 , (*A 552(P 167)*)    1 , (*A 553(P 168)*)    0
         , (*A 554(P 169)*)    1 , (*A 555(P 170)*)    1 , (*A 556(P 171)*)    1
         , (*A 557(P 172)*)    4 , (*A 558(P 173)*)    1 , (*A 559(P 174)*)    2
         , (*A 560(P 175)*)    0 , (*A 561(P 176)*)    2 , (*A 562(P 177)*)    0
         , (*A 563(P 178)*)    2 , (*A 564(P 179)*)    0 , (*A 565(P 180)*)    0
         , (*A 566(P 181)*)    2 , (*A 567(P 182)*)    4 , (*A 568(P 183)*)    2
         , (*A 569(P 184)*)    3 , (*A 570(P 185)*)    1 , (*A 571(P 186)*)    1
         , (*A 572(P 187)*)    4 , (*A 573(P 188)*)    1 , (*A 574(P 189)*)    1
         , (*A 575(P 190)*)    3 , (*A 576(P 191)*)    1 , (*A 577(P 192)*)    3
         , (*A 578(P 193)*)    1 , (*A 579(P 194)*)    2 , (*A 580(P 195)*)    1
         , (*A 581(P 196)*)    3 , (*A 582(P 197)*)    1 , (*A 583(P 198)*)    3
         , (*A 584(P 199)*)    1 , (*A 585(P 200)*)    3 , (*A 586(P 201)*)    1
         , (*A 587(P 202)*)    2 , (*A 588(P 203)*)    2 , (*A 589(P 204)*)    3
         , (*A 590(P 205)*)    1 , (*A 591(P 206)*)    2 , (*A 592(P 207)*)    1
         , (*A 593(P 208)*)    3 , (*A 594(P 209)*)    1 , (*A 595(P 210)*)    3
         , (*A 596(P 211)*)    1 , (*A 597(P 212)*)    3 , (*A 598(P 213)*)    3
         , (*A 599(P 214)*)    0 , (*A 600(P 215)*)    1 , (*A 601(P 216)*)    3
         , (*A 602(P 217)*)    1 , (*A 603(P 218)*)    3 , (*A 604(P 219)*)    1
         , (*A 605(P 220)*)    1 , (*A 606(P 221)*)    1 , (*A 607(P 222)*)    1
         , (*A 608(P 223)*)    1 , (*A 609(P 224)*)    1 , (*A 610(P 225)*)    1
         , (*A 611(P 226)*)    1 , (*A 612(P 227)*)    1 , (*A 613(P 228)*)    1
         , (*A 614(P 229)*)    1 , (*A 615(P 230)*)    3 , (*A 616(P 231)*)    1
         , (*A 617(P 232)*)    1 , (*A 618(P 233)*)    1 , (*A 619(P 234)*)    1
         , (*A 620(P 235)*)    1 , (*A 621(P 236)*)    1 , (*A 622(P 237)*)    1
         , (*A 623(P 238)*)    1 , (*A 624(P 239)*)    1 , (*A 625(P 240)*)    1
         , (*A 626(P 241)*)    1 , (*A 627(P 242)*)    1 , (*A 628(P 243)*)    1
         , (*A 629(P 244)*)    1 , (*A 630(P 245)*)    1 , (*A 631(P 246)*)    1
         , (*A 632(P 247)*)    0 , (*A 633(P 248)*)    5 , (*A 634(P 249)*)    1
         , (*A 635(P 250)*)    1 , (*A 636(P 251)*)    1 , (*A 637(P 252)*)    1
         , (*A 638(P 253)*)    1 , (*A 639(P 254)*)    1 , (*A 640(P 255)*)    0
         , (*A 641(P 256)*)    1 , (*A 642(P 257)*)    1 , (*A 643(P 258)*)    2
         , (*A 644(P 259)*)    0 , (*A 645(P 260)*)    2 , (*A 646(P 261)*)    1
         , (*A 647(P 262)*)    3 , (*A 648(P 263)*)    1 , (*A 649(P 264)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 386(P   1)*)  259 , (*A 387(P   2)*)  109 , (*A 388(P   3)*)  109
         , (*A 389(P   4)*)  109 , (*A 390(P   5)*)  109 , (*A 391(P   6)*)  109
         , (*A 392(P   7)*)  109 , (*A 393(P   8)*)  115 , (*A 394(P   9)*)  116
         , (*A 395(P  10)*)  117 , (*A 396(P  11)*)  118 , (*A 397(P  12)*)  119
         , (*A 398(P  13)*)  120 , (*A 399(P  14)*)  122 , (*A 400(P  15)*)  113
         , (*A 401(P  16)*)  125 , (*A 402(P  17)*)  108 , (*A 403(P  18)*)  127
         , (*A 404(P  19)*)  114 , (*A 405(P  20)*)  129 , (*A 406(P  21)*)  110
         , (*A 407(P  22)*)  131 , (*A 408(P  23)*)  111 , (*A 409(P  24)*)  133
         , (*A 410(P  25)*)  112 , (*A 411(P  26)*)  121 , (*A 412(P  27)*)  121
         , (*A 413(P  28)*)  135 , (*A 414(P  29)*)  135 , (*A 415(P  30)*)  132
         , (*A 416(P  31)*)  123 , (*A 417(P  32)*)  124 , (*A 418(P  33)*)  124
         , (*A 419(P  34)*)  137 , (*A 420(P  35)*)  138 , (*A 421(P  36)*)  138
         , (*A 422(P  37)*)  139 , (*A 423(P  38)*)  139 , (*A 424(P  39)*)  140
         , (*A 425(P  40)*)  137 , (*A 426(P  41)*)  141 , (*A 427(P  42)*)  141
         , (*A 428(P  43)*)  128 , (*A 429(P  44)*)  128 , (*A 430(P  45)*)  143
         , (*A 431(P  46)*)  143 , (*A 432(P  47)*)  145 , (*A 433(P  48)*)  146
         , (*A 434(P  49)*)  147 , (*A 435(P  50)*)  147 , (*A 436(P  51)*)  148
         , (*A 437(P  52)*)  148 , (*A 438(P  53)*)  136 , (*A 439(P  54)*)  136
         , (*A 440(P  55)*)  149 , (*A 441(P  56)*)  149 , (*A 442(P  57)*)  150
         , (*A 443(P  58)*)  150 , (*A 444(P  59)*)  151 , (*A 445(P  60)*)  151
         , (*A 446(P  61)*)  152 , (*A 447(P  62)*)  152 , (*A 448(P  63)*)  152
         , (*A 449(P  64)*)  154 , (*A 450(P  65)*)  154 , (*A 451(P  66)*)  155
         , (*A 452(P  67)*)  157 , (*A 453(P  68)*)  156 , (*A 454(P  69)*)  156
         , (*A 455(P  70)*)  158 , (*A 456(P  71)*)  158 , (*A 457(P  72)*)  160
         , (*A 458(P  73)*)  159 , (*A 459(P  74)*)  163 , (*A 460(P  75)*)  163
         , (*A 461(P  76)*)  164 , (*A 462(P  77)*)  166 , (*A 463(P  78)*)  165
         , (*A 464(P  79)*)  165 , (*A 465(P  80)*)  167 , (*A 466(P  81)*)  167
         , (*A 467(P  82)*)  169 , (*A 468(P  83)*)  168 , (*A 469(P  84)*)  170
         , (*A 470(P  85)*)  170 , (*A 471(P  86)*)  171 , (*A 472(P  87)*)  173
         , (*A 473(P  88)*)  172 , (*A 474(P  89)*)  172 , (*A 475(P  90)*)  174
         , (*A 476(P  91)*)  174 , (*A 477(P  92)*)  175 , (*A 478(P  93)*)  176
         , (*A 479(P  94)*)  178 , (*A 480(P  95)*)  177 , (*A 481(P  96)*)  177
         , (*A 482(P  97)*)  179 , (*A 483(P  98)*)  179 , (*A 484(P  99)*)  180
         , (*A 485(P 100)*)  181 , (*A 486(P 101)*)  161 , (*A 487(P 102)*)  161
         , (*A 488(P 103)*)  182 , (*A 489(P 104)*)  182 , (*A 490(P 105)*)  153
         , (*A 491(P 106)*)  153 , (*A 492(P 107)*)  153 , (*A 493(P 108)*)  153
         , (*A 494(P 109)*)  153 , (*A 495(P 110)*)  153 , (*A 496(P 111)*)  153
         , (*A 497(P 112)*)  153 , (*A 498(P 113)*)  153 , (*A 499(P 114)*)  153
         , (*A 500(P 115)*)  153 , (*A 501(P 116)*)  153 , (*A 502(P 117)*)  153
         , (*A 503(P 118)*)  153 , (*A 504(P 119)*)  153 , (*A 505(P 120)*)  153
         , (*A 506(P 121)*)  153 , (*A 507(P 122)*)  153 , (*A 508(P 123)*)  199
         , (*A 509(P 124)*)  201 , (*A 510(P 125)*)  200 , (*A 511(P 126)*)  200
         , (*A 512(P 127)*)  202 , (*A 513(P 128)*)  202 , (*A 514(P 129)*)  203
         , (*A 515(P 130)*)  153 , (*A 516(P 131)*)  204 , (*A 517(P 132)*)  204
         , (*A 518(P 133)*)  205 , (*A 519(P 134)*)  205 , (*A 520(P 135)*)  206
         , (*A 521(P 136)*)  153 , (*A 522(P 137)*)  207 , (*A 523(P 138)*)  207
         , (*A 524(P 139)*)  207 , (*A 525(P 140)*)  208 , (*A 526(P 141)*)  208
         , (*A 527(P 142)*)  210 , (*A 528(P 143)*)  209 , (*A 529(P 144)*)  212
         , (*A 530(P 145)*)  212 , (*A 531(P 146)*)  212 , (*A 532(P 147)*)  213
         , (*A 533(P 148)*)  213 , (*A 534(P 149)*)  215 , (*A 535(P 150)*)  214
         , (*A 536(P 151)*)  216 , (*A 537(P 152)*)  216 , (*A 538(P 153)*)  216
         , (*A 539(P 154)*)  217 , (*A 540(P 155)*)  217 , (*A 541(P 156)*)  217
         , (*A 542(P 157)*)  219 , (*A 543(P 158)*)  218 , (*A 544(P 159)*)  153
         , (*A 545(P 160)*)  220 , (*A 546(P 161)*)  153 , (*A 547(P 162)*)  211
         , (*A 548(P 163)*)  221 , (*A 549(P 164)*)  224 , (*A 550(P 165)*)  224
         , (*A 551(P 166)*)  225 , (*A 552(P 167)*)  225 , (*A 553(P 168)*)  227
         , (*A 554(P 169)*)  227 , (*A 555(P 170)*)  227 , (*A 556(P 171)*)  227
         , (*A 557(P 172)*)  226 , (*A 558(P 173)*)  228 , (*A 559(P 174)*)  229
         , (*A 560(P 175)*)  229 , (*A 561(P 176)*)  230 , (*A 562(P 177)*)  230
         , (*A 563(P 178)*)  222 , (*A 564(P 179)*)  222 , (*A 565(P 180)*)  223
         , (*A 566(P 181)*)  223 , (*A 567(P 182)*)  223 , (*A 568(P 183)*)  231
         , (*A 569(P 184)*)  233 , (*A 570(P 185)*)  232 , (*A 571(P 186)*)  234
         , (*A 572(P 187)*)  232 , (*A 573(P 188)*)  162 , (*A 574(P 189)*)  235
         , (*A 575(P 190)*)  235 , (*A 576(P 191)*)  236 , (*A 577(P 192)*)  236
         , (*A 578(P 193)*)  237 , (*A 579(P 194)*)  237 , (*A 580(P 195)*)  238
         , (*A 581(P 196)*)  238 , (*A 582(P 197)*)  239 , (*A 583(P 198)*)  239
         , (*A 584(P 199)*)  241 , (*A 585(P 200)*)  241 , (*A 586(P 201)*)  243
         , (*A 587(P 202)*)  243 , (*A 588(P 203)*)  245 , (*A 589(P 204)*)  245
         , (*A 590(P 205)*)  245 , (*A 591(P 206)*)  245 , (*A 592(P 207)*)  245
         , (*A 593(P 208)*)  247 , (*A 594(P 209)*)  248 , (*A 595(P 210)*)  248
         , (*A 596(P 211)*)  249 , (*A 597(P 212)*)  249 , (*A 598(P 213)*)  248
         , (*A 599(P 214)*)  250 , (*A 600(P 215)*)  250 , (*A 601(P 216)*)  250
         , (*A 602(P 217)*)  251 , (*A 603(P 218)*)  251 , (*A 604(P 219)*)  247
         , (*A 605(P 220)*)  247 , (*A 606(P 221)*)  247 , (*A 607(P 222)*)  247
         , (*A 608(P 223)*)  247 , (*A 609(P 224)*)  247 , (*A 610(P 225)*)  247
         , (*A 611(P 226)*)  247 , (*A 612(P 227)*)  247 , (*A 613(P 228)*)  247
         , (*A 614(P 229)*)  247 , (*A 615(P 230)*)  247 , (*A 616(P 231)*)  240
         , (*A 617(P 232)*)  240 , (*A 618(P 233)*)  240 , (*A 619(P 234)*)  240
         , (*A 620(P 235)*)  240 , (*A 621(P 236)*)  240 , (*A 622(P 237)*)  240
         , (*A 623(P 238)*)  242 , (*A 624(P 239)*)  242 , (*A 625(P 240)*)  242
         , (*A 626(P 241)*)  244 , (*A 627(P 242)*)  244 , (*A 628(P 243)*)  244
         , (*A 629(P 244)*)  244 , (*A 630(P 245)*)  246 , (*A 631(P 246)*)  246
         , (*A 632(P 247)*)  252 , (*A 633(P 248)*)  134 , (*A 634(P 249)*)  253
         , (*A 635(P 250)*)  253 , (*A 636(P 251)*)  253 , (*A 637(P 252)*)  253
         , (*A 638(P 253)*)  253 , (*A 639(P 254)*)  253 , (*A 640(P 255)*)  126
         , (*A 641(P 256)*)  126 , (*A 642(P 257)*)  255 , (*A 643(P 258)*)  255
         , (*A 644(P 259)*)  130 , (*A 645(P 260)*)  130 , (*A 646(P 261)*)  256
         , (*A 647(P 262)*)  256 , (*A 648(P 263)*)  257 , (*A 649(P 264)*)  258
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   95 , (*:  13*)   30 , (*:  14*)   95
         , (*:  15*)   66 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   71 , (*:  22*)   95 , (*:  23*)   95
         , (*:  24*)   69 , (*:  25*)   70 , (*:  26*)   70
         , (*:  27*)   95 , (*:  28*)   19 , (*:  29*)   95
         , (*:  30*)   67 , (*:  31*)   19 , (*:  32*)   95
         , (*:  33*)   19 , (*:  34*)   95 , (*:  35*)   67
         , (*:  36*)    9 , (*:  37*)    9 , (*:  38*)   66
         , (*:  39*)   68 , (*:  40*)   95 , (*:  41*)   95
         , (*:  42*)   52 , (*:  43*)   11 , (*:  44*)   95
         , (*:  45*)   19 , (*:  46*)   76 , (*:  47*)   76
         , (*:  48*)   76 , (*:  49*)   95 , (*:  50*)   19
         , (*:  51*)   19 , (*:  52*)   95 , (*:  53*)   19
         , (*:  54*)   19 , (*:  55*)   96 , (*:  56*)   96
         , (*:  57*)   96 , (*:  58*)   67 , (*:  59*)   95
         , (*:  60*)    5 , (*:  61*)   70 , (*:  62*)   67
         , (*:  63*)   96 , (*:  64*)   19 , (*:  65*)   96
         , (*:  66*)   19 , (*:  67*)   96 , (*:  68*)    5
         , (*:  69*)   96 , (*:  70*)    5 , (*:  71*)   96
         , (*:  72*)    5 , (*:  73*)   96 , (*:  74*)   96
         , (*:  75*)    5 , (*:  76*)   95 , (*:  77*)   96
         , (*:  78*)   19 , (*:  79*)    5 , (*:  80*)    5
         , (*:  81*)   81 , (*:  82*)   96 , (*:  83*)   70
         , (*:  84*)   96 , (*:  85*)   70 , (*:  86*)    5
         , (*:  87*)   19 , (*:  88*)   19 , (*:  89*)   19
         , (*:  90*)   39 , (*:  91*)   39 , (*:  92*)   39
         , (*:  93*)   19 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   19
         , (*:  99*)   69 , (*: 100*)   70 , (*: 101*)   70
         , (*: 102*)   70 , (*: 103*)   70 , (*: 104*)   95
         , (*: 105*)   66 , (*: 106*)   66 , (*: 107*)   95
         , (*: 108*)   69 , (*: 109*)   19 , (*: 110*)   95
         , (*: 111*)   19 , (*: 112*)    6 , (*: 113*)   76
         , (*: 114*)   76 , (*: 115*)   76 , (*: 116*)   95
         , (*: 117*)   66 , (*: 118*)   96 , (*: 119*)   19
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   68 , (*: 124*)   96 , (*: 125*)   19
         , (*: 126*)   68 , (*: 127*)   96 , (*: 128*)   66
         , (*: 129*)    9 , (*: 130*)    9 , (*: 131*)   66
         , (*: 132*)   68 , (*: 133*)   95 , (*: 134*)   66
         , (*: 135*)    9 , (*: 136*)   68 , (*: 137*)   95
         , (*: 138*)    9 , (*: 139*)   66 , (*: 140*)   66
         , (*: 141*)    9 , (*: 142*)    9 , (*: 143*)   66
         , (*: 144*)   66 , (*: 145*)   69 , (*: 146*)   66
         , (*: 147*)    9 , (*: 148*)   95 , (*: 149*)   66
         , (*: 150*)    9 , (*: 151*)    9 , (*: 152*)   19
         , (*: 153*)   19 , (*: 154*)   74 , (*: 155*)   96
         , (*: 156*)   19 , (*: 157*)   19 , (*: 158*)    9
         , (*: 159*)   66 , (*: 160*)   66 , (*: 161*)   66
         , (*: 162*)   95 , (*: 163*)   95 , (*: 164*)   69
         , (*: 165*)   19 , (*: 166*)   95 , (*: 167*)   67
         , (*: 168*)   66 , (*: 169*)    9 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)   19
         , (*: 174*)   19 , (*: 175*)   95 , (*: 176*)   67
         , (*: 177*)   69 , (*: 178*)   69 , (*: 179*)   70
         , (*: 180*)   70 , (*: 181*)   66 , (*: 182*)   14
         , (*: 183*)   19 , (*: 184*)   19 , (*: 185*)   95
         , (*: 186*)   67 , (*: 187*)   69 , (*: 188*)   69
         , (*: 189*)   66 , (*: 190*)    9 , (*: 191*)    9
         , (*: 192*)   95 , (*: 193*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 194)*)  407 (*P21*) , (*RR: 195)*)  409 (*P23*)
         , (*RR: 196)*)  411 (*P25*) , (*RR: 197)*)  399 (*P13*)
         , (*RR: 198)*)  403 (*P17*) , (*RR: 199)*)  424 (*P38*)
         , (*RR: 200)*)  423 (*P37*) , (*RR: 201)*)  419 (*P33*)
         , (*RR: 202)*)  426 (*P40*) , (*RR: 203)*)  425 (*P39*)
         , (*RR: 204)*)  427 (*P41*) , (*RR: 205)*)  416 (*P30*)
         , (*RR: 206)*)  433 (*P47*) , (*RR: 207)*)  400 (*P14*)
         , (*RR: 208)*)  451 (*P65*) , (*RR: 209)*)  568 (*P182*)
         , (*RR: 210)*)  471 (*P85*) , (*RR: 211)*)  461 (*P75*)
         , (*RR: 212)*)  478 (*P92*) , (*RR: 213)*)  402 (*P16*)
         , (*RR: 214)*)  457 (*P71*) , (*RR: 215)*)  456 (*P70*)
         , (*RR: 216)*)  545 (*P159*) , (*RR: 217)*)  520 (*P134*)
         , (*RR: 218)*)  447 (*P61*) , (*RR: 219)*)  448 (*P62*)
         , (*RR: 220)*)  508 (*P122*) , (*RR: 221)*)  445 (*P59*)
         , (*RR: 222)*)  514 (*P128*) , (*RR: 223)*)  509 (*P123*)
         , (*RR: 224)*)  436 (*P50*) , (*RR: 225)*)  437 (*P51*)
         , (*RR: 226)*)  630 (*P244*) , (*RR: 227)*)  631 (*P245*)
         , (*RR: 228)*)  593 (*P207*) , (*RR: 229)*)  604 (*P218*)
         , (*RR: 230)*)  605 (*P219*) , (*RR: 231)*)  606 (*P220*)
         , (*RR: 232)*)  607 (*P221*) , (*RR: 233)*)  608 (*P222*)
         , (*RR: 234)*)  609 (*P223*) , (*RR: 235)*)  610 (*P224*)
         , (*RR: 236)*)  613 (*P227*) , (*RR: 237)*)  614 (*P228*)
         , (*RR: 238)*)  611 (*P225*) , (*RR: 239)*)  612 (*P226*)
         , (*RR: 240)*)  622 (*P236*) , (*RR: 241)*)  616 (*P230*)
         , (*RR: 242)*)  617 (*P231*) , (*RR: 243)*)  618 (*P232*)
         , (*RR: 244)*)  619 (*P233*) , (*RR: 245)*)  620 (*P234*)
         , (*RR: 246)*)  621 (*P235*) , (*RR: 247)*)  623 (*P237*)
         , (*RR: 248)*)  624 (*P238*) , (*RR: 249)*)  625 (*P239*)
         , (*RR: 250)*)  628 (*P242*) , (*RR: 251)*)  629 (*P243*)
         , (*RR: 252)*)  626 (*P240*) , (*RR: 253)*)  627 (*P241*)
         , (*RR: 254)*)  589 (*P203*) , (*RR: 255)*)  595 (*P209*)
         , (*RR: 256)*)  594 (*P208*) , (*RR: 257)*)  598 (*P212*)
         , (*RR: 258)*)  615 (*P229*) , (*RR: 259)*)  521 (*P135*)
         , (*RR: 260)*)  542 (*P156*) , (*RR: 261)*)  527 (*P141*)
         , (*RR: 262)*)  556 (*P170*) , (*RR: 263)*)  554 (*P168*)
         , (*RR: 264)*)  555 (*P169*) , (*RR: 265)*)  548 (*P162*)
         , (*RR: 266)*)  566 (*P180*) , (*RR: 267)*)  567 (*P181*)
         , (*RR: 268)*)  534 (*P148*) , (*RR: 269)*)  543 (*P157*)
         , (*RR: 270)*)  455 (*P69*) , (*RR: 271)*)  467 (*P81*)
         , (*RR: 272)*)  466 (*P80*) , (*RR: 273)*)  459 (*P73*)
         , (*RR: 274)*)  460 (*P74*) , (*RR: 275)*)  465 (*P79*)
         , (*RR: 276)*)  469 (*P83*) , (*RR: 277)*)  470 (*P84*)
         , (*RR: 278)*)  476 (*P90*) , (*RR: 279)*)  475 (*P89*)
         , (*RR: 280)*)  483 (*P97*) , (*RR: 281)*)  482 (*P96*)
         , (*RR: 282)*)  570 (*P184*) , (*RR: 283)*)  571 (*P185*)
         , (*RR: 284)*)  572 (*P186*) , (*RR: 285)*)  633 (*P247*)
         , (*RR: 286)*)  432 (*P46*) , (*RR: 287)*)  404 (*P18*)
         , (*RR: 288)*)  406 (*P20*) , (*RR: 289)*)  415 (*P29*)
         , (*RR: 290)*)  408 (*P22*) , (*RR: 291)*)  410 (*P24*)
         , (*RR: 292)*)  387 (*P1*) , (*RR: 293)*)  388 (*P2*)
         , (*RR: 294)*)  389 (*P3*) , (*RR: 295)*)  390 (*P4*)
         , (*RR: 296)*)  391 (*P5*) , (*RR: 297)*)  392 (*P6*)
         , (*RR: 298)*)  421 (*P35*) , (*RR: 299)*)  420 (*P34*)
         , (*RR: 300)*)  418 (*P32*) , (*RR: 301)*)  438 (*P52*)
         , (*RR: 302)*)  452 (*P66*) , (*RR: 303)*)  446 (*P60*)
         , (*RR: 304)*)  491 (*P105*) , (*RR: 305)*)  492 (*P106*)
         , (*RR: 306)*)  493 (*P107*) , (*RR: 307)*)  494 (*P108*)
         , (*RR: 308)*)  495 (*P109*) , (*RR: 309)*)  496 (*P110*)
         , (*RR: 310)*)  497 (*P111*) , (*RR: 311)*)  498 (*P112*)
         , (*RR: 312)*)  499 (*P113*) , (*RR: 313)*)  500 (*P114*)
         , (*RR: 314)*)  501 (*P115*) , (*RR: 315)*)  502 (*P116*)
         , (*RR: 316)*)  503 (*P117*) , (*RR: 317)*)  504 (*P118*)
         , (*RR: 318)*)  505 (*P119*) , (*RR: 319)*)  506 (*P120*)
         , (*RR: 320)*)  507 (*P121*) , (*RR: 321)*)  513 (*P127*)
         , (*RR: 322)*)  512 (*P126*) , (*RR: 323)*)  515 (*P129*)
         , (*RR: 324)*)  518 (*P132*) , (*RR: 325)*)  603 (*P217*)
         , (*RR: 326)*)  577 (*P191*) , (*RR: 327)*)  585 (*P199*)
         , (*RR: 328)*)  586 (*P200*) , (*RR: 329)*)  587 (*P201*)
         , (*RR: 330)*)  596 (*P210*) , (*RR: 331)*)  576 (*P190*)
         , (*RR: 332)*)  584 (*P198*) , (*RR: 333)*)  597 (*P211*)
         , (*RR: 334)*)  588 (*P202*) , (*RR: 335)*)  602 (*P216*)
         , (*RR: 336)*)  601 (*P215*) , (*RR: 337)*)  600 (*P214*)
         , (*RR: 338)*)  591 (*P205*) , (*RR: 339)*)  488 (*P102*)
         , (*RR: 340)*)  484 (*P98*) , (*RR: 341)*)  519 (*P133*)
         , (*RR: 342)*)  517 (*P131*) , (*RR: 343)*)  538 (*P152*)
         , (*RR: 344)*)  526 (*P140*) , (*RR: 345)*)  551 (*P165*)
         , (*RR: 346)*)  559 (*P173*) , (*RR: 347)*)  546 (*P160*)
         , (*RR: 348)*)  563 (*P177*) , (*RR: 349)*)  443 (*P57*)
         , (*RR: 350)*)  442 (*P56*) , (*RR: 351)*)  547 (*P161*)
         , (*RR: 352)*)  561 (*P175*) , (*RR: 353)*)  557 (*P171*)
         , (*RR: 354)*)  550 (*P164*) , (*RR: 355)*)  552 (*P166*)
         , (*RR: 356)*)  528 (*P142*) , (*RR: 357)*)  524 (*P138*)
         , (*RR: 358)*)  525 (*P139*) , (*RR: 359)*)  533 (*P147*)
         , (*RR: 360)*)  531 (*P145*) , (*RR: 361)*)  532 (*P146*)
         , (*RR: 362)*)  535 (*P149*) , (*RR: 363)*)  486 (*P100*)
         , (*RR: 364)*)  458 (*P72*) , (*RR: 365)*)  634 (*P248*)
         , (*RR: 366)*)  462 (*P76*) , (*RR: 367)*)  468 (*P82*)
         , (*RR: 368)*)  635 (*P249*) , (*RR: 369)*)  477 (*P91*)
         , (*RR: 370)*)  472 (*P86*) , (*RR: 371)*)  639 (*P253*)
         , (*RR: 372)*)  479 (*P93*) , (*RR: 373)*)  637 (*P251*)
         , (*RR: 374)*)  569 (*P183*) , (*RR: 375)*)  649 (*P263*)
         , (*RR: 376)*)  647 (*P261*) , (*RR: 377)*)  648 (*P262*)
         , (*RR: 378)*)  645 (*P259*) , (*RR: 379)*)  646 (*P260*)
         , (*RR: 380)*)  638 (*P252*) , (*RR: 381)*)  642 (*P256*)
         , (*RR: 382)*)  636 (*P250*) , (*RR: 383)*)  643 (*P257*)
         , (*RR: 384)*)  431 (*P45*) , (*RR: 385)*)  430 (*P44*)
         }; 

VAR
   yyIsInitialized      : BOOLEAN;
   yyTableFile          : System.tFile;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 386 => (* P1 _0000_ (259): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 387,292 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 388,293 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 389,294 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 390,295 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 391,296 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 392,297 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 393 => (* P8 InterfaceKind (115): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 115;
                (* line 288 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 394 => (* P9 ModuleKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 395 => (* P10 GenInterfaceKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 396 => (* P11 GenModuleKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 397 => (* P12 InstInterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 398 => (* P13 InstModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 399,197 => (* P14 InterfaceLt (122): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 306 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 400,207 => (* P15 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 401 => (* P16 InterfaceMiddle (125): InterfaceLt StkSemicolon ImportList .*)
                DEC (yyStackPtr, 3); yyNonterminal := 125;
                (* line 332 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 402,213 => (* P17 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 343 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 403,198 => (* P18 ModuleLt (127): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 127;
                (* line 366 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 404,287 => (* P19 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 385 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 405 => (* P20 ModuleMiddle (129): ModuleLt Exports StkSemicolon ImportList .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 392 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 406,288 => (* P21 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 403 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , LUnitRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 407,194 => (* P22 GenInterfaceLt (131): StkRwGENERIC StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 431 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef ;
                       END ; 
                     
              | 408,290 => (* P23 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 111;
                (* line 451 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 409,195 => (* P24 GenModuleLt (133): StkRwGENERIC StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 459 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntDeclScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 410,291 => (* P25 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList Block StkIdent StkDot .*)
                DEC (yyStackPtr, 8); yyNonterminal := 112;
                (* line 479 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+7] . Scan , Ukt . UkGenModule ) ;
                     
              | 411,196 => (* P26 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 487 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 412 => (* P27 OptUnsafe (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 488 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 413 => (* P28 OptSemicolon (135): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 135;

              | 414 => (* P29 OptSemicolon (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;

              | 415,289 => (* P30 GenFormalList (132): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 497 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 416,205 => (* P31 GenActualList (123): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 503 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 417 => (* P32 ImportList (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 418,300 => (* P33 ImportList (124): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 419,201 => (* P34 Import (137): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;

              | 420,299 => (* P35 ImportItemPlusList (138): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 138;

              | 421,298 => (* P36 ImportItemPlusList (138): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 422 => (* P37 ImportItem (139): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;
                (* line 522 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface
                                ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                , IsExport := FALSE
                                ) ;
                         FM3ExpImp . ImportIntfASIdent ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan ) ;
                       END (* Block *) 
                     
              | 423,200 => (* P38 ImportItem (139): StkIdent StkRwAS StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;
                (* line 535 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface
                                ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                , IsExport := FALSE
                                ) ;
                         FM3ExpImp . ImportIntfASIdent ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                       END (* Block *) 
                     
              | 424,199 => (* P39 FromImportLt (140): StkRwFROM StkIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 549 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 425,203 => (* P40 Import (137): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;

              | 426,202 => (* P41 FromImportIdPlusList (141): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 141;
                (* line 560 of "FM3Parser.lalr" *)
                 <* ASSERT yyAttributeStack^[yyStackPtr] . PaRefany # NIL *>
                       EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 427,204 => (* P42 FromImportIdPlusList (141): FromImportPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 566 of "FM3Parser.lalr" *)
                 <* ASSERT yyAttributeStack^[yyStackPtr] . PaRefany # NIL *>
                       EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 428 => (* P43 Exports (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 576 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . Scan . Position 
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 429 => (* P44 Exports (128): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 128;

              | 430,385 => (* P45 ExportIdPlusList (143): StkExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 431,384 => (* P46 ExportIdPlusList (143): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 432,286 => (* P47 ExportIdent (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 596 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 433,206 => (* P48 IdentRef (146): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 611 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 434 => (* P49 IdPlusList (147): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 615 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 435 => (* P50 IdPlusList (147): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;
                (* line 619 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 436,224 => (* P51 DeclIdListElems (148): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 631 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3Pass1 . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 437,225 => (* P52 DeclIdListElems (148): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 148;
                (* line 642 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 438,301 => (* P53 IdStarList (136): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 655 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 439 => (* P54 IdStarList (136): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 136;
                (* line 657 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 440 => (* P55 QualIdentStarList (149): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 149;
                (* line 661 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 441 => (* P56 QualIdentStarList (149): QualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 663 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 442,350 => (* P57 QualIdentPlusList (150): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;
                (* line 665 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 443,349 => (* P58 QualIdentPlusList (150): QualIdentPlusList StkComma QualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 667 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 444 => (* P59 QualIdent (151): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 670 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 445,221 => (* P60 QualIdent (151): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 673 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 446,303 => (* P61 TypeId (152): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 447,218 => (* P62 TypeId (152): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 682 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 448,219 => (* P63 TypeId (152): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 152;
                (* line 687 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 449 => (* P64 OptConstType (154): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 697 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 450 => (* P65 OptConstType (154): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 154;
                (* line 699 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 451,208 => (* P66 ConstDeclGroupLt (155): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 708 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 452,302 => (* P67 ConstDeclGroup (157): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 711 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 453 => (* P68 ConstDeclList (156): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 156;
                (* line 716 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 454 => (* P69 ConstDeclList (156): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 722 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 455,270 => (* P70 ConstDeclPlus (158): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 727 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 456,215 => (* P71 ConstDeclPlus (158): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 732 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 457,214 => (* P72 ConstDeclId (160): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 458,364 => (* P73 ConstDecl (159): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 159;
                (* line 757 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 459,273 => (* P74 TypeRelation (163): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 783 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 460,274 => (* P75 TypeRelation (163): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 785 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 461,211 => (* P76 TypeDeclGroupLt (164): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 796 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 462,366 => (* P77 TypeDeclGroup (166): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 799 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 463 => (* P78 TypeDeclList (165): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 165;
                (* line 804 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 464 => (* P79 TypeDeclList (165): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 810 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 465,275 => (* P80 TypeDeclPlus (167): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 815 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 466,272 => (* P81 TypeDeclPlus (167): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 167;
                (* line 820 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 467,271 => (* P82 TypeDeclId (169): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 836 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 468,367 => (* P83 TypeDecl (168): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 168;
                (* line 843 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 469,276 => (* P84 RevelationRelation (170): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 863 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 470,277 => (* P85 RevelationRelation (170): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 865 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 471,210 => (* P86 RevelationGroupLt (171): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 876 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 472,370 => (* P87 RevelationGroup (173): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 173;
                (* line 879 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 473 => (* P88 RevelationList (172): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 172;
                (* line 884 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 474 => (* P89 RevelationList (172): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 890 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 475,279 => (* P90 RevelationPlus (174): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 895 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 476,278 => (* P91 RevelationPlus (174): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 174;
                (* line 900 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 477,369 => (* P92 Revelation (175): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 916 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 478,212 => (* P93 VarDeclGroupLt (176): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 943 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 479,372 => (* P94 VarDeclGroup (178): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 957 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 480 => (* P95 VarDeclList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 963 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 481 => (* P96 VarDeclList (177): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 969 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 482,281 => (* P97 VarDeclPlus (179): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 982 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 483,280 => (* P98 VarDeclPlus (179): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 987 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 484,340 => (* P99 VarDecl (180): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 1005 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 485 => (* P100 VarDeclIds (181): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 1033 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 486,363 => (* P101 OptDeclType (161): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 161;
                (* line 1045 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 487 => (* P102 OptDeclType (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 1049 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclTypeAbsent ) ; 
                     
              | 488,339 => (* P103 OptDeclValue (182): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 182;
                (* line 1054 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 489 => (* P104 OptDeclValue (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 1058 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclValAbsent ) ; 
                     
              | 490 => (* P105 Type (153): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 491,304 => (* P106 Type (153): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 1068 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 492,305 => (* P107 Type (153): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 493,306 => (* P108 Type (153): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 494,307 => (* P109 Type (153): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 495,308 => (* P110 Type (153): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 496,309 => (* P111 Type (153): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 497,310 => (* P112 Type (153): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 498,311 => (* P113 Type (153): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 499,312 => (* P114 Type (153): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 500,313 => (* P115 Type (153): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 501,314 => (* P116 Type (153): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 502,315 => (* P117 Type (153): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 503,316 => (* P118 Type (153): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 504,317 => (* P119 Type (153): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 505,318 => (* P120 Type (153): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 506,319 => (* P121 Type (153): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 507,320 => (* P122 Type (153): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 508,220 => (* P123 EnumTypeLt (199): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 199;
                (* line 1095 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the enum type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 509,223 => (* P124 EnumType (201): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 201;
                (* line 1111 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 510 => (* P125 EnumLitList (200): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 200;
                (* line 1128 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 511 => (* P126 EnumLitList (200): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 200;
                (* line 1131 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 512,322 => (* P127 EnumLitPlus (202): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 202;
                (* line 1134 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 513,321 => (* P128 EnumLitPlus (202): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 202;
                (* line 1137 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 514,222 => (* P129 EnumLit (203): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 203;
                (* line 1140 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 515,323 => (* P130 Type (153): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 516 => (* P131 FieldDeclList (204): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 204;
                (* line 1163 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 517,342 => (* P132 FieldDeclList (204): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 204;
                (* line 1171 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 518,324 => (* P133 FieldDeclPlus (205): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 205;
                (* line 1180 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 519,341 => (* P134 FieldDeclPlus (205): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1183 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 520,217 => (* P135 RecTypeLt (206): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1195 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 521,259 => (* P136 Type (153): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 153;
                (* line 1223 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 522 => (* P137 MethodDeclList (207): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 207;
                (* line 1245 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 523 => (* P138 MethodDeclList (207): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1253 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 524,357 => (* P139 MethodDeclList (207): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 207;
                (* line 1258 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 525,358 => (* P140 MethodDeclPlus (208): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1267 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 526,344 => (* P141 MethodDeclPlus (208): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 208;
                (* line 1270 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 527,261 => (* P142 MethodDeclLt (210): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1282 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 528,356 => (* P143 MethodDecl (209): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 209;
                (* line 1305 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 529 => (* P144 OverrideList (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1335 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 530 => (* P145 OverrideList (212): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1343 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 531,360 => (* P146 OverrideList (212): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 212;
                (* line 1348 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 532,361 => (* P147 OverridePlus (213): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1357 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 533,359 => (* P148 OverridePlus (213): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1360 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 534,268 => (* P149 OverrideLt (215): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1372 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 535,362 => (* P150 Override (214): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 214;
                (* line 1378 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 536 => (* P151 Brand (216): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 216;
                (* line 1390 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 537 => (* P152 Brand (216): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1395 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 538,343 => (* P153 Brand (216): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 216;
                (* line 1400 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 539 => (* P154 Supertype (217): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 217;
                (* line 1407 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 540 => (* P155 Supertype (217): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1413 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 541 => (* P156 Supertype (217): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1422 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 542,260 => (* P157 ObjTypeLt (219): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1433 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 543,269 => (* P158 ObjType (218): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 218;
                (* line 1461 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 544 => (* P159 Type (153): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 545,216 => (* P160 ProcTypeLt (220): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1485 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END (*Block*)
                     
              | 546,347 => (* P161 Type (153): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 1500 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 547,351 => (* P162 Signature (211): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 211;
                (* line 1508 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 548,265 => (* P163 Formals (221): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 221;
                (* line 1528 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 549 => (* P164 FormalsList (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1547 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 550,354 => (* P165 FormalsList (224): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;

              | 551,345 => (* P166 FormalPlus (225): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 225;
                (* line 1552 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 552,355 => (* P167 FormalPlus (225): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1562 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 553 => (* P168 FormalLt (227): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 227;
                (* line 1566 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 554,263 => (* P169 FormalLt (227): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1581 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 555,264 => (* P170 FormalLt (227): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1597 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 556,262 => (* P171 FormalLt (227): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1611 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 557,353 => (* P172 Formal (226): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 226;
                (* line 1628 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 558 => (* P173 FormalIds (228): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1683 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 559,346 => (* P174 FormalType (229): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 229;
                (* line 1695 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 560 => (* P175 FormalType (229): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 229;
                (* line 1704 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 561,352 => (* P176 FormalExpr (230): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1712 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 562 => (* P177 FormalExpr (230): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 230;
                (* line 1721 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 563,348 => (* P178 ResultType (222): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 222;
                (* line 1729 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 564 => (* P179 ResultType (222): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 222;
                (* line 1736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 565 => (* P180 Raises (223): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 223;
                (* line 1746 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 566,266 => (* P181 Raises (223): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 223;
                (* line 1752 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 567,267 => (* P182 Raises (223): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 223;
                (* line 1759 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 568,209 => (* P183 ProcDeclLt (231): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1766 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN LScopeKind  := Skt . SkFormalsAndBody ; 
                         ELSE LScopeKind  := Skt . SkFormals ;
                         END (*IF*) ; 
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , LScopeKind 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END (*Block*) 
                     
              | 569,374 => (* P184 ProcDecl (233): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 233;
                (* line 1791 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => will have a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => will have no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                       END (*Block*) 
                     
              | 570,282 => (* P185 OptProcBody (232): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 232;
                (* line 1835 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 571,283 => (* P186 ProcBodyLt (234): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 234;
                (* line 1844 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 572,284 => (* P187 OptProcBody (232): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 232;
                (* line 1857 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 573 => (* P188 Expr (162): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;

              | 574 => (* P189 E0 (235): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;

              | 575 => (* P190 E0 (235): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 235;
                (* line 1881 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 576,331 => (* P191 E1 (236): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;

              | 577,326 => (* P192 E1 (236): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 236;
                (* line 1891 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 578 => (* P193 E2 (237): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;

              | 579 => (* P194 E2 (237): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 237;
                (* line 1901 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 580 => (* P195 E3 (238): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 238;

              | 581 => (* P196 E3 (238): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1907 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 582 => (* P197 E4 (239): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;

              | 583 => (* P198 E4 (239): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 239;
                (* line 1917 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 584,332 => (* P199 E5 (241): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;

              | 585,327 => (* P200 E5 (241): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 241;
                (* line 1927 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 586,328 => (* P201 E6 (243): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;

              | 587,329 => (* P202 E6 (243): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 243;
                (* line 1937 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 588,334 => (* P203 E7 (245): E8WOId SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 245;
                (* line 1950 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 589,254 => (* P204 E7 (245): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 245;
                (* line 1959 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 590 => (* P205 E7 (245): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 591,338 => (* P206 E7 (245): IdentRef SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 245;
                (* line 1970 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 592 => (* P207 E7 (245): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 593,228 => (* P208 E8WOId (247): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1984 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 594,256 => (* P209 SelectorWODot (248): StkDeref .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 1988 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDerefLt ;
                       yySynAttribute . PaInt := 0 (* Meaningless. *) ;
                     
              | 595,255 => (* P210 SelectorWODot (248): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 1994 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubscriptLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 596,330 => (* P211 SsPlusList (249): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2005 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 597,333 => (* P212 SsPlusList (249): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 2008 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 598,257 => (* P213 SelectorWODot (248): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 2019 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkCallLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 599 => (* P214 ActualList (250): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 250;
                (* line 2030 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 600,337 => (* P215 ActualList (250): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2033 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 601,336 => (* P216 ActualList (250): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2036 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 602,335 => (* P217 Actual (251): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2046 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 603,325 => (* P218 Actual (251): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 251;
                (* line 2051 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 604,229 => (* P219 E8WOId (247): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2062 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 605,230 => (* P220 E8WOId (247): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2069 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 606,231 => (* P221 E8WOId (247): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2076 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 607,232 => (* P222 E8WOId (247): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2086 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 608,233 => (* P223 E8WOId (247): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2096 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 609,234 => (* P224 E8WOId (247): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2103 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 610,235 => (* P225 E8WOId (247): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2110 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 611,238 => (* P226 E8WOId (247): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2118 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 612,239 => (* P227 E8WOId (247): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2125 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 613,236 => (* P228 E8WOId (247): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2132 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 614,237 => (* P229 E8WOId (247): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2134 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 615,258 => (* P230 E8WOId (247): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;

              | 616,241 => (* P231 ExprRelOp (240): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2138 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 617,242 => (* P232 ExprRelOp (240): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2139 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 618,243 => (* P233 ExprRelOp (240): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2140 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 619,244 => (* P234 ExprRelOp (240): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2141 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 620,245 => (* P235 ExprRelOp (240): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2142 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 621,246 => (* P236 ExprRelOp (240): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2143 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 622,240 => (* P237 ExprRelOp (240): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;
                (* line 2144 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 623,247 => (* P238 ExprAddOp (242): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2147 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 624,248 => (* P239 ExprAddOp (242): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2148 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 625,249 => (* P240 ExprAddOp (242): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;
                (* line 2149 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 626,252 => (* P241 ExprMulOp (244): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2151 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 627,253 => (* P242 ExprMulOp (244): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2152 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 628,250 => (* P243 ExprMulOp (244): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2153 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 629,251 => (* P244 ExprMulOp (244): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;
                (* line 2154 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 630,226 => (* P245 ExprUnaryAddOp (246): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2156 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 631,227 => (* P246 ExprUnaryAddOp (246): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2157 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 632 => (* P247 BlockLt (252): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 252;
                (* line 2162 of "FM3Parser.lalr" *)
                
                     
              | 633,285 => (* P248 Block (134): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 2166 of "FM3Parser.lalr" *)
                
                     
              | 634,365 => (* P249 BlockDecl (253): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2172 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 635,368 => (* P250 BlockDecl (253): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2176 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 636,382 => (* P251 BlockDecl (253): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2180 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 637,373 => (* P252 BlockDecl (253): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2184 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 638,380 => (* P253 BlockDecl (253): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2188 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 639,371 => (* P254 BlockDecl (253): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2192 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 640 => (* P255 BlockDeclList (126): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 126;
                (* line 2200 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 641 => (* P256 BlockDeclList (126): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 126;
                (* line 2208 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 642,381 => (* P257 BlockDeclPlus (255): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2217 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 643,383 => (* P258 BlockDeclPlus (255): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 255;
                (* line 2222 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 644 => (* P259 StmtList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2241 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 645,378 => (* P260 StmtList (130): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 130;
                (* line 2249 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 646,379 => (* P261 StmtPlus (256): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2257 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Stmt count. *) ; 
              | 647,376 => (* P262 StmtPlus (256): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2260 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 648,377 => (* P263 Stmt (257): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;

              | 649,375 => (* P264 AssignStmt (258): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2274 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyIsInitialized THEN
         yyIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

