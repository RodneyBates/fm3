
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 266;
   yyTableMax               = 993;
   yyNTableMax              = 1288;
   yyFirstReadState         = 1;
   yyLastReadState          = 196;
   yyFirstReadTermState             = 197;
   yyLastReadTermState              = 296;
   yyLastReadNontermState           = 401;
   yyFirstReduceState               = 402;
   yyLastReduceState                = 681;
   yyStartState             = 1;
   yyStopState              = 402;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   1]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   2])
         , (*   8*) ADR (yyTComb [   3]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   5]) , (*  17*) ADR (yyTComb [   3])
         , (*  18*) ADR (yyTComb [   6]) , (*  19*) ADR (yyTComb [   7])
         , (*  20*) ADR (yyTComb [   4]) , (*  21*) ADR (yyTComb [   8])
         , (*  22*) ADR (yyTComb [   9]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   1])
         , (*  26*) ADR (yyTComb [  10]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [  11]) , (*  29*) ADR (yyTComb [   6])
         , (*  30*) ADR (yyTComb [   0]) , (*  31*) ADR (yyTComb [  12])
         , (*  32*) ADR (yyTComb [   1]) , (*  33*) ADR (yyTComb [  13])
         , (*  34*) ADR (yyTComb [   9]) , (*  35*) ADR (yyTComb [  68])
         , (*  36*) ADR (yyTComb [  69]) , (*  37*) ADR (yyTComb [  13])
         , (*  38*) ADR (yyTComb [  12]) , (*  39*) ADR (yyTComb [  74])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [   0]) , (*  43*) ADR (yyTComb [   0])
         , (*  44*) ADR (yyTComb [  99]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [   5])
         , (*  48*) ADR (yyTComb [   9]) , (*  49*) ADR (yyTComb [  15])
         , (*  50*) ADR (yyTComb [  18]) , (*  51*) ADR (yyTComb [   2])
         , (*  52*) ADR (yyTComb [ 104]) , (*  53*) ADR (yyTComb [  19])
         , (*  54*) ADR (yyTComb [ 105]) , (*  55*) ADR (yyTComb [ 108])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [   0])
         , (*  58*) ADR (yyTComb [   0]) , (*  59*) ADR (yyTComb [ 114])
         , (*  60*) ADR (yyTComb [  20]) , (*  61*) ADR (yyTComb [ 178])
         , (*  62*) ADR (yyTComb [  19]) , (*  63*) ADR (yyTComb [ 240])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [ 277])
         , (*  66*) ADR (yyTComb [   0]) , (*  67*) ADR (yyTComb [ 298])
         , (*  68*) ADR (yyTComb [   0]) , (*  69*) ADR (yyTComb [ 336])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 354])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 392])
         , (*  74*) ADR (yyTComb [  34]) , (*  75*) ADR (yyTComb [ 127])
         , (*  76*) ADR (yyTComb [ 452]) , (*  77*) ADR (yyTComb [  22])
         , (*  78*) ADR (yyTComb [   0]) , (*  79*) ADR (yyTComb [ 490])
         , (*  80*) ADR (yyTComb [ 543]) , (*  81*) ADR (yyTComb [ 603])
         , (*  82*) ADR (yyTComb [ 690]) , (*  83*) ADR (yyTComb [  33])
         , (*  84*) ADR (yyTComb [  64]) , (*  85*) ADR (yyTComb [   0])
         , (*  86*) ADR (yyTComb [  59]) , (*  87*) ADR (yyTComb [  41])
         , (*  88*) ADR (yyTComb [  22]) , (*  89*) ADR (yyTComb [ 763])
         , (*  90*) ADR (yyTComb [   3]) , (*  91*) ADR (yyTComb [ 102])
         , (*  92*) ADR (yyTComb [   0]) , (*  93*) ADR (yyTComb [   2])
         , (*  94*) ADR (yyTComb [   4]) , (*  95*) ADR (yyTComb [   5])
         , (*  96*) ADR (yyTComb [ 797]) , (*  97*) ADR (yyTComb [  11])
         , (*  98*) ADR (yyTComb [  12]) , (*  99*) ADR (yyTComb [   7])
         , (* 100*) ADR (yyTComb [ 115]) , (* 101*) ADR (yyTComb [ 109])
         , (* 102*) ADR (yyTComb [   0]) , (* 103*) ADR (yyTComb [  24])
         , (* 104*) ADR (yyTComb [  82]) , (* 105*) ADR (yyTComb [  88])
         , (* 106*) ADR (yyTComb [ 140]) , (* 107*) ADR (yyTComb [  60])
         , (* 108*) ADR (yyTComb [ 168]) , (* 109*) ADR (yyTComb [ 208])
         , (* 110*) ADR (yyTComb [  89]) , (* 111*) ADR (yyTComb [   0])
         , (* 112*) ADR (yyTComb [ 479]) , (* 113*) ADR (yyTComb [ 115])
         , (* 114*) ADR (yyTComb [ 531]) , (* 115*) ADR (yyTComb [ 166])
         , (* 116*) ADR (yyTComb [   0]) , (* 117*) ADR (yyTComb [  85])
         , (* 118*) ADR (yyTComb [ 124]) , (* 119*) ADR (yyTComb [   0])
         , (* 120*) ADR (yyTComb [   8]) , (* 121*) ADR (yyTComb [ 180])
         , (* 122*) ADR (yyTComb [  96]) , (* 123*) ADR (yyTComb [   4])
         , (* 124*) ADR (yyTComb [  98]) , (* 125*) ADR (yyTComb [   0])
         , (* 126*) ADR (yyTComb [   5]) , (* 127*) ADR (yyTComb [ 116])
         , (* 128*) ADR (yyTComb [   0]) , (* 129*) ADR (yyTComb [ 121])
         , (* 130*) ADR (yyTComb [ 549]) , (* 131*) ADR (yyTComb [ 653])
         , (* 132*) ADR (yyTComb [ 123]) , (* 133*) ADR (yyTComb [ 132])
         , (* 134*) ADR (yyTComb [   0]) , (* 135*) ADR (yyTComb [ 125])
         , (* 136*) ADR (yyTComb [ 656]) , (* 137*) ADR (yyTComb [ 133])
         , (* 138*) ADR (yyTComb [ 812]) , (* 139*) ADR (yyTComb [ 692])
         , (* 140*) ADR (yyTComb [ 126]) , (* 141*) ADR (yyTComb [ 141])
         , (* 142*) ADR (yyTComb [ 811]) , (* 143*) ADR (yyTComb [ 847])
         , (* 144*) ADR (yyTComb [ 142]) , (* 145*) ADR (yyTComb [ 145])
         , (* 146*) ADR (yyTComb [ 143]) , (* 147*) ADR (yyTComb [ 150])
         , (* 148*) ADR (yyTComb [   0]) , (* 149*) ADR (yyTComb [ 120])
         , (* 150*) ADR (yyTComb [ 155]) , (* 151*) ADR (yyTComb [   0])
         , (* 152*) ADR (yyTComb [   1]) , (* 153*) ADR (yyTComb [   0])
         , (* 154*) ADR (yyTComb [   6]) , (* 155*) ADR (yyTComb [ 162])
         , (* 156*) ADR (yyTComb [   7]) , (* 157*) ADR (yyTComb [ 218])
         , (* 158*) ADR (yyTComb [  10]) , (* 159*) ADR (yyTComb [  42])
         , (* 160*) ADR (yyTComb [ 219]) , (* 161*) ADR (yyTComb [   0])
         , (* 162*) ADR (yyTComb [ 185]) , (* 163*) ADR (yyTComb [ 155])
         , (* 164*) ADR (yyTComb [ 158]) , (* 165*) ADR (yyTComb [ 185])
         , (* 166*) ADR (yyTComb [  17]) , (* 167*) ADR (yyTComb [ 162])
         , (* 168*) ADR (yyTComb [ 205]) , (* 169*) ADR (yyTComb [ 207])
         , (* 170*) ADR (yyTComb [   0]) , (* 171*) ADR (yyTComb [   0])
         , (* 172*) ADR (yyTComb [ 439]) , (* 173*) ADR (yyTComb [   2])
         , (* 174*) ADR (yyTComb [  36]) , (* 175*) ADR (yyTComb [  37])
         , (* 176*) ADR (yyTComb [ 182]) , (* 177*) ADR (yyTComb [ 212])
         , (* 178*) ADR (yyTComb [ 214]) , (* 179*) ADR (yyTComb [   0])
         , (* 180*) ADR (yyTComb [ 218]) , (* 181*) ADR (yyTComb [ 220])
         , (* 182*) ADR (yyTComb [ 220]) , (* 183*) ADR (yyTComb [ 553])
         , (* 184*) ADR (yyTComb [ 858]) , (* 185*) ADR (yyTComb [ 299])
         , (* 186*) ADR (yyTComb [  38]) , (* 187*) ADR (yyTComb [ 197])
         , (* 188*) ADR (yyTComb [ 226]) , (* 189*) ADR (yyTComb [ 225])
         , (* 190*) ADR (yyTComb [ 226]) , (* 191*) ADR (yyTComb [ 231])
         , (* 192*) ADR (yyTComb [ 875]) , (* 193*) ADR (yyTComb [ 886])
         , (* 194*) ADR (yyTComb [ 877]) , (* 195*) ADR (yyTComb [ 203])
         , (* 196*) ADR (yyTComb [ 232])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 110]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 110]) , (*  37*) ADR (yyNComb [ 108])
         , (*  38*) ADR (yyNComb [ 110]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 108]) , (*  41*) ADR (yyNComb [ 189])
         , (*  42*) ADR (yyNComb [ 248]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 108])
         , (*  46*) ADR (yyNComb [ 307]) , (*  47*) ADR (yyNComb [ 109])
         , (*  48*) ADR (yyNComb [ 108]) , (*  49*) ADR (yyNComb [ 108])
         , (*  50*) ADR (yyNComb [ 110]) , (*  51*) ADR (yyNComb [ 140])
         , (*  52*) ADR (yyNComb [ 108]) , (*  53*) ADR (yyNComb [ 108])
         , (*  54*) ADR (yyNComb [ 112]) , (*  55*) ADR (yyNComb [ 108])
         , (*  56*) ADR (yyNComb [ 314]) , (*  57*) ADR (yyNComb [ 110])
         , (*  58*) ADR (yyNComb [ 175]) , (*  59*) ADR (yyNComb [ 108])
         , (*  60*) ADR (yyNComb [ 108]) , (*  61*) ADR (yyNComb [ 110])
         , (*  62*) ADR (yyNComb [ 369]) , (*  63*) ADR (yyNComb [ 108])
         , (*  64*) ADR (yyNComb [ 388]) , (*  65*) ADR (yyNComb [ 108])
         , (*  66*) ADR (yyNComb [ 329]) , (*  67*) ADR (yyNComb [ 108])
         , (*  68*) ADR (yyNComb [ 402]) , (*  69*) ADR (yyNComb [ 110])
         , (*  70*) ADR (yyNComb [ 339]) , (*  71*) ADR (yyNComb [ 110])
         , (*  72*) ADR (yyNComb [ 418]) , (*  73*) ADR (yyNComb [ 110])
         , (*  74*) ADR (yyNComb [ 443]) , (*  75*) ADR (yyNComb [ 447])
         , (*  76*) ADR (yyNComb [ 113]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 492]) , (*  79*) ADR (yyNComb [ 108])
         , (*  80*) ADR (yyNComb [ 110]) , (*  81*) ADR (yyNComb [ 110])
         , (*  82*) ADR (yyNComb [ 118]) , (*  83*) ADR (yyNComb [ 108])
         , (*  84*) ADR (yyNComb [ 108]) , (*  85*) ADR (yyNComb [ 511])
         , (*  86*) ADR (yyNComb [ 108]) , (*  87*) ADR (yyNComb [ 527])
         , (*  88*) ADR (yyNComb [ 108]) , (*  89*) ADR (yyNComb [ 110])
         , (*  90*) ADR (yyNComb [ 108]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 108])
         , (*  94*) ADR (yyNComb [ 551]) , (*  95*) ADR (yyNComb [ 108])
         , (*  96*) ADR (yyNComb [ 108]) , (*  97*) ADR (yyNComb [ 334])
         , (*  98*) ADR (yyNComb [ 112]) , (*  99*) ADR (yyNComb [ 123])
         , (* 100*) ADR (yyNComb [ 116]) , (* 101*) ADR (yyNComb [ 113])
         , (* 102*) ADR (yyNComb [ 125]) , (* 103*) ADR (yyNComb [ 175])
         , (* 104*) ADR (yyNComb [ 108]) , (* 105*) ADR (yyNComb [ 121])
         , (* 106*) ADR (yyNComb [ 121]) , (* 107*) ADR (yyNComb [ 113])
         , (* 108*) ADR (yyNComb [ 108]) , (* 109*) ADR (yyNComb [ 108])
         , (* 110*) ADR (yyNComb [ 655]) , (* 111*) ADR (yyNComb [ 199])
         , (* 112*) ADR (yyNComb [ 121]) , (* 113*) ADR (yyNComb [ 714])
         , (* 114*) ADR (yyNComb [ 168]) , (* 115*) ADR (yyNComb [ 108])
         , (* 116*) ADR (yyNComb [ 161]) , (* 117*) ADR (yyNComb [ 108])
         , (* 118*) ADR (yyNComb [ 166]) , (* 119*) ADR (yyNComb [ 574])
         , (* 120*) ADR (yyNComb [ 108]) , (* 121*) ADR (yyNComb [ 190])
         , (* 122*) ADR (yyNComb [ 140]) , (* 123*) ADR (yyNComb [ 281])
         , (* 124*) ADR (yyNComb [ 108]) , (* 125*) ADR (yyNComb [ 721])
         , (* 126*) ADR (yyNComb [ 108]) , (* 127*) ADR (yyNComb [ 108])
         , (* 128*) ADR (yyNComb [ 776]) , (* 129*) ADR (yyNComb [ 108])
         , (* 130*) ADR (yyNComb [ 317]) , (* 131*) ADR (yyNComb [ 108])
         , (* 132*) ADR (yyNComb [ 108]) , (* 133*) ADR (yyNComb [ 115])
         , (* 134*) ADR (yyNComb [ 848]) , (* 135*) ADR (yyNComb [ 108])
         , (* 136*) ADR (yyNComb [ 373]) , (* 137*) ADR (yyNComb [ 110])
         , (* 138*) ADR (yyNComb [ 907]) , (* 139*) ADR (yyNComb [ 391])
         , (* 140*) ADR (yyNComb [ 108]) , (* 141*) ADR (yyNComb [ 108])
         , (* 142*) ADR (yyNComb [ 426]) , (* 143*) ADR (yyNComb [ 477])
         , (* 144*) ADR (yyNComb [ 108]) , (* 145*) ADR (yyNComb [ 108])
         , (* 146*) ADR (yyNComb [ 240]) , (* 147*) ADR (yyNComb [ 183])
         , (* 148*) ADR (yyNComb [ 319]) , (* 149*) ADR (yyNComb [ 108])
         , (* 150*) ADR (yyNComb [ 108]) , (* 151*) ADR (yyNComb [ 551])
         , (* 152*) ADR (yyNComb [ 108]) , (* 153*) ADR (yyNComb [ 923])
         , (* 154*) ADR (yyNComb [ 108]) , (* 155*) ADR (yyNComb [ 108])
         , (* 156*) ADR (yyNComb [ 969]) , (* 157*) ADR (yyNComb [ 147])
         , (* 158*) ADR (yyNComb [ 988]) , (* 159*) ADR (yyNComb [1024])
         , (* 160*) ADR (yyNComb [ 108]) , (* 161*) ADR (yyNComb [ 323])
         , (* 162*) ADR (yyNComb [ 108]) , (* 163*) ADR (yyNComb [ 140])
         , (* 164*) ADR (yyNComb [ 108]) , (* 165*) ADR (yyNComb [ 116])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 108])
         , (* 168*) ADR (yyNComb [ 108]) , (* 169*) ADR (yyNComb [ 108])
         , (* 170*) ADR (yyNComb [ 117]) , (* 171*) ADR (yyNComb [ 386])
         , (* 172*) ADR (yyNComb [1077]) , (* 173*) ADR (yyNComb [ 108])
         , (* 174*) ADR (yyNComb [1027]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 108]) , (* 177*) ADR (yyNComb [ 108])
         , (* 178*) ADR (yyNComb [ 108]) , (* 179*) ADR (yyNComb [ 110])
         , (* 180*) ADR (yyNComb [ 149]) , (* 181*) ADR (yyNComb [ 108])
         , (* 182*) ADR (yyNComb [ 108]) , (* 183*) ADR (yyNComb [ 168])
         , (* 184*) ADR (yyNComb [ 396]) , (* 185*) ADR (yyNComb [1130])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 108])
         , (* 188*) ADR (yyNComb [ 108]) , (* 189*) ADR (yyNComb [ 108])
         , (* 190*) ADR (yyNComb [ 185]) , (* 191*) ADR (yyNComb [ 108])
         , (* 192*) ADR (yyNComb [ 205]) , (* 193*) ADR (yyNComb [ 457])
         , (* 194*) ADR (yyNComb [ 340]) , (* 195*) ADR (yyNComb [ 108])
         , (* 196*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  183 , (*  11*)  184
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   18 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)    0 , (*  23*)  165
         , (*  24*)  180 , (*  25*)  181 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)  185 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)   36
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)  138
         , (*  40*)    0 , (*  41*)  113 , (*  42*)  113 , (*  43*)    0
         , (*  44*)    0 , (*  45*)    0 , (*  46*)  113 , (*  47*)   50
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)  107
         , (*  52*)    0 , (*  53*)    0 , (*  54*)    0 , (*  55*)    0
         , (*  56*)  156 , (*  57*)   74 , (*  58*)  156 , (*  59*)   63
         , (*  60*)    0 , (*  61*)    0 , (*  62*)   87 , (*  63*)    0
         , (*  64*)  156 , (*  65*)   88 , (*  66*)  156 , (*  67*)   79
         , (*  68*)  156 , (*  69*)   89 , (*  70*)   74 , (*  71*)   80
         , (*  72*)   74 , (*  73*)   81 , (*  74*)   75 , (*  75*)    0
         , (*  76*)   82 , (*  77*)    0 , (*  78*)  156 , (*  79*)    0
         , (*  80*)    0 , (*  81*)    0 , (*  82*)    0 , (*  83*)    0
         , (*  84*)    0 , (*  85*)  156 , (*  86*)    0 , (*  87*)  156
         , (*  88*)    0 , (*  89*)    0 , (*  90*)    0 , (*  91*)  100
         , (*  92*)  123 , (*  93*)    0 , (*  94*)  156 , (*  95*)    0
         , (*  96*)    0 , (*  97*)   51 , (*  98*)    0 , (*  99*)  101
         , (* 100*)  157 , (* 101*)  123 , (* 102*)  146 , (* 103*)  106
         , (* 104*)    0 , (* 105*)    0 , (* 106*)    0 , (* 107*)    0
         , (* 108*)    0 , (* 109*)    0 , (* 110*)  138 , (* 111*)  146
         , (* 112*)    0 , (* 113*)   39 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)    0 , (* 118*)    0 , (* 119*)  156
         , (* 120*)    0 , (* 121*)    0 , (* 122*)  157 , (* 123*)  107
         , (* 124*)    0 , (* 125*)  156 , (* 126*)    0 , (* 127*)    0
         , (* 128*)  156 , (* 129*)    0 , (* 130*)  131 , (* 131*)    0
         , (* 132*)    0 , (* 133*)    0 , (* 134*)  138 , (* 135*)    0
         , (* 136*)  139 , (* 137*)    0 , (* 138*)    0 , (* 139*)    0
         , (* 140*)    0 , (* 141*)    0 , (* 142*)  107 , (* 143*)  107
         , (* 144*)    0 , (* 145*)    0 , (* 146*)    0 , (* 147*)    0
         , (* 148*)  194 , (* 149*)    0 , (* 150*)    0 , (* 151*)  172
         , (* 152*)    0 , (* 153*)  174 , (* 154*)    0 , (* 155*)    0
         , (* 156*)   74 , (* 157*)    0 , (* 158*)  156 , (* 159*)  185
         , (* 160*)    0 , (* 161*)  163 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)    0 , (* 169*)    0 , (* 170*)  192 , (* 171*)  193
         , (* 172*)    0 , (* 173*)    0 , (* 174*)  156 , (* 175*)    0
         , (* 176*)    0 , (* 177*)    0 , (* 178*)    0 , (* 179*)  190
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0 , (* 195*)    0
         , (* 196*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  402} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  15,   16}
         , (*  10*) yyTCombType { 152,  153} , (*  11*) yyTCombType { 173,  174}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {  93,   94}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  27,   28}
         , (*  20*) yyTCombType {  32,   33} , (*  21*) yyTCombType {  51,  540}
         , (*  22*) yyTCombType {  90,  264} , (*  23*) yyTCombType { 123,  429}
         , (*  24*) yyTCombType { 126,  274} , (*  25*) yyTCombType { 154,  290}
         , (*  26*) yyTCombType {  99,  547} , (*  27*) yyTCombType { 120,  553}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 158,  429}
         , (*  30*) yyTCombType {  13,  202} , (*  31*) yyTCombType {  98,  546}
         , (*  32*) yyTCombType {   1,  428} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  92,  429}
         , (*  36*) yyTCombType { 166,  167} , (*  37*) yyTCombType {   1,  428}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  40,   41} , (*  41*) yyTCombType {  93,  560}
         , (*  42*) yyTCombType {  92,  429} , (*  43*) yyTCombType {  94,  561}
         , (*  44*) yyTCombType {  95,  265} , (*  45*) yyTCombType { 156,   57}
         , (*  46*) yyTCombType {  97,  540} , (*  47*) yyTCombType {  98,   99}
         , (*  48*) yyTCombType {  45,   46} , (*  49*) yyTCombType {  99,  547}
         , (*  50*) yyTCombType { 120,  121} , (*  51*) yyTCombType { 159,  673}
         , (*  52*) yyTCombType {  43,  222} , (*  53*) yyTCombType {  97,  540}
         , (*  54*) yyTCombType {  98,  546} , (*  55*) yyTCombType { 174,  676}
         , (*  56*) yyTCombType { 175,  176} , (*  57*) yyTCombType { 186,  187}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  199}
         , (*  60*) yyTCombType {   0,    0} , (*  61*) yyTCombType { 159,  673}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {  88,   66}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  15,  438}
         , (*  68*) yyTCombType {   9,   22} , (*  69*) yyTCombType {  17,  204}
         , (*  70*) yyTCombType {  20,  206} , (*  71*) yyTCombType {  25,  208}
         , (*  72*) yyTCombType {  15,  438} , (*  73*) yyTCombType {  29,  210}
         , (*  74*) yyTCombType {  17,   18} , (*  75*) yyTCombType {  20,   21}
         , (*  76*) yyTCombType {  34,  216} , (*  77*) yyTCombType {  35,  472}
         , (*  78*) yyTCombType {  36,  473} , (*  79*) yyTCombType {  37,  218}
         , (*  80*) yyTCombType {  38,  506} , (*  81*) yyTCombType {  47,  534}
         , (*  82*) yyTCombType {  35,  472} , (*  83*) yyTCombType {  36,  473}
         , (*  84*) yyTCombType {  38,   39} , (*  85*) yyTCombType {  48,  226}
         , (*  86*) yyTCombType {  49,   50} , (*  87*) yyTCombType {  35,  472}
         , (*  88*) yyTCombType {  36,  473} , (*  89*) yyTCombType {  62,  630}
         , (*  90*) yyTCombType {  62,  630} , (*  91*) yyTCombType {  49,  535}
         , (*  92*) yyTCombType {  88,  263} , (*  93*) yyTCombType {  39,  531}
         , (*  94*) yyTCombType { 103,  573} , (*  95*) yyTCombType {   3,  197}
         , (*  96*) yyTCombType {   4,  198} , (*  97*) yyTCombType {   7,  200}
         , (*  98*) yyTCombType {   8,  201} , (*  99*) yyTCombType {  12,   13}
         , (* 100*) yyTCombType {  16,  203} , (* 101*) yyTCombType {  18,   15}
         , (* 102*) yyTCombType {  19,  205} , (* 103*) yyTCombType {  21,  207}
         , (* 104*) yyTCombType {  22,   23} , (* 105*) yyTCombType {  26,  209}
         , (* 106*) yyTCombType {  28,   29} , (* 107*) yyTCombType {  31,  212}
         , (* 108*) yyTCombType {  33,   34} , (* 109*) yyTCombType {  39,  531}
         , (* 110*) yyTCombType {  44,  564} , (* 111*) yyTCombType {  35,  472}
         , (* 112*) yyTCombType {  36,  473} , (* 113*) yyTCombType {  50,  225}
         , (* 114*) yyTCombType {  53,  228} , (* 115*) yyTCombType {  60,  231}
         , (* 116*) yyTCombType {  39,  531} , (* 117*) yyTCombType {  77,  257}
         , (* 118*) yyTCombType {  44,  509} , (* 119*) yyTCombType {  35,  472}
         , (* 120*) yyTCombType {  36,  473} , (* 121*) yyTCombType {  74,  229}
         , (* 122*) yyTCombType {  74,  230} , (* 123*) yyTCombType {  52,  504}
         , (* 124*) yyTCombType {  54,  506} , (* 125*) yyTCombType {  35,  472}
         , (* 126*) yyTCombType {  36,  473} , (* 127*) yyTCombType {  55,  508}
         , (* 128*) yyTCombType {  83,  258} , (* 129*) yyTCombType {  86,  261}
         , (* 130*) yyTCombType {  86,   87} , (* 131*) yyTCombType {  35,  472}
         , (* 132*) yyTCombType {  36,  473} , (* 133*) yyTCombType {  59,  450}
         , (* 134*) yyTCombType {  44,  509} , (* 135*) yyTCombType {  84,   85}
         , (* 136*) yyTCombType {  87,   63} , (* 137*) yyTCombType {  91,  430}
         , (* 138*) yyTCombType {  44,  564} , (* 139*) yyTCombType {  52,  504}
         , (* 140*) yyTCombType {  54,  506} , (* 141*) yyTCombType {  44,  509}
         , (* 142*) yyTCombType {  39,  531} , (* 143*) yyTCombType {  55,  508}
         , (* 144*) yyTCombType {  44,  509} , (* 145*) yyTCombType {  84,  259}
         , (* 146*) yyTCombType {  52,  504} , (* 147*) yyTCombType {  54,  506}
         , (* 148*) yyTCombType {  39,  531} , (* 149*) yyTCombType {  59,  450}
         , (* 150*) yyTCombType {  55,  508} , (* 151*) yyTCombType { 101,  429}
         , (* 152*) yyTCombType { 104,  270} , (* 153*) yyTCombType {  59,  450}
         , (* 154*) yyTCombType { 105,  106} , (* 155*) yyTCombType { 107,  227}
         , (* 156*) yyTCombType {  59,  450} , (* 157*) yyTCombType { 100,  430}
         , (* 158*) yyTCombType { 105,  430} , (* 159*) yyTCombType { 110,  531}
         , (* 160*) yyTCombType { 113,  531} , (* 161*) yyTCombType { 117,  272}
         , (* 162*) yyTCombType { 122,  123} , (* 163*) yyTCombType { 110,  531}
         , (* 164*) yyTCombType {  36,  217} , (* 165*) yyTCombType {  44,  509}
         , (* 166*) yyTCombType { 124,  125} , (* 167*) yyTCombType {  44,  509}
         , (* 168*) yyTCombType {  91,   92} , (* 169*) yyTCombType {  44,  509}
         , (* 170*) yyTCombType {  52,  504} , (* 171*) yyTCombType {  54,  506}
         , (* 172*) yyTCombType { 115,  271} , (* 173*) yyTCombType {  44,  509}
         , (* 174*) yyTCombType {  55,  508} , (* 175*) yyTCombType {  52,   53}
         , (* 176*) yyTCombType {  52,  504} , (* 177*) yyTCombType {  54,   39}
         , (* 178*) yyTCombType {  52,  504} , (* 179*) yyTCombType {  54,  506}
         , (* 180*) yyTCombType {  59,  450} , (* 181*) yyTCombType { 100,  101}
         , (* 182*) yyTCombType {  55,   56} , (* 183*) yyTCombType {  61,  620}
         , (* 184*) yyTCombType { 127,  128} , (* 185*) yyTCombType { 113,  531}
         , (* 186*) yyTCombType { 106,  267} , (* 187*) yyTCombType { 129,  275}
         , (* 188*) yyTCombType {  59,  450} , (* 189*) yyTCombType { 132,  277}
         , (* 190*) yyTCombType { 118,  586} , (* 191*) yyTCombType { 135,  280}
         , (* 192*) yyTCombType { 140,  283} , (* 193*) yyTCombType {  61,  620}
         , (* 194*) yyTCombType { 118,  586} , (* 195*) yyTCombType {  59,  450}
         , (* 196*) yyTCombType {  75,   58} , (* 197*) yyTCombType {  61,  620}
         , (* 198*) yyTCombType { 118,  119} , (* 199*) yyTCombType { 121,  554}
         , (* 200*) yyTCombType { 133,  278} , (* 201*) yyTCombType { 137,  281}
         , (* 202*) yyTCombType { 106,  268} , (* 203*) yyTCombType { 106,  269}
         , (* 204*) yyTCombType { 101,  266} , (* 205*) yyTCombType { 133,  279}
         , (* 206*) yyTCombType { 137,  282} , (* 207*) yyTCombType { 141,  284}
         , (* 208*) yyTCombType { 144,  285} , (* 209*) yyTCombType {  61,  620}
         , (* 210*) yyTCombType { 106,  429} , (* 211*) yyTCombType { 145,  286}
         , (* 212*) yyTCombType { 146,  103} , (* 213*) yyTCombType {  61,  620}
         , (* 214*) yyTCombType {  61,  620} , (* 215*) yyTCombType { 149,  150}
         , (* 216*) yyTCombType { 147,  287} , (* 217*) yyTCombType {  61,  620}
         , (* 218*) yyTCombType { 147,  288} , (* 219*) yyTCombType {  61,  620}
         , (* 220*) yyTCombType {  61,  620} , (* 221*) yyTCombType { 150,  289}
         , (* 222*) yyTCombType {  75,   59} , (* 223*) yyTCombType {  75,  232}
         , (* 224*) yyTCombType {  75,  233} , (* 225*) yyTCombType {  75,  234}
         , (* 226*) yyTCombType {  75,  235} , (* 227*) yyTCombType {  75,  236}
         , (* 228*) yyTCombType {  75,  237} , (* 229*) yyTCombType {  75,  238}
         , (* 230*) yyTCombType {  75,  239} , (* 231*) yyTCombType {  75,  240}
         , (* 232*) yyTCombType {  75,  241} , (* 233*) yyTCombType {  75,  242}
         , (* 234*) yyTCombType { 108,  582} , (* 235*) yyTCombType { 106,  577}
         , (* 236*) yyTCombType { 155,  156} , (* 237*) yyTCombType { 157,  430}
         , (* 238*) yyTCombType { 108,  582} , (* 239*) yyTCombType { 108,   53}
         , (* 240*) yyTCombType { 108,  582} , (* 241*) yyTCombType { 115,  116}
         , (* 242*) yyTCombType { 108,  582} , (* 243*) yyTCombType { 160,  161}
         , (* 244*) yyTCombType {  61,  620} , (* 245*) yyTCombType {  63,  450}
         , (* 246*) yyTCombType {  61,  620} , (* 247*) yyTCombType {  61,   62}
         , (* 248*) yyTCombType {  61,  620} , (* 249*) yyTCombType {  61,  620}
         , (* 250*) yyTCombType { 163,  291} , (* 251*) yyTCombType { 162,  446}
         , (* 252*) yyTCombType {  61,  620} , (* 253*) yyTCombType { 164,  165}
         , (* 254*) yyTCombType { 165,   24} , (* 255*) yyTCombType {  63,  450}
         , (* 256*) yyTCombType { 162,  163} , (* 257*) yyTCombType { 167,  168}
         , (* 258*) yyTCombType {  61,   78} , (* 259*) yyTCombType {  61,  620}
         , (* 260*) yyTCombType {  61,  620} , (* 261*) yyTCombType {  61,  620}
         , (* 262*) yyTCombType {  61,  620} , (* 263*) yyTCombType {  61,  620}
         , (* 264*) yyTCombType {  61,  620} , (* 265*) yyTCombType {  61,  620}
         , (* 266*) yyTCombType {  61,  620} , (* 267*) yyTCombType {  61,  620}
         , (* 268*) yyTCombType {  61,  620} , (* 269*) yyTCombType {  61,  620}
         , (* 270*) yyTCombType {  61,  262} , (* 271*) yyTCombType {  63,  450}
         , (* 272*) yyTCombType { 168,  292} , (* 273*) yyTCombType { 169,  170}
         , (* 274*) yyTCombType { 109,  584} , (* 275*) yyTCombType { 121,  273}
         , (* 276*) yyTCombType {  63,  450} , (* 277*) yyTCombType { 176,  177}
         , (* 278*) yyTCombType { 109,  584} , (* 279*) yyTCombType { 177,  293}
         , (* 280*) yyTCombType { 109,  110} , (* 281*) yyTCombType {  63,  450}
         , (* 282*) yyTCombType { 109,  584} , (* 283*) yyTCombType { 178,  411}
         , (* 284*) yyTCombType { 157,  158} , (* 285*) yyTCombType { 160,  445}
         , (* 286*) yyTCombType { 182,  183} , (* 287*) yyTCombType { 160,  164}
         , (* 288*) yyTCombType { 180,  457} , (* 289*) yyTCombType { 180,  457}
         , (* 290*) yyTCombType { 181,  294} , (* 291*) yyTCombType { 181,   26}
         , (* 292*) yyTCombType { 187,  188} , (* 293*) yyTCombType { 188,  295}
         , (* 294*) yyTCombType { 189,  412} , (* 295*) yyTCombType { 190,  180}
         , (* 296*) yyTCombType {  65,  597} , (* 297*) yyTCombType { 191,  192}
         , (* 298*) yyTCombType { 195,  196} , (* 299*) yyTCombType { 196,  296}
         , (* 300*) yyTCombType {   0,    0} , (* 301*) yyTCombType {   0,    0}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {   0,    0}
         , (* 304*) yyTCombType {   0,    0} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {   0,    0} , (* 307*) yyTCombType {  63,   60}
         , (* 308*) yyTCombType {  63,  450} , (* 309*) yyTCombType {  63,  450}
         , (* 310*) yyTCombType {  63,  450} , (* 311*) yyTCombType {  63,  450}
         , (* 312*) yyTCombType {  65,  597} , (* 313*) yyTCombType { 185,  211}
         , (* 314*) yyTCombType {  63,   64} , (* 315*) yyTCombType {   0,    0}
         , (* 316*) yyTCombType {  65,  597} , (* 317*) yyTCombType {  67,  599}
         , (* 318*) yyTCombType { 185,  672} , (* 319*) yyTCombType {  65,  597}
         , (* 320*) yyTCombType {  63,  450} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {  63,  450} , (* 323*) yyTCombType {  63,  450}
         , (* 324*) yyTCombType {  63,  450} , (* 325*) yyTCombType {  63,  450}
         , (* 326*) yyTCombType {  63,  450} , (* 327*) yyTCombType {  63,  450}
         , (* 328*) yyTCombType {  63,  450} , (* 329*) yyTCombType {  63,  450}
         , (* 330*) yyTCombType {  63,  450} , (* 331*) yyTCombType {  63,  450}
         , (* 332*) yyTCombType {  63,  450} , (* 333*) yyTCombType {  67,  599}
         , (* 334*) yyTCombType {   0,    0} , (* 335*) yyTCombType {   0,    0}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {  67,  599}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType {  67,  599}
         , (* 340*) yyTCombType {  67,  599} , (* 341*) yyTCombType {  69,  602}
         , (* 342*) yyTCombType { 185,   31} , (* 343*) yyTCombType {  65,  597}
         , (* 344*) yyTCombType {   0,    0} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType {   0,    0} , (* 347*) yyTCombType {  65,  597}
         , (* 348*) yyTCombType {  65,  597} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType { 185,  213} , (* 351*) yyTCombType {  65,  597}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  69,  602}
         , (* 356*) yyTCombType { 185,  214} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {  65,  597} , (* 359*) yyTCombType {  71,  605}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType { 185,  215} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType {  67,  599} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {  67,  599} , (* 369*) yyTCombType {  67,  599}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {  69,  602}
         , (* 372*) yyTCombType {  67,  599} , (* 373*) yyTCombType {  71,  605}
         , (* 374*) yyTCombType {   0,    0} , (* 375*) yyTCombType {  69,  602}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType {  69,  602}
         , (* 378*) yyTCombType {  69,  602} , (* 379*) yyTCombType {  67,  599}
         , (* 380*) yyTCombType {   0,    0} , (* 381*) yyTCombType {   0,    0}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType {   0,    0} , (* 385*) yyTCombType {  71,  605}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {  71,  605}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType {  71,  605}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {  71,  605}
         , (* 396*) yyTCombType {  71,  605} , (* 397*) yyTCombType {  73,  607}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType {   0,    0}
         , (* 400*) yyTCombType {   0,    0} , (* 401*) yyTCombType {   0,    0}
         , (* 402*) yyTCombType {  69,  602} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {   0,    0} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType {  69,  602} , (* 407*) yyTCombType {  69,  602}
         , (* 408*) yyTCombType {   0,    0} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {  69,  602} , (* 411*) yyTCombType {  73,  607}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType {   0,    0}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType {   0,    0} , (* 417*) yyTCombType {  69,  602}
         , (* 418*) yyTCombType {   0,    0} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType {  71,  605} , (* 421*) yyTCombType {   0,    0}
         , (* 422*) yyTCombType {  71,  605} , (* 423*) yyTCombType {  73,  607}
         , (* 424*) yyTCombType {  71,  605} , (* 425*) yyTCombType {  71,  605}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType {  73,  607}
         , (* 428*) yyTCombType {  71,  605} , (* 429*) yyTCombType {   0,    0}
         , (* 430*) yyTCombType {   0,    0} , (* 431*) yyTCombType {  73,  607}
         , (* 432*) yyTCombType {   0,    0} , (* 433*) yyTCombType {  73,  607}
         , (* 434*) yyTCombType {  73,  607} , (* 435*) yyTCombType {  71,  605}
         , (* 436*) yyTCombType {  71,  605} , (* 437*) yyTCombType {  71,  605}
         , (* 438*) yyTCombType {  71,  605} , (* 439*) yyTCombType {  71,  605}
         , (* 440*) yyTCombType {  71,  605} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {   0,    0}
         , (* 444*) yyTCombType {   0,    0} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType { 172,  672} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {   0,    0}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType { 172,  211}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {  76,  616}
         , (* 458*) yyTCombType {  73,  607} , (* 459*) yyTCombType {   0,    0}
         , (* 460*) yyTCombType {  73,  607} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {  73,  607} , (* 463*) yyTCombType {  73,  607}
         , (* 464*) yyTCombType {   0,    0} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {  73,  607} , (* 467*) yyTCombType {  76,  616}
         , (* 468*) yyTCombType {   0,    0} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {   0,    0} , (* 471*) yyTCombType {  76,  616}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType {  73,  607}
         , (* 474*) yyTCombType {  73,  607} , (* 475*) yyTCombType {  73,  607}
         , (* 476*) yyTCombType {  73,  607} , (* 477*) yyTCombType {  73,  607}
         , (* 478*) yyTCombType {  73,  607} , (* 479*) yyTCombType {  73,  607}
         , (* 480*) yyTCombType {  73,  607} , (* 481*) yyTCombType {  73,  607}
         , (* 482*) yyTCombType { 172,   31} , (* 483*) yyTCombType {  76,  616}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType {   0,    0} , (* 487*) yyTCombType {  76,  616}
         , (* 488*) yyTCombType {  76,  616} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType { 172,  213} , (* 491*) yyTCombType {  76,  616}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType {  76,  616}
         , (* 494*) yyTCombType {  76,  616} , (* 495*) yyTCombType {  79,   68}
         , (* 496*) yyTCombType { 172,  214} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType { 112,  588} , (* 499*) yyTCombType {   0,    0}
         , (* 500*) yyTCombType {   0,    0} , (* 501*) yyTCombType {   0,    0}
         , (* 502*) yyTCombType { 172,  215} , (* 503*) yyTCombType {   0,    0}
         , (* 504*) yyTCombType {   0,    0} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType {  79,  598}
         , (* 510*) yyTCombType {   0,    0} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType { 112,  588} , (* 515*) yyTCombType {   0,    0}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {   0,    0}
         , (* 518*) yyTCombType {  76,  616} , (* 519*) yyTCombType {  76,   77}
         , (* 520*) yyTCombType {  76,  616} , (* 521*) yyTCombType { 112,  588}
         , (* 522*) yyTCombType {  76,  616} , (* 523*) yyTCombType {  76,  616}
         , (* 524*) yyTCombType { 112,  588} , (* 525*) yyTCombType {  79,  598}
         , (* 526*) yyTCombType {  76,  616} , (* 527*) yyTCombType {   0,    0}
         , (* 528*) yyTCombType {   0,    0} , (* 529*) yyTCombType {  79,  598}
         , (* 530*) yyTCombType {   0,    0} , (* 531*) yyTCombType {  79,  598}
         , (* 532*) yyTCombType {  79,  598} , (* 533*) yyTCombType {  76,  616}
         , (* 534*) yyTCombType {  76,  616} , (* 535*) yyTCombType {  76,  616}
         , (* 536*) yyTCombType {  76,  616} , (* 537*) yyTCombType {  76,  616}
         , (* 538*) yyTCombType {  76,  616} , (* 539*) yyTCombType {  76,  616}
         , (* 540*) yyTCombType {  76,  616} , (* 541*) yyTCombType {  76,  616}
         , (* 542*) yyTCombType {  76,  616} , (* 543*) yyTCombType {  76,  616}
         , (* 544*) yyTCombType {  76,  260} , (* 545*) yyTCombType { 112,  588}
         , (* 546*) yyTCombType {   0,    0} , (* 547*) yyTCombType { 112,  588}
         , (* 548*) yyTCombType {  80,  604} , (* 549*) yyTCombType { 112,  588}
         , (* 550*) yyTCombType { 114,  589} , (* 551*) yyTCombType { 112,  113}
         , (* 552*) yyTCombType {   0,    0} , (* 553*) yyTCombType { 112,  588}
         , (* 554*) yyTCombType {   0,    0} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {  79,  598} , (* 557*) yyTCombType {   0,    0}
         , (* 558*) yyTCombType { 130,  482} , (* 559*) yyTCombType {   0,    0}
         , (* 560*) yyTCombType {  79,  598} , (* 561*) yyTCombType {  79,  598}
         , (* 562*) yyTCombType {  80,  604} , (* 563*) yyTCombType { 130,  482}
         , (* 564*) yyTCombType {  79,  598} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType { 114,  589} , (* 567*) yyTCombType { 183,  433}
         , (* 568*) yyTCombType { 130,  482} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType {   0,    0} , (* 571*) yyTCombType {  79,  598}
         , (* 572*) yyTCombType { 183,  433} , (* 573*) yyTCombType { 114,  589}
         , (* 574*) yyTCombType {  80,  604} , (* 575*) yyTCombType {   0,    0}
         , (* 576*) yyTCombType { 114,  115} , (* 577*) yyTCombType {   0,    0}
         , (* 578*) yyTCombType {  80,  604} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType { 183,  433} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {  80,  604} , (* 583*) yyTCombType { 183,  433}
         , (* 584*) yyTCombType {  80,  604} , (* 585*) yyTCombType {  80,  604}
         , (* 586*) yyTCombType {   0,    0} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType { 130,  482} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType {   0,    0} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType { 183,  433} , (* 597*) yyTCombType { 114,  589}
         , (* 598*) yyTCombType {   0,    0} , (* 599*) yyTCombType { 114,  589}
         , (* 600*) yyTCombType { 130,  482} , (* 601*) yyTCombType { 114,  589}
         , (* 602*) yyTCombType {   0,    0} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType { 183,  433} , (* 605*) yyTCombType { 114,  589}
         , (* 606*) yyTCombType { 130,  482} , (* 607*) yyTCombType {   0,    0}
         , (* 608*) yyTCombType {  81,  606} , (* 609*) yyTCombType {  80,  604}
         , (* 610*) yyTCombType { 183,  433} , (* 611*) yyTCombType {  80,  604}
         , (* 612*) yyTCombType { 130,  482} , (* 613*) yyTCombType {  80,  604}
         , (* 614*) yyTCombType {  80,  604} , (* 615*) yyTCombType {   0,    0}
         , (* 616*) yyTCombType { 183,  433} , (* 617*) yyTCombType {  80,  604}
         , (* 618*) yyTCombType {  81,  253} , (* 619*) yyTCombType {   0,    0}
         , (* 620*) yyTCombType {   0,    0} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {  81,  606} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {  80,  604} , (* 625*) yyTCombType {  80,  604}
         , (* 626*) yyTCombType {  80,  604} , (* 627*) yyTCombType {  80,  604}
         , (* 628*) yyTCombType {  80,  604} , (* 629*) yyTCombType {  80,  604}
         , (* 630*) yyTCombType {  80,  250} , (* 631*) yyTCombType {  80,  251}
         , (* 632*) yyTCombType {  80,  252} , (* 633*) yyTCombType {   0,    0}
         , (* 634*) yyTCombType {  81,  606} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType {  81,  606} , (* 639*) yyTCombType {  81,  254}
         , (* 640*) yyTCombType {   0,    0} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {  81,  606} , (* 643*) yyTCombType {   0,    0}
         , (* 644*) yyTCombType {  81,  606} , (* 645*) yyTCombType {  81,  606}
         , (* 646*) yyTCombType {   0,    0} , (* 647*) yyTCombType {   0,    0}
         , (* 648*) yyTCombType {   0,    0} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {   0,    0} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {   0,    0}
         , (* 658*) yyTCombType {   0,    0} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {   0,    0} , (* 661*) yyTCombType {   0,    0}
         , (* 662*) yyTCombType { 131,  483} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {   0,    0} , (* 665*) yyTCombType { 136,  492}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType { 131,  483}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {  81,  606}
         , (* 670*) yyTCombType { 136,  492} , (* 671*) yyTCombType {  81,  606}
         , (* 672*) yyTCombType { 131,  483} , (* 673*) yyTCombType {  81,  606}
         , (* 674*) yyTCombType {  81,  606} , (* 675*) yyTCombType { 136,  492}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType {  81,  606}
         , (* 678*) yyTCombType {   0,    0} , (* 679*) yyTCombType {   0,    0}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType {   0,    0}
         , (* 682*) yyTCombType {   0,    0} , (* 683*) yyTCombType {   0,    0}
         , (* 684*) yyTCombType {  81,  606} , (* 685*) yyTCombType {  81,  606}
         , (* 686*) yyTCombType {  81,  606} , (* 687*) yyTCombType {  81,  606}
         , (* 688*) yyTCombType {  81,  606} , (* 689*) yyTCombType {  81,  606}
         , (* 690*) yyTCombType {  81,  606} , (* 691*) yyTCombType {  81,  606}
         , (* 692*) yyTCombType {  81,  606} , (* 693*) yyTCombType {  81,  255}
         , (* 694*) yyTCombType {  81,  256} , (* 695*) yyTCombType {  82,  621}
         , (* 696*) yyTCombType { 131,  483} , (* 697*) yyTCombType {   0,    0}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType { 136,  492}
         , (* 700*) yyTCombType {   0,    0} , (* 701*) yyTCombType { 139,  493}
         , (* 702*) yyTCombType {   0,    0} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType { 131,  483} , (* 705*) yyTCombType {  82,  621}
         , (* 706*) yyTCombType { 139,  493} , (* 707*) yyTCombType { 136,  492}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {  82,  621}
         , (* 710*) yyTCombType { 131,  483} , (* 711*) yyTCombType { 139,  493}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType { 136,  492}
         , (* 714*) yyTCombType {   0,    0} , (* 715*) yyTCombType {   0,    0}
         , (* 716*) yyTCombType { 131,  483} , (* 717*) yyTCombType {   0,    0}
         , (* 718*) yyTCombType {   0,    0} , (* 719*) yyTCombType { 136,  492}
         , (* 720*) yyTCombType {   0,    0} , (* 721*) yyTCombType {  82,  621}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {   0,    0} , (* 725*) yyTCombType {  82,  621}
         , (* 726*) yyTCombType {  82,  621} , (* 727*) yyTCombType {   0,    0}
         , (* 728*) yyTCombType {   0,    0} , (* 729*) yyTCombType {  82,  621}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {  82,  621}
         , (* 732*) yyTCombType {  82,  621} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType {   0,    0} , (* 735*) yyTCombType { 139,  493}
         , (* 736*) yyTCombType {   0,    0} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {   0,    0} , (* 739*) yyTCombType {   0,    0}
         , (* 740*) yyTCombType {   0,    0} , (* 741*) yyTCombType {   0,    0}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType { 139,  493}
         , (* 744*) yyTCombType { 139,  221} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType { 131,  276} , (* 749*) yyTCombType { 139,  493}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType {   0,    0}
         , (* 752*) yyTCombType {   0,    0} , (* 753*) yyTCombType { 139,   43}
         , (* 754*) yyTCombType {   0,    0} , (* 755*) yyTCombType { 139,  493}
         , (* 756*) yyTCombType {  82,  621} , (* 757*) yyTCombType {  82,   83}
         , (* 758*) yyTCombType {  82,  621} , (* 759*) yyTCombType {  82,   62}
         , (* 760*) yyTCombType {  82,  621} , (* 761*) yyTCombType {  82,  621}
         , (* 762*) yyTCombType {   0,    0} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType {  82,  621} , (* 765*) yyTCombType {   0,    0}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType {   0,    0}
         , (* 768*) yyTCombType {  89,  603} , (* 769*) yyTCombType {   0,    0}
         , (* 770*) yyTCombType {  82,   78} , (* 771*) yyTCombType {  82,  621}
         , (* 772*) yyTCombType {  82,  621} , (* 773*) yyTCombType {  82,  621}
         , (* 774*) yyTCombType {  82,  621} , (* 775*) yyTCombType {  82,  621}
         , (* 776*) yyTCombType {  82,  621} , (* 777*) yyTCombType {  82,  621}
         , (* 778*) yyTCombType {  82,  621} , (* 779*) yyTCombType {  82,  621}
         , (* 780*) yyTCombType {  82,  621} , (* 781*) yyTCombType {  82,  621}
         , (* 782*) yyTCombType {  89,  603} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType {   0,    0} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType { 139,  224}
         , (* 788*) yyTCombType {   0,    0} , (* 789*) yyTCombType {   0,    0}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType {  89,  243} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType {   0,    0}
         , (* 798*) yyTCombType {  89,  603} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType {  89,  603} , (* 803*) yyTCombType {   0,    0}
         , (* 804*) yyTCombType {  89,  603} , (* 805*) yyTCombType {  89,  603}
         , (* 806*) yyTCombType {   0,    0} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType {  96,  565} , (* 809*) yyTCombType {   0,    0}
         , (* 810*) yyTCombType {   0,    0} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType {  96,  568} , (* 817*) yyTCombType {   0,    0}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType { 138,   40}
         , (* 820*) yyTCombType { 142,  499} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType {   0,    0} , (* 823*) yyTCombType { 138,  563}
         , (* 824*) yyTCombType {   0,    0} , (* 825*) yyTCombType { 142,  499}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType {  89,  603}
         , (* 830*) yyTCombType { 142,  499} , (* 831*) yyTCombType {  89,  244}
         , (* 832*) yyTCombType {  96,  568} , (* 833*) yyTCombType {  89,  603}
         , (* 834*) yyTCombType {  89,  603} , (* 835*) yyTCombType {   0,    0}
         , (* 836*) yyTCombType {  96,  565} , (* 837*) yyTCombType {  89,  603}
         , (* 838*) yyTCombType {   0,    0} , (* 839*) yyTCombType {  96,  568}
         , (* 840*) yyTCombType {   0,    0} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType {  96,  568} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {  89,  603} , (* 845*) yyTCombType {  89,  245}
         , (* 846*) yyTCombType {  89,  246} , (* 847*) yyTCombType {  89,  247}
         , (* 848*) yyTCombType {  89,  248} , (* 849*) yyTCombType {  89,  249}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType { 138,  563}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType { 142,  499} , (* 855*) yyTCombType { 138,  219}
         , (* 856*) yyTCombType { 143,  500} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType { 138,  220}
         , (* 860*) yyTCombType { 138,   42} , (* 861*) yyTCombType { 143,  500}
         , (* 862*) yyTCombType { 142,  499} , (* 863*) yyTCombType {  96,  568}
         , (* 864*) yyTCombType { 138,  221} , (* 865*) yyTCombType {  96,  568}
         , (* 866*) yyTCombType { 143,  500} , (* 867*) yyTCombType {  96,  568}
         , (* 868*) yyTCombType { 142,  499} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {  96,  568}
         , (* 872*) yyTCombType { 184,  444} , (* 873*) yyTCombType { 138,   43}
         , (* 874*) yyTCombType { 142,  499} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType { 184,  444}
         , (* 878*) yyTCombType { 138,  531} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType { 192,  433} , (* 885*) yyTCombType { 184,   12}
         , (* 886*) yyTCombType { 194,  664} , (* 887*) yyTCombType { 138,  223}
         , (* 888*) yyTCombType { 184,   14} , (* 889*) yyTCombType { 192,  433}
         , (* 890*) yyTCombType { 143,  500} , (* 891*) yyTCombType { 194,  664}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType { 193,  444}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType { 143,  500} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType { 193,  444} , (* 901*) yyTCombType { 184,  444}
         , (* 902*) yyTCombType { 192,  433} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType { 143,  500} , (* 905*) yyTCombType { 192,  433}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType { 138,  224}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType { 184,  444}
         , (* 910*) yyTCombType { 143,  500} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType { 193,   12}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType { 184,  444}
         , (* 916*) yyTCombType { 193,   14} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType { 192,  433} , (* 919*) yyTCombType {   0,    0}
         , (* 920*) yyTCombType { 194,  664} , (* 921*) yyTCombType { 184,  444}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {   0,    0}
         , (* 926*) yyTCombType { 192,  433} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType { 194,  664} , (* 929*) yyTCombType { 193,  444}
         , (* 930*) yyTCombType {   0,    0} , (* 931*) yyTCombType {   0,    0}
         , (* 932*) yyTCombType { 192,  433} , (* 933*) yyTCombType {   0,    0}
         , (* 934*) yyTCombType { 194,  664} , (* 935*) yyTCombType {   0,    0}
         , (* 936*) yyTCombType {   0,    0} , (* 937*) yyTCombType { 193,  444}
         , (* 938*) yyTCombType { 192,  433} , (* 939*) yyTCombType {   0,    0}
         , (* 940*) yyTCombType { 194,  664} , (* 941*) yyTCombType {   0,    0}
         , (* 942*) yyTCombType {   0,    0} , (* 943*) yyTCombType { 193,  444}
         , (* 944*) yyTCombType {   0,    0} , (* 945*) yyTCombType {   0,    0}
         , (* 946*) yyTCombType {   0,    0} , (* 947*) yyTCombType {   0,    0}
         , (* 948*) yyTCombType {   0,    0} , (* 949*) yyTCombType { 193,  444}
         , (* 950*) yyTCombType {   0,    0} , (* 951*) yyTCombType {   0,    0}
         , (* 952*) yyTCombType {   0,    0} , (* 953*) yyTCombType {   0,    0}
         , (* 954*) yyTCombType {   0,    0} , (* 955*) yyTCombType {   0,    0}
         , (* 956*) yyTCombType {   0,    0} , (* 957*) yyTCombType {   0,    0}
         , (* 958*) yyTCombType {   0,    0} , (* 959*) yyTCombType {   0,    0}
         , (* 960*) yyTCombType {   0,    0} , (* 961*) yyTCombType {   0,    0}
         , (* 962*) yyTCombType {   0,    0} , (* 963*) yyTCombType {   0,    0}
         , (* 964*) yyTCombType {   0,    0} , (* 965*) yyTCombType {   0,    0}
         , (* 966*) yyTCombType {   0,    0} , (* 967*) yyTCombType {   0,    0}
         , (* 968*) yyTCombType {   0,    0} , (* 969*) yyTCombType {   0,    0}
         , (* 970*) yyTCombType {   0,    0} , (* 971*) yyTCombType {   0,    0}
         , (* 972*) yyTCombType {   0,    0} , (* 973*) yyTCombType {   0,    0}
         , (* 974*) yyTCombType {   0,    0} , (* 975*) yyTCombType {   0,    0}
         , (* 976*) yyTCombType {   0,    0} , (* 977*) yyTCombType {   0,    0}
         , (* 978*) yyTCombType {   0,    0} , (* 979*) yyTCombType {   0,    0}
         , (* 980*) yyTCombType {   0,    0} , (* 981*) yyTCombType {   0,    0}
         , (* 982*) yyTCombType {   0,    0} , (* 983*) yyTCombType {   0,    0}
         , (* 984*) yyTCombType {   0,    0} , (* 985*) yyTCombType {   0,    0}
         , (* 986*) yyTCombType {   0,    0} , (* 987*) yyTCombType {   0,    0}
         , (* 988*) yyTCombType {   0,    0} , (* 989*) yyTCombType {   0,    0}
         , (* 990*) yyTCombType {   0,    0} , (* 991*) yyTCombType {   0,    0}
         , (* 992*) yyTCombType {   0,    0} , (* 993*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  297 , (* 109*)    5 , (* 110*)  298 , (* 111*)  299
         , (* 112*)  300 , (* 113*)  301 , (* 114*)  302 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  179 , (* 118*)  190 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    6 , (* 122*)    9 , (* 123*)   27
         , (* 124*)   11 , (* 125*)  305 , (* 126*)   30 , (* 127*)   32
         , (* 128*)  160 , (* 129*)  169 , (* 130*)  172 , (* 131*)  166
         , (* 132*)  178 , (* 133*)  171 , (* 134*)  189 , (* 135*)  182
         , (* 136*)  358 , (* 137*)   25 , (* 138*)  306 , (* 139*)   17
         , (* 140*)  304 , (* 141*)   19 , (* 142*)  303 , (* 143*)   20
         , (* 144*)  371 , (* 145*)  307 , (* 146*)  309 , (* 147*)   61
         , (* 148*)   52 , (* 149*)  368 , (* 150*)  310 , (* 151*)  311
         , (* 152*)  336 , (* 153*)  108 , (* 154*)   44 , (* 155*)  378
         , (* 156*)   35 , (* 157*)  308 , (* 158*)  380 , (* 159*)   36
         , (* 160*)  129 , (* 161*)   38 , (* 162*)   37 , (* 163*)   38
         , (* 164*)  127 , (* 165*)  130 , (* 166*)   55 , (* 167*)  383
         , (* 168*)  374 , (* 169*)  132 , (* 170*)  133 , (* 171*)  134
         , (* 172*)  136 , (* 173*)  138 , (* 174*)  386 , (* 175*)  393
         , (* 176*)  399 , (* 177*)  142 , (* 178*)  181 , (* 179*)  388
         , (* 180*)   52 , (* 181*)  357 , (* 182*)   54 , (* 183*)  356
         , (* 184*)  184 , (* 185*)  313 , (* 186*)  314 , (* 187*)  315
         , (* 188*)  316 , (* 189*)  317 , (* 190*)  318 , (* 191*)  319
         , (* 192*)  320 , (* 193*)  321 , (* 194*)  322 , (* 195*)  323
         , (* 196*)  324 , (* 197*)  325 , (* 198*)  326 , (* 199*)  327
         , (* 200*)  328 , (* 201*)   45 , (* 202*)  330 , (* 203*)  331
         , (* 204*)   47 , (* 205*)   48 , (* 206*)  334 , (* 207*)   49
         , (* 208*)  333 , (* 209*)  332 , (* 210*)  191 , (* 211*)   51
         , (* 212*)   61 , (* 213*)  335 , (* 214*)   54 , (* 215*)  120
         , (* 216*)  126 , (* 217*)  336 , (* 218*)  360 , (* 219*)  102
         , (* 220*)   95 , (* 221*)  193 , (* 222*)   93 , (* 223*)   96
         , (* 224*)   97 , (* 225*)  111 , (* 226*)  309 , (* 227*)  100
         , (* 228*)  372 , (* 229*)  102 , (* 230*)  310 , (* 231*)  311
         , (* 232*)  370 , (* 233*)  118 , (* 234*)   44 , (* 235*)  377
         , (* 236*)  146 , (* 237*)  109 , (* 238*)  395 , (* 239*)  114
         , (* 240*)   90 , (* 241*)   91 , (* 242*)  112 , (* 243*)  361
         , (* 244*)  107 , (* 245*)   89 , (* 246*)   80 , (* 247*)   70
         , (* 248*)   81 , (* 249*)   72 , (* 250*)  344 , (* 251*)   74
         , (* 252*)  340 , (* 253*)   75 , (* 254*)   76 , (* 255*)  353
         , (* 256*)  354 , (* 257*)   82 , (* 258*)  348 , (* 259*)  349
         , (* 260*)  396 , (* 261*)  397 , (* 262*)  159 , (* 263*)  345
         , (* 264*)  346 , (* 265*)  313 , (* 266*)  314 , (* 267*)  315
         , (* 268*)  316 , (* 269*)  317 , (* 270*)  318 , (* 271*)  319
         , (* 272*)  320 , (* 273*)  321 , (* 274*)  322 , (* 275*)  323
         , (* 276*)  324 , (* 277*)  325 , (* 278*)  326 , (* 279*)  327
         , (* 280*)  328 , (* 281*)   45 , (* 282*)  330 , (* 283*)  331
         , (* 284*)   47 , (* 285*)  309 , (* 286*)  334 , (* 287*)  365
         , (* 288*)  117 , (* 289*)  310 , (* 290*)  311 , (* 291*)   51
         , (* 292*)  367 , (* 293*)   44 , (* 294*)  312 , (* 295*)  104
         , (* 296*)  105 , (* 297*)  369 , (* 298*)  107 , (* 299*)  122
         , (* 300*)  375 , (* 301*)  124 , (* 302*)   93 , (* 303*)   96
         , (* 304*)   97 , (* 305*)  111 , (* 306*)  363 , (* 307*)   88
         , (* 308*)   79 , (* 309*)  343 , (* 310*)   69 , (* 311*)   80
         , (* 312*)  389 , (* 313*)   81 , (* 314*)  148 , (* 315*)  344
         , (* 316*)  112 , (* 317*)  340 , (* 318*)   75 , (* 319*)   76
         , (* 320*)    0 , (* 321*)   52 , (* 322*)   82 , (* 323*)    0
         , (* 324*)  313 , (* 325*)  314 , (* 326*)  315 , (* 327*)  316
         , (* 328*)  317 , (* 329*)  318 , (* 330*)  319 , (* 331*)  320
         , (* 332*)  321 , (* 333*)  322 , (* 334*)  323 , (* 335*)  324
         , (* 336*)  325 , (* 337*)  326 , (* 338*)  327 , (* 339*)  328
         , (* 340*)   45 , (* 341*)  330 , (* 342*)  331 , (* 343*)   47
         , (* 344*)  309 , (* 345*)  334 , (* 346*)  149 , (* 347*)  147
         , (* 348*)  310 , (* 349*)  311 , (* 350*)   51 , (* 351*)   61
         , (* 352*)   44 , (* 353*)  329 , (* 354*)  373 , (* 355*)   54
         , (* 356*)  336 , (* 357*)  112 , (* 358*)  162 , (* 359*)  400
         , (* 360*)    0 , (* 361*)   93 , (* 362*)   96 , (* 363*)   97
         , (* 364*)  111 , (* 365*)    0 , (* 366*)   61 , (* 367*)  195
         , (* 368*)    0 , (* 369*)  355 , (* 370*)    0 , (* 371*)  336
         , (* 372*)    0 , (* 373*)    0 , (* 374*)   52 , (* 375*)  381
         , (* 376*)   61 , (* 377*)  131 , (* 378*)  135 , (* 379*)  133
         , (* 380*)    0 , (* 381*)  336 , (* 382*)    0 , (* 383*)  313
         , (* 384*)  314 , (* 385*)  315 , (* 386*)  316 , (* 387*)  317
         , (* 388*)  318 , (* 389*)  319 , (* 390*)  320 , (* 391*)  321
         , (* 392*)  322 , (* 393*)  323 , (* 394*)  324 , (* 395*)  325
         , (* 396*)  326 , (* 397*)  327 , (* 398*)  328 , (* 399*)   45
         , (* 400*)  330 , (* 401*)  331 , (* 402*)   47 , (* 403*)  401
         , (* 404*)  334 , (* 405*)    0 , (* 406*)   61 , (* 407*)  335
         , (* 408*)   54 , (* 409*)   51 , (* 410*)  309 , (* 411*)  336
         , (* 412*)    0 , (* 413*)  185 , (* 414*)  310 , (* 415*)  311
         , (* 416*)  306 , (* 417*)    0 , (* 418*)  137 , (* 419*)   19
         , (* 420*)   93 , (* 421*)   96 , (* 422*)   97 , (* 423*)  111
         , (* 424*)  350 , (* 425*)   61 , (* 426*)  306 , (* 427*)    0
         , (* 428*)  309 , (* 429*)   19 , (* 430*)  336 , (* 431*)    0
         , (* 432*)  310 , (* 433*)  311 , (* 434*)   98 , (* 435*)   91
         , (* 436*)  137 , (* 437*)    0 , (* 438*)  385 , (* 439*)   61
         , (* 440*)  139 , (* 441*)  141 , (* 442*)    0 , (* 443*)  337
         , (* 444*)  336 , (* 445*)    0 , (* 446*)   65 , (* 447*)   79
         , (* 448*)  343 , (* 449*)   69 , (* 450*)   80 , (* 451*)    0
         , (* 452*)   81 , (* 453*)    0 , (* 454*)  344 , (* 455*)   61
         , (* 456*)  340 , (* 457*)   75 , (* 458*)   76 , (* 459*)  140
         , (* 460*)  336 , (* 461*)   82 , (* 462*)   67 , (* 463*)  343
         , (* 464*)   69 , (* 465*)   80 , (* 466*)   52 , (* 467*)   81
         , (* 468*)    0 , (* 469*)  344 , (* 470*)  151 , (* 471*)  340
         , (* 472*)   75 , (* 473*)   76 , (* 474*)  194 , (* 475*)   71
         , (* 476*)   82 , (* 477*)   81 , (* 478*)    0 , (* 479*)  344
         , (* 480*)   61 , (* 481*)  340 , (* 482*)   75 , (* 483*)   76
         , (* 484*)   61 , (* 485*)  336 , (* 486*)   82 , (* 487*)  306
         , (* 488*)    0 , (* 489*)  336 , (* 490*)   19 , (* 491*)  151
         , (* 492*)    0 , (* 493*)    0 , (* 494*)    0 , (* 495*)    0
         , (* 496*)  387 , (* 497*)    0 , (* 498*)  143 , (* 499*)  145
         , (* 500*)   54 , (* 501*)   65 , (* 502*)   79 , (* 503*)  343
         , (* 504*)   69 , (* 505*)   80 , (* 506*)    0 , (* 507*)   81
         , (* 508*)    0 , (* 509*)  344 , (* 510*)    0 , (* 511*)  340
         , (* 512*)   75 , (* 513*)   76 , (* 514*)    0 , (* 515*)    0
         , (* 516*)   82 , (* 517*)   52 , (* 518*)   86 , (* 519*)  352
         , (* 520*)   65 , (* 521*)   79 , (* 522*)  343 , (* 523*)   69
         , (* 524*)   80 , (* 525*)    0 , (* 526*)   81 , (* 527*)    0
         , (* 528*)  344 , (* 529*)   61 , (* 530*)  340 , (* 531*)   75
         , (* 532*)   76 , (* 533*)    0 , (* 534*)  336 , (* 535*)   82
         , (* 536*)  338 , (* 537*)   69 , (* 538*)   80 , (* 539*)    0
         , (* 540*)   81 , (* 541*)    0 , (* 542*)  344 , (* 543*)    0
         , (* 544*)  340 , (* 545*)   75 , (* 546*)   76 , (* 547*)  342
         , (* 548*)   61 , (* 549*)   82 , (* 550*)  144 , (* 551*)   54
         , (* 552*)    0 , (* 553*)  336 , (* 554*)    0 , (* 555*)    0
         , (* 556*)   73 , (* 557*)    0 , (* 558*)  344 , (* 559*)    0
         , (* 560*)  340 , (* 561*)   75 , (* 562*)   76 , (* 563*)    0
         , (* 564*)   61 , (* 565*)   82 , (* 566*)  347 , (* 567*)    0
         , (* 568*)    0 , (* 569*)  336 , (* 570*)  152 , (* 571*)    0
         , (* 572*)    0 , (* 573*)    0 , (* 574*)    0 , (* 575*)    0
         , (* 576*)    0 , (* 577*)    0 , (* 578*)    0 , (* 579*)    0
         , (* 580*)    0 , (* 581*)    0 , (* 582*)  350 , (* 583*)  339
         , (* 584*)    0 , (* 585*)  340 , (* 586*)   75 , (* 587*)   76
         , (* 588*)   61 , (* 589*)  341 , (* 590*)   82 , (* 591*)   76
         , (* 592*)    0 , (* 593*)  336 , (* 594*)   82 , (* 595*)    0
         , (* 596*)    0 , (* 597*)    0 , (* 598*)    0 , (* 599*)   35
         , (* 600*)    0 , (* 601*)  380 , (* 602*)    0 , (* 603*)    0
         , (* 604*)    0 , (* 605*)    0 , (* 606*)  359 , (* 607*)    0
         , (* 608*)  130 , (* 609*)    0 , (* 610*)  383 , (* 611*)   61
         , (* 612*)    0 , (* 613*)    0 , (* 614*)    0 , (* 615*)  136
         , (* 616*)  336 , (* 617*)  386 , (* 618*)    0 , (* 619*)    0
         , (* 620*)  142 , (* 621*)    0 , (* 622*)  388 , (* 623*)    0
         , (* 624*)   65 , (* 625*)   79 , (* 626*)  343 , (* 627*)   69
         , (* 628*)   80 , (* 629*)  366 , (* 630*)   81 , (* 631*)    0
         , (* 632*)  344 , (* 633*)    0 , (* 634*)  340 , (* 635*)   75
         , (* 636*)   76 , (* 637*)    0 , (* 638*)    0 , (* 639*)   82
         , (* 640*)   84 , (* 641*)    0 , (* 642*)    0 , (* 643*)   65
         , (* 644*)   79 , (* 645*)  343 , (* 646*)   69 , (* 647*)   80
         , (* 648*)    0 , (* 649*)   81 , (* 650*)    0 , (* 651*)  344
         , (* 652*)    0 , (* 653*)  340 , (* 654*)   75 , (* 655*)   76
         , (* 656*)    0 , (* 657*)    0 , (* 658*)   82 , (* 659*)   65
         , (* 660*)   79 , (* 661*)  343 , (* 662*)   69 , (* 663*)   80
         , (* 664*)    0 , (* 665*)   81 , (* 666*)    0 , (* 667*)  344
         , (* 668*)    0 , (* 669*)  340 , (* 670*)   75 , (* 671*)   76
         , (* 672*)    0 , (* 673*)    0 , (* 674*)   82 , (* 675*)    0
         , (* 676*)    0 , (* 677*)  351 , (* 678*)    0 , (* 679*)  146
         , (* 680*)    0 , (* 681*)  395 , (* 682*)    0 , (* 683*)   65
         , (* 684*)   79 , (* 685*)  343 , (* 686*)   69 , (* 687*)   80
         , (* 688*)    0 , (* 689*)   81 , (* 690*)    0 , (* 691*)  344
         , (* 692*)  309 , (* 693*)  340 , (* 694*)   75 , (* 695*)   76
         , (* 696*)  310 , (* 697*)  311 , (* 698*)   82 , (* 699*)    0
         , (* 700*)   44 , (* 701*)  362 , (* 702*)    0 , (* 703*)  396
         , (* 704*)  397 , (* 705*)  159 , (* 706*)   65 , (* 707*)   79
         , (* 708*)  343 , (* 709*)   69 , (* 710*)   80 , (* 711*)    0
         , (* 712*)   81 , (* 713*)    0 , (* 714*)  344 , (* 715*)    0
         , (* 716*)  340 , (* 717*)   75 , (* 718*)   76 , (* 719*)    0
         , (* 720*)    0 , (* 721*)   82 , (* 722*)    0 , (* 723*)    0
         , (* 724*)    0 , (* 725*)    0 , (* 726*)    0 , (* 727*)    0
         , (* 728*)    0 , (* 729*)    0 , (* 730*)    0 , (* 731*)  313
         , (* 732*)  314 , (* 733*)  315 , (* 734*)  316 , (* 735*)  317
         , (* 736*)  318 , (* 737*)  319 , (* 738*)  320 , (* 739*)  321
         , (* 740*)  322 , (* 741*)  323 , (* 742*)  324 , (* 743*)  325
         , (* 744*)  326 , (* 745*)  327 , (* 746*)  328 , (* 747*)   45
         , (* 748*)  330 , (* 749*)  331 , (* 750*)   47 , (* 751*)  309
         , (* 752*)  334 , (* 753*)    0 , (* 754*)    0 , (* 755*)  310
         , (* 756*)  311 , (* 757*)   51 , (* 758*)   61 , (* 759*)   44
         , (* 760*)  364 , (* 761*)    0 , (* 762*)    0 , (* 763*)  336
         , (* 764*)    0 , (* 765*)    0 , (* 766*)    0 , (* 767*)    0
         , (* 768*)   93 , (* 769*)   96 , (* 770*)   97 , (* 771*)  111
         , (* 772*)    0 , (* 773*)    0 , (* 774*)    0 , (* 775*)    0
         , (* 776*)  376 , (* 777*)    0 , (* 778*)    0 , (* 779*)    0
         , (* 780*)    0 , (* 781*)    0 , (* 782*)    0 , (* 783*)    0
         , (* 784*)    0 , (* 785*)    0 , (* 786*)    0 , (* 787*)    0
         , (* 788*)    0 , (* 789*)    0 , (* 790*)  313 , (* 791*)  314
         , (* 792*)  315 , (* 793*)  316 , (* 794*)  317 , (* 795*)  318
         , (* 796*)  319 , (* 797*)  320 , (* 798*)  321 , (* 799*)  322
         , (* 800*)  323 , (* 801*)  324 , (* 802*)  325 , (* 803*)  326
         , (* 804*)  327 , (* 805*)  328 , (* 806*)   45 , (* 807*)  330
         , (* 808*)  331 , (* 809*)   47 , (* 810*)    0 , (* 811*)  334
         , (* 812*)    0 , (* 813*)   61 , (* 814*)    0 , (* 815*)    0
         , (* 816*)   51 , (* 817*)    0 , (* 818*)  336 , (* 819*)    0
         , (* 820*)    0 , (* 821*)    0 , (* 822*)    0 , (* 823*)    0
         , (* 824*)    0 , (* 825*)    0 , (* 826*)    0 , (* 827*)   93
         , (* 828*)   96 , (* 829*)   97 , (* 830*)  111 , (* 831*)  379
         , (* 832*)    0 , (* 833*)    0 , (* 834*)    0 , (* 835*)    0
         , (* 836*)    0 , (* 837*)    0 , (* 838*)    0 , (* 839*)    0
         , (* 840*)    0 , (* 841*)    0 , (* 842*)    0 , (* 843*)    0
         , (* 844*)    0 , (* 845*)    0 , (* 846*)    0 , (* 847*)    0
         , (* 848*)    0 , (* 849*)    0 , (* 850*)    0 , (* 851*)    0
         , (* 852*)    0 , (* 853*)   65 , (* 854*)   79 , (* 855*)  343
         , (* 856*)   69 , (* 857*)   80 , (* 858*)    0 , (* 859*)   81
         , (* 860*)    0 , (* 861*)  344 , (* 862*)    0 , (* 863*)  340
         , (* 864*)   75 , (* 865*)   76 , (* 866*)    0 , (* 867*)    0
         , (* 868*)   82 , (* 869*)    0 , (* 870*)    0 , (* 871*)    0
         , (* 872*)    0 , (* 873*)    0 , (* 874*)    0 , (* 875*)    0
         , (* 876*)    0 , (* 877*)    0 , (* 878*)    0 , (* 879*)    0
         , (* 880*)    0 , (* 881*)    0 , (* 882*)    0 , (* 883*)    0
         , (* 884*)    0 , (* 885*)  309 , (* 886*)    0 , (* 887*)    0
         , (* 888*)    0 , (* 889*)  310 , (* 890*)  311 , (* 891*)    0
         , (* 892*)    0 , (* 893*)   44 , (* 894*)  382 , (* 895*)    0
         , (* 896*)    0 , (* 897*)    0 , (* 898*)    0 , (* 899*)    0
         , (* 900*)    0 , (* 901*)    0 , (* 902*)    0 , (* 903*)    0
         , (* 904*)    0 , (* 905*)    0 , (* 906*)    0 , (* 907*)    0
         , (* 908*)   65 , (* 909*)   79 , (* 910*)  343 , (* 911*)   69
         , (* 912*)   80 , (* 913*)    0 , (* 914*)   81 , (* 915*)    0
         , (* 916*)  344 , (* 917*)    0 , (* 918*)  340 , (* 919*)   75
         , (* 920*)   76 , (* 921*)    0 , (* 922*)    0 , (* 923*)   82
         , (* 924*)  313 , (* 925*)  314 , (* 926*)  315 , (* 927*)  316
         , (* 928*)  317 , (* 929*)  318 , (* 930*)  319 , (* 931*)  320
         , (* 932*)  321 , (* 933*)  322 , (* 934*)  323 , (* 935*)  324
         , (* 936*)  325 , (* 937*)  326 , (* 938*)  327 , (* 939*)  328
         , (* 940*)   45 , (* 941*)  330 , (* 942*)  331 , (* 943*)   47
         , (* 944*)  309 , (* 945*)  334 , (* 946*)  154 , (* 947*)    0
         , (* 948*)  310 , (* 949*)  311 , (* 950*)   51 , (* 951*)    0
         , (* 952*)   44 , (* 953*)  384 , (* 954*)    0 , (* 955*)    0
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)    0
         , (* 960*)   61 , (* 961*)   93 , (* 962*)   96 , (* 963*)   97
         , (* 964*)  111 , (* 965*)  336 , (* 966*)    0 , (* 967*)    0
         , (* 968*)    0 , (* 969*)    0 , (* 970*)    0 , (* 971*)    0
         , (* 972*)    0 , (* 973*)    0 , (* 974*)    0 , (* 975*)    0
         , (* 976*)    0 , (* 977*)    0 , (* 978*)  155 , (* 979*)    0
         , (* 980*)    0 , (* 981*)    0 , (* 982*)    0 , (* 983*)  313
         , (* 984*)  314 , (* 985*)  315 , (* 986*)  316 , (* 987*)  317
         , (* 988*)  318 , (* 989*)  319 , (* 990*)  320 , (* 991*)  321
         , (* 992*)  322 , (* 993*)  323 , (* 994*)  324 , (* 995*)  325
         , (* 996*)  326 , (* 997*)  327 , (* 998*)  328 , (* 999*)   45
         , (*1000*)  330 , (*1001*)  331 , (*1002*)   47 , (*1003*)    0
         , (*1004*)  334 , (*1005*)    0 , (*1006*)   61 , (*1007*)    0
         , (*1008*)    0 , (*1009*)   51 , (*1010*)    0 , (*1011*)  336
         , (*1012*)    0 , (*1013*)    0 , (*1014*)    0 , (*1015*)    0
         , (*1016*)    0 , (*1017*)    0 , (*1018*)    0 , (*1019*)    0
         , (*1020*)   93 , (*1021*)   96 , (*1022*)   97 , (*1023*)  111
         , (*1024*)  390 , (*1025*)   61 , (*1026*)    0 , (*1027*)    0
         , (*1028*)    0 , (*1029*)    0 , (*1030*)  336 , (*1031*)    0
         , (*1032*)    0 , (*1033*)    0 , (*1034*)    0 , (*1035*)    0
         , (*1036*)    0 , (*1037*)    0 , (*1038*)    0 , (*1039*)    0
         , (*1040*)    0 , (*1041*)    0 , (*1042*)    0 , (*1043*)  155
         , (*1044*)    0 , (*1045*)    0 , (*1046*)    0 , (*1047*)    0
         , (*1048*)    0 , (*1049*)    0 , (*1050*)  175 , (*1051*)    0
         , (*1052*)    0 , (*1053*)    0 , (*1054*)    0 , (*1055*)   65
         , (*1056*)   79 , (*1057*)  343 , (*1058*)   69 , (*1059*)   80
         , (*1060*)    0 , (*1061*)   81 , (*1062*)    0 , (*1063*)  344
         , (*1064*)   61 , (*1065*)  340 , (*1066*)   75 , (*1067*)   76
         , (*1068*)    0 , (*1069*)  336 , (*1070*)   82 , (*1071*)    0
         , (*1072*)   35 , (*1073*)    0 , (*1074*)  380 , (*1075*)    0
         , (*1076*)    0 , (*1077*)    0 , (*1078*)  157 , (*1079*)  394
         , (*1080*)  392 , (*1081*)  130 , (*1082*)  155 , (*1083*)  383
         , (*1084*)    0 , (*1085*)    0 , (*1086*)    0 , (*1087*)    0
         , (*1088*)  136 , (*1089*)    0 , (*1090*)  386 , (*1091*)    0
         , (*1092*)    0 , (*1093*)  142 , (*1094*)    0 , (*1095*)  388
         , (*1096*)  173 , (*1097*)    0 , (*1098*)    0 , (*1099*)    0
         , (*1100*)    0 , (*1101*)   65 , (*1102*)   79 , (*1103*)  343
         , (*1104*)   69 , (*1105*)   80 , (*1106*)    0 , (*1107*)   81
         , (*1108*)    0 , (*1109*)  344 , (*1110*)    0 , (*1111*)  340
         , (*1112*)   75 , (*1113*)   76 , (*1114*)    0 , (*1115*)    0
         , (*1116*)   82 , (*1117*)    0 , (*1118*)    0 , (*1119*)    0
         , (*1120*)   65 , (*1121*)   79 , (*1122*)  343 , (*1123*)   69
         , (*1124*)   80 , (*1125*)   35 , (*1126*)   81 , (*1127*)  380
         , (*1128*)  344 , (*1129*)    0 , (*1130*)  340 , (*1131*)   75
         , (*1132*)   76 , (*1133*)    0 , (*1134*)  130 , (*1135*)   82
         , (*1136*)  383 , (*1137*)    0 , (*1138*)    0 , (*1139*)    0
         , (*1140*)    0 , (*1141*)  136 , (*1142*)    0 , (*1143*)  386
         , (*1144*)  391 , (*1145*)  392 , (*1146*)  142 , (*1147*)    0
         , (*1148*)  388 , (*1149*)  186 , (*1150*)    0 , (*1151*)    0
         , (*1152*)  146 , (*1153*)    0 , (*1154*)  395 , (*1155*)    0
         , (*1156*)    0 , (*1157*)    0 , (*1158*)    0 , (*1159*)   65
         , (*1160*)   79 , (*1161*)  343 , (*1162*)   69 , (*1163*)   80
         , (*1164*)    0 , (*1165*)   81 , (*1166*)    0 , (*1167*)  344
         , (*1168*)    0 , (*1169*)  340 , (*1170*)   75 , (*1171*)   76
         , (*1172*)    0 , (*1173*)    0 , (*1174*)   82 , (*1175*)    0
         , (*1176*)  398 , (*1177*)  397 , (*1178*)   35 , (*1179*)    0
         , (*1180*)  380 , (*1181*)    0 , (*1182*)  157 , (*1183*)  394
         , (*1184*)  392 , (*1185*)    0 , (*1186*)    0 , (*1187*)  130
         , (*1188*)    0 , (*1189*)  383 , (*1190*)    0 , (*1191*)    0
         , (*1192*)    0 , (*1193*)    0 , (*1194*)  136 , (*1195*)    0
         , (*1196*)  386 , (*1197*)    0 , (*1198*)    0 , (*1199*)  142
         , (*1200*)    0 , (*1201*)  388 , (*1202*)    0 , (*1203*)    0
         , (*1204*)    0 , (*1205*)  146 , (*1206*)    0 , (*1207*)  395
         , (*1208*)    0 , (*1209*)    0 , (*1210*)    0 , (*1211*)    0
         , (*1212*)    0 , (*1213*)    0 , (*1214*)    0 , (*1215*)    0
         , (*1216*)    0 , (*1217*)    0 , (*1218*)    0 , (*1219*)    0
         , (*1220*)    0 , (*1221*)    0 , (*1222*)    0 , (*1223*)    0
         , (*1224*)    0 , (*1225*)    0 , (*1226*)    0 , (*1227*)    0
         , (*1228*)    0 , (*1229*)  396 , (*1230*)  397 , (*1231*)  159
         , (*1232*)    0 , (*1233*)    0 , (*1234*)    0 , (*1235*)    0
         , (*1236*)    0 , (*1237*)    0 , (*1238*)    0 , (*1239*)    0
         , (*1240*)    0 , (*1241*)    0 , (*1242*)    0 , (*1243*)    0
         , (*1244*)    0 , (*1245*)    0 , (*1246*)    0 , (*1247*)    0
         , (*1248*)    0 , (*1249*)    0 , (*1250*)    0 , (*1251*)    0
         , (*1252*)    0 , (*1253*)    0 , (*1254*)    0 , (*1255*)    0
         , (*1256*)    0 , (*1257*)    0 , (*1258*)  146 , (*1259*)    0
         , (*1260*)  395 , (*1261*)    0 , (*1262*)    0 , (*1263*)    0
         , (*1264*)    0 , (*1265*)    0 , (*1266*)    0 , (*1267*)    0
         , (*1268*)    0 , (*1269*)    0 , (*1270*)    0 , (*1271*)    0
         , (*1272*)    0 , (*1273*)    0 , (*1274*)    0 , (*1275*)    0
         , (*1276*)    0 , (*1277*)    0 , (*1278*)    0 , (*1279*)    0
         , (*1280*)    0 , (*1281*)    0 , (*1282*)  396 , (*1283*)  397
         , (*1284*)  159 , (*1285*)    0 , (*1286*)    0 , (*1287*)    0
         , (*1288*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 402(P   1)*)    2 , (*A 403(P   2)*)    1 , (*A 404(P   3)*)    1
         , (*A 405(P   4)*)    1 , (*A 406(P   5)*)    1 , (*A 407(P   6)*)    1
         , (*A 408(P   7)*)    1 , (*A 409(P   8)*)    0 , (*A 410(P   9)*)    0
         , (*A 411(P  10)*)    0 , (*A 412(P  11)*)    0 , (*A 413(P  12)*)    0
         , (*A 414(P  13)*)    0 , (*A 415(P  14)*)    3 , (*A 416(P  15)*)    7
         , (*A 417(P  16)*)    4 , (*A 418(P  17)*)    5 , (*A 419(P  18)*)    3
         , (*A 420(P  19)*)    7 , (*A 421(P  20)*)    5 , (*A 422(P  21)*)    7
         , (*A 423(P  22)*)    3 , (*A 424(P  23)*)   10 , (*A 425(P  24)*)    3
         , (*A 426(P  25)*)    9 , (*A 427(P  26)*)    1 , (*A 428(P  27)*)    0
         , (*A 429(P  28)*)    1 , (*A 430(P  29)*)    0 , (*A 431(P  30)*)    3
         , (*A 432(P  31)*)    3 , (*A 433(P  32)*)    0 , (*A 434(P  33)*)    2
         , (*A 435(P  34)*)    3 , (*A 436(P  35)*)    1 , (*A 437(P  36)*)    3
         , (*A 438(P  37)*)    1 , (*A 439(P  38)*)    3 , (*A 440(P  39)*)    3
         , (*A 441(P  40)*)    3 , (*A 442(P  41)*)    1 , (*A 443(P  42)*)    3
         , (*A 444(P  43)*)    0 , (*A 445(P  44)*)    0 , (*A 446(P  45)*)    2
         , (*A 447(P  46)*)    1 , (*A 448(P  47)*)    3 , (*A 449(P  48)*)    1
         , (*A 450(P  49)*)    1 , (*A 451(P  50)*)    3 , (*A 452(P  51)*)    1
         , (*A 453(P  52)*)    3 , (*A 454(P  53)*)    1 , (*A 455(P  54)*)    3
         , (*A 456(P  55)*)    3 , (*A 457(P  56)*)    0 , (*A 458(P  57)*)    1
         , (*A 459(P  58)*)    1 , (*A 460(P  59)*)    1 , (*A 461(P  60)*)    0
         , (*A 462(P  61)*)    1 , (*A 463(P  62)*)    1 , (*A 464(P  63)*)    3
         , (*A 465(P  64)*)    1 , (*A 466(P  65)*)    1 , (*A 467(P  66)*)    2
         , (*A 468(P  67)*)    2 , (*A 469(P  68)*)    0 , (*A 470(P  69)*)    1
         , (*A 471(P  70)*)    2 , (*A 472(P  71)*)    0 , (*A 473(P  72)*)    1
         , (*A 474(P  73)*)    2 , (*A 475(P  74)*)    3 , (*A 476(P  75)*)    1
         , (*A 477(P  76)*)    4 , (*A 478(P  77)*)    1 , (*A 479(P  78)*)    1
         , (*A 480(P  79)*)    1 , (*A 481(P  80)*)    2 , (*A 482(P  81)*)    0
         , (*A 483(P  82)*)    1 , (*A 484(P  83)*)    2 , (*A 485(P  84)*)    3
         , (*A 486(P  85)*)    1 , (*A 487(P  86)*)    3 , (*A 488(P  87)*)    1
         , (*A 489(P  88)*)    1 , (*A 490(P  89)*)    1 , (*A 491(P  90)*)    2
         , (*A 492(P  91)*)    0 , (*A 493(P  92)*)    1 , (*A 494(P  93)*)    2
         , (*A 495(P  94)*)    3 , (*A 496(P  95)*)    3 , (*A 497(P  96)*)    1
         , (*A 498(P  97)*)    2 , (*A 499(P  98)*)    0 , (*A 500(P  99)*)    1
         , (*A 501(P 100)*)    2 , (*A 502(P 101)*)    3 , (*A 503(P 102)*)    3
         , (*A 504(P 103)*)    1 , (*A 505(P 104)*)    2 , (*A 506(P 105)*)    0
         , (*A 507(P 106)*)    2 , (*A 508(P 107)*)    0 , (*A 509(P 108)*)    1
         , (*A 510(P 109)*)    1 , (*A 511(P 110)*)    1 , (*A 512(P 111)*)    1
         , (*A 513(P 112)*)    1 , (*A 514(P 113)*)    1 , (*A 515(P 114)*)    1
         , (*A 516(P 115)*)    1 , (*A 517(P 116)*)    1 , (*A 518(P 117)*)    1
         , (*A 519(P 118)*)    1 , (*A 520(P 119)*)    1 , (*A 521(P 120)*)    1
         , (*A 522(P 121)*)    1 , (*A 523(P 122)*)    1 , (*A 524(P 123)*)    1
         , (*A 525(P 124)*)    1 , (*A 526(P 125)*)    2 , (*A 527(P 126)*)    3
         , (*A 528(P 127)*)    1 , (*A 529(P 128)*)    3 , (*A 530(P 129)*)    1
         , (*A 531(P 130)*)    0 , (*A 532(P 131)*)    1 , (*A 533(P 132)*)    3
         , (*A 534(P 133)*)    0 , (*A 535(P 134)*)    1 , (*A 536(P 135)*)    1
         , (*A 537(P 136)*)    3 , (*A 538(P 137)*)    1 , (*A 539(P 138)*)    1
         , (*A 540(P 139)*)    0 , (*A 541(P 140)*)    2 , (*A 542(P 141)*)    1
         , (*A 543(P 142)*)    3 , (*A 544(P 143)*)    1 , (*A 545(P 144)*)    3
         , (*A 546(P 145)*)    0 , (*A 547(P 146)*)    1 , (*A 548(P 147)*)    3
         , (*A 549(P 148)*)    1 , (*A 550(P 149)*)    3 , (*A 551(P 150)*)    1
         , (*A 552(P 151)*)    2 , (*A 553(P 152)*)    0 , (*A 554(P 153)*)    1
         , (*A 555(P 154)*)    3 , (*A 556(P 155)*)    1 , (*A 557(P 156)*)    3
         , (*A 558(P 157)*)    1 , (*A 559(P 158)*)    3 , (*A 560(P 159)*)    0
         , (*A 561(P 160)*)    1 , (*A 562(P 161)*)    2 , (*A 563(P 162)*)    0
         , (*A 564(P 163)*)    1 , (*A 565(P 164)*)    1 , (*A 566(P 165)*)    3
         , (*A 567(P 166)*)    5 , (*A 568(P 167)*)    1 , (*A 569(P 168)*)    1
         , (*A 570(P 169)*)    2 , (*A 571(P 170)*)    3 , (*A 572(P 171)*)    3
         , (*A 573(P 172)*)    0 , (*A 574(P 173)*)    2 , (*A 575(P 174)*)    3
         , (*A 576(P 175)*)    1 , (*A 577(P 176)*)    0 , (*A 578(P 177)*)    1
         , (*A 579(P 178)*)    1 , (*A 580(P 179)*)    1 , (*A 581(P 180)*)    4
         , (*A 582(P 181)*)    1 , (*A 583(P 182)*)    2 , (*A 584(P 183)*)    0
         , (*A 585(P 184)*)    2 , (*A 586(P 185)*)    0 , (*A 587(P 186)*)    2
         , (*A 588(P 187)*)    0 , (*A 589(P 188)*)    0 , (*A 590(P 189)*)    2
         , (*A 591(P 190)*)    4 , (*A 592(P 191)*)    2 , (*A 593(P 192)*)    3
         , (*A 594(P 193)*)    1 , (*A 595(P 194)*)    1 , (*A 596(P 195)*)    4
         , (*A 597(P 196)*)    1 , (*A 598(P 197)*)    1 , (*A 599(P 198)*)    3
         , (*A 600(P 199)*)    1 , (*A 601(P 200)*)    3 , (*A 602(P 201)*)    1
         , (*A 603(P 202)*)    2 , (*A 604(P 203)*)    1 , (*A 605(P 204)*)    3
         , (*A 606(P 205)*)    1 , (*A 607(P 206)*)    3 , (*A 608(P 207)*)    1
         , (*A 609(P 208)*)    3 , (*A 610(P 209)*)    1 , (*A 611(P 210)*)    2
         , (*A 612(P 211)*)    2 , (*A 613(P 212)*)    2 , (*A 614(P 213)*)    2
         , (*A 615(P 214)*)    3 , (*A 616(P 215)*)    1 , (*A 617(P 216)*)    2
         , (*A 618(P 217)*)    2 , (*A 619(P 218)*)    2 , (*A 620(P 219)*)    1
         , (*A 621(P 220)*)    1 , (*A 622(P 221)*)    2 , (*A 623(P 222)*)    3
         , (*A 624(P 223)*)    2 , (*A 625(P 224)*)    1 , (*A 626(P 225)*)    3
         , (*A 627(P 226)*)    1 , (*A 628(P 227)*)    3 , (*A 629(P 228)*)    3
         , (*A 630(P 229)*)    0 , (*A 631(P 230)*)    1 , (*A 632(P 231)*)    3
         , (*A 633(P 232)*)    1 , (*A 634(P 233)*)    3 , (*A 635(P 234)*)    3
         , (*A 636(P 235)*)    1 , (*A 637(P 236)*)    1 , (*A 638(P 237)*)    1
         , (*A 639(P 238)*)    1 , (*A 640(P 239)*)    1 , (*A 641(P 240)*)    1
         , (*A 642(P 241)*)    1 , (*A 643(P 242)*)    1 , (*A 644(P 243)*)    1
         , (*A 645(P 244)*)    1 , (*A 646(P 245)*)    1 , (*A 647(P 246)*)    3
         , (*A 648(P 247)*)    1 , (*A 649(P 248)*)    1 , (*A 650(P 249)*)    1
         , (*A 651(P 250)*)    1 , (*A 652(P 251)*)    1 , (*A 653(P 252)*)    1
         , (*A 654(P 253)*)    1 , (*A 655(P 254)*)    1 , (*A 656(P 255)*)    1
         , (*A 657(P 256)*)    1 , (*A 658(P 257)*)    1 , (*A 659(P 258)*)    1
         , (*A 660(P 259)*)    1 , (*A 661(P 260)*)    1 , (*A 662(P 261)*)    1
         , (*A 663(P 262)*)    1 , (*A 664(P 263)*)    0 , (*A 665(P 264)*)    5
         , (*A 666(P 265)*)    1 , (*A 667(P 266)*)    1 , (*A 668(P 267)*)    1
         , (*A 669(P 268)*)    1 , (*A 670(P 269)*)    1 , (*A 671(P 270)*)    1
         , (*A 672(P 271)*)    0 , (*A 673(P 272)*)    1 , (*A 674(P 273)*)    1
         , (*A 675(P 274)*)    2 , (*A 676(P 275)*)    0 , (*A 677(P 276)*)    2
         , (*A 678(P 277)*)    1 , (*A 679(P 278)*)    3 , (*A 680(P 279)*)    1
         , (*A 681(P 280)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 402(P   1)*)  266 , (*A 403(P   2)*)  109 , (*A 404(P   3)*)  109
         , (*A 405(P   4)*)  109 , (*A 406(P   5)*)  109 , (*A 407(P   6)*)  109
         , (*A 408(P   7)*)  109 , (*A 409(P   8)*)  115 , (*A 410(P   9)*)  116
         , (*A 411(P  10)*)  117 , (*A 412(P  11)*)  118 , (*A 413(P  12)*)  119
         , (*A 414(P  13)*)  120 , (*A 415(P  14)*)  122 , (*A 416(P  15)*)  113
         , (*A 417(P  16)*)  126 , (*A 418(P  17)*)  108 , (*A 419(P  18)*)  128
         , (*A 420(P  19)*)  114 , (*A 421(P  20)*)  130 , (*A 422(P  21)*)  110
         , (*A 423(P  22)*)  132 , (*A 424(P  23)*)  111 , (*A 425(P  24)*)  134
         , (*A 426(P  25)*)  112 , (*A 427(P  26)*)  121 , (*A 428(P  27)*)  121
         , (*A 429(P  28)*)  136 , (*A 430(P  29)*)  136 , (*A 431(P  30)*)  133
         , (*A 432(P  31)*)  123 , (*A 433(P  32)*)  124 , (*A 434(P  33)*)  124
         , (*A 435(P  34)*)  138 , (*A 436(P  35)*)  139 , (*A 437(P  36)*)  139
         , (*A 438(P  37)*)  140 , (*A 439(P  38)*)  140 , (*A 440(P  39)*)  141
         , (*A 441(P  40)*)  138 , (*A 442(P  41)*)  142 , (*A 443(P  42)*)  142
         , (*A 444(P  43)*)  125 , (*A 445(P  44)*)  129 , (*A 446(P  45)*)  129
         , (*A 447(P  46)*)  143 , (*A 448(P  47)*)  143 , (*A 449(P  48)*)  144
         , (*A 450(P  49)*)  145 , (*A 451(P  50)*)  146 , (*A 452(P  51)*)  147
         , (*A 453(P  52)*)  147 , (*A 454(P  53)*)  148 , (*A 455(P  54)*)  148
         , (*A 456(P  55)*)  137 , (*A 457(P  56)*)  137 , (*A 458(P  57)*)  149
         , (*A 459(P  58)*)  149 , (*A 460(P  59)*)  150 , (*A 461(P  60)*)  151
         , (*A 462(P  61)*)  151 , (*A 463(P  62)*)  152 , (*A 464(P  63)*)  152
         , (*A 465(P  64)*)  153 , (*A 466(P  65)*)  153 , (*A 467(P  66)*)  153
         , (*A 468(P  67)*)  155 , (*A 469(P  68)*)  155 , (*A 470(P  69)*)  156
         , (*A 471(P  70)*)  158 , (*A 472(P  71)*)  157 , (*A 473(P  72)*)  157
         , (*A 474(P  73)*)  159 , (*A 475(P  74)*)  159 , (*A 476(P  75)*)  161
         , (*A 477(P  76)*)  160 , (*A 478(P  77)*)  164 , (*A 479(P  78)*)  164
         , (*A 480(P  79)*)  165 , (*A 481(P  80)*)  167 , (*A 482(P  81)*)  166
         , (*A 483(P  82)*)  166 , (*A 484(P  83)*)  168 , (*A 485(P  84)*)  168
         , (*A 486(P  85)*)  170 , (*A 487(P  86)*)  169 , (*A 488(P  87)*)  171
         , (*A 489(P  88)*)  171 , (*A 490(P  89)*)  172 , (*A 491(P  90)*)  174
         , (*A 492(P  91)*)  173 , (*A 493(P  92)*)  173 , (*A 494(P  93)*)  175
         , (*A 495(P  94)*)  175 , (*A 496(P  95)*)  176 , (*A 497(P  96)*)  177
         , (*A 498(P  97)*)  179 , (*A 499(P  98)*)  178 , (*A 500(P  99)*)  178
         , (*A 501(P 100)*)  180 , (*A 502(P 101)*)  180 , (*A 503(P 102)*)  181
         , (*A 504(P 103)*)  182 , (*A 505(P 104)*)  162 , (*A 506(P 105)*)  162
         , (*A 507(P 106)*)  183 , (*A 508(P 107)*)  183 , (*A 509(P 108)*)  154
         , (*A 510(P 109)*)  154 , (*A 511(P 110)*)  154 , (*A 512(P 111)*)  154
         , (*A 513(P 112)*)  154 , (*A 514(P 113)*)  154 , (*A 515(P 114)*)  154
         , (*A 516(P 115)*)  154 , (*A 517(P 116)*)  154 , (*A 518(P 117)*)  154
         , (*A 519(P 118)*)  154 , (*A 520(P 119)*)  154 , (*A 521(P 120)*)  154
         , (*A 522(P 121)*)  154 , (*A 523(P 122)*)  154 , (*A 524(P 123)*)  154
         , (*A 525(P 124)*)  154 , (*A 526(P 125)*)  154 , (*A 527(P 126)*)  154
         , (*A 528(P 127)*)  154 , (*A 529(P 128)*)  201 , (*A 530(P 129)*)  154
         , (*A 531(P 130)*)  202 , (*A 532(P 131)*)  203 , (*A 533(P 132)*)  205
         , (*A 534(P 133)*)  204 , (*A 535(P 134)*)  204 , (*A 536(P 135)*)  206
         , (*A 537(P 136)*)  206 , (*A 538(P 137)*)  207 , (*A 539(P 138)*)  154
         , (*A 540(P 139)*)  208 , (*A 541(P 140)*)  208 , (*A 542(P 141)*)  209
         , (*A 543(P 142)*)  209 , (*A 544(P 143)*)  210 , (*A 545(P 144)*)  154
         , (*A 546(P 145)*)  211 , (*A 547(P 146)*)  211 , (*A 548(P 147)*)  211
         , (*A 549(P 148)*)  212 , (*A 550(P 149)*)  212 , (*A 551(P 150)*)  214
         , (*A 552(P 151)*)  213 , (*A 553(P 152)*)  216 , (*A 554(P 153)*)  216
         , (*A 555(P 154)*)  216 , (*A 556(P 155)*)  217 , (*A 557(P 156)*)  217
         , (*A 558(P 157)*)  219 , (*A 559(P 158)*)  218 , (*A 560(P 159)*)  220
         , (*A 561(P 160)*)  220 , (*A 562(P 161)*)  220 , (*A 563(P 162)*)  221
         , (*A 564(P 163)*)  221 , (*A 565(P 164)*)  221 , (*A 566(P 165)*)  223
         , (*A 567(P 166)*)  222 , (*A 568(P 167)*)  154 , (*A 569(P 168)*)  224
         , (*A 570(P 169)*)  154 , (*A 571(P 170)*)  215 , (*A 572(P 171)*)  225
         , (*A 573(P 172)*)  228 , (*A 574(P 173)*)  228 , (*A 575(P 174)*)  229
         , (*A 576(P 175)*)  229 , (*A 577(P 176)*)  231 , (*A 578(P 177)*)  231
         , (*A 579(P 178)*)  231 , (*A 580(P 179)*)  231 , (*A 581(P 180)*)  230
         , (*A 582(P 181)*)  232 , (*A 583(P 182)*)  233 , (*A 584(P 183)*)  233
         , (*A 585(P 184)*)  234 , (*A 586(P 185)*)  234 , (*A 587(P 186)*)  226
         , (*A 588(P 187)*)  226 , (*A 589(P 188)*)  227 , (*A 590(P 189)*)  227
         , (*A 591(P 190)*)  227 , (*A 592(P 191)*)  236 , (*A 593(P 192)*)  238
         , (*A 594(P 193)*)  237 , (*A 595(P 194)*)  239 , (*A 596(P 195)*)  237
         , (*A 597(P 196)*)  163 , (*A 598(P 197)*)  240 , (*A 599(P 198)*)  240
         , (*A 600(P 199)*)  241 , (*A 601(P 200)*)  241 , (*A 602(P 201)*)  242
         , (*A 603(P 202)*)  242 , (*A 604(P 203)*)  243 , (*A 605(P 204)*)  243
         , (*A 606(P 205)*)  244 , (*A 607(P 206)*)  244 , (*A 608(P 207)*)  246
         , (*A 609(P 208)*)  246 , (*A 610(P 209)*)  248 , (*A 611(P 210)*)  248
         , (*A 612(P 211)*)  250 , (*A 613(P 212)*)  250 , (*A 614(P 213)*)  250
         , (*A 615(P 214)*)  250 , (*A 616(P 215)*)  250 , (*A 617(P 216)*)  250
         , (*A 618(P 217)*)  250 , (*A 619(P 218)*)  250 , (*A 620(P 219)*)  250
         , (*A 621(P 220)*)  250 , (*A 622(P 221)*)  250 , (*A 623(P 222)*)  250
         , (*A 624(P 223)*)  250 , (*A 625(P 224)*)  250 , (*A 626(P 225)*)  253
         , (*A 627(P 226)*)  256 , (*A 628(P 227)*)  256 , (*A 629(P 228)*)  254
         , (*A 630(P 229)*)  257 , (*A 631(P 230)*)  257 , (*A 632(P 231)*)  257
         , (*A 633(P 232)*)  258 , (*A 634(P 233)*)  258 , (*A 635(P 234)*)  252
         , (*A 636(P 235)*)  252 , (*A 637(P 236)*)  252 , (*A 638(P 237)*)  252
         , (*A 639(P 238)*)  252 , (*A 640(P 239)*)  252 , (*A 641(P 240)*)  252
         , (*A 642(P 241)*)  252 , (*A 643(P 242)*)  252 , (*A 644(P 243)*)  252
         , (*A 645(P 244)*)  252 , (*A 646(P 245)*)  252 , (*A 647(P 246)*)  252
         , (*A 648(P 247)*)  245 , (*A 649(P 248)*)  245 , (*A 650(P 249)*)  245
         , (*A 651(P 250)*)  245 , (*A 652(P 251)*)  245 , (*A 653(P 252)*)  245
         , (*A 654(P 253)*)  245 , (*A 655(P 254)*)  247 , (*A 656(P 255)*)  247
         , (*A 657(P 256)*)  247 , (*A 658(P 257)*)  249 , (*A 659(P 258)*)  249
         , (*A 660(P 259)*)  249 , (*A 661(P 260)*)  249 , (*A 662(P 261)*)  251
         , (*A 663(P 262)*)  251 , (*A 664(P 263)*)  259 , (*A 665(P 264)*)  135
         , (*A 666(P 265)*)  260 , (*A 667(P 266)*)  260 , (*A 668(P 267)*)  260
         , (*A 669(P 268)*)  260 , (*A 670(P 269)*)  260 , (*A 671(P 270)*)  260
         , (*A 672(P 271)*)  127 , (*A 673(P 272)*)  127 , (*A 674(P 273)*)  262
         , (*A 675(P 274)*)  262 , (*A 676(P 275)*)  131 , (*A 677(P 276)*)  131
         , (*A 678(P 277)*)  263 , (*A 679(P 278)*)  263 , (*A 680(P 279)*)  264
         , (*A 681(P 280)*)  265
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   95 , (*:  13*)   30 , (*:  14*)   95
         , (*:  15*)   66 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   95 , (*:  23*)   69
         , (*:  24*)   70 , (*:  25*)   70 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   67
         , (*:  30*)   19 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)    9
         , (*:  36*)    9 , (*:  37*)   66 , (*:  38*)   68
         , (*:  39*)   19 , (*:  40*)   40 , (*:  41*)   19
         , (*:  42*)   19 , (*:  43*)   52 , (*:  44*)   19
         , (*:  45*)   48 , (*:  46*)   19 , (*:  47*)   76
         , (*:  48*)   76 , (*:  49*)   76 , (*:  50*)   95
         , (*:  51*)   19 , (*:  52*)   19 , (*:  53*)   95
         , (*:  54*)   19 , (*:  55*)   19 , (*:  56*)   96
         , (*:  57*)   96 , (*:  58*)   96 , (*:  59*)   67
         , (*:  60*)   95 , (*:  61*)    5 , (*:  62*)   70
         , (*:  63*)   67 , (*:  64*)   96 , (*:  65*)   19
         , (*:  66*)   96 , (*:  67*)   19 , (*:  68*)   96
         , (*:  69*)    5 , (*:  70*)   96 , (*:  71*)    5
         , (*:  72*)   96 , (*:  73*)    5 , (*:  74*)   96
         , (*:  75*)   96 , (*:  76*)    5 , (*:  77*)   95
         , (*:  78*)   96 , (*:  79*)   19 , (*:  80*)    5
         , (*:  81*)    5 , (*:  82*)    5 , (*:  83*)   95
         , (*:  84*)   81 , (*:  85*)   96 , (*:  86*)   70
         , (*:  87*)   96 , (*:  88*)   70 , (*:  89*)    5
         , (*:  90*)   19 , (*:  91*)   19 , (*:  92*)   19
         , (*:  93*)   39 , (*:  94*)   39 , (*:  95*)   39
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   19
         , (*:  99*)   19 , (*: 100*)   19 , (*: 101*)   19
         , (*: 102*)   69 , (*: 103*)   70 , (*: 104*)   70
         , (*: 105*)   70 , (*: 106*)   70 , (*: 107*)   95
         , (*: 108*)   66 , (*: 109*)   66 , (*: 110*)   66
         , (*: 111*)   69 , (*: 112*)   19 , (*: 113*)   19
         , (*: 114*)   19 , (*: 115*)    6 , (*: 116*)    6
         , (*: 117*)   76 , (*: 118*)   66 , (*: 119*)   96
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   19
         , (*: 123*)   19 , (*: 124*)   68 , (*: 125*)   96
         , (*: 126*)   19 , (*: 127*)   68 , (*: 128*)   96
         , (*: 129*)   66 , (*: 130*)    9 , (*: 131*)    9
         , (*: 132*)   66 , (*: 133*)   68 , (*: 134*)   66
         , (*: 135*)   66 , (*: 136*)    9 , (*: 137*)   68
         , (*: 138*)   66 , (*: 139*)    9 , (*: 140*)   66
         , (*: 141*)   66 , (*: 142*)    9 , (*: 143*)    9
         , (*: 144*)   66 , (*: 145*)   66 , (*: 146*)   69
         , (*: 147*)   66 , (*: 148*)    9 , (*: 149*)   95
         , (*: 150*)   66 , (*: 151*)    9 , (*: 152*)    9
         , (*: 153*)   19 , (*: 154*)   19 , (*: 155*)   74
         , (*: 156*)   96 , (*: 157*)   19 , (*: 158*)   19
         , (*: 159*)    9 , (*: 160*)   66 , (*: 161*)   95
         , (*: 162*)   66 , (*: 163*)   95 , (*: 164*)   95
         , (*: 165*)   69 , (*: 166*)   19 , (*: 167*)   95
         , (*: 168*)   67 , (*: 169*)   66 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)    9 , (*: 173*)    9
         , (*: 174*)   19 , (*: 175*)   19 , (*: 176*)   95
         , (*: 177*)   67 , (*: 178*)   69 , (*: 179*)   69
         , (*: 180*)   70 , (*: 181*)   70 , (*: 182*)   66
         , (*: 183*)   14 , (*: 184*)   14 , (*: 185*)   19
         , (*: 186*)   19 , (*: 187*)   95 , (*: 188*)   67
         , (*: 189*)   69 , (*: 190*)   69 , (*: 191*)   66
         , (*: 192*)    9 , (*: 193*)    9 , (*: 194*)    9
         , (*: 195*)   95 , (*: 196*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 197)*)  423 (*P21*) , (*RR: 198)*)  425 (*P23*)
         , (*RR: 199)*)  427 (*P25*) , (*RR: 200)*)  415 (*P13*)
         , (*RR: 201)*)  419 (*P17*) , (*RR: 202)*)  440 (*P38*)
         , (*RR: 203)*)  439 (*P37*) , (*RR: 204)*)  435 (*P33*)
         , (*RR: 205)*)  442 (*P40*) , (*RR: 206)*)  441 (*P39*)
         , (*RR: 207)*)  443 (*P41*) , (*RR: 208)*)  432 (*P30*)
         , (*RR: 209)*)  450 (*P48*) , (*RR: 210)*)  416 (*P14*)
         , (*RR: 211)*)  470 (*P68*) , (*RR: 212)*)  592 (*P190*)
         , (*RR: 213)*)  490 (*P88*) , (*RR: 214)*)  480 (*P78*)
         , (*RR: 215)*)  497 (*P95*) , (*RR: 216)*)  418 (*P16*)
         , (*RR: 217)*)  476 (*P74*) , (*RR: 218)*)  475 (*P73*)
         , (*RR: 219)*)  569 (*P167*) , (*RR: 220)*)  544 (*P142*)
         , (*RR: 221)*)  466 (*P64*) , (*RR: 222)*)  467 (*P65*)
         , (*RR: 223)*)  532 (*P130*) , (*RR: 224)*)  450 (*P48*)
         , (*RR: 225)*)  538 (*P136*) , (*RR: 226)*)  533 (*P131*)
         , (*RR: 227)*)  454 (*P52*) , (*RR: 228)*)  455 (*P53*)
         , (*RR: 229)*)  662 (*P260*) , (*RR: 230)*)  663 (*P261*)
         , (*RR: 231)*)  635 (*P233*) , (*RR: 232)*)  636 (*P234*)
         , (*RR: 233)*)  637 (*P235*) , (*RR: 234)*)  638 (*P236*)
         , (*RR: 235)*)  639 (*P237*) , (*RR: 236)*)  640 (*P238*)
         , (*RR: 237)*)  641 (*P239*) , (*RR: 238)*)  642 (*P240*)
         , (*RR: 239)*)  645 (*P243*) , (*RR: 240)*)  646 (*P244*)
         , (*RR: 241)*)  643 (*P241*) , (*RR: 242)*)  644 (*P242*)
         , (*RR: 243)*)  654 (*P252*) , (*RR: 244)*)  648 (*P246*)
         , (*RR: 245)*)  649 (*P247*) , (*RR: 246)*)  650 (*P248*)
         , (*RR: 247)*)  651 (*P249*) , (*RR: 248)*)  652 (*P250*)
         , (*RR: 249)*)  653 (*P251*) , (*RR: 250)*)  655 (*P253*)
         , (*RR: 251)*)  656 (*P254*) , (*RR: 252)*)  657 (*P255*)
         , (*RR: 253)*)  660 (*P258*) , (*RR: 254)*)  661 (*P259*)
         , (*RR: 255)*)  658 (*P256*) , (*RR: 256)*)  659 (*P257*)
         , (*RR: 257)*)  615 (*P213*) , (*RR: 258)*)  623 (*P221*)
         , (*RR: 259)*)  626 (*P224*) , (*RR: 260)*)  612 (*P210*)
         , (*RR: 261)*)  629 (*P227*) , (*RR: 262)*)  617 (*P215*)
         , (*RR: 263)*)  647 (*P245*) , (*RR: 264)*)  545 (*P143*)
         , (*RR: 265)*)  566 (*P164*) , (*RR: 266)*)  551 (*P149*)
         , (*RR: 267)*)  580 (*P178*) , (*RR: 268)*)  578 (*P176*)
         , (*RR: 269)*)  579 (*P177*) , (*RR: 270)*)  572 (*P170*)
         , (*RR: 271)*)  590 (*P188*) , (*RR: 272)*)  591 (*P189*)
         , (*RR: 273)*)  558 (*P156*) , (*RR: 274)*)  567 (*P165*)
         , (*RR: 275)*)  474 (*P72*) , (*RR: 276)*)  486 (*P84*)
         , (*RR: 277)*)  485 (*P83*) , (*RR: 278)*)  478 (*P76*)
         , (*RR: 279)*)  479 (*P77*) , (*RR: 280)*)  484 (*P82*)
         , (*RR: 281)*)  488 (*P86*) , (*RR: 282)*)  489 (*P87*)
         , (*RR: 283)*)  495 (*P93*) , (*RR: 284)*)  494 (*P92*)
         , (*RR: 285)*)  502 (*P100*) , (*RR: 286)*)  501 (*P99*)
         , (*RR: 287)*)  594 (*P192*) , (*RR: 288)*)  595 (*P193*)
         , (*RR: 289)*)  596 (*P194*) , (*RR: 290)*)  665 (*P263*)
         , (*RR: 291)*)  449 (*P47*) , (*RR: 292)*)  420 (*P18*)
         , (*RR: 293)*)  422 (*P20*) , (*RR: 294)*)  431 (*P29*)
         , (*RR: 295)*)  424 (*P22*) , (*RR: 296)*)  426 (*P24*)
         , (*RR: 297)*)  403 (*P1*) , (*RR: 298)*)  404 (*P2*)
         , (*RR: 299)*)  405 (*P3*) , (*RR: 300)*)  406 (*P4*)
         , (*RR: 301)*)  407 (*P5*) , (*RR: 302)*)  408 (*P6*)
         , (*RR: 303)*)  437 (*P35*) , (*RR: 304)*)  436 (*P34*)
         , (*RR: 305)*)  417 (*P15*) , (*RR: 306)*)  434 (*P32*)
         , (*RR: 307)*)  456 (*P54*) , (*RR: 308)*)  471 (*P69*)
         , (*RR: 309)*)  458 (*P56*) , (*RR: 310)*)  465 (*P63*)
         , (*RR: 311)*)  459 (*P57*) , (*RR: 312)*)  526 (*P124*)
         , (*RR: 313)*)  510 (*P108*) , (*RR: 314)*)  511 (*P109*)
         , (*RR: 315)*)  512 (*P110*) , (*RR: 316)*)  513 (*P111*)
         , (*RR: 317)*)  514 (*P112*) , (*RR: 318)*)  515 (*P113*)
         , (*RR: 319)*)  516 (*P114*) , (*RR: 320)*)  517 (*P115*)
         , (*RR: 321)*)  518 (*P116*) , (*RR: 322)*)  519 (*P117*)
         , (*RR: 323)*)  520 (*P118*) , (*RR: 324)*)  521 (*P119*)
         , (*RR: 325)*)  522 (*P120*) , (*RR: 326)*)  523 (*P121*)
         , (*RR: 327)*)  524 (*P122*) , (*RR: 328)*)  525 (*P123*)
         , (*RR: 329)*)  527 (*P125*) , (*RR: 330)*)  528 (*P126*)
         , (*RR: 331)*)  530 (*P128*) , (*RR: 332)*)  537 (*P135*)
         , (*RR: 333)*)  536 (*P134*) , (*RR: 334)*)  539 (*P137*)
         , (*RR: 335)*)  542 (*P140*) , (*RR: 336)*)  625 (*P223*)
         , (*RR: 337)*)  634 (*P232*) , (*RR: 338)*)  601 (*P199*)
         , (*RR: 339)*)  609 (*P207*) , (*RR: 340)*)  610 (*P208*)
         , (*RR: 341)*)  611 (*P209*) , (*RR: 342)*)  627 (*P225*)
         , (*RR: 343)*)  600 (*P198*) , (*RR: 344)*)  608 (*P206*)
         , (*RR: 345)*)  624 (*P222*) , (*RR: 346)*)  622 (*P220*)
         , (*RR: 347)*)  628 (*P226*) , (*RR: 348)*)  613 (*P211*)
         , (*RR: 349)*)  614 (*P212*) , (*RR: 350)*)  633 (*P231*)
         , (*RR: 351)*)  632 (*P230*) , (*RR: 352)*)  631 (*P229*)
         , (*RR: 353)*)  618 (*P216*) , (*RR: 354)*)  619 (*P217*)
         , (*RR: 355)*)  507 (*P105*) , (*RR: 356)*)  503 (*P101*)
         , (*RR: 357)*)  543 (*P141*) , (*RR: 358)*)  541 (*P139*)
         , (*RR: 359)*)  562 (*P160*) , (*RR: 360)*)  550 (*P148*)
         , (*RR: 361)*)  575 (*P173*) , (*RR: 362)*)  583 (*P181*)
         , (*RR: 363)*)  570 (*P168*) , (*RR: 364)*)  587 (*P185*)
         , (*RR: 365)*)  571 (*P169*) , (*RR: 366)*)  585 (*P183*)
         , (*RR: 367)*)  581 (*P179*) , (*RR: 368)*)  574 (*P172*)
         , (*RR: 369)*)  576 (*P174*) , (*RR: 370)*)  552 (*P150*)
         , (*RR: 371)*)  548 (*P146*) , (*RR: 372)*)  549 (*P147*)
         , (*RR: 373)*)  557 (*P155*) , (*RR: 374)*)  555 (*P153*)
         , (*RR: 375)*)  556 (*P154*) , (*RR: 376)*)  559 (*P157*)
         , (*RR: 377)*)  529 (*P127*) , (*RR: 378)*)  505 (*P103*)
         , (*RR: 379)*)  477 (*P75*) , (*RR: 380)*)  666 (*P264*)
         , (*RR: 381)*)  481 (*P79*) , (*RR: 382)*)  487 (*P85*)
         , (*RR: 383)*)  667 (*P265*) , (*RR: 384)*)  496 (*P94*)
         , (*RR: 385)*)  491 (*P89*) , (*RR: 386)*)  671 (*P269*)
         , (*RR: 387)*)  498 (*P96*) , (*RR: 388)*)  669 (*P267*)
         , (*RR: 389)*)  593 (*P191*) , (*RR: 390)*)  681 (*P279*)
         , (*RR: 391)*)  679 (*P277*) , (*RR: 392)*)  680 (*P278*)
         , (*RR: 393)*)  677 (*P275*) , (*RR: 394)*)  678 (*P276*)
         , (*RR: 395)*)  670 (*P268*) , (*RR: 396)*)  674 (*P272*)
         , (*RR: 397)*)  668 (*P266*) , (*RR: 398)*)  675 (*P273*)
         , (*RR: 399)*)  448 (*P46*) , (*RR: 400)*)  447 (*P45*)
         , (*RR: 401)*)  421 (*P19*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 402 => (* P1 _0000_ (266): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 403,297 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 404,298 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 405,299 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 406,300 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 407,301 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 408,302 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 409 => (* P8 InterfaceKind (115): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 115;
                (* line 288 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 410 => (* P9 ModuleKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 411 => (* P10 GenInterfaceKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 412 => (* P11 GenModuleKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 413 => (* P12 InstInterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 414 => (* P13 InstModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 415,200 => (* P14 InterfaceLt (122): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 306 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 416,210 => (* P15 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 417,305 => (* P16 InterfaceMiddle (126): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 126;
                (* line 332 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 418,216 => (* P17 Interface (108): InterfaceMiddle OpenDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 343 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 419,201 => (* P18 ModuleLt (128): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 366 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 420,292 => (* P19 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 387 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 421,401 => (* P20 ModuleMiddle (130): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 130;
                (* line 394 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 422,293 => (* P21 Module (110): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 406 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 423,197 => (* P22 GenInterfaceLt (132): StkRwGENERIC StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 432 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 424,295 => (* P23 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 111;
                (* line 452 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 425,198 => (* P24 GenModuleLt (134): StkRwGENERIC StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 460 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 426,296 => (* P25 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 112;
                (* line 480 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+7] . Scan , Ukt . UkGenModule ) ;
                     
              | 427,199 => (* P26 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 489 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 428 => (* P27 OptUnsafe (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 490 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 429 => (* P28 OptSemicolon (136): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;

              | 430 => (* P29 OptSemicolon (136): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 136;

              | 431,294 => (* P30 GenFormalList (133): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 499 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 432,208 => (* P31 GenActualList (123): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 505 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 433 => (* P32 ImportList (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 434,306 => (* P33 ImportList (124): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 435,204 => (* P34 Import (138): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 436,304 => (* P35 ImportItemPlusList (139): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 437,303 => (* P36 ImportItemPlusList (139): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;

              | 438 => (* P37 ImportItem (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 524 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 439,203 => (* P38 ImportItem (140): StkIdent StkRwAS StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 527 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 440,202 => (* P39 FromImportLt (141): StkRwFROM StkIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 531 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 441,206 => (* P40 Import (138): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 442,205 => (* P41 FromImportIdPlusList (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 542 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 443,207 => (* P42 FromImportIdPlusList (142): FromImportIdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 547 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 444 => (* P43 ExpImpDone (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 552 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 445 => (* P44 Exports (129): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 129;
                (* line 559 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 446 => (* P45 Exports (129): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 129;

              | 447,400 => (* P46 ExportIdPlusList (143): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 448,399 => (* P47 ExportIdPlusList (143): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 449,291 => (* P48 ExportIdent (144): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 579 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 450,209,224 => (* P49 IdentRef (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 594 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsPredefId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsPredefId ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 451 => (* P50 QualIdentRef (146): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 601 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsPredefId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsPredefId ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 452 => (* P51 IdPlusList (147): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 609 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 453 => (* P52 IdPlusList (147): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;
                (* line 613 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 454,227 => (* P53 DeclIdListElems (148): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 625 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                            )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 455,228 => (* P54 DeclIdListElems (148): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 148;
                (* line 640 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclParseInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 456,307 => (* P55 IdStarList (137): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 659 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 457 => (* P56 IdStarList (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 661 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 458,309 => (* P57 MaybeQualIdent (149): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 666 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsPredefId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsPredefId ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                
                     
              | 459,311 => (* P58 MaybeQualIdent (149): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 672 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsPredefId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsPredefId ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                     
              | 460 => (* P59 QualIdent (150): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;
                (* line 678 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsPredefId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsPredefId ;
                       yySynAttribute . Scan . SaPredefTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaPredefTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 461 => (* P60 MaybeQualIdentStarList (151): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 151;
                (* line 686 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 462 => (* P61 MaybeQualIdentStarList (151): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 688 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 463 => (* P62 MaybeQualIdentPlusList (152): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 690 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 464 => (* P63 MaybeQualIdentPlusList (152): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 692 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 465,310 => (* P64 TypeId (153): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;

              | 466,221 => (* P65 TypeId (153): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 702 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 467,222 => (* P66 TypeId (153): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 707 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 468 => (* P67 OptConstType (155): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 155;
                (* line 717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 469 => (* P68 OptConstType (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 719 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 470,211 => (* P69 ConstDeclGroupLt (156): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 728 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 471,308 => (* P70 ConstDeclGroup (158): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 731 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 472 => (* P71 ConstDeclList (157): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 157;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 473 => (* P72 ConstDeclList (157): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 742 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 474,275 => (* P73 ConstDeclPlus (159): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 747 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 475,218 => (* P74 ConstDeclPlus (159): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 159;
                (* line 752 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 476,217 => (* P75 ConstDeclId (161): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 770 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 477,379 => (* P76 ConstDecl (160): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 160;
                (* line 777 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 478,278 => (* P77 TypeRelation (164): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 803 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 479,279 => (* P78 TypeRelation (164): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 805 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 480,214 => (* P79 TypeDeclGroupLt (165): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 816 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 481,381 => (* P80 TypeDeclGroup (167): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 167;
                (* line 819 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 482 => (* P81 TypeDeclList (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 824 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 483 => (* P82 TypeDeclList (166): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 166;
                (* line 830 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 484,280 => (* P83 TypeDeclPlus (168): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 168;
                (* line 835 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 485,277 => (* P84 TypeDeclPlus (168): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 168;
                (* line 840 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 486,276 => (* P85 TypeDeclId (170): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 856 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 487,382 => (* P86 TypeDecl (169): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 169;
                (* line 863 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 488,281 => (* P87 RevelationRelation (171): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 883 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 489,282 => (* P88 RevelationRelation (171): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 885 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 490,213 => (* P89 RevelationGroupLt (172): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 172;
                (* line 896 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 491,385 => (* P90 RevelationGroup (174): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 174;
                (* line 899 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 492 => (* P91 RevelationList (173): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 173;
                (* line 904 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 493 => (* P92 RevelationList (173): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 173;
                (* line 910 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 494,284 => (* P93 RevelationPlus (175): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 175;
                (* line 915 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 495,283 => (* P94 RevelationPlus (175): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 175;
                (* line 920 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 496,384 => (* P95 Revelation (176): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 176;
                (* line 936 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 497,215 => (* P96 VarDeclGroupLt (177): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 963 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 498,387 => (* P97 VarDeclGroup (179): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 977 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 499 => (* P98 VarDeclList (178): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 178;
                (* line 983 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 500 => (* P99 VarDeclList (178): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 178;
                (* line 989 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 501,286 => (* P100 VarDeclPlus (180): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 180;
                (* line 1002 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 502,285 => (* P101 VarDeclPlus (180): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 1007 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 503,356 => (* P102 VarDecl (181): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 181;
                (* line 1025 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 504 => (* P103 VarDeclIds (182): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1053 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 505,378 => (* P104 OptDeclType (162): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 1065 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 506 => (* P105 OptDeclType (162): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 162;
                (* line 1069 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 507,355 => (* P106 OptDeclValue (183): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 1075 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 508 => (* P107 OptDeclValue (183): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 183;
                (* line 1079 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 509 => (* P108 Type (154): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 510,313 => (* P109 Type (154): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 511,314 => (* P110 Type (154): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 512,315 => (* P111 Type (154): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 513,316 => (* P112 Type (154): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 514,317 => (* P113 Type (154): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 515,318 => (* P114 Type (154): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 516,319 => (* P115 Type (154): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 517,320 => (* P116 Type (154): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 518,321 => (* P117 Type (154): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 519,322 => (* P118 Type (154): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 520,323 => (* P119 Type (154): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 521,324 => (* P120 Type (154): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 522,325 => (* P121 Type (154): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 523,326 => (* P122 Type (154): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 524,327 => (* P123 Type (154): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 525,328 => (* P124 Type (154): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 526,312 => (* P125 Type (154): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1111 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 527,329 => (* P126 Type (154): StkUNTRACED StkRwREF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1119 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkUNTRACEDREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 528,330 => (* P127 Type (154): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 529,377 => (* P128 OpenArrayType (201): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 201;
                (* line 1131 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 530,331 => (* P129 Type (154): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 531 => (* P130 FixedArrayType (202): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 202;

              | 532,223 => (* P131 EnumTypeLt (203): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 203;
                (* line 1146 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 533,226 => (* P132 EnumType (205): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1161 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 534 => (* P133 EnumLitList (204): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 204;
                (* line 1178 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 535 => (* P134 EnumLitList (204): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1181 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 536,333 => (* P135 EnumLitPlus (206): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1184 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 537,332 => (* P136 EnumLitPlus (206): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 206;
                (* line 1187 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 538,225 => (* P137 EnumLit (207): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1190 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 539,334 => (* P138 Type (154): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 540 => (* P139 FieldDeclList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1213 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 541,358 => (* P140 FieldDeclList (208): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 208;
                (* line 1221 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 542,335 => (* P141 FieldDeclPlus (209): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1230 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 543,357 => (* P142 FieldDeclPlus (209): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1233 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 544,220 => (* P143 RecTypeLt (210): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1245 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 545,264 => (* P144 Type (154): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 154;
                (* line 1273 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 546 => (* P145 MethodDeclList (211): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 211;
                (* line 1295 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 547 => (* P146 MethodDeclList (211): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1303 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 548,371 => (* P147 MethodDeclList (211): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 211;
                (* line 1308 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 549,372 => (* P148 MethodDeclPlus (212): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1317 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 550,360 => (* P149 MethodDeclPlus (212): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 212;
                (* line 1320 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 551,266 => (* P150 MethodDeclLt (214): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1332 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 552,370 => (* P151 MethodDecl (213): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 213;
                (* line 1355 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 553 => (* P152 OverrideList (216): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 216;
                (* line 1385 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 554 => (* P153 OverrideList (216): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1393 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 555,374 => (* P154 OverrideList (216): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1398 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 556,375 => (* P155 OverridePlus (217): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 217;
                (* line 1407 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 557,373 => (* P156 OverridePlus (217): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 217;
                (* line 1410 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 558,273 => (* P157 OverrideLt (219): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1422 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 559,376 => (* P158 Override (218): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 218;
                (* line 1428 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 560 => (* P159 Brand (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1440 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 561 => (* P160 Brand (220): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1445 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 562,359 => (* P161 Brand (220): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 220;
                (* line 1450 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 563 => (* P162 Supertype (221): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 221;
                (* line 1457 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 564 => (* P163 Supertype (221): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1463 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 565 => (* P164 Supertype (221): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1472 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 566,265 => (* P165 ObjTypeLt (223): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 223;
                (* line 1483 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 567,274 => (* P166 ObjType (222): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 222;
                (* line 1511 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 568 => (* P167 Type (154): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;

              | 569,219 => (* P168 ProcTypeLt (224): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1535 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*)
                     
              | 570,363 => (* P169 Type (154): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 154;
                (* line 1550 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 571,365 => (* P170 Signature (215): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1558 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 572,270 => (* P171 Formals (225): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 225;
                (* line 1578 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 573 => (* P172 FormalsList (228): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 228;
                (* line 1597 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 574,368 => (* P173 FormalsList (228): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 228;

              | 575,361 => (* P174 FormalPlus (229): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1602 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 576,369 => (* P175 FormalPlus (229): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 229;
                (* line 1612 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 577 => (* P176 FormalLt (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1616 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 578,268 => (* P177 FormalLt (231): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1631 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 579,269 => (* P178 FormalLt (231): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1647 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 580,267 => (* P179 FormalLt (231): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1661 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 581,367 => (* P180 Formal (230): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 230;
                (* line 1678 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 582 => (* P181 FormalIds (232): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 232;
                (* line 1733 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 583,362 => (* P182 FormalType (233): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 233;
                (* line 1745 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 584 => (* P183 FormalType (233): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 233;
                (* line 1754 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 585,366 => (* P184 FormalExpr (234): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 234;
                (* line 1762 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 586 => (* P185 FormalExpr (234): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 234;
                (* line 1771 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 587,364 => (* P186 ResultType (226): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 226;
                (* line 1779 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 588 => (* P187 ResultType (226): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 226;
                (* line 1786 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 589 => (* P188 Raises (227): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 227;
                (* line 1796 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 590,271 => (* P189 Raises (227): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 227;
                (* line 1802 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 591,272 => (* P190 Raises (227): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 227;
                (* line 1809 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 592,212 => (* P191 ProcDeclLt (236): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 236;
                (* line 1816 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* Body scope.*) 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkModule  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         END (*IF*) ; 
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END (*Block*) 
                     
              | 593,389 => (* P192 ProcDecl (238): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1847 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 594,287 => (* P193 OptProcBody (237): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;
                (* line 1891 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 595,288 => (* P194 ProcBodyLt (239): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1900 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 596,289 => (* P195 OptProcBody (237): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 237;
                (* line 1913 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 597 => (* P196 Expr (163): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;

              | 598 => (* P197 E0 (240): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;

              | 599 => (* P198 E0 (240): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1937 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 600,343 => (* P199 E1 (241): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;

              | 601,338 => (* P200 E1 (241): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 241;
                (* line 1947 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 602 => (* P201 E2 (242): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;

              | 603 => (* P202 E2 (242): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 242;
                (* line 1957 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 604 => (* P203 E3 (243): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;

              | 605 => (* P204 E3 (243): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 243;
                (* line 1963 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 606 => (* P205 E4 (244): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 607 => (* P206 E4 (244): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1973 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 608,344 => (* P207 E5 (246): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 609,339 => (* P208 E5 (246): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 1983 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 610,340 => (* P209 E6 (248): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 611,341 => (* P210 E6 (248): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 248;
                (* line 1993 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 612,260 => (* P211 E7 (250): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2008 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 613,348 => (* P212 E7 (250): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2013 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 614,349 => (* P213 E7 (250): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2022 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 615,257 => (* P214 E7 (250): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2031 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 616 => (* P215 E7 (250): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 617,262 => (* P216 E7 (250): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2042 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 618,353 => (* P217 E7 (250): IdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2047 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 619,354 => (* P218 E7 (250): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2056 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 620 => (* P219 E7 (250): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2064 of "FM3Parser.lalr" *)
                 
              | 621 => (* P220 E7 (250): BuiltinIdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2067 of "FM3Parser.lalr" *)
                 FM3Pass1 . BuiltinNoSelector ( yyAttributeStack^[yyStackPtr+1] ) 
              | 622,346 => (* P221 E7 (250): BuiltinIdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2070 of "FM3Parser.lalr" *)
                 FM3Pass1 . BuiltinIdentActualsL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] ) ; 
              | 623,258 => (* P222 E7 (250): BuiltinIdentRef StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2073 of "FM3Parser.lalr" *)
                 FM3Pass1 . BuiltinOtherSelector ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] , "dot-selected" ) 
              | 624,345 => (* P223 E7 (250): BuiltinIdentRef Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 2076 of "FM3Parser.lalr" *)
                 FM3Pass1 . BuiltinOtherSelector ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+2] , "subscripted" ) 
              | 625,336 => (* P224 E7 (250): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 626,259 => (* P225 Subscripts (253): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 253;
                (* line 2082 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 627,342 => (* P226 SsPlusList (256): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2092 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 628,347 => (* P227 SsPlusList (256): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2095 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 629,261 => (* P228 Actuals (254): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;
                (* line 2106 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 630 => (* P229 ActualList (257): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 257;
                (* line 2116 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 631,352 => (* P230 ActualList (257): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2119 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 632,351 => (* P231 ActualList (257): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2122 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 633,350 => (* P232 Actual (258): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2132 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 634,337 => (* P233 Actual (258): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2137 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 635,231 => (* P234 E8WOId (252): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2152 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 636,232 => (* P235 E8WOId (252): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2157 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 637,233 => (* P236 E8WOId (252): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2164 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 638,234 => (* P237 E8WOId (252): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2171 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 639,235 => (* P238 E8WOId (252): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2181 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 640,236 => (* P239 E8WOId (252): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2191 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 641,237 => (* P240 E8WOId (252): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2198 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 642,238 => (* P241 E8WOId (252): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2205 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 643,241 => (* P242 E8WOId (252): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2213 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 644,242 => (* P243 E8WOId (252): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2220 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 645,239 => (* P244 E8WOId (252): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2227 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 646,240 => (* P245 E8WOId (252): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2229 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 647,263 => (* P246 E8WOId (252): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;

              | 648,244 => (* P247 ExprRelOp (245): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2233 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 649,245 => (* P248 ExprRelOp (245): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2234 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 650,246 => (* P249 ExprRelOp (245): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2235 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 651,247 => (* P250 ExprRelOp (245): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2236 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 652,248 => (* P251 ExprRelOp (245): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2237 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 653,249 => (* P252 ExprRelOp (245): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2238 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 654,243 => (* P253 ExprRelOp (245): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2239 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 655,250 => (* P254 ExprAddOp (247): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 656,251 => (* P255 ExprAddOp (247): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2243 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 657,252 => (* P256 ExprAddOp (247): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2244 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 658,255 => (* P257 ExprMulOp (249): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 659,256 => (* P258 ExprMulOp (249): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2247 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 660,253 => (* P259 ExprMulOp (249): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 661,254 => (* P260 ExprMulOp (249): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2249 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 662,229 => (* P261 ExprUnaryAddOp (251): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2251 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 663,230 => (* P262 ExprUnaryAddOp (251): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2252 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 664 => (* P263 BlockLt (259): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 259;
                (* line 2257 of "FM3Parser.lalr" *)
                
                     
              | 665,290 => (* P264 Block (135): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 135;
                (* line 2261 of "FM3Parser.lalr" *)
                
                     
              | 666,380 => (* P265 BlockDecl (260): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2267 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 667,383 => (* P266 BlockDecl (260): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2271 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 668,397 => (* P267 BlockDecl (260): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2275 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 669,388 => (* P268 BlockDecl (260): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2279 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 670,395 => (* P269 BlockDecl (260): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2283 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 671,386 => (* P270 BlockDecl (260): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2287 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 672 => (* P271 OpenDeclList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;
                (* line 2295 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 673 => (* P272 OpenDeclList (127): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 127;
                (* line 2303 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 674,396 => (* P273 BlockDeclPlus (262): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 262;
                (* line 2312 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 675,398 => (* P274 BlockDeclPlus (262): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 262;
                (* line 2317 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 676 => (* P275 StmtList (131): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 131;
                (* line 2336 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 677,393 => (* P276 StmtList (131): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 131;
                (* line 2344 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 678,394 => (* P277 StmtPlus (263): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2352 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 679,391 => (* P278 StmtPlus (263): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 263;
                (* line 2355 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 680,392 => (* P279 Stmt (264): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 264;

              | 681,390 => (* P280 AssignStmt (265): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 265;
                (* line 2369 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

