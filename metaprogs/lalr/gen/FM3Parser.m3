
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2025 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 269;
   yyTableMax               = 916;
   yyNTableMax              = 1475;
   yyFirstReadState         = 1;
   yyLastReadState          = 200;
   yyFirstReadTermState             = 201;
   yyLastReadTermState              = 284;
   yyLastReadNontermState           = 403;
   yyFirstReduceState               = 404;
   yyLastReduceState                = 684;
   yyStartState             = 1;
   yyStopState              = 404;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   1])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   2])
         , (*  12*) ADR (yyTComb [   3]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   4]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   5]) , (*  31*) ADR (yyTComb [   0])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  10]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [   0]) , (*  37*) ADR (yyTComb [   1])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [  13])
         , (*  40*) ADR (yyTComb [  41]) , (*  41*) ADR (yyTComb [  72])
         , (*  42*) ADR (yyTComb [  16]) , (*  43*) ADR (yyTComb [  15])
         , (*  44*) ADR (yyTComb [  70]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [   0])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [  91])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [   0])
         , (*  52*) ADR (yyTComb [   9]) , (*  53*) ADR (yyTComb [  12])
         , (*  54*) ADR (yyTComb [  30]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [   2]) , (*  57*) ADR (yyTComb [  92])
         , (*  58*) ADR (yyTComb [   4]) , (*  59*) ADR (yyTComb [ 105])
         , (*  60*) ADR (yyTComb [ 106]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [   0]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 155]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 134]) , (*  67*) ADR (yyTComb [  21])
         , (*  68*) ADR (yyTComb [  46]) , (*  69*) ADR (yyTComb [ 217])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 254])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 275])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [ 292])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [ 313])
         , (*  78*) ADR (yyTComb [   0]) , (*  79*) ADR (yyTComb [ 369])
         , (*  80*) ADR (yyTComb [  31]) , (*  81*) ADR (yyTComb [ 164])
         , (*  82*) ADR (yyTComb [ 429]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [ 517]) , (*  85*) ADR (yyTComb [ 605])
         , (*  86*) ADR (yyTComb [ 643]) , (*  87*) ADR (yyTComb [ 699])
         , (*  88*) ADR (yyTComb [  50]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [  51]) , (*  91*) ADR (yyTComb [   0])
         , (*  92*) ADR (yyTComb [  73]) , (*  93*) ADR (yyTComb [ 716])
         , (*  94*) ADR (yyTComb [   3]) , (*  95*) ADR (yyTComb [  65])
         , (*  96*) ADR (yyTComb [   0]) , (*  97*) ADR (yyTComb [   4])
         , (*  98*) ADR (yyTComb [   2]) , (*  99*) ADR (yyTComb [   5])
         , (* 100*) ADR (yyTComb [ 143]) , (* 101*) ADR (yyTComb [  11])
         , (* 102*) ADR (yyTComb [  12]) , (* 103*) ADR (yyTComb [   7])
         , (* 104*) ADR (yyTComb [  86]) , (* 105*) ADR (yyTComb [ 126])
         , (* 106*) ADR (yyTComb [   0]) , (* 107*) ADR (yyTComb [  33])
         , (* 108*) ADR (yyTComb [  37]) , (* 109*) ADR (yyTComb [  76])
         , (* 110*) ADR (yyTComb [ 157]) , (* 111*) ADR (yyTComb [  14])
         , (* 112*) ADR (yyTComb [ 205]) , (* 113*) ADR (yyTComb [ 132])
         , (* 114*) ADR (yyTComb [  81]) , (* 115*) ADR (yyTComb [   0])
         , (* 116*) ADR (yyTComb [ 459]) , (* 117*) ADR (yyTComb [ 105])
         , (* 118*) ADR (yyTComb [ 504]) , (* 119*) ADR (yyTComb [ 143])
         , (* 120*) ADR (yyTComb [   0]) , (* 121*) ADR (yyTComb [  61])
         , (* 122*) ADR (yyTComb [ 208]) , (* 123*) ADR (yyTComb [   0])
         , (* 124*) ADR (yyTComb [ 165]) , (* 125*) ADR (yyTComb [   4])
         , (* 126*) ADR (yyTComb [  73]) , (* 127*) ADR (yyTComb [   5])
         , (* 128*) ADR (yyTComb [  88]) , (* 129*) ADR (yyTComb [   0])
         , (* 130*) ADR (yyTComb [   6]) , (* 131*) ADR (yyTComb [  99])
         , (* 132*) ADR (yyTComb [   0]) , (* 133*) ADR (yyTComb [ 115])
         , (* 134*) ADR (yyTComb [ 350]) , (* 135*) ADR (yyTComb [ 363])
         , (* 136*) ADR (yyTComb [ 117]) , (* 137*) ADR (yyTComb [ 119])
         , (* 138*) ADR (yyTComb [   0]) , (* 139*) ADR (yyTComb [ 123])
         , (* 140*) ADR (yyTComb [ 366]) , (* 141*) ADR (yyTComb [ 137])
         , (* 142*) ADR (yyTComb [ 606]) , (* 143*) ADR (yyTComb [ 693])
         , (* 144*) ADR (yyTComb [ 127]) , (* 145*) ADR (yyTComb [ 129])
         , (* 146*) ADR (yyTComb [ 752]) , (* 147*) ADR (yyTComb [ 753])
         , (* 148*) ADR (yyTComb [ 133]) , (* 149*) ADR (yyTComb [ 135])
         , (* 150*) ADR (yyTComb [ 143]) , (* 151*) ADR (yyTComb [ 148])
         , (* 152*) ADR (yyTComb [   0]) , (* 153*) ADR (yyTComb [   0])
         , (* 154*) ADR (yyTComb [ 162]) , (* 155*) ADR (yyTComb [   0])
         , (* 156*) ADR (yyTComb [   0]) , (* 157*) ADR (yyTComb [   0])
         , (* 158*) ADR (yyTComb [   8]) , (* 159*) ADR (yyTComb [ 156])
         , (* 160*) ADR (yyTComb [   7]) , (* 161*) ADR (yyTComb [ 215])
         , (* 162*) ADR (yyTComb [  10]) , (* 163*) ADR (yyTComb [  42])
         , (* 164*) ADR (yyTComb [ 271]) , (* 165*) ADR (yyTComb [   0])
         , (* 166*) ADR (yyTComb [ 183]) , (* 167*) ADR (yyTComb [   0])
         , (* 168*) ADR (yyTComb [   0]) , (* 169*) ADR (yyTComb [ 162])
         , (* 170*) ADR (yyTComb [  17]) , (* 171*) ADR (yyTComb [   0])
         , (* 172*) ADR (yyTComb [ 183]) , (* 173*) ADR (yyTComb [ 185])
         , (* 174*) ADR (yyTComb [   0]) , (* 175*) ADR (yyTComb [   0])
         , (* 176*) ADR (yyTComb [ 416]) , (* 177*) ADR (yyTComb [   1])
         , (* 178*) ADR (yyTComb [  37]) , (* 179*) ADR (yyTComb [  38])
         , (* 180*) ADR (yyTComb [   0]) , (* 181*) ADR (yyTComb [ 188])
         , (* 182*) ADR (yyTComb [ 187]) , (* 183*) ADR (yyTComb [   0])
         , (* 184*) ADR (yyTComb [ 213]) , (* 185*) ADR (yyTComb [ 242])
         , (* 186*) ADR (yyTComb [ 191]) , (* 187*) ADR (yyTComb [ 600])
         , (* 188*) ADR (yyTComb [ 762]) , (* 189*) ADR (yyTComb [ 575])
         , (* 190*) ADR (yyTComb [  39]) , (* 191*) ADR (yyTComb [   0])
         , (* 192*) ADR (yyTComb [ 205]) , (* 193*) ADR (yyTComb [ 211])
         , (* 194*) ADR (yyTComb [ 221]) , (* 195*) ADR (yyTComb [ 226])
         , (* 196*) ADR (yyTComb [ 797]) , (* 197*) ADR (yyTComb [ 808])
         , (* 198*) ADR (yyTComb [ 418]) , (* 199*) ADR (yyTComb [ 203])
         , (* 200*) ADR (yyTComb [ 248])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 114])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 112])
         , (*  16*) ADR (yyNComb [ 114]) , (*  17*) ADR (yyNComb [ 121])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 123])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 125])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 126])
         , (*  24*) ADR (yyNComb [ 127]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 128]) , (*  27*) ADR (yyNComb [ 129])
         , (*  28*) ADR (yyNComb [ 127]) , (*  29*) ADR (yyNComb [ 113])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 132])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 134])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 128])
         , (*  36*) ADR (yyNComb [ 137]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 138]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 149]) , (*  41*) ADR (yyNComb [ 151])
         , (*  42*) ADR (yyNComb [ 109]) , (*  43*) ADR (yyNComb [ 109])
         , (*  44*) ADR (yyNComb [ 206]) , (*  45*) ADR (yyNComb [ 109])
         , (*  46*) ADR (yyNComb [ 265]) , (*  47*) ADR (yyNComb [ 324])
         , (*  48*) ADR (yyNComb [ 109]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 109]) , (*  51*) ADR (yyNComb [ 383])
         , (*  52*) ADR (yyNComb [ 139]) , (*  53*) ADR (yyNComb [ 109])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 140])
         , (*  56*) ADR (yyNComb [ 132]) , (*  57*) ADR (yyNComb [ 109])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 110])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 445])
         , (*  62*) ADR (yyNComb [ 385]) , (*  63*) ADR (yyNComb [ 412])
         , (*  64*) ADR (yyNComb [ 109]) , (*  65*) ADR (yyNComb [ 475])
         , (*  66*) ADR (yyNComb [ 109]) , (*  67*) ADR (yyNComb [ 109])
         , (*  68*) ADR (yyNComb [ 494]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 521]) , (*  71*) ADR (yyNComb [ 109])
         , (*  72*) ADR (yyNComb [ 549]) , (*  73*) ADR (yyNComb [ 109])
         , (*  74*) ADR (yyNComb [ 532]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 559]) , (*  77*) ADR (yyNComb [ 110])
         , (*  78*) ADR (yyNComb [ 185]) , (*  79*) ADR (yyNComb [ 109])
         , (*  80*) ADR (yyNComb [ 172]) , (*  81*) ADR (yyNComb [ 182])
         , (*  82*) ADR (yyNComb [ 114]) , (*  83*) ADR (yyNComb [ 141])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 110]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 109]) , (*  89*) ADR (yyNComb [ 603])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 667])
         , (*  92*) ADR (yyNComb [ 109]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 125])
         , (*  96*) ADR (yyNComb [ 116]) , (*  97*) ADR (yyNComb [ 109])
         , (*  98*) ADR (yyNComb [ 687]) , (*  99*) ADR (yyNComb [ 109])
         , (* 100*) ADR (yyNComb [ 109]) , (* 101*) ADR (yyNComb [ 167])
         , (* 102*) ADR (yyNComb [ 109]) , (* 103*) ADR (yyNComb [ 157])
         , (* 104*) ADR (yyNComb [ 129]) , (* 105*) ADR (yyNComb [ 159])
         , (* 106*) ADR (yyNComb [ 109]) , (* 107*) ADR (yyNComb [ 149])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 131])
         , (* 110*) ADR (yyNComb [ 122]) , (* 111*) ADR (yyNComb [ 133])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 109])
         , (* 114*) ADR (yyNComb [ 771]) , (* 115*) ADR (yyNComb [ 111])
         , (* 116*) ADR (yyNComb [ 111]) , (* 117*) ADR (yyNComb [ 830])
         , (* 118*) ADR (yyNComb [ 111]) , (* 119*) ADR (yyNComb [ 109])
         , (* 120*) ADR (yyNComb [ 109]) , (* 121*) ADR (yyNComb [ 109])
         , (* 122*) ADR (yyNComb [ 116]) , (* 123*) ADR (yyNComb [ 892])
         , (* 124*) ADR (yyNComb [ 112]) , (* 125*) ADR (yyNComb [ 164])
         , (* 126*) ADR (yyNComb [ 137]) , (* 127*) ADR (yyNComb [ 137])
         , (* 128*) ADR (yyNComb [ 109]) , (* 129*) ADR (yyNComb [ 915])
         , (* 130*) ADR (yyNComb [ 109]) , (* 131*) ADR (yyNComb [ 109])
         , (* 132*) ADR (yyNComb [ 929]) , (* 133*) ADR (yyNComb [ 109])
         , (* 134*) ADR (yyNComb [ 325]) , (* 135*) ADR (yyNComb [ 302])
         , (* 136*) ADR (yyNComb [ 109]) , (* 137*) ADR (yyNComb [ 110])
         , (* 138*) ADR (yyNComb [1000]) , (* 139*) ADR (yyNComb [ 109])
         , (* 140*) ADR (yyNComb [ 473]) , (* 141*) ADR (yyNComb [ 111])
         , (* 142*) ADR (yyNComb [1059]) , (* 143*) ADR (yyNComb [ 553])
         , (* 144*) ADR (yyNComb [ 109]) , (* 145*) ADR (yyNComb [ 109])
         , (* 146*) ADR (yyNComb [ 418]) , (* 147*) ADR (yyNComb [ 264])
         , (* 148*) ADR (yyNComb [ 109]) , (* 149*) ADR (yyNComb [ 109])
         , (* 150*) ADR (yyNComb [ 223]) , (* 151*) ADR (yyNComb [ 202])
         , (* 152*) ADR (yyNComb [ 155]) , (* 153*) ADR (yyNComb [ 156])
         , (* 154*) ADR (yyNComb [ 109]) , (* 155*) ADR (yyNComb [1112])
         , (* 156*) ADR (yyNComb [ 109]) , (* 157*) ADR (yyNComb [1147])
         , (* 158*) ADR (yyNComb [ 109]) , (* 159*) ADR (yyNComb [ 109])
         , (* 160*) ADR (yyNComb [1174]) , (* 161*) ADR (yyNComb [ 143])
         , (* 162*) ADR (yyNComb [1188]) , (* 163*) ADR (yyNComb [ 831])
         , (* 164*) ADR (yyNComb [ 158]) , (* 165*) ADR (yyNComb [ 242])
         , (* 166*) ADR (yyNComb [ 109]) , (* 167*) ADR (yyNComb [ 177])
         , (* 168*) ADR (yyNComb [ 169]) , (* 169*) ADR (yyNComb [ 167])
         , (* 170*) ADR (yyNComb [ 109]) , (* 171*) ADR (yyNComb [ 175])
         , (* 172*) ADR (yyNComb [ 109]) , (* 173*) ADR (yyNComb [ 109])
         , (* 174*) ADR (yyNComb [ 176]) , (* 175*) ADR (yyNComb [ 358])
         , (* 176*) ADR (yyNComb [1146]) , (* 177*) ADR (yyNComb [ 109])
         , (* 178*) ADR (yyNComb [1213]) , (* 179*) ADR (yyNComb [ 109])
         , (* 180*) ADR (yyNComb [ 184]) , (* 181*) ADR (yyNComb [ 109])
         , (* 182*) ADR (yyNComb [ 109]) , (* 183*) ADR (yyNComb [ 183])
         , (* 184*) ADR (yyNComb [ 186]) , (* 185*) ADR (yyNComb [ 109])
         , (* 186*) ADR (yyNComb [ 109]) , (* 187*) ADR (yyNComb [ 208])
         , (* 188*) ADR (yyNComb [ 359]) , (* 189*) ADR (yyNComb [1315])
         , (* 190*) ADR (yyNComb [ 109]) , (* 191*) ADR (yyNComb [ 214])
         , (* 192*) ADR (yyNComb [ 109]) , (* 193*) ADR (yyNComb [ 109])
         , (* 194*) ADR (yyNComb [ 206]) , (* 195*) ADR (yyNComb [ 109])
         , (* 196*) ADR (yyNComb [ 251]) , (* 197*) ADR (yyNComb [ 360])
         , (* 198*) ADR (yyNComb [ 282]) , (* 199*) ADR (yyNComb [ 306])
         , (* 200*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  199
         , (*   4*)  199 , (*   5*)    0 , (*   6*)    0 , (*   7*)  199
         , (*   8*)    0 , (*   9*)    0 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)  199 , (*  14*)    0 , (*  15*)  187
         , (*  16*)  188 , (*  17*)  199 , (*  18*)    0 , (*  19*)  199
         , (*  20*)    0 , (*  21*)  199 , (*  22*)    0 , (*  23*)  199
         , (*  24*)  199 , (*  25*)    0 , (*  26*)  199 , (*  27*)  199
         , (*  28*)  169 , (*  29*)  184 , (*  30*)  185 , (*  31*)  199
         , (*  32*)    0 , (*  33*)  199 , (*  34*)    0 , (*  35*)  189
         , (*  36*)  199 , (*  37*)    0 , (*  38*)  199 , (*  39*)    0
         , (*  40*)  199 , (*  41*)  199 , (*  42*)    0 , (*  43*)    0
         , (*  44*)  142 , (*  45*)    0 , (*  46*)  117 , (*  47*)  117
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)  117
         , (*  52*)  199 , (*  53*)    0 , (*  54*)    0 , (*  55*)  199
         , (*  56*)  111 , (*  57*)    0 , (*  58*)    0 , (*  59*)    0
         , (*  60*)    0 , (*  61*)  160 , (*  62*)   80 , (*  63*)  160
         , (*  64*)    0 , (*  65*)  160 , (*  66*)   69 , (*  67*)    0
         , (*  68*)  160 , (*  69*)    0 , (*  70*)  160 , (*  71*)   92
         , (*  72*)  160 , (*  73*)   87 , (*  74*)  160 , (*  75*)   93
         , (*  76*)   80 , (*  77*)   86 , (*  78*)   80 , (*  79*)   85
         , (*  80*)   81 , (*  81*)    0 , (*  82*)   67 , (*  83*)  199
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)    0 , (*  89*)  160 , (*  90*)    0 , (*  91*)  160
         , (*  92*)    0 , (*  93*)    0 , (*  94*)    0 , (*  95*)  104
         , (*  96*)  127 , (*  97*)    0 , (*  98*)  160 , (*  99*)    0
         , (* 100*)    0 , (* 101*)   56 , (* 102*)    0 , (* 103*)  199
         , (* 104*)  161 , (* 105*)  199 , (* 106*)  150 , (* 107*)  110
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)  142 , (* 115*)  150
         , (* 116*)    0 , (* 117*)   44 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)  160
         , (* 124*)    0 , (* 125*)  199 , (* 126*)  161 , (* 127*)  111
         , (* 128*)    0 , (* 129*)  160 , (* 130*)    0 , (* 131*)    0
         , (* 132*)  160 , (* 133*)    0 , (* 134*)  199 , (* 135*)  199
         , (* 136*)    0 , (* 137*)    0 , (* 138*)  142 , (* 139*)    0
         , (* 140*)  143 , (* 141*)    0 , (* 142*)  199 , (* 143*)  199
         , (* 144*)    0 , (* 145*)    0 , (* 146*)  111 , (* 147*)  111
         , (* 148*)    0 , (* 149*)    0 , (* 150*)    0 , (* 151*)    0
         , (* 152*)  198 , (* 153*)  199 , (* 154*)    0 , (* 155*)  176
         , (* 156*)    0 , (* 157*)  178 , (* 158*)    0 , (* 159*)    0
         , (* 160*)   80 , (* 161*)    0 , (* 162*)  160 , (* 163*)  189
         , (* 164*)    0 , (* 165*)  199 , (* 166*)    0 , (* 167*)  199
         , (* 168*)  199 , (* 169*)    0 , (* 170*)    0 , (* 171*)  199
         , (* 172*)    0 , (* 173*)    0 , (* 174*)  196 , (* 175*)  197
         , (* 176*)    0 , (* 177*)    0 , (* 178*)  160 , (* 179*)    0
         , (* 180*)  199 , (* 181*)    0 , (* 182*)    0 , (* 183*)  194
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)  199
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0 , (* 195*)    0
         , (* 196*)    0 , (* 197*)    0 , (* 198*)    0 , (* 199*)    0
         , (* 200*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  404} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 156,  157}
         , (*  10*) yyTCombType { 177,  178} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {  20,   21}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {  97,   98}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  32,   33}
         , (*  20*) yyTCombType {  37,   38} , (*  21*) yyTCombType {  56,  547}
         , (*  22*) yyTCombType {  94,  256} , (*  23*) yyTCombType { 125,  561}
         , (*  24*) yyTCombType { 127,  435} , (*  25*) yyTCombType { 130,  264}
         , (*  26*) yyTCombType { 103,  554} , (*  27*) yyTCombType { 158,  279}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 162,  435}
         , (*  30*) yyTCombType {  18,  205} , (*  31*) yyTCombType { 102,  553}
         , (*  32*) yyTCombType {   1,  434} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  96,  435}
         , (*  36*) yyTCombType { 170,  171} , (*  37*) yyTCombType {   1,  434}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,   13}
         , (*  40*) yyTCombType {  45,   46} , (*  41*) yyTCombType {  98,  568}
         , (*  42*) yyTCombType {  96,  435} , (*  43*) yyTCombType {  97,  567}
         , (*  44*) yyTCombType {  99,  257} , (*  45*) yyTCombType { 160,   62}
         , (*  46*) yyTCombType { 101,  547} , (*  47*) yyTCombType { 102,  103}
         , (*  48*) yyTCombType {  50,   51} , (*  49*) yyTCombType { 103,  554}
         , (*  50*) yyTCombType {  40,  479} , (*  51*) yyTCombType { 163,  676}
         , (*  52*) yyTCombType {  48,  219} , (*  53*) yyTCombType { 101,  547}
         , (*  54*) yyTCombType { 102,  553} , (*  55*) yyTCombType {  40,  479}
         , (*  56*) yyTCombType { 178,  679} , (*  57*) yyTCombType { 179,  180}
         , (*  58*) yyTCombType { 190,  191} , (*  59*) yyTCombType {   1,  202}
         , (*  60*) yyTCombType {  40,  479} , (*  61*) yyTCombType { 163,  676}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,  421} , (*  67*) yyTCombType {   9,  417}
         , (*  68*) yyTCombType {   8,  421} , (*  69*) yyTCombType {   9,  417}
         , (*  70*) yyTCombType {  14,   15} , (*  71*) yyTCombType {  20,  444}
         , (*  72*) yyTCombType {  14,   27} , (*  73*) yyTCombType {  22,  206}
         , (*  74*) yyTCombType {  25,  207} , (*  75*) yyTCombType {  30,  208}
         , (*  76*) yyTCombType {  20,  444} , (*  77*) yyTCombType {  34,  209}
         , (*  78*) yyTCombType {  22,   23} , (*  79*) yyTCombType {  25,   26}
         , (*  80*) yyTCombType {  39,  214} , (*  81*) yyTCombType {  41,  480}
         , (*  82*) yyTCombType {  42,  215} , (*  83*) yyTCombType {  43,  513}
         , (*  84*) yyTCombType {  40,  479} , (*  85*) yyTCombType {  52,  541}
         , (*  86*) yyTCombType {  41,  480} , (*  87*) yyTCombType {  43,   44}
         , (*  88*) yyTCombType {  53,  221} , (*  89*) yyTCombType {  44,  538}
         , (*  90*) yyTCombType {  67,   68} , (*  91*) yyTCombType {  41,  480}
         , (*  92*) yyTCombType {  40,  479} , (*  93*) yyTCombType {   8,  421}
         , (*  94*) yyTCombType {   9,   10} , (*  95*) yyTCombType {  10,   11}
         , (*  96*) yyTCombType {  11,  203} , (*  97*) yyTCombType {  12,  204}
         , (*  98*) yyTCombType {  40,  479} , (*  99*) yyTCombType {  58,  223}
         , (* 100*) yyTCombType {  95,  436} , (* 101*) yyTCombType {  54,   55}
         , (* 102*) yyTCombType {  49,  571} , (* 103*) yyTCombType { 107,  580}
         , (* 104*) yyTCombType {  40,  479} , (* 105*) yyTCombType {  44,  538}
         , (* 106*) yyTCombType {  54,  542} , (* 107*) yyTCombType { 108,  261}
         , (* 108*) yyTCombType {  10,   12} , (* 109*) yyTCombType { 111,  222}
         , (* 110*) yyTCombType {  49,  516} , (* 111*) yyTCombType {  57,  511}
         , (* 112*) yyTCombType {  44,  538} , (* 113*) yyTCombType {  67,  253}
         , (* 114*) yyTCombType {  92,   72} , (* 115*) yyTCombType {  41,  480}
         , (* 116*) yyTCombType {  68,  633} , (* 117*) yyTCombType {  68,  633}
         , (* 118*) yyTCombType {  80,  224} , (* 119*) yyTCombType {  80,  225}
         , (* 120*) yyTCombType {  88,  252} , (* 121*) yyTCombType {  88,   89}
         , (* 122*) yyTCombType {  90,   91} , (* 123*) yyTCombType {  41,  480}
         , (* 124*) yyTCombType {  59,  513} , (* 125*) yyTCombType {  60,  515}
         , (* 126*) yyTCombType {  49,  516} , (* 127*) yyTCombType {  57,  511}
         , (* 128*) yyTCombType { 104,  436} , (* 129*) yyTCombType {  41,  480}
         , (* 130*) yyTCombType {  49,  571} , (* 131*) yyTCombType {  95,   96}
         , (* 132*) yyTCombType {  90,  254} , (* 133*) yyTCombType {  49,  516}
         , (* 134*) yyTCombType {  57,  511} , (* 135*) yyTCombType {  41,  480}
         , (* 136*) yyTCombType {  49,  516} , (* 137*) yyTCombType { 121,  263}
         , (* 138*) yyTCombType {  44,  538} , (* 139*) yyTCombType { 126,  127}
         , (* 140*) yyTCombType {  59,  513} , (* 141*) yyTCombType {  60,  515}
         , (* 142*) yyTCombType { 109,  110} , (* 143*) yyTCombType {  92,  255}
         , (* 144*) yyTCombType {  44,  538} , (* 145*) yyTCombType { 105,  435}
         , (* 146*) yyTCombType { 109,  436} , (* 147*) yyTCombType {  59,  513}
         , (* 148*) yyTCombType {  60,  515} , (* 149*) yyTCombType { 119,  262}
         , (* 150*) yyTCombType { 117,  538} , (* 151*) yyTCombType { 114,  538}
         , (* 152*) yyTCombType { 104,  105} , (* 153*) yyTCombType {  66,  467}
         , (* 154*) yyTCombType { 100,  572} , (* 155*) yyTCombType { 114,  538}
         , (* 156*) yyTCombType { 128,  129} , (* 157*) yyTCombType {  49,  516}
         , (* 158*) yyTCombType {  57,  511} , (* 159*) yyTCombType {  49,  516}
         , (* 160*) yyTCombType {  64,  456} , (* 161*) yyTCombType {  49,  516}
         , (* 162*) yyTCombType { 100,  575} , (* 163*) yyTCombType {  57,   58}
         , (* 164*) yyTCombType {  57,  511} , (* 165*) yyTCombType {  49,  516}
         , (* 166*) yyTCombType {  57,  511} , (* 167*) yyTCombType { 131,  132}
         , (* 168*) yyTCombType { 105,  435} , (* 169*) yyTCombType {  66,  467}
         , (* 170*) yyTCombType {  64,  456} , (* 171*) yyTCombType {  59,  513}
         , (* 172*) yyTCombType {  60,  515} , (* 173*) yyTCombType {  66,  467}
         , (* 174*) yyTCombType {  64,  456} , (* 175*) yyTCombType { 117,  538}
         , (* 176*) yyTCombType {  66,  467} , (* 177*) yyTCombType {  59,   44}
         , (* 178*) yyTCombType { 100,  575} , (* 179*) yyTCombType {  59,  513}
         , (* 180*) yyTCombType {  60,   61} , (* 181*) yyTCombType { 133,  265}
         , (* 182*) yyTCombType { 100,  572} , (* 183*) yyTCombType { 136,  266}
         , (* 184*) yyTCombType { 124,  560} , (* 185*) yyTCombType { 100,  575}
         , (* 186*) yyTCombType {  64,  456} , (* 187*) yyTCombType { 137,  267}
         , (* 188*) yyTCombType { 100,  575} , (* 189*) yyTCombType { 139,  269}
         , (* 190*) yyTCombType {  64,  456} , (* 191*) yyTCombType {  64,  456}
         , (* 192*) yyTCombType { 137,  268} , (* 193*) yyTCombType { 144,  272}
         , (* 194*) yyTCombType {  64,  456} , (* 195*) yyTCombType { 145,  273}
         , (* 196*) yyTCombType {  64,  456} , (* 197*) yyTCombType {  64,  456}
         , (* 198*) yyTCombType { 113,  591} , (* 199*) yyTCombType { 148,  274}
         , (* 200*) yyTCombType {  66,  467} , (* 201*) yyTCombType { 149,  275}
         , (* 202*) yyTCombType { 113,  591} , (* 203*) yyTCombType { 110,  258}
         , (* 204*) yyTCombType { 113,  114} , (* 205*) yyTCombType { 141,  270}
         , (* 206*) yyTCombType { 113,  591} , (* 207*) yyTCombType { 124,  125}
         , (* 208*) yyTCombType {  66,  467} , (* 209*) yyTCombType { 100,  575}
         , (* 210*) yyTCombType { 141,  271} , (* 211*) yyTCombType { 100,  575}
         , (* 212*) yyTCombType { 150,  107} , (* 213*) yyTCombType { 100,  575}
         , (* 214*) yyTCombType { 151,  276} , (* 215*) yyTCombType {  66,  467}
         , (* 216*) yyTCombType { 151,  277} , (* 217*) yyTCombType { 100,  575}
         , (* 218*) yyTCombType { 119,  120} , (* 219*) yyTCombType { 110,  259}
         , (* 220*) yyTCombType { 110,  260} , (* 221*) yyTCombType {  64,  456}
         , (* 222*) yyTCombType {  69,  467} , (* 223*) yyTCombType {  64,  456}
         , (* 224*) yyTCombType {  64,  456} , (* 225*) yyTCombType {  64,  456}
         , (* 226*) yyTCombType {  64,  456} , (* 227*) yyTCombType { 110,  435}
         , (* 228*) yyTCombType { 154,  278} , (* 229*) yyTCombType {  64,  456}
         , (* 230*) yyTCombType { 159,  160} , (* 231*) yyTCombType { 169,   29}
         , (* 232*) yyTCombType {  69,  467} , (* 233*) yyTCombType {  81,   63}
         , (* 234*) yyTCombType { 161,  436} , (* 235*) yyTCombType {  64,   65}
         , (* 236*) yyTCombType {  64,  456} , (* 237*) yyTCombType {  64,  456}
         , (* 238*) yyTCombType {  64,  456} , (* 239*) yyTCombType {  64,  456}
         , (* 240*) yyTCombType {  64,  456} , (* 241*) yyTCombType {  64,  456}
         , (* 242*) yyTCombType {  64,  456} , (* 243*) yyTCombType {  64,  456}
         , (* 244*) yyTCombType {  64,  456} , (* 245*) yyTCombType {  64,  456}
         , (* 246*) yyTCombType {  64,  456} , (* 247*) yyTCombType {  64,  456}
         , (* 248*) yyTCombType {  69,  467} , (* 249*) yyTCombType { 166,  452}
         , (* 250*) yyTCombType { 172,  280} , (* 251*) yyTCombType { 173,  174}
         , (* 252*) yyTCombType { 110,  584} , (* 253*) yyTCombType {  69,  467}
         , (* 254*) yyTCombType { 166,  167} , (* 255*) yyTCombType { 181,  281}
         , (* 256*) yyTCombType { 182,  413} , (* 257*) yyTCombType { 186,  187}
         , (* 258*) yyTCombType {  69,  467} , (* 259*) yyTCombType {  81,   64}
         , (* 260*) yyTCombType {  81,  226} , (* 261*) yyTCombType {  81,  227}
         , (* 262*) yyTCombType {  81,  228} , (* 263*) yyTCombType {  81,  229}
         , (* 264*) yyTCombType {  81,  230} , (* 265*) yyTCombType {  81,  231}
         , (* 266*) yyTCombType {  81,  232} , (* 267*) yyTCombType {  81,  233}
         , (* 268*) yyTCombType {  81,  234} , (* 269*) yyTCombType {  81,  235}
         , (* 270*) yyTCombType {  81,  236} , (* 271*) yyTCombType { 112,  589}
         , (* 272*) yyTCombType { 192,  283} , (* 273*) yyTCombType {  71,  604}
         , (* 274*) yyTCombType { 122,  593} , (* 275*) yyTCombType { 112,  589}
         , (* 276*) yyTCombType { 112,   58} , (* 277*) yyTCombType { 112,  589}
         , (* 278*) yyTCombType { 122,  593} , (* 279*) yyTCombType { 112,  589}
         , (* 280*) yyTCombType { 193,  414} , (* 281*) yyTCombType { 161,  162}
         , (* 282*) yyTCombType { 122,  123} , (* 283*) yyTCombType { 184,  464}
         , (* 284*) yyTCombType { 184,  464} , (* 285*) yyTCombType {  69,  467}
         , (* 286*) yyTCombType {  69,  457} , (* 287*) yyTCombType {  69,  467}
         , (* 288*) yyTCombType {  69,  467} , (* 289*) yyTCombType {  71,  604}
         , (* 290*) yyTCombType { 194,  184} , (* 291*) yyTCombType {  69,   70}
         , (* 292*) yyTCombType { 195,  196} , (* 293*) yyTCombType {  71,  604}
         , (* 294*) yyTCombType {  73,  606} , (* 295*) yyTCombType { 164,  165}
         , (* 296*) yyTCombType {  71,  604} , (* 297*) yyTCombType {  75,  609}
         , (* 298*) yyTCombType { 199,  201} , (* 299*) yyTCombType {  69,  467}
         , (* 300*) yyTCombType {  69,  467} , (* 301*) yyTCombType {  69,  467}
         , (* 302*) yyTCombType {  69,  467} , (* 303*) yyTCombType {  69,  467}
         , (* 304*) yyTCombType {  69,  467} , (* 305*) yyTCombType {  69,  467}
         , (* 306*) yyTCombType {  69,  467} , (* 307*) yyTCombType {  69,  467}
         , (* 308*) yyTCombType {  69,  467} , (* 309*) yyTCombType {  69,  457}
         , (* 310*) yyTCombType {  73,  606} , (* 311*) yyTCombType {  75,  609}
         , (* 312*) yyTCombType { 185,  282} , (* 313*) yyTCombType { 185,   31}
         , (* 314*) yyTCombType {  73,  606} , (* 315*) yyTCombType { 200,  284}
         , (* 316*) yyTCombType {  73,  606} , (* 317*) yyTCombType {  73,  606}
         , (* 318*) yyTCombType {  77,  612} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {  71,  604} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {   0,    0} , (* 323*) yyTCombType {   0,    0}
         , (* 324*) yyTCombType {  71,  604} , (* 325*) yyTCombType {  71,  604}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType {  75,  609}
         , (* 328*) yyTCombType {  71,  604} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {  75,  609}
         , (* 332*) yyTCombType {  77,  612} , (* 333*) yyTCombType {  75,  609}
         , (* 334*) yyTCombType {  75,  609} , (* 335*) yyTCombType {  71,  604}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType { 164,  451}
         , (* 338*) yyTCombType {   0,    0} , (* 339*) yyTCombType { 164,  168}
         , (* 340*) yyTCombType {   0,    0} , (* 341*) yyTCombType {  73,  606}
         , (* 342*) yyTCombType {   0,    0} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType {  77,  612} , (* 345*) yyTCombType {  73,  606}
         , (* 346*) yyTCombType {  73,  606} , (* 347*) yyTCombType {   0,    0}
         , (* 348*) yyTCombType {  77,  612} , (* 349*) yyTCombType {  73,  606}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType {  77,  612} , (* 353*) yyTCombType {   0,    0}
         , (* 354*) yyTCombType {  77,  612} , (* 355*) yyTCombType {  77,  612}
         , (* 356*) yyTCombType {  73,  606} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {  75,  609} , (* 359*) yyTCombType { 134,  489}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {   0,    0}
         , (* 362*) yyTCombType {  75,  609} , (* 363*) yyTCombType {  75,  609}
         , (* 364*) yyTCombType { 134,  489} , (* 365*) yyTCombType {   0,    0}
         , (* 366*) yyTCombType {  75,  609} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType { 134,  489}
         , (* 370*) yyTCombType {   0,    0} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType { 135,  490} , (* 373*) yyTCombType {  75,  609}
         , (* 374*) yyTCombType {  79,  614} , (* 375*) yyTCombType { 140,  499}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType { 135,  490}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType {  77,  612}
         , (* 380*) yyTCombType { 140,  499} , (* 381*) yyTCombType {  77,  612}
         , (* 382*) yyTCombType { 135,  490} , (* 383*) yyTCombType {  77,  612}
         , (* 384*) yyTCombType {  77,  612} , (* 385*) yyTCombType { 140,  499}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {  77,  612}
         , (* 388*) yyTCombType {  79,  614} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {   0,    0}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType { 134,  489}
         , (* 394*) yyTCombType {  77,  612} , (* 395*) yyTCombType {  77,  612}
         , (* 396*) yyTCombType {  77,  612} , (* 397*) yyTCombType {  77,  612}
         , (* 398*) yyTCombType {  77,  612} , (* 399*) yyTCombType {  77,  612}
         , (* 400*) yyTCombType {  79,  614} , (* 401*) yyTCombType { 134,  489}
         , (* 402*) yyTCombType {   0,    0} , (* 403*) yyTCombType {   0,    0}
         , (* 404*) yyTCombType {  79,  614} , (* 405*) yyTCombType {   0,    0}
         , (* 406*) yyTCombType { 135,  490} , (* 407*) yyTCombType { 134,  489}
         , (* 408*) yyTCombType {  79,  614} , (* 409*) yyTCombType { 140,  499}
         , (* 410*) yyTCombType {  79,  614} , (* 411*) yyTCombType {  79,  614}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType { 134,  489}
         , (* 414*) yyTCombType { 135,  490} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType {   0,    0} , (* 417*) yyTCombType { 140,  499}
         , (* 418*) yyTCombType {   0,    0} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType { 135,  490} , (* 421*) yyTCombType {   0,    0}
         , (* 422*) yyTCombType {   0,    0} , (* 423*) yyTCombType { 140,  499}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType { 176,  675}
         , (* 426*) yyTCombType { 135,  490} , (* 427*) yyTCombType { 198,  667}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType { 140,  499}
         , (* 430*) yyTCombType { 176,  210} , (* 431*) yyTCombType {   0,    0}
         , (* 432*) yyTCombType { 198,  667} , (* 433*) yyTCombType {   0,    0}
         , (* 434*) yyTCombType {  82,  623} , (* 435*) yyTCombType {  79,  614}
         , (* 436*) yyTCombType {   0,    0} , (* 437*) yyTCombType {  79,  614}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {  79,  614}
         , (* 440*) yyTCombType {  79,  614} , (* 441*) yyTCombType {   0,    0}
         , (* 442*) yyTCombType {   0,    0} , (* 443*) yyTCombType {  79,  614}
         , (* 444*) yyTCombType {  82,  623} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {   0,    0} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {  82,  623} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {  79,  614} , (* 451*) yyTCombType {  79,  614}
         , (* 452*) yyTCombType {  79,  614} , (* 453*) yyTCombType {  79,  614}
         , (* 454*) yyTCombType {  79,  614} , (* 455*) yyTCombType {  79,  614}
         , (* 456*) yyTCombType {  79,  614} , (* 457*) yyTCombType {  79,  614}
         , (* 458*) yyTCombType {  79,  614} , (* 459*) yyTCombType { 176,   36}
         , (* 460*) yyTCombType {  82,  623} , (* 461*) yyTCombType { 198,  667}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {   0,    0}
         , (* 464*) yyTCombType {  82,  623} , (* 465*) yyTCombType {  82,  623}
         , (* 466*) yyTCombType {   0,    0} , (* 467*) yyTCombType { 176,  211}
         , (* 468*) yyTCombType {  82,  623} , (* 469*) yyTCombType { 198,  667}
         , (* 470*) yyTCombType {  82,  623} , (* 471*) yyTCombType {  82,  623}
         , (* 472*) yyTCombType {   0,    0} , (* 473*) yyTCombType { 176,  212}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType { 198,  667}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {   0,    0}
         , (* 478*) yyTCombType { 116,  595} , (* 479*) yyTCombType { 176,  213}
         , (* 480*) yyTCombType {   0,    0} , (* 481*) yyTCombType { 198,  667}
         , (* 482*) yyTCombType {   0,    0} , (* 483*) yyTCombType {   0,    0}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType {   0,    0} , (* 487*) yyTCombType {   0,    0}
         , (* 488*) yyTCombType {   0,    0} , (* 489*) yyTCombType {   0,    0}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {   0,    0}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType {   0,    0}
         , (* 494*) yyTCombType { 116,  595} , (* 495*) yyTCombType {  82,  623}
         , (* 496*) yyTCombType {  82,   83} , (* 497*) yyTCombType {  82,  623}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  82,  623}
         , (* 500*) yyTCombType {  82,  623} , (* 501*) yyTCombType { 116,  595}
         , (* 502*) yyTCombType {   0,    0} , (* 503*) yyTCombType {  82,  623}
         , (* 504*) yyTCombType { 116,  595} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType {  82,   65}
         , (* 510*) yyTCombType {  82,  623} , (* 511*) yyTCombType {  82,  623}
         , (* 512*) yyTCombType {  82,  623} , (* 513*) yyTCombType {  82,  623}
         , (* 514*) yyTCombType {  82,  623} , (* 515*) yyTCombType {  82,  623}
         , (* 516*) yyTCombType {  82,  623} , (* 517*) yyTCombType {  82,  623}
         , (* 518*) yyTCombType {  82,  623} , (* 519*) yyTCombType {  82,  623}
         , (* 520*) yyTCombType {  82,  623} , (* 521*) yyTCombType {  82,  251}
         , (* 522*) yyTCombType {  84,  622} , (* 523*) yyTCombType { 118,  596}
         , (* 524*) yyTCombType {   0,    0} , (* 525*) yyTCombType { 116,  595}
         , (* 526*) yyTCombType {   0,    0} , (* 527*) yyTCombType { 116,  595}
         , (* 528*) yyTCombType {   0,    0} , (* 529*) yyTCombType { 116,  595}
         , (* 530*) yyTCombType {   0,    0} , (* 531*) yyTCombType { 116,  117}
         , (* 532*) yyTCombType {  84,  622} , (* 533*) yyTCombType { 116,  595}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType {  84,  622} , (* 537*) yyTCombType {   0,    0}
         , (* 538*) yyTCombType {   0,    0} , (* 539*) yyTCombType { 118,  596}
         , (* 540*) yyTCombType {   0,    0} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {   0,    0} , (* 543*) yyTCombType {   0,    0}
         , (* 544*) yyTCombType {   0,    0} , (* 545*) yyTCombType {   0,    0}
         , (* 546*) yyTCombType { 118,  596} , (* 547*) yyTCombType {   0,    0}
         , (* 548*) yyTCombType {  84,  622} , (* 549*) yyTCombType { 118,  119}
         , (* 550*) yyTCombType {   0,    0} , (* 551*) yyTCombType {   0,    0}
         , (* 552*) yyTCombType {  84,  622} , (* 553*) yyTCombType {  84,  622}
         , (* 554*) yyTCombType {   0,    0} , (* 555*) yyTCombType {   0,    0}
         , (* 556*) yyTCombType {  84,  622} , (* 557*) yyTCombType {   0,    0}
         , (* 558*) yyTCombType {  84,  622} , (* 559*) yyTCombType {  84,  622}
         , (* 560*) yyTCombType {   0,    0} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {   0,    0}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {   0,    0}
         , (* 566*) yyTCombType {   0,    0} , (* 567*) yyTCombType {   0,    0}
         , (* 568*) yyTCombType {   0,    0} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType { 118,  596} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType { 118,  596} , (* 573*) yyTCombType {   0,    0}
         , (* 574*) yyTCombType { 118,  596} , (* 575*) yyTCombType {   0,    0}
         , (* 576*) yyTCombType {   0,    0} , (* 577*) yyTCombType {   0,    0}
         , (* 578*) yyTCombType { 118,  596} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType {   0,    0} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType {   0,    0} , (* 583*) yyTCombType {  84,  622}
         , (* 584*) yyTCombType {  84,  638} , (* 585*) yyTCombType {  84,  622}
         , (* 586*) yyTCombType {  84,  638} , (* 587*) yyTCombType {  84,  622}
         , (* 588*) yyTCombType {  84,  622} , (* 589*) yyTCombType { 189,  210}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {  84,  622}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType { 189,  675} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType {   0,    0} , (* 597*) yyTCombType {  84,  638}
         , (* 598*) yyTCombType {  84,  622} , (* 599*) yyTCombType {  84,  622}
         , (* 600*) yyTCombType {  84,  622} , (* 601*) yyTCombType {  84,  622}
         , (* 602*) yyTCombType {  84,  622} , (* 603*) yyTCombType {  84,  622}
         , (* 604*) yyTCombType {  84,  622} , (* 605*) yyTCombType {  84,  622}
         , (* 606*) yyTCombType {  84,  622} , (* 607*) yyTCombType {  84,  622}
         , (* 608*) yyTCombType {  84,  622} , (* 609*) yyTCombType {  84,  638}
         , (* 610*) yyTCombType {  85,  613} , (* 611*) yyTCombType {   0,    0}
         , (* 612*) yyTCombType {   0,    0} , (* 613*) yyTCombType { 142,   45}
         , (* 614*) yyTCombType { 187,  439} , (* 615*) yyTCombType {   0,    0}
         , (* 616*) yyTCombType {   0,    0} , (* 617*) yyTCombType { 142,  570}
         , (* 618*) yyTCombType { 189,   36} , (* 619*) yyTCombType { 187,  439}
         , (* 620*) yyTCombType {  85,  247} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {  85,  613} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType { 189,  211} , (* 627*) yyTCombType { 187,  439}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType {   0,    0}
         , (* 630*) yyTCombType { 187,  439} , (* 631*) yyTCombType {   0,    0}
         , (* 632*) yyTCombType { 189,  212} , (* 633*) yyTCombType {   0,    0}
         , (* 634*) yyTCombType {   0,    0} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {  85,  613} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType { 189,  213} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {  85,  613} , (* 641*) yyTCombType {  85,  248}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType { 187,  439}
         , (* 644*) yyTCombType {  85,  613} , (* 645*) yyTCombType { 142,  570}
         , (* 646*) yyTCombType {  85,  613} , (* 647*) yyTCombType {  85,  613}
         , (* 648*) yyTCombType {  86,  611} , (* 649*) yyTCombType { 142,  216}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType { 187,  439}
         , (* 652*) yyTCombType {   0,    0} , (* 653*) yyTCombType { 142,  217}
         , (* 654*) yyTCombType { 142,   47} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType { 187,  439}
         , (* 658*) yyTCombType { 142,  218} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {   0,    0} , (* 661*) yyTCombType {   0,    0}
         , (* 662*) yyTCombType {  86,  611} , (* 663*) yyTCombType { 187,  439}
         , (* 664*) yyTCombType {   0,    0} , (* 665*) yyTCombType {   0,    0}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType { 142,   48}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {   0,    0} , (* 671*) yyTCombType {  85,  613}
         , (* 672*) yyTCombType { 142,  538} , (* 673*) yyTCombType {  85,  613}
         , (* 674*) yyTCombType {  86,  611} , (* 675*) yyTCombType {  85,  613}
         , (* 676*) yyTCombType {  85,  613} , (* 677*) yyTCombType {   0,    0}
         , (* 678*) yyTCombType {  86,  611} , (* 679*) yyTCombType {  85,  613}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType { 142,  220}
         , (* 682*) yyTCombType {  86,  611} , (* 683*) yyTCombType {   0,    0}
         , (* 684*) yyTCombType {  86,  611} , (* 685*) yyTCombType {  86,  611}
         , (* 686*) yyTCombType {  85,  613} , (* 687*) yyTCombType {  85,  613}
         , (* 688*) yyTCombType {  85,  613} , (* 689*) yyTCombType {  85,  613}
         , (* 690*) yyTCombType {  85,  613} , (* 691*) yyTCombType {  85,  613}
         , (* 692*) yyTCombType {  85,  613} , (* 693*) yyTCombType {  85,  613}
         , (* 694*) yyTCombType {  85,  613} , (* 695*) yyTCombType {  85,  249}
         , (* 696*) yyTCombType {  85,  250} , (* 697*) yyTCombType {   0,    0}
         , (* 698*) yyTCombType {   0,    0} , (* 699*) yyTCombType {   0,    0}
         , (* 700*) yyTCombType {   0,    0} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType { 143,  500} , (* 703*) yyTCombType {   0,    0}
         , (* 704*) yyTCombType {  87,   74} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType { 143,  500}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType {  86,  611}
         , (* 710*) yyTCombType {   0,    0} , (* 711*) yyTCombType {  86,  611}
         , (* 712*) yyTCombType { 143,  500} , (* 713*) yyTCombType {  86,  611}
         , (* 714*) yyTCombType {  86,  611} , (* 715*) yyTCombType {   0,    0}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType {  86,  611}
         , (* 718*) yyTCombType {  87,  605} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType {   0,    0} , (* 721*) yyTCombType {  93,  610}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {  86,  611} , (* 725*) yyTCombType {  86,  611}
         , (* 726*) yyTCombType {  86,  611} , (* 727*) yyTCombType {  86,  611}
         , (* 728*) yyTCombType {  86,  611} , (* 729*) yyTCombType {  86,  611}
         , (* 730*) yyTCombType {  86,  244} , (* 731*) yyTCombType {  86,  245}
         , (* 732*) yyTCombType {  86,  246} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType {  87,  605} , (* 735*) yyTCombType {  93,  610}
         , (* 736*) yyTCombType { 143,  500} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {  87,  605} , (* 739*) yyTCombType {   0,    0}
         , (* 740*) yyTCombType {  87,  605} , (* 741*) yyTCombType {  87,  605}
         , (* 742*) yyTCombType {   0,    0} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType { 143,  500} , (* 745*) yyTCombType { 143,  218}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType {  93,  237}
         , (* 748*) yyTCombType {   0,    0} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType { 143,  500} , (* 751*) yyTCombType {  93,  610}
         , (* 752*) yyTCombType {   0,    0} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType { 143,   48} , (* 755*) yyTCombType {  93,  610}
         , (* 756*) yyTCombType { 143,  500} , (* 757*) yyTCombType {  93,  610}
         , (* 758*) yyTCombType {  93,  610} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType { 146,  506}
         , (* 762*) yyTCombType { 147,  507} , (* 763*) yyTCombType {   0,    0}
         , (* 764*) yyTCombType {   0,    0} , (* 765*) yyTCombType {  87,  605}
         , (* 766*) yyTCombType { 146,  506} , (* 767*) yyTCombType { 147,  507}
         , (* 768*) yyTCombType {   0,    0} , (* 769*) yyTCombType {  87,  605}
         , (* 770*) yyTCombType {  87,  605} , (* 771*) yyTCombType { 146,  506}
         , (* 772*) yyTCombType { 147,  507} , (* 773*) yyTCombType {  87,  605}
         , (* 774*) yyTCombType {   0,    0} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType { 188,  450} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType {   0,    0} , (* 779*) yyTCombType {   0,    0}
         , (* 780*) yyTCombType {  87,  605} , (* 781*) yyTCombType { 188,  450}
         , (* 782*) yyTCombType {  93,  610} , (* 783*) yyTCombType {   0,    0}
         , (* 784*) yyTCombType {  93,  238} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType {  93,  610} , (* 787*) yyTCombType {  93,  610}
         , (* 788*) yyTCombType {   0,    0} , (* 789*) yyTCombType { 188,   17}
         , (* 790*) yyTCombType {  93,  610} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType { 188,   19} , (* 793*) yyTCombType {   0,    0}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType { 146,  506}
         , (* 796*) yyTCombType { 147,  507} , (* 797*) yyTCombType {  93,  610}
         , (* 798*) yyTCombType {  93,  239} , (* 799*) yyTCombType {  93,  240}
         , (* 800*) yyTCombType {  93,  241} , (* 801*) yyTCombType {  93,  242}
         , (* 802*) yyTCombType {  93,  243} , (* 803*) yyTCombType { 146,  506}
         , (* 804*) yyTCombType { 147,  507} , (* 805*) yyTCombType { 188,  450}
         , (* 806*) yyTCombType { 196,  439} , (* 807*) yyTCombType {   0,    0}
         , (* 808*) yyTCombType {   0,    0} , (* 809*) yyTCombType { 146,  506}
         , (* 810*) yyTCombType { 147,  507} , (* 811*) yyTCombType { 196,  439}
         , (* 812*) yyTCombType {   0,    0} , (* 813*) yyTCombType { 188,  450}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType { 146,  506}
         , (* 816*) yyTCombType { 147,  507} , (* 817*) yyTCombType { 197,  450}
         , (* 818*) yyTCombType {   0,    0} , (* 819*) yyTCombType { 188,  450}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType { 197,  450} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType { 196,  439} , (* 825*) yyTCombType { 188,  450}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType { 196,  439}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType {   0,    0} , (* 831*) yyTCombType {   0,    0}
         , (* 832*) yyTCombType {   0,    0} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType {   0,    0} , (* 835*) yyTCombType { 197,   17}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType {   0,    0}
         , (* 838*) yyTCombType { 197,   19} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType { 196,  439} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType {   0,    0} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType { 196,  439} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType { 197,  450}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType { 196,  439} , (* 855*) yyTCombType {   0,    0}
         , (* 856*) yyTCombType {   0,    0} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType { 197,  450}
         , (* 860*) yyTCombType { 196,  439} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType { 197,  450}
         , (* 866*) yyTCombType {   0,    0} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType { 197,  450}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType {   0,    0} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType {   0,    0}
         , (* 890*) yyTCombType {   0,    0} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {   0,    0}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType {   0,    0}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType {   0,    0}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  287 , (* 110*)    5 , (* 111*)  288 , (* 112*)  289
         , (* 113*)  290 , (* 114*)  291 , (* 115*)  292 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  183 , (* 119*)  194 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  285 , (* 124*)  286
         , (* 125*)   14 , (* 126*)    8 , (* 127*)    9 , (* 128*)  294
         , (* 129*)   35 , (* 130*)   16 , (* 131*)  293 , (* 132*)  164
         , (* 133*)  298 , (* 134*)  176 , (* 135*)   18 , (* 136*)  182
         , (* 137*)   20 , (* 138*)  193 , (* 139*)  295 , (* 140*)   20
         , (* 141*)  300 , (* 142*)  301 , (* 143*)   28 , (* 144*)   32
         , (* 145*)   30 , (* 146*)  302 , (* 147*)  299 , (* 148*)   34
         , (* 149*)   37 , (* 150*)   24 , (* 151*)  304 , (* 152*)   39
         , (* 153*)  331 , (* 154*)  331 , (* 155*)   84 , (* 156*)  356
         , (* 157*)   22 , (* 158*)  297 , (* 159*)   57 , (* 160*)  370
         , (* 161*)  296 , (* 162*)  367 , (* 163*)  305 , (* 164*)   25
         , (* 165*)  305 , (* 166*)  131 , (* 167*)   60 , (* 168*)  374
         , (* 169*)  138 , (* 170*)  154 , (* 171*)  358 , (* 172*)  303
         , (* 173*)  358 , (* 174*)  394 , (* 175*)   57 , (* 176*)  112
         , (* 177*)  142 , (* 178*)  372 , (* 179*)   40 , (* 180*)   57
         , (* 181*)  380 , (* 182*)  173 , (* 183*)  169 , (* 184*)  170
         , (* 185*)  153 , (* 186*)   66 , (* 187*)  354 , (* 188*)  134
         , (* 189*)  172 , (* 190*)  384 , (* 191*)  400 , (* 192*)  355
         , (* 193*)   59 , (* 194*)  175 , (* 195*)  140 , (* 196*)   66
         , (* 197*)  387 , (* 198*)  181 , (* 199*)   66 , (* 200*)  146
         , (* 201*)  306 , (* 202*)  389 , (* 203*)   41 , (* 204*)  133
         , (* 205*)   43 , (* 206*)   42 , (* 207*)   43 , (* 208*)  335
         , (* 209*)   59 , (* 210*)   57 , (* 211*)  186 , (* 212*)   67
         , (* 213*)  373 , (* 214*)   59 , (* 215*)  124 , (* 216*)  401
         , (* 217*)  336 , (* 218*)  185 , (* 219*)  369 , (* 220*)  307
         , (* 221*)  362 , (* 222*)   67 , (* 223*)  130 , (* 224*)   99
         , (* 225*)   67 , (* 226*)  188 , (* 227*)  336 , (* 228*)  192
         , (* 229*)  116 , (* 230*)  336 , (* 231*)  116 , (* 232*)  118
         , (* 233*)  364 , (* 234*)  195 , (* 235*)   94 , (* 236*)   95
         , (* 237*)  122 , (* 238*)   53 , (* 239*)  121 , (* 240*)   54
         , (* 241*)  333 , (* 242*)  332 , (* 243*)  335 , (* 244*)   59
         , (* 245*)  366 , (* 246*)  308 , (* 247*)  360 , (* 248*)  111
         , (* 249*)   76 , (* 250*)  309 , (* 251*)  310 , (* 252*)   78
         , (* 253*)   80 , (* 254*)   49 , (* 255*)  378 , (* 256*)  400
         , (* 257*)  352 , (* 258*)  349 , (* 259*)  150 , (* 260*)  113
         , (* 261*)  396 , (* 262*)  342 , (* 263*)  343 , (* 264*)  104
         , (* 265*)  371 , (* 266*)  106 , (* 267*)  359 , (* 268*)  106
         , (* 269*)  197 , (* 270*)  102 , (* 271*)   95 , (* 272*)  108
         , (* 273*)  109 , (* 274*)  368 , (* 275*)  111 , (* 276*)  126
         , (* 277*)  375 , (* 278*)  128 , (* 279*)  307 , (* 280*)  166
         , (* 281*)  402 , (* 282*)  397 , (* 283*)  398 , (* 284*)  163
         , (* 285*)  312 , (* 286*)  313 , (* 287*)  314 , (* 288*)  315
         , (* 289*)  316 , (* 290*)  317 , (* 291*)  318 , (* 292*)  319
         , (* 293*)  320 , (* 294*)  321 , (* 295*)  322 , (* 296*)  323
         , (* 297*)  324 , (* 298*)  325 , (* 299*)  326 , (* 300*)  327
         , (* 301*)   50 , (* 302*)  329 , (* 303*)  330 , (* 304*)   52
         , (* 305*)  308 , (* 306*)  334 , (* 307*)   57 , (* 308*)  155
         , (* 309*)  309 , (* 310*)  310 , (* 311*)   56 , (* 312*)  199
         , (* 313*)   49 , (* 314*)  377 , (* 315*)  339 , (* 316*)  381
         , (* 317*)  340 , (* 318*)   81 , (* 319*)   82 , (* 320*)  200
         , (* 321*)    0 , (* 322*)   97 , (* 323*)  100 , (* 324*)  101
         , (* 325*)  115 , (* 326*)   79 , (* 327*)  341 , (* 328*)  344
         , (* 329*)   82 , (* 330*)  340 , (* 331*)   81 , (* 332*)   82
         , (* 333*)  151 , (* 334*)  390 , (* 335*)    0 , (* 336*)  152
         , (* 337*)    0 , (* 338*)  307 , (* 339*)  381 , (* 340*)  148
         , (* 341*)   59 , (* 342*)    0 , (* 343*)  116 , (* 344*)  312
         , (* 345*)  313 , (* 346*)  314 , (* 347*)  315 , (* 348*)  316
         , (* 349*)  317 , (* 350*)  318 , (* 351*)  319 , (* 352*)  320
         , (* 353*)  321 , (* 354*)  322 , (* 355*)  323 , (* 356*)  324
         , (* 357*)  325 , (* 358*)  326 , (* 359*)  327 , (* 360*)   50
         , (* 361*)  329 , (* 362*)  330 , (* 363*)   52 , (* 364*)  308
         , (* 365*)  334 , (* 366*)  136 , (* 367*)  137 , (* 368*)  309
         , (* 369*)  310 , (* 370*)   56 , (* 371*)    0 , (* 372*)   49
         , (* 373*)  311 , (* 374*)    0 , (* 375*)    0 , (* 376*)    0
         , (* 377*)  403 , (* 378*)  189 , (* 379*)  198 , (* 380*)    0
         , (* 381*)   97 , (* 382*)  100 , (* 383*)  101 , (* 384*)  115
         , (* 385*)    0 , (* 386*)  382 , (* 387*)    0 , (* 388*)  135
         , (* 389*)  139 , (* 390*)  137 , (* 391*)  299 , (* 392*)  299
         , (* 393*)  299 , (* 394*)   24 , (* 395*)   24 , (* 396*)   24
         , (* 397*)  307 , (* 398*)    0 , (* 399*)   66 , (* 400*)    0
         , (* 401*)    0 , (* 402*)    0 , (* 403*)  312 , (* 404*)  313
         , (* 405*)  314 , (* 406*)  315 , (* 407*)  316 , (* 408*)  317
         , (* 409*)  318 , (* 410*)  319 , (* 411*)  320 , (* 412*)  321
         , (* 413*)  322 , (* 414*)  323 , (* 415*)  324 , (* 416*)  325
         , (* 417*)  326 , (* 418*)  327 , (* 419*)   50 , (* 420*)  329
         , (* 421*)  330 , (* 422*)   52 , (* 423*)  308 , (* 424*)  334
         , (* 425*)   67 , (* 426*)   66 , (* 427*)  309 , (* 428*)  310
         , (* 429*)   56 , (* 430*)  336 , (* 431*)   49 , (* 432*)  328
         , (* 433*)    0 , (* 434*)    0 , (* 435*)  155 , (* 436*)    0
         , (* 437*)    0 , (* 438*)    0 , (* 439*)    0 , (* 440*)   97
         , (* 441*)  100 , (* 442*)  101 , (* 443*)  115 , (* 444*)    0
         , (* 445*)    0 , (* 446*)    0 , (* 447*)    0 , (* 448*)    0
         , (* 449*)    0 , (* 450*)    0 , (* 451*)    0 , (* 452*)   67
         , (* 453*)    0 , (* 454*)    0 , (* 455*)    0 , (* 456*)    0
         , (* 457*)  336 , (* 458*)    0 , (* 459*)   66 , (* 460*)    0
         , (* 461*)   57 , (* 462*)  312 , (* 463*)  313 , (* 464*)  314
         , (* 465*)  315 , (* 466*)  316 , (* 467*)  317 , (* 468*)  318
         , (* 469*)  319 , (* 470*)  320 , (* 471*)  321 , (* 472*)  322
         , (* 473*)  323 , (* 474*)  324 , (* 475*)  325 , (* 476*)  326
         , (* 477*)  327 , (* 478*)   50 , (* 479*)  329 , (* 480*)  330
         , (* 481*)   52 , (* 482*)    0 , (* 483*)  334 , (* 484*)    0
         , (* 485*)   67 , (* 486*)    0 , (* 487*)  307 , (* 488*)   56
         , (* 489*)   66 , (* 490*)  336 , (* 491*)  388 , (* 492*)    0
         , (* 493*)  147 , (* 494*)  149 , (* 495*)   59 , (* 496*)    0
         , (* 497*)    0 , (* 498*)    0 , (* 499*)   97 , (* 500*)  100
         , (* 501*)  101 , (* 502*)  115 , (* 503*)  353 , (* 504*)    0
         , (* 505*)    0 , (* 506*)    0 , (* 507*)    0 , (* 508*)   69
         , (* 509*)    0 , (* 510*)    0 , (* 511*)    0 , (* 512*)    0
         , (* 513*)  308 , (* 514*)    0 , (* 515*)   67 , (* 516*)    0
         , (* 517*)  309 , (* 518*)  310 , (* 519*)    0 , (* 520*)  336
         , (* 521*)  141 , (* 522*)    0 , (* 523*)   93 , (* 524*)   86
         , (* 525*)    0 , (* 526*)   85 , (* 527*)    0 , (* 528*)  344
         , (* 529*)    0 , (* 530*)  340 , (* 531*)   81 , (* 532*)   82
         , (* 533*)  350 , (* 534*)   67 , (* 535*)   66 , (* 536*)    0
         , (* 537*)    0 , (* 538*)    0 , (* 539*)  336 , (* 540*)    0
         , (* 541*)  386 , (* 542*)    0 , (* 543*)  143 , (* 544*)  145
         , (* 545*)    0 , (* 546*)   66 , (* 547*)   92 , (* 548*)   87
         , (* 549*)  345 , (* 550*)   75 , (* 551*)   86 , (* 552*)  346
         , (* 553*)   85 , (* 554*)    0 , (* 555*)  344 , (* 556*)    0
         , (* 557*)  340 , (* 558*)   81 , (* 559*)   82 , (* 560*)    0
         , (* 561*)   67 , (* 562*)    0 , (* 563*)   66 , (* 564*)    0
         , (* 565*)    0 , (* 566*)  336 , (* 567*)  307 , (* 568*)    0
         , (* 569*)    0 , (* 570*)    0 , (* 571*)    0 , (* 572*)   67
         , (* 573*)   66 , (* 574*)    0 , (* 575*)    0 , (* 576*)    0
         , (* 577*)  336 , (* 578*)    0 , (* 579*)  337 , (* 580*)   71
         , (* 581*)   87 , (* 582*)  345 , (* 583*)   75 , (* 584*)   86
         , (* 585*)    0 , (* 586*)   85 , (* 587*)    0 , (* 588*)  344
         , (* 589*)   67 , (* 590*)  340 , (* 591*)   81 , (* 592*)   82
         , (* 593*)  308 , (* 594*)  336 , (* 595*)    0 , (* 596*)    0
         , (* 597*)  309 , (* 598*)  310 , (* 599*)   67 , (* 600*)    0
         , (* 601*)  141 , (* 602*)    0 , (* 603*)    0 , (* 604*)  336
         , (* 605*)    0 , (* 606*)    0 , (* 607*)    0 , (* 608*)    0
         , (* 609*)    0 , (* 610*)   71 , (* 611*)   87 , (* 612*)  345
         , (* 613*)   75 , (* 614*)   86 , (* 615*)    0 , (* 616*)   85
         , (* 617*)   69 , (* 618*)  344 , (* 619*)    0 , (* 620*)  340
         , (* 621*)   81 , (* 622*)   82 , (* 623*)    0 , (* 624*)  144
         , (* 625*)   90 , (* 626*)    0 , (* 627*)    0 , (* 628*)    0
         , (* 629*)   71 , (* 630*)   87 , (* 631*)  345 , (* 632*)   75
         , (* 633*)   86 , (* 634*)    0 , (* 635*)   85 , (* 636*)    0
         , (* 637*)  344 , (* 638*)    0 , (* 639*)  340 , (* 640*)   81
         , (* 641*)   82 , (* 642*)    0 , (* 643*)   67 , (* 644*)    0
         , (* 645*)   88 , (* 646*)  348 , (* 647*)    0 , (* 648*)  336
         , (* 649*)    0 , (* 650*)    0 , (* 651*)    0 , (* 652*)    0
         , (* 653*)    0 , (* 654*)    0 , (* 655*)    0 , (* 656*)   71
         , (* 657*)   87 , (* 658*)  345 , (* 659*)   75 , (* 660*)   86
         , (* 661*)  346 , (* 662*)   85 , (* 663*)    0 , (* 664*)  344
         , (* 665*)    0 , (* 666*)  340 , (* 667*)   81 , (* 668*)   82
         , (* 669*)  338 , (* 670*)   75 , (* 671*)   86 , (* 672*)    0
         , (* 673*)   85 , (* 674*)    0 , (* 675*)  344 , (* 676*)    0
         , (* 677*)  340 , (* 678*)   81 , (* 679*)   82 , (* 680*)    0
         , (* 681*)   66 , (* 682*)    0 , (* 683*)    0 , (* 684*)    0
         , (* 685*)   73 , (* 686*)  345 , (* 687*)   75 , (* 688*)   86
         , (* 689*)    0 , (* 690*)   85 , (* 691*)    0 , (* 692*)  344
         , (* 693*)    0 , (* 694*)  340 , (* 695*)   81 , (* 696*)   82
         , (* 697*)    0 , (* 698*)   77 , (* 699*)    0 , (* 700*)   85
         , (* 701*)   66 , (* 702*)  344 , (* 703*)    0 , (* 704*)  340
         , (* 705*)   81 , (* 706*)   82 , (* 707*)   67 , (* 708*)    0
         , (* 709*)    0 , (* 710*)    0 , (* 711*)    0 , (* 712*)  336
         , (* 713*)    0 , (* 714*)    0 , (* 715*)    0 , (* 716*)    0
         , (* 717*)    0 , (* 718*)    0 , (* 719*)    0 , (* 720*)    0
         , (* 721*)    0 , (* 722*)    0 , (* 723*)    0 , (* 724*)    0
         , (* 725*)  351 , (* 726*)    0 , (* 727*)   67 , (* 728*)    0
         , (* 729*)    0 , (* 730*)    0 , (* 731*)    0 , (* 732*)  336
         , (* 733*)    0 , (* 734*)    0 , (* 735*)    0 , (* 736*)    0
         , (* 737*)    0 , (* 738*)   71 , (* 739*)   87 , (* 740*)  345
         , (* 741*)   75 , (* 742*)   86 , (* 743*)    0 , (* 744*)   85
         , (* 745*)  357 , (* 746*)  344 , (* 747*)    0 , (* 748*)  340
         , (* 749*)   81 , (* 750*)   82 , (* 751*)    0 , (* 752*)    0
         , (* 753*)    0 , (* 754*)    0 , (* 755*)  347 , (* 756*)    0
         , (* 757*)    0 , (* 758*)    0 , (* 759*)    0 , (* 760*)    0
         , (* 761*)    0 , (* 762*)    0 , (* 763*)    0 , (* 764*)    0
         , (* 765*)    0 , (* 766*)    0 , (* 767*)    0 , (* 768*)    0
         , (* 769*)    0 , (* 770*)    0 , (* 771*)    0 , (* 772*)    0
         , (* 773*)    0 , (* 774*)    0 , (* 775*)    0 , (* 776*)    0
         , (* 777*)    0 , (* 778*)    0 , (* 779*)    0 , (* 780*)    0
         , (* 781*)    0 , (* 782*)    0 , (* 783*)    0 , (* 784*)    0
         , (* 785*)  307 , (* 786*)    0 , (* 787*)    0 , (* 788*)    0
         , (* 789*)    0 , (* 790*)    0 , (* 791*)    0 , (* 792*)    0
         , (* 793*)    0 , (* 794*)    0 , (* 795*)    0 , (* 796*)    0
         , (* 797*)    0 , (* 798*)    0 , (* 799*)    0 , (* 800*)    0
         , (* 801*)    0 , (* 802*)   71 , (* 803*)   87 , (* 804*)  345
         , (* 805*)   75 , (* 806*)   86 , (* 807*)    0 , (* 808*)   85
         , (* 809*)    0 , (* 810*)  344 , (* 811*)  308 , (* 812*)  340
         , (* 813*)   81 , (* 814*)   82 , (* 815*)  309 , (* 816*)  310
         , (* 817*)    0 , (* 818*)    0 , (* 819*)   49 , (* 820*)  361
         , (* 821*)    0 , (* 822*)   71 , (* 823*)   87 , (* 824*)  345
         , (* 825*)   75 , (* 826*)   86 , (* 827*)    0 , (* 828*)   85
         , (* 829*)    0 , (* 830*)  344 , (* 831*)    0 , (* 832*)  340
         , (* 833*)   81 , (* 834*)   82 , (* 835*)    0 , (* 836*)    0
         , (* 837*)    0 , (* 838*)    0 , (* 839*)    0 , (* 840*)    0
         , (* 841*)    0 , (* 842*)    0 , (* 843*)    0 , (* 844*)  307
         , (* 845*)    0 , (* 846*)    0 , (* 847*)    0 , (* 848*)    0
         , (* 849*)    0 , (* 850*)  312 , (* 851*)  313 , (* 852*)  314
         , (* 853*)  315 , (* 854*)  316 , (* 855*)  317 , (* 856*)  318
         , (* 857*)  319 , (* 858*)  320 , (* 859*)  321 , (* 860*)  322
         , (* 861*)  323 , (* 862*)  324 , (* 863*)  325 , (* 864*)  326
         , (* 865*)  327 , (* 866*)   50 , (* 867*)  329 , (* 868*)  330
         , (* 869*)   52 , (* 870*)  308 , (* 871*)  334 , (* 872*)    0
         , (* 873*)    0 , (* 874*)  309 , (* 875*)  310 , (* 876*)   56
         , (* 877*)    0 , (* 878*)   49 , (* 879*)  363 , (* 880*)    0
         , (* 881*)    0 , (* 882*)   40 , (* 883*)    0 , (* 884*)  380
         , (* 885*)    0 , (* 886*)    0 , (* 887*)   97 , (* 888*)  100
         , (* 889*)  101 , (* 890*)  115 , (* 891*)  134 , (* 892*)    0
         , (* 893*)  384 , (* 894*)    0 , (* 895*)    0 , (* 896*)    0
         , (* 897*)    0 , (* 898*)  140 , (* 899*)    0 , (* 900*)  387
         , (* 901*)    0 , (* 902*)    0 , (* 903*)  146 , (* 904*)    0
         , (* 905*)  389 , (* 906*)   66 , (* 907*)    0 , (* 908*)    0
         , (* 909*)  312 , (* 910*)  313 , (* 911*)  314 , (* 912*)  315
         , (* 913*)  316 , (* 914*)  317 , (* 915*)  318 , (* 916*)  319
         , (* 917*)  320 , (* 918*)  321 , (* 919*)  322 , (* 920*)  323
         , (* 921*)  324 , (* 922*)  325 , (* 923*)  326 , (* 924*)  327
         , (* 925*)   50 , (* 926*)  329 , (* 927*)  330 , (* 928*)   52
         , (* 929*)   66 , (* 930*)  334 , (* 931*)    0 , (* 932*)   67
         , (* 933*)    0 , (* 934*)    0 , (* 935*)   56 , (* 936*)    0
         , (* 937*)  336 , (* 938*)    0 , (* 939*)    0 , (* 940*)    0
         , (* 941*)    0 , (* 942*)    0 , (* 943*)   66 , (* 944*)    0
         , (* 945*)    0 , (* 946*)   97 , (* 947*)  100 , (* 948*)  101
         , (* 949*)  115 , (* 950*)  365 , (* 951*)    0 , (* 952*)    0
         , (* 953*)    0 , (* 954*)    0 , (* 955*)   67 , (* 956*)    0
         , (* 957*)    0 , (* 958*)    0 , (* 959*)    0 , (* 960*)  336
         , (* 961*)    0 , (* 962*)  150 , (* 963*)    0 , (* 964*)  396
         , (* 965*)    0 , (* 966*)    0 , (* 967*)    0 , (* 968*)    0
         , (* 969*)   67 , (* 970*)    0 , (* 971*)    0 , (* 972*)    0
         , (* 973*)  376 , (* 974*)  336 , (* 975*)    0 , (* 976*)    0
         , (* 977*)    0 , (* 978*)    0 , (* 979*)    0 , (* 980*)    0
         , (* 981*)    0 , (* 982*)    0 , (* 983*)    0 , (* 984*)    0
         , (* 985*)  399 , (* 986*)  398 , (* 987*)  379 , (* 988*)    0
         , (* 989*)    0 , (* 990*)    0 , (* 991*)    0 , (* 992*)    0
         , (* 993*)    0 , (* 994*)    0 , (* 995*)    0 , (* 996*)    0
         , (* 997*)    0 , (* 998*)    0 , (* 999*)    0 , (*1000*)    0
         , (*1001*)    0 , (*1002*)    0 , (*1003*)    0 , (*1004*)    0
         , (*1005*)    0 , (*1006*)    0 , (*1007*)    0 , (*1008*)    0
         , (*1009*)    0 , (*1010*)    0 , (*1011*)    0 , (*1012*)    0
         , (*1013*)    0 , (*1014*)  307 , (*1015*)    0 , (*1016*)    0
         , (*1017*)    0 , (*1018*)    0 , (*1019*)    0 , (*1020*)    0
         , (*1021*)    0 , (*1022*)    0 , (*1023*)    0 , (*1024*)    0
         , (*1025*)    0 , (*1026*)    0 , (*1027*)   71 , (*1028*)   87
         , (*1029*)  345 , (*1030*)   75 , (*1031*)   86 , (*1032*)    0
         , (*1033*)   85 , (*1034*)    0 , (*1035*)  344 , (*1036*)    0
         , (*1037*)  340 , (*1038*)   81 , (*1039*)   82 , (*1040*)  308
         , (*1041*)    0 , (*1042*)    0 , (*1043*)    0 , (*1044*)  309
         , (*1045*)  310 , (*1046*)    0 , (*1047*)    0 , (*1048*)   49
         , (*1049*)  383 , (*1050*)   71 , (*1051*)   87 , (*1052*)  345
         , (*1053*)   75 , (*1054*)   86 , (*1055*)    0 , (*1056*)   85
         , (*1057*)    0 , (*1058*)  344 , (*1059*)    0 , (*1060*)  340
         , (*1061*)   81 , (*1062*)   82 , (*1063*)    0 , (*1064*)   71
         , (*1065*)   87 , (*1066*)  345 , (*1067*)   75 , (*1068*)   86
         , (*1069*)    0 , (*1070*)   85 , (*1071*)    0 , (*1072*)  344
         , (*1073*)  307 , (*1074*)  340 , (*1075*)   81 , (*1076*)   82
         , (*1077*)    0 , (*1078*)    0 , (*1079*)  312 , (*1080*)  313
         , (*1081*)  314 , (*1082*)  315 , (*1083*)  316 , (*1084*)  317
         , (*1085*)  318 , (*1086*)  319 , (*1087*)  320 , (*1088*)  321
         , (*1089*)  322 , (*1090*)  323 , (*1091*)  324 , (*1092*)  325
         , (*1093*)  326 , (*1094*)  327 , (*1095*)   50 , (*1096*)  329
         , (*1097*)  330 , (*1098*)   52 , (*1099*)  308 , (*1100*)  334
         , (*1101*)    0 , (*1102*)    0 , (*1103*)  309 , (*1104*)  310
         , (*1105*)   56 , (*1106*)    0 , (*1107*)   49 , (*1108*)  385
         , (*1109*)    0 , (*1110*)    0 , (*1111*)    0 , (*1112*)    0
         , (*1113*)    0 , (*1114*)    0 , (*1115*)    0 , (*1116*)   97
         , (*1117*)  100 , (*1118*)  101 , (*1119*)  115 , (*1120*)    0
         , (*1121*)    0 , (*1122*)    0 , (*1123*)    0 , (*1124*)    0
         , (*1125*)    0 , (*1126*)    0 , (*1127*)    0 , (*1128*)    0
         , (*1129*)    0 , (*1130*)    0 , (*1131*)    0 , (*1132*)    0
         , (*1133*)  156 , (*1134*)    0 , (*1135*)    0 , (*1136*)    0
         , (*1137*)    0 , (*1138*)  312 , (*1139*)  313 , (*1140*)  314
         , (*1141*)  315 , (*1142*)  316 , (*1143*)  317 , (*1144*)  318
         , (*1145*)  319 , (*1146*)  320 , (*1147*)  321 , (*1148*)  322
         , (*1149*)  323 , (*1150*)  324 , (*1151*)  325 , (*1152*)  326
         , (*1153*)  327 , (*1154*)   50 , (*1155*)  329 , (*1156*)  330
         , (*1157*)   52 , (*1158*)    0 , (*1159*)  334 , (*1160*)    0
         , (*1161*)   66 , (*1162*)    0 , (*1163*)   40 , (*1164*)   56
         , (*1165*)  380 , (*1166*)    0 , (*1167*)  177 , (*1168*)    0
         , (*1169*)    0 , (*1170*)    0 , (*1171*)    0 , (*1172*)  134
         , (*1173*)  158 , (*1174*)  384 , (*1175*)   97 , (*1176*)  100
         , (*1177*)  101 , (*1178*)  115 , (*1179*)  140 , (*1180*)    0
         , (*1181*)  387 , (*1182*)    0 , (*1183*)    0 , (*1184*)  146
         , (*1185*)    0 , (*1186*)  389 , (*1187*)   67 , (*1188*)   66
         , (*1189*)    0 , (*1190*)    0 , (*1191*)    0 , (*1192*)  336
         , (*1193*)    0 , (*1194*)    0 , (*1195*)    0 , (*1196*)    0
         , (*1197*)   40 , (*1198*)    0 , (*1199*)  380 , (*1200*)    0
         , (*1201*)    0 , (*1202*)   66 , (*1203*)    0 , (*1204*)    0
         , (*1205*)  159 , (*1206*)  134 , (*1207*)    0 , (*1208*)  384
         , (*1209*)    0 , (*1210*)    0 , (*1211*)    0 , (*1212*)    0
         , (*1213*)  140 , (*1214*)   67 , (*1215*)  387 , (*1216*)    0
         , (*1217*)    0 , (*1218*)  146 , (*1219*)  336 , (*1220*)  389
         , (*1221*)    0 , (*1222*)    0 , (*1223*)    0 , (*1224*)    0
         , (*1225*)    0 , (*1226*)    0 , (*1227*)   66 , (*1228*)   67
         , (*1229*)    0 , (*1230*)    0 , (*1231*)    0 , (*1232*)  391
         , (*1233*)  336 , (*1234*)    0 , (*1235*)    0 , (*1236*)    0
         , (*1237*)    0 , (*1238*)    0 , (*1239*)  179 , (*1240*)    0
         , (*1241*)    0 , (*1242*)    0 , (*1243*)  150 , (*1244*)    0
         , (*1245*)  396 , (*1246*)  159 , (*1247*)    0 , (*1248*)    0
         , (*1249*)    0 , (*1250*)    0 , (*1251*)    0 , (*1252*)    0
         , (*1253*)   67 , (*1254*)    0 , (*1255*)    0 , (*1256*)    0
         , (*1257*)    0 , (*1258*)  336 , (*1259*)    0 , (*1260*)    0
         , (*1261*)    0 , (*1262*)    0 , (*1263*)    0 , (*1264*)    0
         , (*1265*)    0 , (*1266*)  397 , (*1267*)  398 , (*1268*)  163
         , (*1269*)    0 , (*1270*)    0 , (*1271*)  159 , (*1272*)    0
         , (*1273*)    0 , (*1274*)    0 , (*1275*)    0 , (*1276*)    0
         , (*1277*)  150 , (*1278*)    0 , (*1279*)  396 , (*1280*)    0
         , (*1281*)    0 , (*1282*)   71 , (*1283*)   87 , (*1284*)  345
         , (*1285*)   75 , (*1286*)   86 , (*1287*)    0 , (*1288*)   85
         , (*1289*)    0 , (*1290*)  344 , (*1291*)    0 , (*1292*)  340
         , (*1293*)   81 , (*1294*)   82 , (*1295*)    0 , (*1296*)    0
         , (*1297*)    0 , (*1298*)    0 , (*1299*)    0 , (*1300*)  397
         , (*1301*)  398 , (*1302*)  163 , (*1303*)    0 , (*1304*)  161
         , (*1305*)  395 , (*1306*)  393 , (*1307*)    0 , (*1308*)    0
         , (*1309*)   71 , (*1310*)   87 , (*1311*)  345 , (*1312*)   75
         , (*1313*)   86 , (*1314*)    0 , (*1315*)   85 , (*1316*)    0
         , (*1317*)  344 , (*1318*)    0 , (*1319*)  340 , (*1320*)   81
         , (*1321*)   82 , (*1322*)    0 , (*1323*)   71 , (*1324*)   87
         , (*1325*)  345 , (*1326*)   75 , (*1327*)   86 , (*1328*)    0
         , (*1329*)   85 , (*1330*)    0 , (*1331*)  344 , (*1332*)    0
         , (*1333*)  340 , (*1334*)   81 , (*1335*)   82 , (*1336*)  190
         , (*1337*)    0 , (*1338*)    0 , (*1339*)    0 , (*1340*)    0
         , (*1341*)    0 , (*1342*)    0 , (*1343*)    0 , (*1344*)    0
         , (*1345*)    0 , (*1346*)  392 , (*1347*)  393 , (*1348*)   71
         , (*1349*)   87 , (*1350*)  345 , (*1351*)   75 , (*1352*)   86
         , (*1353*)    0 , (*1354*)   85 , (*1355*)    0 , (*1356*)  344
         , (*1357*)    0 , (*1358*)  340 , (*1359*)   81 , (*1360*)   82
         , (*1361*)    0 , (*1362*)    0 , (*1363*)    0 , (*1364*)    0
         , (*1365*)    0 , (*1366*)   40 , (*1367*)    0 , (*1368*)  380
         , (*1369*)    0 , (*1370*)  161 , (*1371*)  395 , (*1372*)  393
         , (*1373*)    0 , (*1374*)    0 , (*1375*)  134 , (*1376*)    0
         , (*1377*)  384 , (*1378*)    0 , (*1379*)    0 , (*1380*)    0
         , (*1381*)    0 , (*1382*)  140 , (*1383*)    0 , (*1384*)  387
         , (*1385*)    0 , (*1386*)    0 , (*1387*)  146 , (*1388*)    0
         , (*1389*)  389 , (*1390*)    0 , (*1391*)    0 , (*1392*)    0
         , (*1393*)    0 , (*1394*)    0 , (*1395*)    0 , (*1396*)    0
         , (*1397*)    0 , (*1398*)    0 , (*1399*)    0 , (*1400*)    0
         , (*1401*)    0 , (*1402*)    0 , (*1403*)    0 , (*1404*)    0
         , (*1405*)    0 , (*1406*)    0 , (*1407*)    0 , (*1408*)    0
         , (*1409*)    0 , (*1410*)    0 , (*1411*)    0 , (*1412*)    0
         , (*1413*)    0 , (*1414*)    0 , (*1415*)    0 , (*1416*)    0
         , (*1417*)    0 , (*1418*)    0 , (*1419*)    0 , (*1420*)    0
         , (*1421*)    0 , (*1422*)    0 , (*1423*)    0 , (*1424*)    0
         , (*1425*)    0 , (*1426*)    0 , (*1427*)    0 , (*1428*)    0
         , (*1429*)    0 , (*1430*)    0 , (*1431*)    0 , (*1432*)    0
         , (*1433*)    0 , (*1434*)    0 , (*1435*)    0 , (*1436*)    0
         , (*1437*)    0 , (*1438*)    0 , (*1439*)    0 , (*1440*)    0
         , (*1441*)    0 , (*1442*)    0 , (*1443*)    0 , (*1444*)    0
         , (*1445*)    0 , (*1446*)  150 , (*1447*)    0 , (*1448*)  396
         , (*1449*)    0 , (*1450*)    0 , (*1451*)    0 , (*1452*)    0
         , (*1453*)    0 , (*1454*)    0 , (*1455*)    0 , (*1456*)    0
         , (*1457*)    0 , (*1458*)    0 , (*1459*)    0 , (*1460*)    0
         , (*1461*)    0 , (*1462*)    0 , (*1463*)    0 , (*1464*)    0
         , (*1465*)    0 , (*1466*)    0 , (*1467*)    0 , (*1468*)    0
         , (*1469*)  397 , (*1470*)  398 , (*1471*)  163 , (*1472*)    0
         , (*1473*)    0 , (*1474*)    0 , (*1475*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 404(P   1)*)    2 , (*A 405(P   2)*)    1 , (*A 406(P   3)*)    1
         , (*A 407(P   4)*)    1 , (*A 408(P   5)*)    1 , (*A 409(P   6)*)    1
         , (*A 410(P   7)*)    1 , (*A 411(P   8)*)    0 , (*A 412(P   9)*)    0
         , (*A 413(P  10)*)    0 , (*A 414(P  11)*)    0 , (*A 415(P  12)*)    0
         , (*A 416(P  13)*)    0 , (*A 417(P  14)*)    4 , (*A 418(P  15)*)    7
         , (*A 419(P  16)*)    4 , (*A 420(P  17)*)    5 , (*A 421(P  18)*)    0
         , (*A 422(P  19)*)    2 , (*A 423(P  20)*)    3 , (*A 424(P  21)*)    3
         , (*A 425(P  22)*)    3 , (*A 426(P  23)*)    7 , (*A 427(P  24)*)    5
         , (*A 428(P  25)*)    7 , (*A 429(P  26)*)    3 , (*A 430(P  27)*)   10
         , (*A 431(P  28)*)    3 , (*A 432(P  29)*)    9 , (*A 433(P  30)*)    1
         , (*A 434(P  31)*)    0 , (*A 435(P  32)*)    1 , (*A 436(P  33)*)    0
         , (*A 437(P  34)*)    3 , (*A 438(P  35)*)    3 , (*A 439(P  36)*)    0
         , (*A 440(P  37)*)    2 , (*A 441(P  38)*)    3 , (*A 442(P  39)*)    1
         , (*A 443(P  40)*)    3 , (*A 444(P  41)*)    1 , (*A 445(P  42)*)    3
         , (*A 446(P  43)*)    3 , (*A 447(P  44)*)    3 , (*A 448(P  45)*)    1
         , (*A 449(P  46)*)    3 , (*A 450(P  47)*)    0 , (*A 451(P  48)*)    0
         , (*A 452(P  49)*)    2 , (*A 453(P  50)*)    1 , (*A 454(P  51)*)    3
         , (*A 455(P  52)*)    1 , (*A 456(P  53)*)    1 , (*A 457(P  54)*)    1
         , (*A 458(P  55)*)    3 , (*A 459(P  56)*)    1 , (*A 460(P  57)*)    3
         , (*A 461(P  58)*)    1 , (*A 462(P  59)*)    3 , (*A 463(P  60)*)    3
         , (*A 464(P  61)*)    0 , (*A 465(P  62)*)    1 , (*A 466(P  63)*)    1
         , (*A 467(P  64)*)    1 , (*A 468(P  65)*)    0 , (*A 469(P  66)*)    1
         , (*A 470(P  67)*)    1 , (*A 471(P  68)*)    3 , (*A 472(P  69)*)    1
         , (*A 473(P  70)*)    1 , (*A 474(P  71)*)    2 , (*A 475(P  72)*)    2
         , (*A 476(P  73)*)    0 , (*A 477(P  74)*)    1 , (*A 478(P  75)*)    2
         , (*A 479(P  76)*)    0 , (*A 480(P  77)*)    1 , (*A 481(P  78)*)    2
         , (*A 482(P  79)*)    3 , (*A 483(P  80)*)    1 , (*A 484(P  81)*)    4
         , (*A 485(P  82)*)    1 , (*A 486(P  83)*)    1 , (*A 487(P  84)*)    1
         , (*A 488(P  85)*)    2 , (*A 489(P  86)*)    0 , (*A 490(P  87)*)    1
         , (*A 491(P  88)*)    2 , (*A 492(P  89)*)    3 , (*A 493(P  90)*)    1
         , (*A 494(P  91)*)    3 , (*A 495(P  92)*)    1 , (*A 496(P  93)*)    1
         , (*A 497(P  94)*)    1 , (*A 498(P  95)*)    2 , (*A 499(P  96)*)    0
         , (*A 500(P  97)*)    1 , (*A 501(P  98)*)    2 , (*A 502(P  99)*)    3
         , (*A 503(P 100)*)    3 , (*A 504(P 101)*)    1 , (*A 505(P 102)*)    2
         , (*A 506(P 103)*)    0 , (*A 507(P 104)*)    1 , (*A 508(P 105)*)    2
         , (*A 509(P 106)*)    3 , (*A 510(P 107)*)    3 , (*A 511(P 108)*)    1
         , (*A 512(P 109)*)    2 , (*A 513(P 110)*)    0 , (*A 514(P 111)*)    2
         , (*A 515(P 112)*)    0 , (*A 516(P 113)*)    1 , (*A 517(P 114)*)    1
         , (*A 518(P 115)*)    1 , (*A 519(P 116)*)    1 , (*A 520(P 117)*)    1
         , (*A 521(P 118)*)    1 , (*A 522(P 119)*)    1 , (*A 523(P 120)*)    1
         , (*A 524(P 121)*)    1 , (*A 525(P 122)*)    1 , (*A 526(P 123)*)    1
         , (*A 527(P 124)*)    1 , (*A 528(P 125)*)    1 , (*A 529(P 126)*)    1
         , (*A 530(P 127)*)    1 , (*A 531(P 128)*)    1 , (*A 532(P 129)*)    1
         , (*A 533(P 130)*)    2 , (*A 534(P 131)*)    3 , (*A 535(P 132)*)    1
         , (*A 536(P 133)*)    3 , (*A 537(P 134)*)    1 , (*A 538(P 135)*)    0
         , (*A 539(P 136)*)    1 , (*A 540(P 137)*)    3 , (*A 541(P 138)*)    0
         , (*A 542(P 139)*)    1 , (*A 543(P 140)*)    1 , (*A 544(P 141)*)    3
         , (*A 545(P 142)*)    1 , (*A 546(P 143)*)    1 , (*A 547(P 144)*)    0
         , (*A 548(P 145)*)    2 , (*A 549(P 146)*)    1 , (*A 550(P 147)*)    3
         , (*A 551(P 148)*)    1 , (*A 552(P 149)*)    3 , (*A 553(P 150)*)    0
         , (*A 554(P 151)*)    1 , (*A 555(P 152)*)    3 , (*A 556(P 153)*)    1
         , (*A 557(P 154)*)    3 , (*A 558(P 155)*)    1 , (*A 559(P 156)*)    2
         , (*A 560(P 157)*)    0 , (*A 561(P 158)*)    1 , (*A 562(P 159)*)    3
         , (*A 563(P 160)*)    1 , (*A 564(P 161)*)    3 , (*A 565(P 162)*)    1
         , (*A 566(P 163)*)    3 , (*A 567(P 164)*)    0 , (*A 568(P 165)*)    1
         , (*A 569(P 166)*)    2 , (*A 570(P 167)*)    0 , (*A 571(P 168)*)    1
         , (*A 572(P 169)*)    1 , (*A 573(P 170)*)    3 , (*A 574(P 171)*)    5
         , (*A 575(P 172)*)    1 , (*A 576(P 173)*)    1 , (*A 577(P 174)*)    2
         , (*A 578(P 175)*)    3 , (*A 579(P 176)*)    3 , (*A 580(P 177)*)    0
         , (*A 581(P 178)*)    2 , (*A 582(P 179)*)    3 , (*A 583(P 180)*)    1
         , (*A 584(P 181)*)    0 , (*A 585(P 182)*)    1 , (*A 586(P 183)*)    1
         , (*A 587(P 184)*)    1 , (*A 588(P 185)*)    4 , (*A 589(P 186)*)    1
         , (*A 590(P 187)*)    2 , (*A 591(P 188)*)    0 , (*A 592(P 189)*)    2
         , (*A 593(P 190)*)    0 , (*A 594(P 191)*)    2 , (*A 595(P 192)*)    0
         , (*A 596(P 193)*)    0 , (*A 597(P 194)*)    2 , (*A 598(P 195)*)    4
         , (*A 599(P 196)*)    2 , (*A 600(P 197)*)    3 , (*A 601(P 198)*)    1
         , (*A 602(P 199)*)    1 , (*A 603(P 200)*)    4 , (*A 604(P 201)*)    1
         , (*A 605(P 202)*)    1 , (*A 606(P 203)*)    3 , (*A 607(P 204)*)    1
         , (*A 608(P 205)*)    3 , (*A 609(P 206)*)    1 , (*A 610(P 207)*)    2
         , (*A 611(P 208)*)    1 , (*A 612(P 209)*)    3 , (*A 613(P 210)*)    1
         , (*A 614(P 211)*)    3 , (*A 615(P 212)*)    1 , (*A 616(P 213)*)    3
         , (*A 617(P 214)*)    1 , (*A 618(P 215)*)    2 , (*A 619(P 216)*)    2
         , (*A 620(P 217)*)    2 , (*A 621(P 218)*)    2 , (*A 622(P 219)*)    3
         , (*A 623(P 220)*)    1 , (*A 624(P 221)*)    2 , (*A 625(P 222)*)    2
         , (*A 626(P 223)*)    2 , (*A 627(P 224)*)    1 , (*A 628(P 225)*)    1
         , (*A 629(P 226)*)    3 , (*A 630(P 227)*)    1 , (*A 631(P 228)*)    3
         , (*A 632(P 229)*)    3 , (*A 633(P 230)*)    0 , (*A 634(P 231)*)    1
         , (*A 635(P 232)*)    3 , (*A 636(P 233)*)    1 , (*A 637(P 234)*)    3
         , (*A 638(P 235)*)    3 , (*A 639(P 236)*)    1 , (*A 640(P 237)*)    1
         , (*A 641(P 238)*)    1 , (*A 642(P 239)*)    1 , (*A 643(P 240)*)    1
         , (*A 644(P 241)*)    1 , (*A 645(P 242)*)    1 , (*A 646(P 243)*)    1
         , (*A 647(P 244)*)    1 , (*A 648(P 245)*)    1 , (*A 649(P 246)*)    1
         , (*A 650(P 247)*)    3 , (*A 651(P 248)*)    1 , (*A 652(P 249)*)    1
         , (*A 653(P 250)*)    1 , (*A 654(P 251)*)    1 , (*A 655(P 252)*)    1
         , (*A 656(P 253)*)    1 , (*A 657(P 254)*)    1 , (*A 658(P 255)*)    1
         , (*A 659(P 256)*)    1 , (*A 660(P 257)*)    1 , (*A 661(P 258)*)    1
         , (*A 662(P 259)*)    1 , (*A 663(P 260)*)    1 , (*A 664(P 261)*)    1
         , (*A 665(P 262)*)    1 , (*A 666(P 263)*)    1 , (*A 667(P 264)*)    0
         , (*A 668(P 265)*)    5 , (*A 669(P 266)*)    1 , (*A 670(P 267)*)    1
         , (*A 671(P 268)*)    1 , (*A 672(P 269)*)    1 , (*A 673(P 270)*)    1
         , (*A 674(P 271)*)    1 , (*A 675(P 272)*)    0 , (*A 676(P 273)*)    1
         , (*A 677(P 274)*)    1 , (*A 678(P 275)*)    2 , (*A 679(P 276)*)    0
         , (*A 680(P 277)*)    2 , (*A 681(P 278)*)    1 , (*A 682(P 279)*)    3
         , (*A 683(P 280)*)    1 , (*A 684(P 281)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 404(P   1)*)  269 , (*A 405(P   2)*)  110 , (*A 406(P   3)*)  110
         , (*A 407(P   4)*)  110 , (*A 408(P   5)*)  110 , (*A 409(P   6)*)  110
         , (*A 410(P   7)*)  110 , (*A 411(P   8)*)  116 , (*A 412(P   9)*)  117
         , (*A 413(P  10)*)  118 , (*A 414(P  11)*)  119 , (*A 415(P  12)*)  120
         , (*A 416(P  13)*)  121 , (*A 417(P  14)*)  125 , (*A 418(P  15)*)  114
         , (*A 419(P  16)*)  129 , (*A 420(P  17)*)  109 , (*A 421(P  18)*)  124
         , (*A 422(P  19)*)  124 , (*A 423(P  20)*)  131 , (*A 424(P  21)*)  131
         , (*A 425(P  22)*)  132 , (*A 426(P  23)*)  115 , (*A 427(P  24)*)  134
         , (*A 428(P  25)*)  111 , (*A 429(P  26)*)  136 , (*A 430(P  27)*)  112
         , (*A 431(P  28)*)  138 , (*A 432(P  29)*)  113 , (*A 433(P  30)*)  122
         , (*A 434(P  31)*)  122 , (*A 435(P  32)*)  140 , (*A 436(P  33)*)  140
         , (*A 437(P  34)*)  137 , (*A 438(P  35)*)  126 , (*A 439(P  36)*)  127
         , (*A 440(P  37)*)  127 , (*A 441(P  38)*)  142 , (*A 442(P  39)*)  143
         , (*A 443(P  40)*)  143 , (*A 444(P  41)*)  144 , (*A 445(P  42)*)  144
         , (*A 446(P  43)*)  145 , (*A 447(P  44)*)  142 , (*A 448(P  45)*)  146
         , (*A 449(P  46)*)  146 , (*A 450(P  47)*)  128 , (*A 451(P  48)*)  133
         , (*A 452(P  49)*)  133 , (*A 453(P  50)*)  147 , (*A 454(P  51)*)  147
         , (*A 455(P  52)*)  148 , (*A 456(P  53)*)  123 , (*A 457(P  54)*)  149
         , (*A 458(P  55)*)  150 , (*A 459(P  56)*)  151 , (*A 460(P  57)*)  151
         , (*A 461(P  58)*)  152 , (*A 462(P  59)*)  152 , (*A 463(P  60)*)  141
         , (*A 464(P  61)*)  141 , (*A 465(P  62)*)  153 , (*A 466(P  63)*)  153
         , (*A 467(P  64)*)  154 , (*A 468(P  65)*)  155 , (*A 469(P  66)*)  155
         , (*A 470(P  67)*)  156 , (*A 471(P  68)*)  156 , (*A 472(P  69)*)  157
         , (*A 473(P  70)*)  157 , (*A 474(P  71)*)  157 , (*A 475(P  72)*)  159
         , (*A 476(P  73)*)  159 , (*A 477(P  74)*)  160 , (*A 478(P  75)*)  162
         , (*A 479(P  76)*)  161 , (*A 480(P  77)*)  161 , (*A 481(P  78)*)  163
         , (*A 482(P  79)*)  163 , (*A 483(P  80)*)  165 , (*A 484(P  81)*)  164
         , (*A 485(P  82)*)  168 , (*A 486(P  83)*)  168 , (*A 487(P  84)*)  169
         , (*A 488(P  85)*)  171 , (*A 489(P  86)*)  170 , (*A 490(P  87)*)  170
         , (*A 491(P  88)*)  172 , (*A 492(P  89)*)  172 , (*A 493(P  90)*)  174
         , (*A 494(P  91)*)  173 , (*A 495(P  92)*)  175 , (*A 496(P  93)*)  175
         , (*A 497(P  94)*)  176 , (*A 498(P  95)*)  178 , (*A 499(P  96)*)  177
         , (*A 500(P  97)*)  177 , (*A 501(P  98)*)  179 , (*A 502(P  99)*)  179
         , (*A 503(P 100)*)  180 , (*A 504(P 101)*)  181 , (*A 505(P 102)*)  183
         , (*A 506(P 103)*)  182 , (*A 507(P 104)*)  182 , (*A 508(P 105)*)  184
         , (*A 509(P 106)*)  184 , (*A 510(P 107)*)  185 , (*A 511(P 108)*)  186
         , (*A 512(P 109)*)  166 , (*A 513(P 110)*)  166 , (*A 514(P 111)*)  187
         , (*A 515(P 112)*)  187 , (*A 516(P 113)*)  158 , (*A 517(P 114)*)  158
         , (*A 518(P 115)*)  158 , (*A 519(P 116)*)  158 , (*A 520(P 117)*)  158
         , (*A 521(P 118)*)  158 , (*A 522(P 119)*)  158 , (*A 523(P 120)*)  158
         , (*A 524(P 121)*)  158 , (*A 525(P 122)*)  158 , (*A 526(P 123)*)  158
         , (*A 527(P 124)*)  158 , (*A 528(P 125)*)  158 , (*A 529(P 126)*)  158
         , (*A 530(P 127)*)  158 , (*A 531(P 128)*)  158 , (*A 532(P 129)*)  158
         , (*A 533(P 130)*)  158 , (*A 534(P 131)*)  158 , (*A 535(P 132)*)  158
         , (*A 536(P 133)*)  205 , (*A 537(P 134)*)  158 , (*A 538(P 135)*)  206
         , (*A 539(P 136)*)  207 , (*A 540(P 137)*)  209 , (*A 541(P 138)*)  208
         , (*A 542(P 139)*)  208 , (*A 543(P 140)*)  210 , (*A 544(P 141)*)  210
         , (*A 545(P 142)*)  211 , (*A 546(P 143)*)  158 , (*A 547(P 144)*)  212
         , (*A 548(P 145)*)  212 , (*A 549(P 146)*)  213 , (*A 550(P 147)*)  213
         , (*A 551(P 148)*)  214 , (*A 552(P 149)*)  158 , (*A 553(P 150)*)  215
         , (*A 554(P 151)*)  215 , (*A 555(P 152)*)  215 , (*A 556(P 153)*)  216
         , (*A 557(P 154)*)  216 , (*A 558(P 155)*)  218 , (*A 559(P 156)*)  217
         , (*A 560(P 157)*)  220 , (*A 561(P 158)*)  220 , (*A 562(P 159)*)  220
         , (*A 563(P 160)*)  221 , (*A 564(P 161)*)  221 , (*A 565(P 162)*)  223
         , (*A 566(P 163)*)  222 , (*A 567(P 164)*)  224 , (*A 568(P 165)*)  224
         , (*A 569(P 166)*)  224 , (*A 570(P 167)*)  225 , (*A 571(P 168)*)  225
         , (*A 572(P 169)*)  225 , (*A 573(P 170)*)  227 , (*A 574(P 171)*)  226
         , (*A 575(P 172)*)  158 , (*A 576(P 173)*)  228 , (*A 577(P 174)*)  158
         , (*A 578(P 175)*)  219 , (*A 579(P 176)*)  229 , (*A 580(P 177)*)  232
         , (*A 581(P 178)*)  232 , (*A 582(P 179)*)  233 , (*A 583(P 180)*)  233
         , (*A 584(P 181)*)  235 , (*A 585(P 182)*)  235 , (*A 586(P 183)*)  235
         , (*A 587(P 184)*)  235 , (*A 588(P 185)*)  234 , (*A 589(P 186)*)  236
         , (*A 590(P 187)*)  237 , (*A 591(P 188)*)  237 , (*A 592(P 189)*)  238
         , (*A 593(P 190)*)  238 , (*A 594(P 191)*)  230 , (*A 595(P 192)*)  230
         , (*A 596(P 193)*)  231 , (*A 597(P 194)*)  231 , (*A 598(P 195)*)  231
         , (*A 599(P 196)*)  240 , (*A 600(P 197)*)  242 , (*A 601(P 198)*)  241
         , (*A 602(P 199)*)  243 , (*A 603(P 200)*)  241 , (*A 604(P 201)*)  167
         , (*A 605(P 202)*)  244 , (*A 606(P 203)*)  244 , (*A 607(P 204)*)  245
         , (*A 608(P 205)*)  245 , (*A 609(P 206)*)  246 , (*A 610(P 207)*)  246
         , (*A 611(P 208)*)  247 , (*A 612(P 209)*)  247 , (*A 613(P 210)*)  248
         , (*A 614(P 211)*)  248 , (*A 615(P 212)*)  250 , (*A 616(P 213)*)  250
         , (*A 617(P 214)*)  252 , (*A 618(P 215)*)  252 , (*A 619(P 216)*)  254
         , (*A 620(P 217)*)  254 , (*A 621(P 218)*)  254 , (*A 622(P 219)*)  254
         , (*A 623(P 220)*)  254 , (*A 624(P 221)*)  254 , (*A 625(P 222)*)  254
         , (*A 626(P 223)*)  254 , (*A 627(P 224)*)  254 , (*A 628(P 225)*)  254
         , (*A 629(P 226)*)  257 , (*A 630(P 227)*)  259 , (*A 631(P 228)*)  259
         , (*A 632(P 229)*)  258 , (*A 633(P 230)*)  260 , (*A 634(P 231)*)  260
         , (*A 635(P 232)*)  260 , (*A 636(P 233)*)  261 , (*A 637(P 234)*)  261
         , (*A 638(P 235)*)  256 , (*A 639(P 236)*)  256 , (*A 640(P 237)*)  256
         , (*A 641(P 238)*)  256 , (*A 642(P 239)*)  256 , (*A 643(P 240)*)  256
         , (*A 644(P 241)*)  256 , (*A 645(P 242)*)  256 , (*A 646(P 243)*)  256
         , (*A 647(P 244)*)  256 , (*A 648(P 245)*)  256 , (*A 649(P 246)*)  256
         , (*A 650(P 247)*)  256 , (*A 651(P 248)*)  249 , (*A 652(P 249)*)  249
         , (*A 653(P 250)*)  249 , (*A 654(P 251)*)  249 , (*A 655(P 252)*)  249
         , (*A 656(P 253)*)  249 , (*A 657(P 254)*)  249 , (*A 658(P 255)*)  251
         , (*A 659(P 256)*)  251 , (*A 660(P 257)*)  251 , (*A 661(P 258)*)  253
         , (*A 662(P 259)*)  253 , (*A 663(P 260)*)  253 , (*A 664(P 261)*)  253
         , (*A 665(P 262)*)  255 , (*A 666(P 263)*)  255 , (*A 667(P 264)*)  262
         , (*A 668(P 265)*)  139 , (*A 669(P 266)*)  263 , (*A 670(P 267)*)  263
         , (*A 671(P 268)*)  263 , (*A 672(P 269)*)  263 , (*A 673(P 270)*)  263
         , (*A 674(P 271)*)  263 , (*A 675(P 272)*)  130 , (*A 676(P 273)*)  130
         , (*A 677(P 274)*)  265 , (*A 678(P 275)*)  265 , (*A 679(P 276)*)  135
         , (*A 680(P 277)*)  135 , (*A 681(P 278)*)  266 , (*A 682(P 279)*)  266
         , (*A 683(P 280)*)  267 , (*A 684(P 281)*)  268
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   66 , (*:  10*)  108 , (*:  11*)   94
         , (*:  12*)   94 , (*:  13*)   95 , (*:  14*)   66
         , (*:  15*)   14 , (*:  16*)   14 , (*:  17*)   95
         , (*:  18*)   30 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   95 , (*:  25*)   66 , (*:  26*)   95
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   70 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)   19
         , (*:  36*)   95 , (*:  37*)   19 , (*:  38*)   95
         , (*:  39*)   67 , (*:  40*)    9 , (*:  41*)    9
         , (*:  42*)   66 , (*:  43*)   68 , (*:  44*)   19
         , (*:  45*)   40 , (*:  46*)   19 , (*:  47*)   19
         , (*:  48*)   52 , (*:  49*)   19 , (*:  50*)   48
         , (*:  51*)   19 , (*:  52*)   76 , (*:  53*)   76
         , (*:  54*)   76 , (*:  55*)   95 , (*:  56*)   19
         , (*:  57*)   19 , (*:  58*)   95 , (*:  59*)   19
         , (*:  60*)   19 , (*:  61*)   96 , (*:  62*)   96
         , (*:  63*)   96 , (*:  64*)    5 , (*:  65*)   96
         , (*:  66*)    5 , (*:  67*)   92 , (*:  68*)   70
         , (*:  69*)    5 , (*:  70*)   96 , (*:  71*)   19
         , (*:  72*)   96 , (*:  73*)   19 , (*:  74*)   96
         , (*:  75*)    5 , (*:  76*)   96 , (*:  77*)    5
         , (*:  78*)   96 , (*:  79*)    5 , (*:  80*)   96
         , (*:  81*)   96 , (*:  82*)    5 , (*:  83*)   95
         , (*:  84*)   67 , (*:  85*)    5 , (*:  86*)    5
         , (*:  87*)   19 , (*:  88*)   70 , (*:  89*)   96
         , (*:  90*)   81 , (*:  91*)   96 , (*:  92*)   70
         , (*:  93*)    5 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   39 , (*:  98*)   39
         , (*:  99*)   39 , (*: 100*)   19 , (*: 101*)   19
         , (*: 102*)   19 , (*: 103*)   19 , (*: 104*)   19
         , (*: 105*)   19 , (*: 106*)   69 , (*: 107*)   70
         , (*: 108*)   70 , (*: 109*)   70 , (*: 110*)   70
         , (*: 111*)   95 , (*: 112*)   66 , (*: 113*)   66
         , (*: 114*)   66 , (*: 115*)   69 , (*: 116*)   19
         , (*: 117*)   19 , (*: 118*)   19 , (*: 119*)    6
         , (*: 120*)    6 , (*: 121*)   76 , (*: 122*)   66
         , (*: 123*)   96 , (*: 124*)   19 , (*: 125*)   19
         , (*: 126*)   19 , (*: 127*)   19 , (*: 128*)   68
         , (*: 129*)   96 , (*: 130*)   19 , (*: 131*)   68
         , (*: 132*)   96 , (*: 133*)   66 , (*: 134*)    9
         , (*: 135*)    9 , (*: 136*)   66 , (*: 137*)   68
         , (*: 138*)   66 , (*: 139*)   66 , (*: 140*)    9
         , (*: 141*)   68 , (*: 142*)   66 , (*: 143*)    9
         , (*: 144*)   66 , (*: 145*)   66 , (*: 146*)    9
         , (*: 147*)    9 , (*: 148*)   66 , (*: 149*)   66
         , (*: 150*)   69 , (*: 151*)   66 , (*: 152*)    9
         , (*: 153*)   95 , (*: 154*)   66 , (*: 155*)    9
         , (*: 156*)    9 , (*: 157*)   19 , (*: 158*)   19
         , (*: 159*)   74 , (*: 160*)   96 , (*: 161*)   19
         , (*: 162*)   19 , (*: 163*)    9 , (*: 164*)   66
         , (*: 165*)   95 , (*: 166*)   66 , (*: 167*)   95
         , (*: 168*)   95 , (*: 169*)   69 , (*: 170*)   19
         , (*: 171*)   95 , (*: 172*)   67 , (*: 173*)   66
         , (*: 174*)    9 , (*: 175*)    9 , (*: 176*)    9
         , (*: 177*)    9 , (*: 178*)   19 , (*: 179*)   19
         , (*: 180*)   95 , (*: 181*)   67 , (*: 182*)   69
         , (*: 183*)   69 , (*: 184*)   70 , (*: 185*)   70
         , (*: 186*)   66 , (*: 187*)   14 , (*: 188*)   14
         , (*: 189*)   19 , (*: 190*)   19 , (*: 191*)   95
         , (*: 192*)   67 , (*: 193*)   69 , (*: 194*)   69
         , (*: 195*)   66 , (*: 196*)    9 , (*: 197*)    9
         , (*: 198*)    9 , (*: 199*)   95 , (*: 200*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 201)*)  456 (*P52*) , (*RR: 202)*)  433 (*P29*)
         , (*RR: 203)*)  424 (*P20*) , (*RR: 204)*)  423 (*P19*)
         , (*RR: 205)*)  446 (*P42*) , (*RR: 206)*)  441 (*P37*)
         , (*RR: 207)*)  447 (*P43*) , (*RR: 208)*)  438 (*P34*)
         , (*RR: 209)*)  418 (*P14*) , (*RR: 210)*)  477 (*P73*)
         , (*RR: 211)*)  497 (*P93*) , (*RR: 212)*)  487 (*P83*)
         , (*RR: 213)*)  504 (*P100*) , (*RR: 214)*)  420 (*P16*)
         , (*RR: 215)*)  482 (*P78*) , (*RR: 216)*)  576 (*P172*)
         , (*RR: 217)*)  551 (*P147*) , (*RR: 218)*)  473 (*P69*)
         , (*RR: 219)*)  474 (*P70*) , (*RR: 220)*)  539 (*P135*)
         , (*RR: 221)*)  540 (*P136*) , (*RR: 222)*)  461 (*P57*)
         , (*RR: 223)*)  462 (*P58*) , (*RR: 224)*)  665 (*P261*)
         , (*RR: 225)*)  666 (*P262*) , (*RR: 226)*)  639 (*P235*)
         , (*RR: 227)*)  640 (*P236*) , (*RR: 228)*)  641 (*P237*)
         , (*RR: 229)*)  642 (*P238*) , (*RR: 230)*)  643 (*P239*)
         , (*RR: 231)*)  644 (*P240*) , (*RR: 232)*)  645 (*P241*)
         , (*RR: 233)*)  648 (*P244*) , (*RR: 234)*)  649 (*P245*)
         , (*RR: 235)*)  646 (*P242*) , (*RR: 236)*)  647 (*P243*)
         , (*RR: 237)*)  657 (*P253*) , (*RR: 238)*)  651 (*P247*)
         , (*RR: 239)*)  652 (*P248*) , (*RR: 240)*)  653 (*P249*)
         , (*RR: 241)*)  654 (*P250*) , (*RR: 242)*)  655 (*P251*)
         , (*RR: 243)*)  656 (*P252*) , (*RR: 244)*)  658 (*P254*)
         , (*RR: 245)*)  659 (*P255*) , (*RR: 246)*)  660 (*P256*)
         , (*RR: 247)*)  663 (*P259*) , (*RR: 248)*)  664 (*P260*)
         , (*RR: 249)*)  661 (*P257*) , (*RR: 250)*)  662 (*P258*)
         , (*RR: 251)*)  619 (*P215*) , (*RR: 252)*)  632 (*P228*)
         , (*RR: 253)*)  624 (*P220*) , (*RR: 254)*)  629 (*P225*)
         , (*RR: 255)*)  650 (*P246*) , (*RR: 256)*)  552 (*P148*)
         , (*RR: 257)*)  573 (*P169*) , (*RR: 258)*)  587 (*P183*)
         , (*RR: 259)*)  585 (*P181*) , (*RR: 260)*)  586 (*P182*)
         , (*RR: 261)*)  579 (*P175*) , (*RR: 262)*)  597 (*P193*)
         , (*RR: 263)*)  598 (*P194*) , (*RR: 264)*)  574 (*P170*)
         , (*RR: 265)*)  481 (*P77*) , (*RR: 266)*)  492 (*P88*)
         , (*RR: 267)*)  485 (*P81*) , (*RR: 268)*)  486 (*P82*)
         , (*RR: 269)*)  491 (*P87*) , (*RR: 270)*)  495 (*P91*)
         , (*RR: 271)*)  496 (*P92*) , (*RR: 272)*)  502 (*P98*)
         , (*RR: 273)*)  501 (*P97*) , (*RR: 274)*)  509 (*P105*)
         , (*RR: 275)*)  508 (*P104*) , (*RR: 276)*)  601 (*P197*)
         , (*RR: 277)*)  602 (*P198*) , (*RR: 278)*)  603 (*P199*)
         , (*RR: 279)*)  668 (*P264*) , (*RR: 280)*)  426 (*P22*)
         , (*RR: 281)*)  428 (*P24*) , (*RR: 282)*)  437 (*P33*)
         , (*RR: 283)*)  430 (*P26*) , (*RR: 284)*)  432 (*P28*)
         , (*RR: 285)*)  429 (*P25*) , (*RR: 286)*)  431 (*P27*)
         , (*RR: 287)*)  405 (*P1*) , (*RR: 288)*)  406 (*P2*)
         , (*RR: 289)*)  407 (*P3*) , (*RR: 290)*)  408 (*P4*)
         , (*RR: 291)*)  409 (*P5*) , (*RR: 292)*)  410 (*P6*)
         , (*RR: 293)*)  422 (*P18*) , (*RR: 294)*)  425 (*P21*)
         , (*RR: 295)*)  445 (*P41*) , (*RR: 296)*)  443 (*P39*)
         , (*RR: 297)*)  442 (*P38*) , (*RR: 298)*)  419 (*P15*)
         , (*RR: 299)*)  440 (*P36*) , (*RR: 300)*)  448 (*P44*)
         , (*RR: 301)*)  449 (*P45*) , (*RR: 302)*)  457 (*P53*)
         , (*RR: 303)*)  463 (*P59*) , (*RR: 304)*)  599 (*P195*)
         , (*RR: 305)*)  483 (*P79*) , (*RR: 306)*)  478 (*P74*)
         , (*RR: 307)*)  457 (*P53*) , (*RR: 308)*)  465 (*P61*)
         , (*RR: 309)*)  472 (*P68*) , (*RR: 310)*)  466 (*P62*)
         , (*RR: 311)*)  533 (*P129*) , (*RR: 312)*)  517 (*P113*)
         , (*RR: 313)*)  518 (*P114*) , (*RR: 314)*)  519 (*P115*)
         , (*RR: 315)*)  520 (*P116*) , (*RR: 316)*)  521 (*P117*)
         , (*RR: 317)*)  522 (*P118*) , (*RR: 318)*)  523 (*P119*)
         , (*RR: 319)*)  524 (*P120*) , (*RR: 320)*)  525 (*P121*)
         , (*RR: 321)*)  526 (*P122*) , (*RR: 322)*)  527 (*P123*)
         , (*RR: 323)*)  528 (*P124*) , (*RR: 324)*)  529 (*P125*)
         , (*RR: 325)*)  530 (*P126*) , (*RR: 326)*)  531 (*P127*)
         , (*RR: 327)*)  532 (*P128*) , (*RR: 328)*)  534 (*P130*)
         , (*RR: 329)*)  535 (*P131*) , (*RR: 330)*)  537 (*P133*)
         , (*RR: 331)*)  545 (*P141*) , (*RR: 332)*)  544 (*P140*)
         , (*RR: 333)*)  543 (*P139*) , (*RR: 334)*)  546 (*P142*)
         , (*RR: 335)*)  549 (*P145*) , (*RR: 336)*)  628 (*P224*)
         , (*RR: 337)*)  637 (*P233*) , (*RR: 338)*)  608 (*P204*)
         , (*RR: 339)*)  616 (*P212*) , (*RR: 340)*)  617 (*P213*)
         , (*RR: 341)*)  618 (*P214*) , (*RR: 342)*)  620 (*P216*)
         , (*RR: 343)*)  621 (*P217*) , (*RR: 344)*)  615 (*P211*)
         , (*RR: 345)*)  607 (*P203*) , (*RR: 346)*)  636 (*P232*)
         , (*RR: 347)*)  635 (*P231*) , (*RR: 348)*)  634 (*P230*)
         , (*RR: 349)*)  626 (*P222*) , (*RR: 350)*)  630 (*P226*)
         , (*RR: 351)*)  631 (*P227*) , (*RR: 352)*)  625 (*P221*)
         , (*RR: 353)*)  514 (*P110*) , (*RR: 354)*)  510 (*P106*)
         , (*RR: 355)*)  550 (*P146*) , (*RR: 356)*)  548 (*P144*)
         , (*RR: 357)*)  569 (*P165*) , (*RR: 358)*)  558 (*P154*)
         , (*RR: 359)*)  557 (*P153*) , (*RR: 360)*)  582 (*P178*)
         , (*RR: 361)*)  590 (*P186*) , (*RR: 362)*)  577 (*P173*)
         , (*RR: 363)*)  594 (*P190*) , (*RR: 364)*)  578 (*P174*)
         , (*RR: 365)*)  592 (*P188*) , (*RR: 366)*)  588 (*P184*)
         , (*RR: 367)*)  581 (*P177*) , (*RR: 368)*)  583 (*P179*)
         , (*RR: 369)*)  559 (*P155*) , (*RR: 370)*)  555 (*P151*)
         , (*RR: 371)*)  556 (*P152*) , (*RR: 372)*)  565 (*P161*)
         , (*RR: 373)*)  564 (*P160*) , (*RR: 374)*)  562 (*P158*)
         , (*RR: 375)*)  563 (*P159*) , (*RR: 376)*)  566 (*P162*)
         , (*RR: 377)*)  536 (*P132*) , (*RR: 378)*)  512 (*P108*)
         , (*RR: 379)*)  484 (*P80*) , (*RR: 380)*)  669 (*P265*)
         , (*RR: 381)*)  493 (*P89*) , (*RR: 382)*)  488 (*P84*)
         , (*RR: 383)*)  494 (*P90*) , (*RR: 384)*)  670 (*P266*)
         , (*RR: 385)*)  503 (*P99*) , (*RR: 386)*)  498 (*P94*)
         , (*RR: 387)*)  674 (*P270*) , (*RR: 388)*)  505 (*P101*)
         , (*RR: 389)*)  672 (*P268*) , (*RR: 390)*)  600 (*P196*)
         , (*RR: 391)*)  684 (*P280*) , (*RR: 392)*)  682 (*P278*)
         , (*RR: 393)*)  683 (*P279*) , (*RR: 394)*)  680 (*P276*)
         , (*RR: 395)*)  681 (*P277*) , (*RR: 396)*)  673 (*P269*)
         , (*RR: 397)*)  677 (*P273*) , (*RR: 398)*)  671 (*P267*)
         , (*RR: 399)*)  678 (*P274*) , (*RR: 400)*)  455 (*P51*)
         , (*RR: 401)*)  454 (*P50*) , (*RR: 402)*)  453 (*P49*)
         , (*RR: 403)*)  427 (*P23*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 404 => (* P1 _0000_ (269): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 405,287 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 406,288 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 407,289 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 408,290 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 409,291 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 410,292 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 411 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 412 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 413 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 414 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 415 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 416 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 306 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 417 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE NonreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 309 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 418,209 => (* P15 InstInterface (114): InterfaceLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 328 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 419,298 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 335 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 420,214 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 346 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 421 => (* P18 IntfPragmas (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 422,293 => (* P19 IntfPragmas (124): IntfPragmas IntfPragma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 423,204 => (* P20 IntfPragma (131): StkOpenPragma StkPragmaId StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 373 of "FM3Parser.lalr" *)
                 FM3Pass1 . RecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 424,203 => (* P21 IntfPragma (131): StkOpenPragma StkIdent StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 376 of "FM3Parser.lalr" *)
                 FM3Pass1 . UnrecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 425,294 => (* P22 ModuleLt (132): OptUnsafe StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 379 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 426,280 => (* P23 InstModule (115): ModuleLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 400 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 427,403 => (* P24 ModuleMiddle (134): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 407 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 428,281 => (* P25 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 419 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 429,285 => (* P26 GenInterfaceLt (136): StkRwGENERIC StkRwINTERFACE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 445 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 430,283 => (* P27 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 465 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 431,286 => (* P28 GenModuleLt (138): StkRwGENERIC StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 473 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 432,284 => (* P29 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 493 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 433,202 => (* P30 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 502 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 434 => (* P31 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 503 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 435 => (* P32 OptSemicolon (140): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;

              | 436 => (* P33 OptSemicolon (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;

              | 437,282 => (* P34 GenFormalList (137): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 512 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 438,208 => (* P35 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 518 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 439 => (* P36 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 440,299 => (* P37 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 441,206 => (* P38 Import (142): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 442,297 => (* P39 ImportItemPlusList (143): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 443,296 => (* P40 ImportItemPlusList (143): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 444 => (* P41 ImportItem (144): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 537 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 445,295 => (* P42 ImportItem (144): NonreservedIdent StkRwAS NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 540 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 446,205 => (* P43 FromImportLt (145): StkRwFROM NonreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 544 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 447,207 => (* P44 Import (142): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 448,300 => (* P45 FromImportIdPlusList (146): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 555 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 449,301 => (* P46 FromImportIdPlusList (146): FromImportIdPlusList StkComma NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 560 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 450 => (* P47 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 565 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 451 => (* P48 Exports (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 572 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 452 => (* P49 Exports (133): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;

              | 453,402 => (* P50 ExportIdPlusList (147): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 454,401 => (* P51 ExportIdPlusList (147): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;

              | 455,400 => (* P52 ExportIdent (148): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 592 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 456,201 => (* P53 NonreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 607 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 457,302,307 => (* P54 IdentRef (149): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 616 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 458 => (* P55 QualIdentRef (150): NonreservedIdent StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 623 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 459 => (* P56 IdPlusList (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 631 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 460 => (* P57 IdPlusList (151): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 635 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 461,222 => (* P58 DeclIdListElems (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 647 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 462,223 => (* P59 DeclIdListElems (152): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 659 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 463,303 => (* P60 IdStarList (141): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 675 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 464 => (* P61 IdStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 677 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 465,308 => (* P62 MaybeQualIdent (153): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 682 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                
                     
              | 466,310 => (* P63 MaybeQualIdent (153): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 688 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 467 => (* P64 QualIdent (154): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 694 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 468 => (* P65 MaybeQualIdentStarList (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 702 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 469 => (* P66 MaybeQualIdentStarList (155): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 704 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 470 => (* P67 MaybeQualIdentPlusList (156): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 706 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 471 => (* P68 MaybeQualIdentPlusList (156): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 708 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 472,309 => (* P69 TypeId (157): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;

              | 473,218 => (* P70 TypeId (157): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 718 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 474,219 => (* P71 TypeId (157): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 723 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 475 => (* P72 OptConstType (159): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 733 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 476 => (* P73 OptConstType (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 735 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 477,210 => (* P74 ConstDeclGroupLt (160): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 744 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 478,306 => (* P75 ConstDeclGroup (162): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 747 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 479 => (* P76 ConstDeclList (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 752 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 480 => (* P77 ConstDeclList (161): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 758 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 481,265 => (* P78 ConstDeclPlus (163): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 763 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 482,215 => (* P79 ConstDeclPlus (163): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 163;
                (* line 768 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 483,305 => (* P80 ConstDeclId (165): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 786 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 484,379 => (* P81 ConstDecl (164): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 164;
                (* line 791 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 485,267 => (* P82 TypeRelation (168): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 817 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 486,268 => (* P83 TypeRelation (168): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 819 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 487,212 => (* P84 TypeDeclGroupLt (169): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 830 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 488,382 => (* P85 TypeDeclGroup (171): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 833 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 489 => (* P86 TypeDeclList (170): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 170;
                (* line 838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 490 => (* P87 TypeDeclList (170): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 844 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 491,269 => (* P88 TypeDeclPlus (172): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 849 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 492,266 => (* P89 TypeDeclPlus (172): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 172;
                (* line 854 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 493,381 => (* P90 TypeDeclId (174): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 870 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkType , yyAttributeStack^[yyStackPtr+1] ) ) ; 
                     
              | 494,383 => (* P91 TypeDecl (173): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 875 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 495,270 => (* P92 RevelationRelation (175): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 895 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 496,271 => (* P93 RevelationRelation (175): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 897 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 497,211 => (* P94 RevelationGroupLt (176): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 908 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 498,386 => (* P95 RevelationGroup (178): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 911 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 499 => (* P96 RevelationList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 916 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 500 => (* P97 RevelationList (177): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 922 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 501,273 => (* P98 RevelationPlus (179): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 927 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 502,272 => (* P99 RevelationPlus (179): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 932 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 503,385 => (* P100 Revelation (180): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 948 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 504,213 => (* P101 VarDeclGroupLt (181): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 975 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 505,388 => (* P102 VarDeclGroup (183): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 988 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 506 => (* P103 VarDeclList (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 994 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 507 => (* P104 VarDeclList (182): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1000 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 508,275 => (* P105 VarDeclPlus (184): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1013 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 509,274 => (* P106 VarDeclPlus (184): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 184;
                (* line 1018 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 510,354 => (* P107 VarDecl (185): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 185;
                (* line 1036 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 511 => (* P108 VarDeclIds (186): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;
                (* line 1064 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 512,378 => (* P109 OptDeclType (166): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 1075 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 513 => (* P110 OptDeclType (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 1079 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 514,353 => (* P111 OptDeclValue (187): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1085 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 515 => (* P112 OptDeclValue (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1089 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 516 => (* P113 Type (158): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 517,312 => (* P114 Type (158): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 518,313 => (* P115 Type (158): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 519,314 => (* P116 Type (158): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 520,315 => (* P117 Type (158): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 521,316 => (* P118 Type (158): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 522,317 => (* P119 Type (158): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 523,318 => (* P120 Type (158): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 524,319 => (* P121 Type (158): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 525,320 => (* P122 Type (158): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 526,321 => (* P123 Type (158): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 527,322 => (* P124 Type (158): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 528,323 => (* P125 Type (158): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 529,324 => (* P126 Type (158): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 530,325 => (* P127 Type (158): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 531,326 => (* P128 Type (158): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 532,327 => (* P129 Type (158): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 533,311 => (* P130 Type (158): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1121 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 534,328 => (* P131 Type (158): StkUNTRACED StkRwREF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1129 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkUNTRACEDREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 535,329 => (* P132 Type (158): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 536,377 => (* P133 OpenArrayType (205): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1141 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 537,330 => (* P134 Type (158): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 538 => (* P135 FixedArrayType (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;

              | 539,220 => (* P136 EnumTypeLt (207): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1156 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 540,221 => (* P137 EnumType (209): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1171 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 541 => (* P138 EnumLitList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1188 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 542 => (* P139 EnumLitList (208): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1191 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 543,333 => (* P140 EnumLitPlus (210): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1194 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 544,332 => (* P141 EnumLitPlus (210): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1197 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 545,331 => (* P142 EnumLit (211): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1200 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 546,334 => (* P143 Type (158): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 547 => (* P144 FieldDeclList (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1222 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 548,356 => (* P145 FieldDeclList (212): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 212;
                (* line 1230 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 549,335 => (* P146 FieldDeclPlus (213): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1239 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 550,355 => (* P147 FieldDeclPlus (213): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 551,217 => (* P148 RecTypeLt (214): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1254 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 552,256 => (* P149 Type (158): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1280 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 553 => (* P150 MethodDeclList (215): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 215;
                (* line 1302 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 554 => (* P151 MethodDeclList (215): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1310 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 555,370 => (* P152 MethodDeclList (215): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1315 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 556,371 => (* P153 MethodDeclPlus (216): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1324 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 557,359 => (* P154 MethodDeclPlus (216): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1327 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 558,358 => (* P155 MethodDeclLt (218): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1339 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] ) ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 559,369 => (* P156 MethodDecl (217): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 217;
                (* line 1360 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 560 => (* P157 OverrideList (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1390 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 561 => (* P158 OverrideList (220): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1398 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 562,374 => (* P159 OverrideList (220): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1403 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 563,375 => (* P160 OverridePlus (221): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1412 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 564,373 => (* P161 OverridePlus (221): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 221;
                (* line 1415 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 565,372 => (* P162 OverrideLt (223): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 223;
                (* line 1427 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 566,376 => (* P163 Override (222): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1433 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 567 => (* P164 Brand (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1445 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 568 => (* P165 Brand (224): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1450 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 569,357 => (* P166 Brand (224): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1455 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 570 => (* P167 Supertype (225): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 225;
                (* line 1462 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 571 => (* P168 Supertype (225): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1468 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 572 => (* P169 Supertype (225): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1477 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 573,257 => (* P170 ObjTypeLt (227): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 227;
                (* line 1488 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 574,264 => (* P171 ObjType (226): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 226;
                (* line 1514 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 575 => (* P172 Type (158): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 576,216 => (* P173 ProcTypeLt (228): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1538 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*)
                     
              | 577,362 => (* P174 Type (158): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1553 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 578,364 => (* P175 Signature (219): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1561 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 579,261 => (* P176 Formals (229): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1581 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 580 => (* P177 FormalsList (232): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 232;
                (* line 1600 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 581,367 => (* P178 FormalsList (232): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 232;

              | 582,360 => (* P179 FormalPlus (233): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 233;
                (* line 1605 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 583,368 => (* P180 FormalPlus (233): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1615 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 584 => (* P181 FormalLt (235): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 235;
                (* line 1619 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 585,259 => (* P182 FormalLt (235): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1632 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 586,260 => (* P183 FormalLt (235): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1646 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 587,258 => (* P184 FormalLt (235): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1659 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 588,366 => (* P185 Formal (234): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 234;
                (* line 1675 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 589 => (* P186 FormalIds (236): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;
                (* line 1730 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 590,361 => (* P187 FormalType (237): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 237;
                (* line 1741 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 591 => (* P188 FormalType (237): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 237;
                (* line 1750 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 592,365 => (* P189 FormalExpr (238): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1758 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 593 => (* P190 FormalExpr (238): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 238;
                (* line 1767 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 594,363 => (* P191 ResultType (230): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1775 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 595 => (* P192 ResultType (230): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 230;
                (* line 1782 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 596 => (* P193 Raises (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1792 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 597,262 => (* P194 Raises (231): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1798 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 598,263 => (* P195 Raises (231): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 231;
                (* line 1805 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 599,304 => (* P196 ProcDeclLt (240): StkRwPROCEDURE NonreservedIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 240;
                (* line 1812 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] ) ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* Body scope.*) 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkModule  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         END (*IF*) ; 
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END (*Block*) 
                     
              | 600,390 => (* P197 ProcDecl (242): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 242;
                (* line 1841 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 601,276 => (* P198 OptProcBody (241): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1885 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 602,277 => (* P199 ProcBodyLt (243): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 1894 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 603,278 => (* P200 OptProcBody (241): ProcBodyLt Block NonreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 241;
                (* line 1907 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 604 => (* P201 Expr (167): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;

              | 605 => (* P202 E0 (244): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 606 => (* P203 E0 (244): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1931 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 607,345 => (* P204 E1 (245): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 608,338 => (* P205 E1 (245): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 245;
                (* line 1942 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwAND 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 609 => (* P206 E2 (246): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 610 => (* P207 E2 (246): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 246;
                (* line 1953 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwNOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 611 => (* P208 E3 (247): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;

              | 612 => (* P209 E3 (247): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1963 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 613 => (* P210 E4 (248): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 614 => (* P211 E4 (248): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 1974 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 615,344 => (* P212 E5 (250): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 616,339 => (* P213 E5 (250): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 1985 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 617,340 => (* P214 E6 (252): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;

              | 618,341 => (* P215 E6 (252): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 1996 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 619,251 => (* P216 E7 (254): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2015 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 620,342 => (* P217 E7 (254): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2020 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 621,343 => (* P218 E7 (254): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2029 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 622 => (* P219 E7 (254): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;
                (* line 2038 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 623 => (* P220 E7 (254): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;

              | 624,253 => (* P221 E7 (254): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2049 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 625,352 => (* P222 E7 (254): StkIdent Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2054 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 626,349 => (* P223 E7 (254): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2063 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 627 => (* P224 E7 (254): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2072 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 628,336 => (* P225 E7 (254): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;

              | 629,254 => (* P226 Subscripts (257): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2078 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 630,350 => (* P227 SsPlusList (259): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 259;
                (* line 2087 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 631,351 => (* P228 SsPlusList (259): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 259;
                (* line 2090 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 632,252 => (* P229 Actuals (258): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2101 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 633 => (* P230 ActualList (260): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 260;
                (* line 2110 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 634,348 => (* P231 ActualList (260): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 260;
                (* line 2113 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 635,347 => (* P232 ActualList (260): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 260;
                (* line 2116 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 636,346 => (* P233 Actual (261): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2126 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 637,337 => (* P234 Actual (261): NonreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 261;
                (* line 2131 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 638 => (* P235 E8WOId (256): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2146 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 639,226 => (* P236 E8WOId (256): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2151 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 640,227 => (* P237 E8WOId (256): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2158 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 641,228 => (* P238 E8WOId (256): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2165 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 642,229 => (* P239 E8WOId (256): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2175 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 643,230 => (* P240 E8WOId (256): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2185 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 644,231 => (* P241 E8WOId (256): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2192 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 645,232 => (* P242 E8WOId (256): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2199 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 646,235 => (* P243 E8WOId (256): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2207 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 647,236 => (* P244 E8WOId (256): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2214 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 648,233 => (* P245 E8WOId (256): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2221 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 649,234 => (* P246 E8WOId (256): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;
                (* line 2223 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 650,255 => (* P247 E8WOId (256): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;

              | 651,238 => (* P248 ExprRelOp (249): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2227 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 652,239 => (* P249 ExprRelOp (249): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2228 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 653,240 => (* P250 ExprRelOp (249): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2229 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 654,241 => (* P251 ExprRelOp (249): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2230 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 655,242 => (* P252 ExprRelOp (249): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2231 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 656,243 => (* P253 ExprRelOp (249): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2232 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 657,237 => (* P254 ExprRelOp (249): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2233 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 658,244 => (* P255 ExprAddOp (251): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2236 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 659,245 => (* P256 ExprAddOp (251): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2237 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 660,246 => (* P257 ExprAddOp (251): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2238 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 661,249 => (* P258 ExprMulOp (253): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2240 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 662,250 => (* P259 ExprMulOp (253): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2241 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 663,247 => (* P260 ExprMulOp (253): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2242 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 664,248 => (* P261 ExprMulOp (253): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2243 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 665,224 => (* P262 ExprUnaryAddOp (255): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 666,225 => (* P263 ExprUnaryAddOp (255): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2247 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 667 => (* P264 BlockLt (262): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 262;
                (* line 2252 of "FM3Parser.lalr" *)
                
                     
              | 668,279 => (* P265 Block (139): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 139;
                (* line 2256 of "FM3Parser.lalr" *)
                
                     
              | 669,380 => (* P266 BlockDecl (263): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2262 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 670,384 => (* P267 BlockDecl (263): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2266 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 671,398 => (* P268 BlockDecl (263): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2270 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 672,389 => (* P269 BlockDecl (263): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2274 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 673,396 => (* P270 BlockDecl (263): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2278 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 674,387 => (* P271 BlockDecl (263): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2282 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 675 => (* P272 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2290 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 676 => (* P273 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2298 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 677,397 => (* P274 BlockDeclPlus (265): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;
                (* line 2307 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 678,399 => (* P275 BlockDeclPlus (265): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 265;
                (* line 2312 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 679 => (* P276 StmtList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 2331 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 680,394 => (* P277 StmtList (135): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 135;
                (* line 2339 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 681,395 => (* P278 StmtPlus (266): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 266;
                (* line 2347 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 682,392 => (* P279 StmtPlus (266): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 266;
                (* line 2350 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 683,393 => (* P280 Stmt (267): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 267;

              | 684,391 => (* P281 AssignStmt (268): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 268;
                (* line 2364 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

