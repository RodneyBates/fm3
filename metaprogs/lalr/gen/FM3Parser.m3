
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2024 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 107;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 258;
   yyTableMax               = 933;
   yyNTableMax              = 1015;
   yyFirstReadState         = 1;
   yyLastReadState          = 194;
   yyFirstReadTermState             = 195;
   yyLastReadTermState              = 292;
   yyLastReadNontermState           = 388;
   yyFirstReduceState               = 389;
   yyLastReduceState                = 653;
   yyStartState             = 1;
   yyStopState              = 389;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   1]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   2])
         , (*   8*) ADR (yyTComb [   3]) , (*   9*) ADR (yyTComb [   0])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   0])
         , (*  12*) ADR (yyTComb [   4]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   0]) , (*  15*) ADR (yyTComb [   1])
         , (*  16*) ADR (yyTComb [   5]) , (*  17*) ADR (yyTComb [   3])
         , (*  18*) ADR (yyTComb [   6]) , (*  19*) ADR (yyTComb [   7])
         , (*  20*) ADR (yyTComb [   4]) , (*  21*) ADR (yyTComb [   8])
         , (*  22*) ADR (yyTComb [   9]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   1])
         , (*  26*) ADR (yyTComb [  10]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [  11]) , (*  29*) ADR (yyTComb [   6])
         , (*  30*) ADR (yyTComb [   0]) , (*  31*) ADR (yyTComb [  12])
         , (*  32*) ADR (yyTComb [   1]) , (*  33*) ADR (yyTComb [  13])
         , (*  34*) ADR (yyTComb [   9]) , (*  35*) ADR (yyTComb [  68])
         , (*  36*) ADR (yyTComb [  69]) , (*  37*) ADR (yyTComb [  13])
         , (*  38*) ADR (yyTComb [  12]) , (*  39*) ADR (yyTComb [   0])
         , (*  40*) ADR (yyTComb [   0]) , (*  41*) ADR (yyTComb [   0])
         , (*  42*) ADR (yyTComb [  99]) , (*  43*) ADR (yyTComb [  14])
         , (*  44*) ADR (yyTComb [ 110]) , (*  45*) ADR (yyTComb [   5])
         , (*  46*) ADR (yyTComb [   9]) , (*  47*) ADR (yyTComb [  15])
         , (*  48*) ADR (yyTComb [  18]) , (*  49*) ADR (yyTComb [   2])
         , (*  50*) ADR (yyTComb [ 111]) , (*  51*) ADR (yyTComb [  19])
         , (*  52*) ADR (yyTComb [ 121]) , (*  53*) ADR (yyTComb [ 139])
         , (*  54*) ADR (yyTComb [   0]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [   0]) , (*  57*) ADR (yyTComb [ 167])
         , (*  58*) ADR (yyTComb [  20]) , (*  59*) ADR (yyTComb [ 184])
         , (*  60*) ADR (yyTComb [  19]) , (*  61*) ADR (yyTComb [ 246])
         , (*  62*) ADR (yyTComb [   0]) , (*  63*) ADR (yyTComb [ 283])
         , (*  64*) ADR (yyTComb [   0]) , (*  65*) ADR (yyTComb [ 304])
         , (*  66*) ADR (yyTComb [   0]) , (*  67*) ADR (yyTComb [ 342])
         , (*  68*) ADR (yyTComb [   0]) , (*  69*) ADR (yyTComb [ 360])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 398])
         , (*  72*) ADR (yyTComb [   5]) , (*  73*) ADR (yyTComb [ 193])
         , (*  74*) ADR (yyTComb [ 458]) , (*  75*) ADR (yyTComb [  21])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [ 496])
         , (*  78*) ADR (yyTComb [ 545]) , (*  79*) ADR (yyTComb [ 605])
         , (*  80*) ADR (yyTComb [  46]) , (*  81*) ADR (yyTComb [   0])
         , (*  82*) ADR (yyTComb [  52]) , (*  83*) ADR (yyTComb [  29])
         , (*  84*) ADR (yyTComb [  24]) , (*  85*) ADR (yyTComb [ 643])
         , (*  86*) ADR (yyTComb [   3]) , (*  87*) ADR (yyTComb [  93])
         , (*  88*) ADR (yyTComb [   0]) , (*  89*) ADR (yyTComb [   1])
         , (*  90*) ADR (yyTComb [   2]) , (*  91*) ADR (yyTComb [   4])
         , (*  92*) ADR (yyTComb [ 696]) , (*  93*) ADR (yyTComb [   9])
         , (*  94*) ADR (yyTComb [  12]) , (*  95*) ADR (yyTComb [   4])
         , (*  96*) ADR (yyTComb [  91]) , (*  97*) ADR (yyTComb [  93])
         , (*  98*) ADR (yyTComb [   0]) , (*  99*) ADR (yyTComb [  66])
         , (* 100*) ADR (yyTComb [  67]) , (* 101*) ADR (yyTComb [  73])
         , (* 102*) ADR (yyTComb [ 148]) , (* 103*) ADR (yyTComb [  47])
         , (* 104*) ADR (yyTComb [ 126]) , (* 105*) ADR (yyTComb [ 142])
         , (* 106*) ADR (yyTComb [   0]) , (* 107*) ADR (yyTComb [   0])
         , (* 108*) ADR (yyTComb [ 485]) , (* 109*) ADR (yyTComb [   0])
         , (* 110*) ADR (yyTComb [ 533]) , (* 111*) ADR (yyTComb [ 142])
         , (* 112*) ADR (yyTComb [  71]) , (* 113*) ADR (yyTComb [  74])
         , (* 114*) ADR (yyTComb [ 151]) , (* 115*) ADR (yyTComb [  56])
         , (* 116*) ADR (yyTComb [ 158]) , (* 117*) ADR (yyTComb [   0])
         , (* 118*) ADR (yyTComb [   6]) , (* 119*) ADR (yyTComb [ 135])
         , (* 120*) ADR (yyTComb [  94]) , (* 121*) ADR (yyTComb [   5])
         , (* 122*) ADR (yyTComb [  93]) , (* 123*) ADR (yyTComb [   0])
         , (* 124*) ADR (yyTComb [   7]) , (* 125*) ADR (yyTComb [  94])
         , (* 126*) ADR (yyTComb [   0]) , (* 127*) ADR (yyTComb [ 102])
         , (* 128*) ADR (yyTComb [ 689]) , (* 129*) ADR (yyTComb [ 691])
         , (* 130*) ADR (yyTComb [ 105]) , (* 131*) ADR (yyTComb [ 161])
         , (* 132*) ADR (yyTComb [   0]) , (* 133*) ADR (yyTComb [ 113])
         , (* 134*) ADR (yyTComb [ 730]) , (* 135*) ADR (yyTComb [ 163])
         , (* 136*) ADR (yyTComb [ 357]) , (* 137*) ADR (yyTComb [ 746])
         , (* 138*) ADR (yyTComb [ 124]) , (* 139*) ADR (yyTComb [ 125])
         , (* 140*) ADR (yyTComb [ 749]) , (* 141*) ADR (yyTComb [ 765])
         , (* 142*) ADR (yyTComb [ 135]) , (* 143*) ADR (yyTComb [ 138])
         , (* 144*) ADR (yyTComb [ 138]) , (* 145*) ADR (yyTComb [ 169])
         , (* 146*) ADR (yyTComb [   0]) , (* 147*) ADR (yyTComb [ 126])
         , (* 148*) ADR (yyTComb [ 172]) , (* 149*) ADR (yyTComb [   0])
         , (* 150*) ADR (yyTComb [   1]) , (* 151*) ADR (yyTComb [   0])
         , (* 152*) ADR (yyTComb [   8]) , (* 153*) ADR (yyTComb [ 165])
         , (* 154*) ADR (yyTComb [   7]) , (* 155*) ADR (yyTComb [ 237])
         , (* 156*) ADR (yyTComb [  10]) , (* 157*) ADR (yyTComb [  41])
         , (* 158*) ADR (yyTComb [ 218]) , (* 159*) ADR (yyTComb [   0])
         , (* 160*) ADR (yyTComb [ 174]) , (* 161*) ADR (yyTComb [ 149])
         , (* 162*) ADR (yyTComb [ 151]) , (* 163*) ADR (yyTComb [ 178])
         , (* 164*) ADR (yyTComb [  17]) , (* 165*) ADR (yyTComb [ 154])
         , (* 166*) ADR (yyTComb [ 190]) , (* 167*) ADR (yyTComb [ 193])
         , (* 168*) ADR (yyTComb [   0]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [ 445]) , (* 171*) ADR (yyTComb [   2])
         , (* 172*) ADR (yyTComb [  30]) , (* 173*) ADR (yyTComb [  34])
         , (* 174*) ADR (yyTComb [ 165]) , (* 175*) ADR (yyTComb [ 196])
         , (* 176*) ADR (yyTComb [ 209]) , (* 177*) ADR (yyTComb [   0])
         , (* 178*) ADR (yyTComb [ 209]) , (* 179*) ADR (yyTComb [ 230])
         , (* 180*) ADR (yyTComb [ 215]) , (* 181*) ADR (yyTComb [ 555])
         , (* 182*) ADR (yyTComb [ 791]) , (* 183*) ADR (yyTComb [ 776])
         , (* 184*) ADR (yyTComb [  36]) , (* 185*) ADR (yyTComb [ 188])
         , (* 186*) ADR (yyTComb [ 218]) , (* 187*) ADR (yyTComb [ 235])
         , (* 188*) ADR (yyTComb [ 236]) , (* 189*) ADR (yyTComb [ 240])
         , (* 190*) ADR (yyTComb [ 774]) , (* 191*) ADR (yyTComb [ 826])
         , (* 192*) ADR (yyTComb [ 551]) , (* 193*) ADR (yyTComb [ 212])
         , (* 194*) ADR (yyTComb [ 241])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 108]) , (*   1*) ADR (yyNComb [ 108])
         , (*   2*) ADR (yyNComb [ 108]) , (*   3*) ADR (yyNComb [ 108])
         , (*   4*) ADR (yyNComb [ 108]) , (*   5*) ADR (yyNComb [ 108])
         , (*   6*) ADR (yyNComb [ 108]) , (*   7*) ADR (yyNComb [ 108])
         , (*   8*) ADR (yyNComb [ 108]) , (*   9*) ADR (yyNComb [ 108])
         , (*  10*) ADR (yyNComb [ 108]) , (*  11*) ADR (yyNComb [ 108])
         , (*  12*) ADR (yyNComb [ 108]) , (*  13*) ADR (yyNComb [ 108])
         , (*  14*) ADR (yyNComb [ 108]) , (*  15*) ADR (yyNComb [ 108])
         , (*  16*) ADR (yyNComb [ 108]) , (*  17*) ADR (yyNComb [ 108])
         , (*  18*) ADR (yyNComb [ 110]) , (*  19*) ADR (yyNComb [ 109])
         , (*  20*) ADR (yyNComb [ 108]) , (*  21*) ADR (yyNComb [ 108])
         , (*  22*) ADR (yyNComb [ 108]) , (*  23*) ADR (yyNComb [ 108])
         , (*  24*) ADR (yyNComb [ 108]) , (*  25*) ADR (yyNComb [ 108])
         , (*  26*) ADR (yyNComb [ 108]) , (*  27*) ADR (yyNComb [ 108])
         , (*  28*) ADR (yyNComb [ 108]) , (*  29*) ADR (yyNComb [ 108])
         , (*  30*) ADR (yyNComb [ 108]) , (*  31*) ADR (yyNComb [ 108])
         , (*  32*) ADR (yyNComb [ 108]) , (*  33*) ADR (yyNComb [ 108])
         , (*  34*) ADR (yyNComb [ 108]) , (*  35*) ADR (yyNComb [ 108])
         , (*  36*) ADR (yyNComb [ 110]) , (*  37*) ADR (yyNComb [ 108])
         , (*  38*) ADR (yyNComb [ 110]) , (*  39*) ADR (yyNComb [ 108])
         , (*  40*) ADR (yyNComb [ 159]) , (*  41*) ADR (yyNComb [ 108])
         , (*  42*) ADR (yyNComb [ 108]) , (*  43*) ADR (yyNComb [ 108])
         , (*  44*) ADR (yyNComb [ 108]) , (*  45*) ADR (yyNComb [ 113])
         , (*  46*) ADR (yyNComb [ 108]) , (*  47*) ADR (yyNComb [ 108])
         , (*  48*) ADR (yyNComb [ 114]) , (*  49*) ADR (yyNComb [ 186])
         , (*  50*) ADR (yyNComb [ 108]) , (*  51*) ADR (yyNComb [ 108])
         , (*  52*) ADR (yyNComb [ 112]) , (*  53*) ADR (yyNComb [ 108])
         , (*  54*) ADR (yyNComb [ 162]) , (*  55*) ADR (yyNComb [ 142])
         , (*  56*) ADR (yyNComb [ 175]) , (*  57*) ADR (yyNComb [ 108])
         , (*  58*) ADR (yyNComb [ 108]) , (*  59*) ADR (yyNComb [ 111])
         , (*  60*) ADR (yyNComb [ 222]) , (*  61*) ADR (yyNComb [ 108])
         , (*  62*) ADR (yyNComb [ 240]) , (*  63*) ADR (yyNComb [ 108])
         , (*  64*) ADR (yyNComb [ 187]) , (*  65*) ADR (yyNComb [ 108])
         , (*  66*) ADR (yyNComb [ 258]) , (*  67*) ADR (yyNComb [ 124])
         , (*  68*) ADR (yyNComb [ 269]) , (*  69*) ADR (yyNComb [ 127])
         , (*  70*) ADR (yyNComb [ 194]) , (*  71*) ADR (yyNComb [ 126])
         , (*  72*) ADR (yyNComb [ 246]) , (*  73*) ADR (yyNComb [ 172])
         , (*  74*) ADR (yyNComb [ 123]) , (*  75*) ADR (yyNComb [ 108])
         , (*  76*) ADR (yyNComb [ 283]) , (*  77*) ADR (yyNComb [ 108])
         , (*  78*) ADR (yyNComb [ 127]) , (*  79*) ADR (yyNComb [ 126])
         , (*  80*) ADR (yyNComb [ 108]) , (*  81*) ADR (yyNComb [ 300])
         , (*  82*) ADR (yyNComb [ 108]) , (*  83*) ADR (yyNComb [ 318])
         , (*  84*) ADR (yyNComb [ 108]) , (*  85*) ADR (yyNComb [ 124])
         , (*  86*) ADR (yyNComb [ 108]) , (*  87*) ADR (yyNComb [ 108])
         , (*  88*) ADR (yyNComb [ 139]) , (*  89*) ADR (yyNComb [ 113])
         , (*  90*) ADR (yyNComb [ 336]) , (*  91*) ADR (yyNComb [ 108])
         , (*  92*) ADR (yyNComb [ 108]) , (*  93*) ADR (yyNComb [ 386])
         , (*  94*) ADR (yyNComb [ 115]) , (*  95*) ADR (yyNComb [ 122])
         , (*  96*) ADR (yyNComb [ 116]) , (*  97*) ADR (yyNComb [ 126])
         , (*  98*) ADR (yyNComb [ 161]) , (*  99*) ADR (yyNComb [ 169])
         , (* 100*) ADR (yyNComb [ 108]) , (* 101*) ADR (yyNComb [ 118])
         , (* 102*) ADR (yyNComb [ 111]) , (* 103*) ADR (yyNComb [ 225])
         , (* 104*) ADR (yyNComb [ 108]) , (* 105*) ADR (yyNComb [ 145])
         , (* 106*) ADR (yyNComb [ 433]) , (* 107*) ADR (yyNComb [ 227])
         , (* 108*) ADR (yyNComb [ 153]) , (* 109*) ADR (yyNComb [ 484])
         , (* 110*) ADR (yyNComb [ 183]) , (* 111*) ADR (yyNComb [ 108])
         , (* 112*) ADR (yyNComb [ 126]) , (* 113*) ADR (yyNComb [ 108])
         , (* 114*) ADR (yyNComb [ 108]) , (* 115*) ADR (yyNComb [ 111])
         , (* 116*) ADR (yyNComb [ 197]) , (* 117*) ADR (yyNComb [ 361])
         , (* 118*) ADR (yyNComb [ 111]) , (* 119*) ADR (yyNComb [ 229])
         , (* 120*) ADR (yyNComb [ 119]) , (* 121*) ADR (yyNComb [ 369])
         , (* 122*) ADR (yyNComb [ 108]) , (* 123*) ADR (yyNComb [ 487])
         , (* 124*) ADR (yyNComb [ 108]) , (* 125*) ADR (yyNComb [ 108])
         , (* 126*) ADR (yyNComb [ 500]) , (* 127*) ADR (yyNComb [ 108])
         , (* 128*) ADR (yyNComb [ 282]) , (* 129*) ADR (yyNComb [ 114])
         , (* 130*) ADR (yyNComb [ 108]) , (* 131*) ADR (yyNComb [ 115])
         , (* 132*) ADR (yyNComb [ 565]) , (* 133*) ADR (yyNComb [ 108])
         , (* 134*) ADR (yyNComb [ 437]) , (* 135*) ADR (yyNComb [ 110])
         , (* 136*) ADR (yyNComb [ 616]) , (* 137*) ADR (yyNComb [ 319])
         , (* 138*) ADR (yyNComb [ 108]) , (* 139*) ADR (yyNComb [ 108])
         , (* 140*) ADR (yyNComb [ 507]) , (* 141*) ADR (yyNComb [ 412])
         , (* 142*) ADR (yyNComb [ 108]) , (* 143*) ADR (yyNComb [ 108])
         , (* 144*) ADR (yyNComb [ 245]) , (* 145*) ADR (yyNComb [ 220])
         , (* 146*) ADR (yyNComb [ 300]) , (* 147*) ADR (yyNComb [ 108])
         , (* 148*) ADR (yyNComb [ 108]) , (* 149*) ADR (yyNComb [ 666])
         , (* 150*) ADR (yyNComb [ 108]) , (* 151*) ADR (yyNComb [ 633])
         , (* 152*) ADR (yyNComb [ 108]) , (* 153*) ADR (yyNComb [ 108])
         , (* 154*) ADR (yyNComb [ 692]) , (* 155*) ADR (yyNComb [ 120])
         , (* 156*) ADR (yyNComb [ 705]) , (* 157*) ADR (yyNComb [ 737])
         , (* 158*) ADR (yyNComb [ 108]) , (* 159*) ADR (yyNComb [ 450])
         , (* 160*) ADR (yyNComb [ 108]) , (* 161*) ADR (yyNComb [ 113])
         , (* 162*) ADR (yyNComb [ 108]) , (* 163*) ADR (yyNComb [ 116])
         , (* 164*) ADR (yyNComb [ 108]) , (* 165*) ADR (yyNComb [ 108])
         , (* 166*) ADR (yyNComb [ 108]) , (* 167*) ADR (yyNComb [ 108])
         , (* 168*) ADR (yyNComb [ 117]) , (* 169*) ADR (yyNComb [ 515])
         , (* 170*) ADR (yyNComb [ 821]) , (* 171*) ADR (yyNComb [ 108])
         , (* 172*) ADR (yyNComb [ 770]) , (* 173*) ADR (yyNComb [ 108])
         , (* 174*) ADR (yyNComb [ 108]) , (* 175*) ADR (yyNComb [ 108])
         , (* 176*) ADR (yyNComb [ 108]) , (* 177*) ADR (yyNComb [ 110])
         , (* 178*) ADR (yyNComb [ 147]) , (* 179*) ADR (yyNComb [ 108])
         , (* 180*) ADR (yyNComb [ 108]) , (* 181*) ADR (yyNComb [ 164])
         , (* 182*) ADR (yyNComb [ 517]) , (* 183*) ADR (yyNComb [ 865])
         , (* 184*) ADR (yyNComb [ 108]) , (* 185*) ADR (yyNComb [ 108])
         , (* 186*) ADR (yyNComb [ 108]) , (* 187*) ADR (yyNComb [ 108])
         , (* 188*) ADR (yyNComb [ 297]) , (* 189*) ADR (yyNComb [ 108])
         , (* 190*) ADR (yyNComb [ 330]) , (* 191*) ADR (yyNComb [ 519])
         , (* 192*) ADR (yyNComb [ 395]) , (* 193*) ADR (yyNComb [ 108])
         , (* 194*) ADR (yyNComb [ 108])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)    0
         , (*   4*)    0 , (*   5*)    0 , (*   6*)    0 , (*   7*)    0
         , (*   8*)    0 , (*   9*)    0 , (*  10*)  181 , (*  11*)  182
         , (*  12*)    0 , (*  13*)    0 , (*  14*)   18 , (*  15*)    0
         , (*  16*)    0 , (*  17*)    0 , (*  18*)    0 , (*  19*)    0
         , (*  20*)    0 , (*  21*)    0 , (*  22*)    0 , (*  23*)  163
         , (*  24*)  178 , (*  25*)  179 , (*  26*)    0 , (*  27*)    0
         , (*  28*)    0 , (*  29*)    0 , (*  30*)  183 , (*  31*)    0
         , (*  32*)    0 , (*  33*)    0 , (*  34*)    0 , (*  35*)   36
         , (*  36*)    0 , (*  37*)    0 , (*  38*)    0 , (*  39*)  136
         , (*  40*)  136 , (*  41*)    0 , (*  42*)    0 , (*  43*)    0
         , (*  44*)    0 , (*  45*)   48 , (*  46*)    0 , (*  47*)    0
         , (*  48*)    0 , (*  49*)  103 , (*  50*)    0 , (*  51*)    0
         , (*  52*)    0 , (*  53*)    0 , (*  54*)  154 , (*  55*)   72
         , (*  56*)  154 , (*  57*)   61 , (*  58*)    0 , (*  59*)    0
         , (*  60*)   83 , (*  61*)    0 , (*  62*)  154 , (*  63*)   84
         , (*  64*)  154 , (*  65*)   77 , (*  66*)  154 , (*  67*)   85
         , (*  68*)   72 , (*  69*)   78 , (*  70*)   72 , (*  71*)   79
         , (*  72*)   73 , (*  73*)    0 , (*  74*)   59 , (*  75*)    0
         , (*  76*)  154 , (*  77*)    0 , (*  78*)    0 , (*  79*)    0
         , (*  80*)    0 , (*  81*)  154 , (*  82*)    0 , (*  83*)  154
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)   96
         , (*  88*)  121 , (*  89*)    0 , (*  90*)  154 , (*  91*)    0
         , (*  92*)    0 , (*  93*)   49 , (*  94*)    0 , (*  95*)   97
         , (*  96*)  155 , (*  97*)  121 , (*  98*)  144 , (*  99*)  102
         , (* 100*)    0 , (* 101*)    0 , (* 102*)    0 , (* 103*)    0
         , (* 104*)    0 , (* 105*)    0 , (* 106*)  136 , (* 107*)  144
         , (* 108*)    0 , (* 109*)  136 , (* 110*)    0 , (* 111*)    0
         , (* 112*)  115 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  154 , (* 118*)    0 , (* 119*)    0
         , (* 120*)  155 , (* 121*)  103 , (* 122*)    0 , (* 123*)  154
         , (* 124*)    0 , (* 125*)    0 , (* 126*)  154 , (* 127*)    0
         , (* 128*)  129 , (* 129*)    0 , (* 130*)    0 , (* 131*)    0
         , (* 132*)  136 , (* 133*)    0 , (* 134*)  137 , (* 135*)    0
         , (* 136*)  115 , (* 137*)  115 , (* 138*)    0 , (* 139*)    0
         , (* 140*)  103 , (* 141*)  103 , (* 142*)    0 , (* 143*)    0
         , (* 144*)    0 , (* 145*)    0 , (* 146*)  192 , (* 147*)    0
         , (* 148*)    0 , (* 149*)  170 , (* 150*)    0 , (* 151*)  172
         , (* 152*)    0 , (* 153*)    0 , (* 154*)   72 , (* 155*)    0
         , (* 156*)  154 , (* 157*)  183 , (* 158*)    0 , (* 159*)  161
         , (* 160*)    0 , (* 161*)    0 , (* 162*)    0 , (* 163*)    0
         , (* 164*)    0 , (* 165*)    0 , (* 166*)    0 , (* 167*)    0
         , (* 168*)  190 , (* 169*)  191 , (* 170*)    0 , (* 171*)    0
         , (* 172*)  154 , (* 173*)    0 , (* 174*)    0 , (* 175*)    0
         , (* 176*)    0 , (* 177*)  188 , (* 178*)    0 , (* 179*)    0
         , (* 180*)    0 , (* 181*)    0 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)    0 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  389} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType {  15,   16}
         , (*  10*) yyTCombType { 150,  151} , (*  11*) yyTCombType { 171,  172}
         , (*  12*) yyTCombType {  89,   90} , (*  13*) yyTCombType {   0,    0}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {   0,    0}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  27,   28}
         , (*  20*) yyTCombType {  32,   33} , (*  21*) yyTCombType {  49,  520}
         , (*  22*) yyTCombType {  86,  260} , (*  23*) yyTCombType {  95,  527}
         , (*  24*) yyTCombType { 121,  416} , (*  25*) yyTCombType { 118,  533}
         , (*  26*) yyTCombType { 124,  270} , (*  27*) yyTCombType { 152,  286}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 156,  416}
         , (*  30*) yyTCombType {  13,  200} , (*  31*) yyTCombType {  94,  526}
         , (*  32*) yyTCombType {   1,  415} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  88,  416}
         , (*  36*) yyTCombType { 164,  165} , (*  37*) yyTCombType {   1,  415}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,    8}
         , (*  40*) yyTCombType {  89,  540} , (*  41*) yyTCombType {  90,  541}
         , (*  42*) yyTCombType {  88,  416} , (*  43*) yyTCombType {  91,  261}
         , (*  44*) yyTCombType {  93,  520} , (*  45*) yyTCombType { 154,   55}
         , (*  46*) yyTCombType {  95,  527} , (*  47*) yyTCombType {  94,   95}
         , (*  48*) yyTCombType { 118,  119} , (*  49*) yyTCombType { 172,  648}
         , (*  50*) yyTCombType { 157,  645} , (*  51*) yyTCombType {  93,  520}
         , (*  52*) yyTCombType {  41,  220} , (*  53*) yyTCombType { 173,  174}
         , (*  54*) yyTCombType {  94,  526} , (*  55*) yyTCombType { 184,  185}
         , (*  56*) yyTCombType {   0,    0} , (*  57*) yyTCombType {   0,    0}
         , (*  58*) yyTCombType {   0,    0} , (*  59*) yyTCombType {   1,  197}
         , (*  60*) yyTCombType { 157,  645} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {  84,   64}
         , (*  66*) yyTCombType {   9,   10} , (*  67*) yyTCombType {  15,  425}
         , (*  68*) yyTCombType {   9,   22} , (*  69*) yyTCombType {  17,  202}
         , (*  70*) yyTCombType {  20,  204} , (*  71*) yyTCombType {  25,  206}
         , (*  72*) yyTCombType {  15,  425} , (*  73*) yyTCombType {  29,  208}
         , (*  74*) yyTCombType {  17,   18} , (*  75*) yyTCombType {  20,   21}
         , (*  76*) yyTCombType {  34,  214} , (*  77*) yyTCombType {  35,  457}
         , (*  78*) yyTCombType {  36,  458} , (*  79*) yyTCombType {  37,  216}
         , (*  80*) yyTCombType {  38,  491} , (*  81*) yyTCombType {  45,  514}
         , (*  82*) yyTCombType {  35,  457} , (*  83*) yyTCombType {  36,  458}
         , (*  84*) yyTCombType {  38,   39} , (*  85*) yyTCombType {  46,  224}
         , (*  86*) yyTCombType {  47,   48} , (*  87*) yyTCombType {  35,  457}
         , (*  88*) yyTCombType {  36,  458} , (*  89*) yyTCombType {  60,  603}
         , (*  90*) yyTCombType {  60,  603} , (*  91*) yyTCombType {  47,  515}
         , (*  92*) yyTCombType {  72,  227} , (*  93*) yyTCombType {  72,  228}
         , (*  94*) yyTCombType {  84,  259} , (*  95*) yyTCombType {   3,  195}
         , (*  96*) yyTCombType {   4,  196} , (*  97*) yyTCombType {   7,  198}
         , (*  98*) yyTCombType {   8,  199} , (*  99*) yyTCombType {  12,   13}
         , (* 100*) yyTCombType {  16,  201} , (* 101*) yyTCombType {  18,   15}
         , (* 102*) yyTCombType {  19,  203} , (* 103*) yyTCombType {  21,  205}
         , (* 104*) yyTCombType {  22,   23} , (* 105*) yyTCombType {  26,  207}
         , (* 106*) yyTCombType {  28,   29} , (* 107*) yyTCombType {  31,  210}
         , (* 108*) yyTCombType {  33,   34} , (* 109*) yyTCombType {  43,  222}
         , (* 110*) yyTCombType {  42,  448} , (* 111*) yyTCombType {  35,  457}
         , (* 112*) yyTCombType {  36,  458} , (* 113*) yyTCombType {  48,  223}
         , (* 114*) yyTCombType {  51,  226} , (* 115*) yyTCombType {  58,  229}
         , (* 116*) yyTCombType {  75,  255} , (* 117*) yyTCombType {  80,   81}
         , (* 118*) yyTCombType {  42,  448} , (* 119*) yyTCombType {  35,  457}
         , (* 120*) yyTCombType {  36,  458} , (* 121*) yyTCombType {  44,  544}
         , (* 122*) yyTCombType {  82,  258} , (* 123*) yyTCombType {  82,   83}
         , (* 124*) yyTCombType {  83,   61} , (* 125*) yyTCombType {  35,  457}
         , (* 126*) yyTCombType {  36,  458} , (* 127*) yyTCombType {  80,  256}
         , (* 128*) yyTCombType {  87,  417} , (* 129*) yyTCombType {  44,  494}
         , (* 130*) yyTCombType {  50,  489} , (* 131*) yyTCombType {  35,  457}
         , (* 132*) yyTCombType {  36,  458} , (* 133*) yyTCombType {  96,  417}
         , (* 134*) yyTCombType {  42,  448} , (* 135*) yyTCombType {  97,  416}
         , (* 136*) yyTCombType {  99,  553} , (* 137*) yyTCombType { 100,  266}
         , (* 138*) yyTCombType {  42,  448} , (* 139*) yyTCombType { 101,  102}
         , (* 140*) yyTCombType {  52,  491} , (* 141*) yyTCombType {  42,  448}
         , (* 142*) yyTCombType { 103,  225} , (* 143*) yyTCombType { 101,  417}
         , (* 144*) yyTCombType {  42,  448} , (* 145*) yyTCombType {  44,  494}
         , (* 146*) yyTCombType {  50,  489} , (* 147*) yyTCombType { 112,  444}
         , (* 148*) yyTCombType { 111,  267} , (* 149*) yyTCombType {  44,  544}
         , (* 150*) yyTCombType { 113,  268} , (* 151*) yyTCombType { 115,   42}
         , (* 152*) yyTCombType {  44,  494} , (* 153*) yyTCombType {  50,  489}
         , (* 154*) yyTCombType { 119,  534} , (* 155*) yyTCombType {  44,  494}
         , (* 156*) yyTCombType {  52,  491} , (* 157*) yyTCombType {  96,   97}
         , (* 158*) yyTCombType {  53,  493} , (* 159*) yyTCombType {  87,   88}
         , (* 160*) yyTCombType { 120,  121} , (* 161*) yyTCombType { 122,  123}
         , (* 162*) yyTCombType { 125,  126} , (* 163*) yyTCombType {  52,  491}
         , (* 164*) yyTCombType {  36,  215} , (* 165*) yyTCombType {  42,  448}
         , (* 166*) yyTCombType {  42,   43} , (* 167*) yyTCombType {  42,  448}
         , (* 168*) yyTCombType { 127,  271} , (* 169*) yyTCombType {  42,  448}
         , (* 170*) yyTCombType {  42,  448} , (* 171*) yyTCombType { 130,  273}
         , (* 172*) yyTCombType {  42,  448} , (* 173*) yyTCombType {  42,  448}
         , (* 174*) yyTCombType {  53,  493} , (* 175*) yyTCombType {  42,  448}
         , (* 176*) yyTCombType {  44,  494} , (* 177*) yyTCombType {  50,  489}
         , (* 178*) yyTCombType {  44,  494} , (* 179*) yyTCombType { 133,  276}
         , (* 180*) yyTCombType {  44,  494} , (* 181*) yyTCombType {  53,  493}
         , (* 182*) yyTCombType {  50,   51} , (* 183*) yyTCombType {  50,  489}
         , (* 184*) yyTCombType {  44,  494} , (* 185*) yyTCombType {  50,  489}
         , (* 186*) yyTCombType {  57,  437} , (* 187*) yyTCombType {  52,  491}
         , (* 188*) yyTCombType {  97,  262} , (* 189*) yyTCombType {  59,  596}
         , (* 190*) yyTCombType { 138,  279} , (* 191*) yyTCombType { 139,  280}
         , (* 192*) yyTCombType { 104,  562} , (* 193*) yyTCombType {  52,   39}
         , (* 194*) yyTCombType { 102,  263} , (* 195*) yyTCombType {  52,  491}
         , (* 196*) yyTCombType { 104,  562} , (* 197*) yyTCombType { 104,   51}
         , (* 198*) yyTCombType { 104,  562} , (* 199*) yyTCombType {  59,  596}
         , (* 200*) yyTCombType { 104,  562} , (* 201*) yyTCombType { 142,  281}
         , (* 202*) yyTCombType {  57,  437} , (* 203*) yyTCombType {  59,  596}
         , (* 204*) yyTCombType { 143,  282} , (* 205*) yyTCombType {  53,  493}
         , (* 206*) yyTCombType {  57,  437} , (* 207*) yyTCombType { 144,   99}
         , (* 208*) yyTCombType { 105,  564} , (* 209*) yyTCombType {  57,  437}
         , (* 210*) yyTCombType { 102,  264} , (* 211*) yyTCombType { 102,  265}
         , (* 212*) yyTCombType { 105,  564} , (* 213*) yyTCombType {  53,   54}
         , (* 214*) yyTCombType { 105,  106} , (* 215*) yyTCombType {  59,  596}
         , (* 216*) yyTCombType { 105,  564} , (* 217*) yyTCombType { 111,  112}
         , (* 218*) yyTCombType { 102,  416} , (* 219*) yyTCombType {  59,  596}
         , (* 220*) yyTCombType {  59,  596} , (* 221*) yyTCombType { 147,  148}
         , (* 222*) yyTCombType { 114,  115} , (* 223*) yyTCombType {  59,  596}
         , (* 224*) yyTCombType { 116,  566} , (* 225*) yyTCombType {  59,  596}
         , (* 226*) yyTCombType {  59,  596} , (* 227*) yyTCombType { 114,  445}
         , (* 228*) yyTCombType { 116,  566} , (* 229*) yyTCombType { 131,  274}
         , (* 230*) yyTCombType { 119,  269} , (* 231*) yyTCombType { 135,  277}
         , (* 232*) yyTCombType { 116,  117} , (* 233*) yyTCombType {  57,  437}
         , (* 234*) yyTCombType { 131,  275} , (* 235*) yyTCombType { 145,  283}
         , (* 236*) yyTCombType { 135,  278} , (* 237*) yyTCombType { 145,  284}
         , (* 238*) yyTCombType { 148,  285} , (* 239*) yyTCombType { 153,  154}
         , (* 240*) yyTCombType { 160,  433} , (* 241*) yyTCombType {  57,  437}
         , (* 242*) yyTCombType { 158,  159} , (* 243*) yyTCombType { 102,  557}
         , (* 244*) yyTCombType { 161,  287} , (* 245*) yyTCombType { 160,  161}
         , (* 246*) yyTCombType { 162,  163} , (* 247*) yyTCombType { 163,   24}
         , (* 248*) yyTCombType {  57,  437} , (* 249*) yyTCombType { 165,  166}
         , (* 250*) yyTCombType {  59,  596} , (* 251*) yyTCombType {  61,  437}
         , (* 252*) yyTCombType {  59,  596} , (* 253*) yyTCombType {  59,   60}
         , (* 254*) yyTCombType {  59,  596} , (* 255*) yyTCombType {  59,  596}
         , (* 256*) yyTCombType { 155,  417} , (* 257*) yyTCombType { 166,  288}
         , (* 258*) yyTCombType {  59,  596} , (* 259*) yyTCombType { 167,  168}
         , (* 260*) yyTCombType { 174,  175} , (* 261*) yyTCombType {  61,  437}
         , (* 262*) yyTCombType {  73,   56} , (* 263*) yyTCombType { 175,  289}
         , (* 264*) yyTCombType {  59,   76} , (* 265*) yyTCombType {  59,  596}
         , (* 266*) yyTCombType {  59,  596} , (* 267*) yyTCombType {  59,  596}
         , (* 268*) yyTCombType {  59,  596} , (* 269*) yyTCombType {  59,  596}
         , (* 270*) yyTCombType {  59,  596} , (* 271*) yyTCombType {  59,  596}
         , (* 272*) yyTCombType {  59,  596} , (* 273*) yyTCombType {  59,  596}
         , (* 274*) yyTCombType {  59,  596} , (* 275*) yyTCombType {  59,  596}
         , (* 276*) yyTCombType {  59,  257} , (* 277*) yyTCombType {  61,  437}
         , (* 278*) yyTCombType { 176,  398} , (* 279*) yyTCombType { 178,  443}
         , (* 280*) yyTCombType { 178,  443} , (* 281*) yyTCombType { 180,  181}
         , (* 282*) yyTCombType {  61,  437} , (* 283*) yyTCombType { 185,  186}
         , (* 284*) yyTCombType { 158,  432} , (* 285*) yyTCombType { 186,  291}
         , (* 286*) yyTCombType { 158,  162} , (* 287*) yyTCombType {  61,  437}
         , (* 288*) yyTCombType {  73,   57} , (* 289*) yyTCombType {  73,  230}
         , (* 290*) yyTCombType {  73,  231} , (* 291*) yyTCombType {  73,  232}
         , (* 292*) yyTCombType {  73,  233} , (* 293*) yyTCombType {  73,  234}
         , (* 294*) yyTCombType {  73,  235} , (* 295*) yyTCombType {  73,  236}
         , (* 296*) yyTCombType {  73,  237} , (* 297*) yyTCombType {  73,  238}
         , (* 298*) yyTCombType {  73,  239} , (* 299*) yyTCombType {  73,  240}
         , (* 300*) yyTCombType { 179,  290} , (* 301*) yyTCombType { 179,   26}
         , (* 302*) yyTCombType {  63,  577} , (* 303*) yyTCombType { 155,  156}
         , (* 304*) yyTCombType { 187,  399} , (* 305*) yyTCombType { 188,  178}
         , (* 306*) yyTCombType { 189,  190} , (* 307*) yyTCombType { 193,  194}
         , (* 308*) yyTCombType { 194,  292} , (* 309*) yyTCombType {   0,    0}
         , (* 310*) yyTCombType {   0,    0} , (* 311*) yyTCombType {   0,    0}
         , (* 312*) yyTCombType {   0,    0} , (* 313*) yyTCombType {  61,   58}
         , (* 314*) yyTCombType {  61,  437} , (* 315*) yyTCombType {  61,  437}
         , (* 316*) yyTCombType {  61,  437} , (* 317*) yyTCombType {  61,  437}
         , (* 318*) yyTCombType {  63,  577} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {  61,   62} , (* 321*) yyTCombType {   0,    0}
         , (* 322*) yyTCombType {  63,  577} , (* 323*) yyTCombType {  65,  579}
         , (* 324*) yyTCombType {   0,    0} , (* 325*) yyTCombType {  63,  577}
         , (* 326*) yyTCombType {  61,  437} , (* 327*) yyTCombType {   0,    0}
         , (* 328*) yyTCombType {  61,  437} , (* 329*) yyTCombType {  61,  437}
         , (* 330*) yyTCombType {  61,  437} , (* 331*) yyTCombType {  61,  437}
         , (* 332*) yyTCombType {  61,  437} , (* 333*) yyTCombType {  61,  437}
         , (* 334*) yyTCombType {  61,  437} , (* 335*) yyTCombType {  61,  437}
         , (* 336*) yyTCombType {  61,  437} , (* 337*) yyTCombType {  61,  437}
         , (* 338*) yyTCombType {  61,  437} , (* 339*) yyTCombType {  65,  579}
         , (* 340*) yyTCombType {   0,    0} , (* 341*) yyTCombType {   0,    0}
         , (* 342*) yyTCombType {   0,    0} , (* 343*) yyTCombType {  65,  579}
         , (* 344*) yyTCombType {   0,    0} , (* 345*) yyTCombType {  65,  579}
         , (* 346*) yyTCombType {  65,  579} , (* 347*) yyTCombType {  67,  582}
         , (* 348*) yyTCombType {   0,    0} , (* 349*) yyTCombType {  63,  577}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType {   0,    0}
         , (* 352*) yyTCombType {   0,    0} , (* 353*) yyTCombType {  63,  577}
         , (* 354*) yyTCombType {  63,  577} , (* 355*) yyTCombType {   0,    0}
         , (* 356*) yyTCombType {   0,    0} , (* 357*) yyTCombType {  63,  577}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {   0,    0}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {  67,  582}
         , (* 362*) yyTCombType {   0,    0} , (* 363*) yyTCombType {   0,    0}
         , (* 364*) yyTCombType {  63,  577} , (* 365*) yyTCombType {  69,  585}
         , (* 366*) yyTCombType {   0,    0} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType { 136,  543} , (* 369*) yyTCombType {   0,    0}
         , (* 370*) yyTCombType {  65,  579} , (* 371*) yyTCombType {   0,    0}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {   0,    0}
         , (* 374*) yyTCombType {  65,  579} , (* 375*) yyTCombType {  65,  579}
         , (* 376*) yyTCombType {   0,    0} , (* 377*) yyTCombType {  67,  582}
         , (* 378*) yyTCombType {  65,  579} , (* 379*) yyTCombType {  69,  585}
         , (* 380*) yyTCombType {   0,    0} , (* 381*) yyTCombType {  67,  582}
         , (* 382*) yyTCombType {   0,    0} , (* 383*) yyTCombType {  67,  582}
         , (* 384*) yyTCombType {  67,  582} , (* 385*) yyTCombType {  65,  579}
         , (* 386*) yyTCombType {   0,    0} , (* 387*) yyTCombType {   0,    0}
         , (* 388*) yyTCombType {   0,    0} , (* 389*) yyTCombType {   0,    0}
         , (* 390*) yyTCombType {   0,    0} , (* 391*) yyTCombType {  69,  585}
         , (* 392*) yyTCombType {   0,    0} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {   0,    0} , (* 395*) yyTCombType {  69,  585}
         , (* 396*) yyTCombType { 136,  543} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType {  69,  585}
         , (* 400*) yyTCombType { 136,  217} , (* 401*) yyTCombType {  69,  585}
         , (* 402*) yyTCombType {  69,  585} , (* 403*) yyTCombType {  71,  587}
         , (* 404*) yyTCombType { 136,  218} , (* 405*) yyTCombType { 136,   40}
         , (* 406*) yyTCombType {   0,    0} , (* 407*) yyTCombType {   0,    0}
         , (* 408*) yyTCombType {  67,  582} , (* 409*) yyTCombType { 136,  219}
         , (* 410*) yyTCombType {   0,    0} , (* 411*) yyTCombType {   0,    0}
         , (* 412*) yyTCombType {  67,  582} , (* 413*) yyTCombType {  67,  582}
         , (* 414*) yyTCombType {   0,    0} , (* 415*) yyTCombType {   0,    0}
         , (* 416*) yyTCombType {  67,  582} , (* 417*) yyTCombType {  71,  587}
         , (* 418*) yyTCombType { 136,   41} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType {   0,    0} , (* 421*) yyTCombType {   0,    0}
         , (* 422*) yyTCombType {   0,    0} , (* 423*) yyTCombType {  67,  582}
         , (* 424*) yyTCombType {   0,    0} , (* 425*) yyTCombType {   0,    0}
         , (* 426*) yyTCombType {  69,  585} , (* 427*) yyTCombType {   0,    0}
         , (* 428*) yyTCombType {  69,  585} , (* 429*) yyTCombType {  71,  587}
         , (* 430*) yyTCombType {  69,  585} , (* 431*) yyTCombType {  69,  585}
         , (* 432*) yyTCombType { 136,  221} , (* 433*) yyTCombType {  71,  587}
         , (* 434*) yyTCombType {  69,  585} , (* 435*) yyTCombType {   0,    0}
         , (* 436*) yyTCombType {   0,    0} , (* 437*) yyTCombType {  71,  587}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType {  71,  587}
         , (* 440*) yyTCombType {  71,  587} , (* 441*) yyTCombType {  69,  585}
         , (* 442*) yyTCombType {  69,  585} , (* 443*) yyTCombType {  69,  585}
         , (* 444*) yyTCombType {  69,  585} , (* 445*) yyTCombType {  69,  585}
         , (* 446*) yyTCombType {  69,  585} , (* 447*) yyTCombType {   0,    0}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {   0,    0} , (* 451*) yyTCombType {   0,    0}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType { 170,  644} , (* 455*) yyTCombType {   0,    0}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {   0,    0}
         , (* 458*) yyTCombType {   0,    0} , (* 459*) yyTCombType { 170,  209}
         , (* 460*) yyTCombType {   0,    0} , (* 461*) yyTCombType {   0,    0}
         , (* 462*) yyTCombType {   0,    0} , (* 463*) yyTCombType {  74,  594}
         , (* 464*) yyTCombType {  71,  587} , (* 465*) yyTCombType {   0,    0}
         , (* 466*) yyTCombType {  71,  587} , (* 467*) yyTCombType {   0,    0}
         , (* 468*) yyTCombType {  71,  587} , (* 469*) yyTCombType {  71,  587}
         , (* 470*) yyTCombType {   0,    0} , (* 471*) yyTCombType {   0,    0}
         , (* 472*) yyTCombType {  71,  587} , (* 473*) yyTCombType {  74,  594}
         , (* 474*) yyTCombType {   0,    0} , (* 475*) yyTCombType {   0,    0}
         , (* 476*) yyTCombType {   0,    0} , (* 477*) yyTCombType {  74,  594}
         , (* 478*) yyTCombType {   0,    0} , (* 479*) yyTCombType {  71,  587}
         , (* 480*) yyTCombType {  71,  587} , (* 481*) yyTCombType {  71,  587}
         , (* 482*) yyTCombType {  71,  587} , (* 483*) yyTCombType {  71,  587}
         , (* 484*) yyTCombType {  71,  587} , (* 485*) yyTCombType {  71,  587}
         , (* 486*) yyTCombType {  71,  587} , (* 487*) yyTCombType {  71,  587}
         , (* 488*) yyTCombType { 170,   31} , (* 489*) yyTCombType {  74,  594}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {   0,    0}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType {  74,  594}
         , (* 494*) yyTCombType {  74,  594} , (* 495*) yyTCombType {   0,    0}
         , (* 496*) yyTCombType { 170,  211} , (* 497*) yyTCombType {  74,  594}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {  74,  594}
         , (* 500*) yyTCombType {  74,  594} , (* 501*) yyTCombType {  77,   66}
         , (* 502*) yyTCombType { 170,  212} , (* 503*) yyTCombType {   0,    0}
         , (* 504*) yyTCombType { 108,  568} , (* 505*) yyTCombType {   0,    0}
         , (* 506*) yyTCombType {   0,    0} , (* 507*) yyTCombType {   0,    0}
         , (* 508*) yyTCombType { 170,  213} , (* 509*) yyTCombType {   0,    0}
         , (* 510*) yyTCombType {   0,    0} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType {   0,    0} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType {  77,  578}
         , (* 516*) yyTCombType {   0,    0} , (* 517*) yyTCombType {   0,    0}
         , (* 518*) yyTCombType {   0,    0} , (* 519*) yyTCombType {   0,    0}
         , (* 520*) yyTCombType { 108,  568} , (* 521*) yyTCombType {   0,    0}
         , (* 522*) yyTCombType {   0,    0} , (* 523*) yyTCombType {   0,    0}
         , (* 524*) yyTCombType {  74,  594} , (* 525*) yyTCombType {  74,   75}
         , (* 526*) yyTCombType {  74,  594} , (* 527*) yyTCombType { 108,  568}
         , (* 528*) yyTCombType {  74,  594} , (* 529*) yyTCombType {  74,  594}
         , (* 530*) yyTCombType { 108,  568} , (* 531*) yyTCombType {  77,  578}
         , (* 532*) yyTCombType {  74,  594} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {  77,  578}
         , (* 536*) yyTCombType {   0,    0} , (* 537*) yyTCombType {  77,  578}
         , (* 538*) yyTCombType {  77,  578} , (* 539*) yyTCombType {  74,  594}
         , (* 540*) yyTCombType {  74,  594} , (* 541*) yyTCombType {  74,  594}
         , (* 542*) yyTCombType {  74,  594} , (* 543*) yyTCombType {  74,  594}
         , (* 544*) yyTCombType {  74,  594} , (* 545*) yyTCombType {  74,  594}
         , (* 546*) yyTCombType {  74,  594} , (* 547*) yyTCombType {  74,  594}
         , (* 548*) yyTCombType {  74,  594} , (* 549*) yyTCombType {  74,  594}
         , (* 550*) yyTCombType {  78,  584} , (* 551*) yyTCombType { 108,  568}
         , (* 552*) yyTCombType { 110,  569} , (* 553*) yyTCombType { 108,  568}
         , (* 554*) yyTCombType {   0,    0} , (* 555*) yyTCombType { 108,  568}
         , (* 556*) yyTCombType {   0,    0} , (* 557*) yyTCombType { 108,  109}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType { 108,  568}
         , (* 560*) yyTCombType { 192,  636} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {  77,  578} , (* 563*) yyTCombType {   0,    0}
         , (* 564*) yyTCombType {  78,  584} , (* 565*) yyTCombType { 192,  636}
         , (* 566*) yyTCombType {  77,  578} , (* 567*) yyTCombType {  77,  578}
         , (* 568*) yyTCombType { 110,  569} , (* 569*) yyTCombType { 181,  420}
         , (* 570*) yyTCombType {  77,  578} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType {   0,    0} , (* 573*) yyTCombType {   0,    0}
         , (* 574*) yyTCombType { 181,  420} , (* 575*) yyTCombType { 110,  569}
         , (* 576*) yyTCombType {  78,  584} , (* 577*) yyTCombType {  77,  578}
         , (* 578*) yyTCombType { 110,  111} , (* 579*) yyTCombType {   0,    0}
         , (* 580*) yyTCombType {  78,  584} , (* 581*) yyTCombType {   0,    0}
         , (* 582*) yyTCombType { 181,  420} , (* 583*) yyTCombType {   0,    0}
         , (* 584*) yyTCombType {  78,  584} , (* 585*) yyTCombType { 181,  420}
         , (* 586*) yyTCombType {  78,  584} , (* 587*) yyTCombType {  78,  584}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {   0,    0} , (* 591*) yyTCombType {   0,    0}
         , (* 592*) yyTCombType {   0,    0} , (* 593*) yyTCombType {   0,    0}
         , (* 594*) yyTCombType { 192,  636} , (* 595*) yyTCombType {   0,    0}
         , (* 596*) yyTCombType {   0,    0} , (* 597*) yyTCombType {   0,    0}
         , (* 598*) yyTCombType { 181,  420} , (* 599*) yyTCombType { 110,  569}
         , (* 600*) yyTCombType {   0,    0} , (* 601*) yyTCombType { 110,  569}
         , (* 602*) yyTCombType { 192,  636} , (* 603*) yyTCombType { 110,  569}
         , (* 604*) yyTCombType {   0,    0} , (* 605*) yyTCombType {   0,    0}
         , (* 606*) yyTCombType { 181,  420} , (* 607*) yyTCombType { 110,  569}
         , (* 608*) yyTCombType { 192,  636} , (* 609*) yyTCombType {   0,    0}
         , (* 610*) yyTCombType {  79,  586} , (* 611*) yyTCombType {  78,  584}
         , (* 612*) yyTCombType { 181,  420} , (* 613*) yyTCombType {  78,  584}
         , (* 614*) yyTCombType { 192,  636} , (* 615*) yyTCombType {  78,  584}
         , (* 616*) yyTCombType {  78,  584} , (* 617*) yyTCombType {   0,    0}
         , (* 618*) yyTCombType { 181,  420} , (* 619*) yyTCombType {  78,  584}
         , (* 620*) yyTCombType {  79,  251} , (* 621*) yyTCombType {   0,    0}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType {  79,  586} , (* 625*) yyTCombType {   0,    0}
         , (* 626*) yyTCombType {  78,  584} , (* 627*) yyTCombType {  78,  584}
         , (* 628*) yyTCombType {  78,  584} , (* 629*) yyTCombType {  78,  584}
         , (* 630*) yyTCombType {  78,  584} , (* 631*) yyTCombType {  78,  584}
         , (* 632*) yyTCombType {  78,  248} , (* 633*) yyTCombType {  78,  249}
         , (* 634*) yyTCombType {  78,  250} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {  79,  586} , (* 637*) yyTCombType {   0,    0}
         , (* 638*) yyTCombType {   0,    0} , (* 639*) yyTCombType {   0,    0}
         , (* 640*) yyTCombType {  79,  586} , (* 641*) yyTCombType {  79,  252}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType {   0,    0}
         , (* 644*) yyTCombType {  79,  586} , (* 645*) yyTCombType {   0,    0}
         , (* 646*) yyTCombType {  79,  586} , (* 647*) yyTCombType {  79,  586}
         , (* 648*) yyTCombType {  85,  583} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType {   0,    0} , (* 651*) yyTCombType {   0,    0}
         , (* 652*) yyTCombType {   0,    0} , (* 653*) yyTCombType {   0,    0}
         , (* 654*) yyTCombType {   0,    0} , (* 655*) yyTCombType {   0,    0}
         , (* 656*) yyTCombType {   0,    0} , (* 657*) yyTCombType {   0,    0}
         , (* 658*) yyTCombType {   0,    0} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType {   0,    0} , (* 661*) yyTCombType {   0,    0}
         , (* 662*) yyTCombType {  85,  583} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType {   0,    0} , (* 665*) yyTCombType {   0,    0}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {   0,    0}
         , (* 670*) yyTCombType {   0,    0} , (* 671*) yyTCombType {  79,  586}
         , (* 672*) yyTCombType {   0,    0} , (* 673*) yyTCombType {  79,  586}
         , (* 674*) yyTCombType {  85,  241} , (* 675*) yyTCombType {  79,  586}
         , (* 676*) yyTCombType {  79,  586} , (* 677*) yyTCombType {   0,    0}
         , (* 678*) yyTCombType {  85,  583} , (* 679*) yyTCombType {  79,  586}
         , (* 680*) yyTCombType {   0,    0} , (* 681*) yyTCombType {   0,    0}
         , (* 682*) yyTCombType {  85,  583} , (* 683*) yyTCombType {   0,    0}
         , (* 684*) yyTCombType {  85,  583} , (* 685*) yyTCombType {  85,  583}
         , (* 686*) yyTCombType {  79,  586} , (* 687*) yyTCombType {  79,  586}
         , (* 688*) yyTCombType {  79,  586} , (* 689*) yyTCombType {  79,  586}
         , (* 690*) yyTCombType {  79,  586} , (* 691*) yyTCombType {  79,  586}
         , (* 692*) yyTCombType {  79,  586} , (* 693*) yyTCombType {  79,  586}
         , (* 694*) yyTCombType {  79,  586} , (* 695*) yyTCombType {  79,  253}
         , (* 696*) yyTCombType {  79,  254} , (* 697*) yyTCombType {   0,    0}
         , (* 698*) yyTCombType { 128,  467} , (* 699*) yyTCombType {   0,    0}
         , (* 700*) yyTCombType { 129,  468} , (* 701*) yyTCombType {   0,    0}
         , (* 702*) yyTCombType {   0,    0} , (* 703*) yyTCombType { 128,  467}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType { 129,  468}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {  92,  545}
         , (* 708*) yyTCombType { 128,  467} , (* 709*) yyTCombType {  85,  583}
         , (* 710*) yyTCombType { 129,  468} , (* 711*) yyTCombType {  85,  242}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {  85,  583}
         , (* 714*) yyTCombType {  85,  583} , (* 715*) yyTCombType {  92,  548}
         , (* 716*) yyTCombType {   0,    0} , (* 717*) yyTCombType {  85,  583}
         , (* 718*) yyTCombType {   0,    0} , (* 719*) yyTCombType {   0,    0}
         , (* 720*) yyTCombType {   0,    0} , (* 721*) yyTCombType {   0,    0}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {  85,  583} , (* 725*) yyTCombType {  85,  243}
         , (* 726*) yyTCombType {  85,  244} , (* 727*) yyTCombType {  85,  245}
         , (* 728*) yyTCombType {  85,  246} , (* 729*) yyTCombType {  85,  247}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {  92,  548}
         , (* 732*) yyTCombType { 128,  467} , (* 733*) yyTCombType {   0,    0}
         , (* 734*) yyTCombType { 129,  468} , (* 735*) yyTCombType {  92,  545}
         , (* 736*) yyTCombType {   0,    0} , (* 737*) yyTCombType {   0,    0}
         , (* 738*) yyTCombType {  92,  548} , (* 739*) yyTCombType { 134,  477}
         , (* 740*) yyTCombType { 128,  467} , (* 741*) yyTCombType {  92,  548}
         , (* 742*) yyTCombType { 129,  468} , (* 743*) yyTCombType {   0,    0}
         , (* 744*) yyTCombType { 134,  477} , (* 745*) yyTCombType {   0,    0}
         , (* 746*) yyTCombType { 128,  467} , (* 747*) yyTCombType {   0,    0}
         , (* 748*) yyTCombType { 129,  468} , (* 749*) yyTCombType { 134,  477}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType {   0,    0}
         , (* 752*) yyTCombType { 128,  467} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType { 129,  468} , (* 755*) yyTCombType { 137,  478}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType {   0,    0}
         , (* 758*) yyTCombType { 140,  484} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType { 137,  478} , (* 761*) yyTCombType {   0,    0}
         , (* 762*) yyTCombType {  92,  548} , (* 763*) yyTCombType { 140,  484}
         , (* 764*) yyTCombType {  92,  548} , (* 765*) yyTCombType { 137,  478}
         , (* 766*) yyTCombType {  92,  548} , (* 767*) yyTCombType {   0,    0}
         , (* 768*) yyTCombType { 140,  484} , (* 769*) yyTCombType {   0,    0}
         , (* 770*) yyTCombType {  92,  548} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType {   0,    0} , (* 773*) yyTCombType { 134,  477}
         , (* 774*) yyTCombType { 141,  485} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {   0,    0} , (* 777*) yyTCombType {   0,    0}
         , (* 778*) yyTCombType {   0,    0} , (* 779*) yyTCombType { 141,  485}
         , (* 780*) yyTCombType {   0,    0} , (* 781*) yyTCombType { 134,  477}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType { 190,  420}
         , (* 784*) yyTCombType { 141,  485} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType { 129,  272} , (* 787*) yyTCombType { 134,  477}
         , (* 788*) yyTCombType { 190,  420} , (* 789*) yyTCombType { 137,  478}
         , (* 790*) yyTCombType { 183,  209} , (* 791*) yyTCombType {   0,    0}
         , (* 792*) yyTCombType { 140,  484} , (* 793*) yyTCombType { 134,  477}
         , (* 794*) yyTCombType {   0,    0} , (* 795*) yyTCombType { 183,  644}
         , (* 796*) yyTCombType {   0,    0} , (* 797*) yyTCombType { 137,  478}
         , (* 798*) yyTCombType { 137,  219} , (* 799*) yyTCombType {   0,    0}
         , (* 800*) yyTCombType { 140,  484} , (* 801*) yyTCombType { 190,  420}
         , (* 802*) yyTCombType {   0,    0} , (* 803*) yyTCombType { 137,  478}
         , (* 804*) yyTCombType { 190,  420} , (* 805*) yyTCombType { 182,  431}
         , (* 806*) yyTCombType { 140,  484} , (* 807*) yyTCombType { 137,   41}
         , (* 808*) yyTCombType { 141,  485} , (* 809*) yyTCombType { 137,  478}
         , (* 810*) yyTCombType { 182,  431} , (* 811*) yyTCombType {   0,    0}
         , (* 812*) yyTCombType { 140,  484} , (* 813*) yyTCombType {   0,    0}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType { 141,  485} , (* 817*) yyTCombType { 190,  420}
         , (* 818*) yyTCombType { 182,   12} , (* 819*) yyTCombType { 183,   31}
         , (* 820*) yyTCombType {   0,    0} , (* 821*) yyTCombType { 182,   14}
         , (* 822*) yyTCombType { 141,  485} , (* 823*) yyTCombType {   0,    0}
         , (* 824*) yyTCombType {   0,    0} , (* 825*) yyTCombType { 190,  420}
         , (* 826*) yyTCombType {   0,    0} , (* 827*) yyTCombType { 183,  211}
         , (* 828*) yyTCombType { 141,  485} , (* 829*) yyTCombType {   0,    0}
         , (* 830*) yyTCombType {   0,    0} , (* 831*) yyTCombType { 190,  420}
         , (* 832*) yyTCombType {   0,    0} , (* 833*) yyTCombType { 183,  212}
         , (* 834*) yyTCombType { 182,  431} , (* 835*) yyTCombType { 191,  431}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType { 190,  420}
         , (* 838*) yyTCombType {   0,    0} , (* 839*) yyTCombType { 183,  213}
         , (* 840*) yyTCombType { 191,  431} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType { 182,  431} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType {   0,    0}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType {   0,    0}
         , (* 848*) yyTCombType { 182,  431} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType { 191,   12}
         , (* 854*) yyTCombType { 182,  431} , (* 855*) yyTCombType {   0,    0}
         , (* 856*) yyTCombType { 191,   14} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType {   0,    0} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType {   0,    0} , (* 861*) yyTCombType {   0,    0}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType {   0,    0} , (* 867*) yyTCombType {   0,    0}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType { 191,  431}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType {   0,    0} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType { 191,  431}
         , (* 878*) yyTCombType {   0,    0} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType { 191,  431}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType {   0,    0} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType { 191,  431}
         , (* 890*) yyTCombType {   0,    0} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {   0,    0}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType {   0,    0}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType {   0,    0}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType {   0,    0} , (* 919*) yyTCombType {   0,    0}
         , (* 920*) yyTCombType {   0,    0} , (* 921*) yyTCombType {   0,    0}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         , (* 924*) yyTCombType {   0,    0} , (* 925*) yyTCombType {   0,    0}
         , (* 926*) yyTCombType {   0,    0} , (* 927*) yyTCombType {   0,    0}
         , (* 928*) yyTCombType {   0,    0} , (* 929*) yyTCombType {   0,    0}
         , (* 930*) yyTCombType {   0,    0} , (* 931*) yyTCombType {   0,    0}
         , (* 932*) yyTCombType {   0,    0} , (* 933*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 108*)  293 , (* 109*)    5 , (* 110*)  294 , (* 111*)  295
         , (* 112*)  296 , (* 113*)  297 , (* 114*)  298 , (* 115*)    0
         , (* 116*)    0 , (* 117*)  177 , (* 118*)  188 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    6 , (* 122*)    9 , (* 123*)   27
         , (* 124*)   11 , (* 125*)  301 , (* 126*)   30 , (* 127*)   32
         , (* 128*)  158 , (* 129*)  167 , (* 130*)  170 , (* 131*)  164
         , (* 132*)  176 , (* 133*)  169 , (* 134*)  187 , (* 135*)  180
         , (* 136*)  344 , (* 137*)   25 , (* 138*)  302 , (* 139*)   17
         , (* 140*)  300 , (* 141*)   19 , (* 142*)  299 , (* 143*)   20
         , (* 144*)  359 , (* 145*)  303 , (* 146*)  356 , (* 147*)  362
         , (* 148*)  380 , (* 149*)  386 , (* 150*)  305 , (* 151*)   44
         , (* 152*)  365 , (* 153*)  351 , (* 154*)   35 , (* 155*)  304
         , (* 156*)  367 , (* 157*)   36 , (* 158*)  127 , (* 159*)   38
         , (* 160*)   37 , (* 161*)   38 , (* 162*)  125 , (* 163*)  128
         , (* 164*)   53 , (* 165*)  370 , (* 166*)  113 , (* 167*)  114
         , (* 168*)  352 , (* 169*)  132 , (* 170*)  134 , (* 171*)  136
         , (* 172*)  373 , (* 173*)  130 , (* 174*)  131 , (* 175*)  140
         , (* 176*)  179 , (* 177*)  375 , (* 178*)   50 , (* 179*)   59
         , (* 180*)  182 , (* 181*)  342 , (* 182*)  307 , (* 183*)  308
         , (* 184*)  309 , (* 185*)  310 , (* 186*)  311 , (* 187*)  312
         , (* 188*)  313 , (* 189*)  314 , (* 190*)  315 , (* 191*)  316
         , (* 192*)  317 , (* 193*)  318 , (* 194*)  319 , (* 195*)  320
         , (* 196*)  321 , (* 197*)  322 , (* 198*)   45 , (* 199*)   59
         , (* 200*)  325 , (* 201*)  305 , (* 202*)   44 , (* 203*)  306
         , (* 204*)   46 , (* 205*)   49 , (* 206*)   47 , (* 207*)  324
         , (* 208*)  323 , (* 209*)   59 , (* 210*)  343 , (* 211*)   52
         , (* 212*)   59 , (* 213*)  118 , (* 214*)  124 , (* 215*)  341
         , (* 216*)   89 , (* 217*)   92 , (* 218*)   93 , (* 219*)  107
         , (* 220*)   91 , (* 221*)   96 , (* 222*)  360 , (* 223*)   98
         , (* 224*)   59 , (* 225*)   50 , (* 226*)  346 , (* 227*)   98
         , (* 228*)  347 , (* 229*)  103 , (* 230*)  144 , (* 231*)   59
         , (* 232*)  382 , (* 233*)  307 , (* 234*)  308 , (* 235*)  309
         , (* 236*)  310 , (* 237*)  311 , (* 238*)  312 , (* 239*)  313
         , (* 240*)  314 , (* 241*)  315 , (* 242*)  316 , (* 243*)  317
         , (* 244*)  318 , (* 245*)  319 , (* 246*)  320 , (* 247*)  321
         , (* 248*)  322 , (* 249*)   45 , (* 250*)  340 , (* 251*)  325
         , (* 252*)  383 , (* 253*)  384 , (* 254*)  157 , (* 255*)   68
         , (* 256*)   49 , (* 257*)  326 , (* 258*)   52 , (* 259*)   59
         , (* 260*)   70 , (* 261*)   72 , (* 262*)  336 , (* 263*)  358
         , (* 264*)  104 , (* 265*)  116 , (* 266*)  110 , (* 267*)   89
         , (* 268*)   92 , (* 269*)   93 , (* 270*)  107 , (* 271*)   85
         , (* 272*)   78 , (* 273*)  108 , (* 274*)   79 , (* 275*)  337
         , (* 276*)  334 , (* 277*)   59 , (* 278*)  330 , (* 279*)   73
         , (* 280*)   74 , (* 281*)   86 , (* 282*)   87 , (* 283*)   59
         , (* 284*)  100 , (* 285*)  101 , (* 286*)  357 , (* 287*)  103
         , (* 288*)   63 , (* 289*)   77 , (* 290*)  333 , (* 291*)   67
         , (* 292*)   78 , (* 293*)  327 , (* 294*)   79 , (* 295*)   59
         , (* 296*)  334 , (* 297*)  353 , (* 298*)  330 , (* 299*)   73
         , (* 300*)   74 , (* 301*)   84 , (* 302*)   77 , (* 303*)  333
         , (* 304*)   67 , (* 305*)   78 , (* 306*)   59 , (* 307*)   79
         , (* 308*)  331 , (* 309*)  334 , (* 310*)   74 , (* 311*)  330
         , (* 312*)   73 , (* 313*)   74 , (* 314*)   65 , (* 315*)  333
         , (* 316*)   67 , (* 317*)   78 , (* 318*)  355 , (* 319*)   79
         , (* 320*)   59 , (* 321*)  334 , (* 322*)  189 , (* 323*)  330
         , (* 324*)   73 , (* 325*)   74 , (* 326*)   71 , (* 327*)  147
         , (* 328*)  334 , (* 329*)  349 , (* 330*)  330 , (* 331*)   73
         , (* 332*)   74 , (* 333*)  120 , (* 334*)  363 , (* 335*)  122
         , (* 336*)  332 , (* 337*)   59 , (* 338*)  368 , (* 339*)  108
         , (* 340*)  129 , (* 341*)  133 , (* 342*)  131 , (* 343*)  376
         , (* 344*)  105 , (* 345*)  146 , (* 346*)  191 , (* 347*)  145
         , (* 348*)   63 , (* 349*)   77 , (* 350*)  333 , (* 351*)   67
         , (* 352*)   78 , (* 353*)  335 , (* 354*)   79 , (* 355*)   59
         , (* 356*)  334 , (* 357*)  108 , (* 358*)  330 , (* 359*)   73
         , (* 360*)   74 , (* 361*)  305 , (* 362*)  135 , (* 363*)   82
         , (* 364*)  339 , (* 365*)    0 , (* 366*)   63 , (* 367*)   77
         , (* 368*)  333 , (* 369*)   67 , (* 370*)   78 , (* 371*)  337
         , (* 372*)   79 , (* 373*)   59 , (* 374*)  334 , (* 375*)    0
         , (* 376*)  330 , (* 377*)   73 , (* 378*)   74 , (* 379*)    0
         , (* 380*)  329 , (* 381*)    0 , (* 382*)  330 , (* 383*)   73
         , (* 384*)   74 , (* 385*)  138 , (* 386*)  328 , (* 387*)   67
         , (* 388*)   78 , (* 389*)  345 , (* 390*)   79 , (* 391*)    0
         , (* 392*)  334 , (* 393*)    0 , (* 394*)  330 , (* 395*)   73
         , (* 396*)   74 , (* 397*)    0 , (* 398*)   59 , (* 399*)   69
         , (* 400*)    0 , (* 401*)   79 , (* 402*)    0 , (* 403*)  334
         , (* 404*)    0 , (* 405*)  330 , (* 406*)   73 , (* 407*)   74
         , (* 408*)   50 , (* 409*)   63 , (* 410*)   77 , (* 411*)  333
         , (* 412*)   67 , (* 413*)   78 , (* 414*)  354 , (* 415*)   79
         , (* 416*)    0 , (* 417*)  334 , (* 418*)    0 , (* 419*)  330
         , (* 420*)   73 , (* 421*)   74 , (* 422*)  193 , (* 423*)   80
         , (* 424*)    0 , (* 425*)   50 , (* 426*)   63 , (* 427*)   77
         , (* 428*)  333 , (* 429*)   67 , (* 430*)   78 , (* 431*)    0
         , (* 432*)   79 , (* 433*)    0 , (* 434*)  334 , (* 435*)    0
         , (* 436*)  330 , (* 437*)   73 , (* 438*)   74 , (* 439*)    0
         , (* 440*)  361 , (* 441*)   52 , (* 442*)    0 , (* 443*)  149
         , (* 444*)   63 , (* 445*)   77 , (* 446*)  333 , (* 447*)   67
         , (* 448*)   78 , (* 449*)    0 , (* 450*)   79 , (* 451*)   50
         , (* 452*)  334 , (* 453*)    0 , (* 454*)  330 , (* 455*)   73
         , (* 456*)   74 , (* 457*)  326 , (* 458*)   52 , (* 459*)    0
         , (* 460*)  338 , (* 461*)    0 , (* 462*)   63 , (* 463*)   77
         , (* 464*)  333 , (* 465*)   67 , (* 466*)   78 , (* 467*)    0
         , (* 468*)   79 , (* 469*)    0 , (* 470*)  334 , (* 471*)    0
         , (* 472*)  330 , (* 473*)   73 , (* 474*)   74 , (* 475*)  305
         , (* 476*)   44 , (* 477*)  348 , (* 478*)    0 , (* 479*)  305
         , (* 480*)  135 , (* 481*)   94 , (* 482*)   87 , (* 483*)  142
         , (* 484*)   52 , (* 485*)  160 , (* 486*)  387 , (* 487*)   63
         , (* 488*)   77 , (* 489*)  333 , (* 490*)   67 , (* 491*)   78
         , (* 492*)    0 , (* 493*)   79 , (* 494*)    0 , (* 495*)  334
         , (* 496*)    0 , (* 497*)  330 , (* 498*)   73 , (* 499*)   74
         , (* 500*)  372 , (* 501*)    0 , (* 502*)  137 , (* 503*)  139
         , (* 504*)    0 , (* 505*)    0 , (* 506*)    0 , (* 507*)  307
         , (* 508*)  308 , (* 509*)  309 , (* 510*)  310 , (* 511*)  311
         , (* 512*)  312 , (* 513*)  313 , (* 514*)  314 , (* 515*)  315
         , (* 516*)  316 , (* 517*)  317 , (* 518*)  318 , (* 519*)  319
         , (* 520*)  320 , (* 521*)  321 , (* 522*)  322 , (* 523*)   45
         , (* 524*)   59 , (* 525*)  325 , (* 526*)  305 , (* 527*)   44
         , (* 528*)  350 , (* 529*)    0 , (* 530*)   49 , (* 531*)    0
         , (* 532*)  388 , (* 533*)    0 , (* 534*)  183 , (* 535*)    0
         , (* 536*)  192 , (* 537*)   59 , (* 538*)  149 , (* 539*)    0
         , (* 540*)  364 , (* 541*)   89 , (* 542*)   92 , (* 543*)   93
         , (* 544*)  107 , (* 545*)  302 , (* 546*)   50 , (* 547*)  302
         , (* 548*)   19 , (* 549*)  302 , (* 550*)   19 , (* 551*)    0
         , (* 552*)   19 , (* 553*)  366 , (* 554*)    0 , (* 555*)    0
         , (* 556*)    0 , (* 557*)    0 , (* 558*)  307 , (* 559*)  308
         , (* 560*)  309 , (* 561*)  310 , (* 562*)  311 , (* 563*)  312
         , (* 564*)  313 , (* 565*)  314 , (* 566*)  315 , (* 567*)  316
         , (* 568*)  317 , (* 569*)  318 , (* 570*)  319 , (* 571*)  320
         , (* 572*)  321 , (* 573*)  322 , (* 574*)   45 , (* 575*)  374
         , (* 576*)  325 , (* 577*)  141 , (* 578*)  143 , (* 579*)   52
         , (* 580*)    0 , (* 581*)   49 , (* 582*)    0 , (* 583*)    0
         , (* 584*)    0 , (* 585*)    0 , (* 586*)    0 , (* 587*)    0
         , (* 588*)    0 , (* 589*)    0 , (* 590*)    0 , (* 591*)    0
         , (* 592*)   89 , (* 593*)   92 , (* 594*)   93 , (* 595*)  107
         , (* 596*)    0 , (* 597*)    0 , (* 598*)    0 , (* 599*)    0
         , (* 600*)    0 , (* 601*)    0 , (* 602*)    0 , (* 603*)    0
         , (* 604*)    0 , (* 605*)    0 , (* 606*)    0 , (* 607*)  305
         , (* 608*)   44 , (* 609*)  369 , (* 610*)    0 , (* 611*)    0
         , (* 612*)    0 , (* 613*)   63 , (* 614*)   77 , (* 615*)  333
         , (* 616*)   67 , (* 617*)   78 , (* 618*)    0 , (* 619*)   79
         , (* 620*)    0 , (* 621*)  334 , (* 622*)    0 , (* 623*)  330
         , (* 624*)   73 , (* 625*)   74 , (* 626*)   63 , (* 627*)   77
         , (* 628*)  333 , (* 629*)   67 , (* 630*)   78 , (* 631*)    0
         , (* 632*)   79 , (* 633*)    0 , (* 634*)  334 , (* 635*)    0
         , (* 636*)  330 , (* 637*)   73 , (* 638*)   74 , (* 639*)  307
         , (* 640*)  308 , (* 641*)  309 , (* 642*)  310 , (* 643*)  311
         , (* 644*)  312 , (* 645*)  313 , (* 646*)  314 , (* 647*)  315
         , (* 648*)  316 , (* 649*)  317 , (* 650*)  318 , (* 651*)  319
         , (* 652*)  320 , (* 653*)  321 , (* 654*)  322 , (* 655*)   45
         , (* 656*)  152 , (* 657*)  325 , (* 658*)  305 , (* 659*)   44
         , (* 660*)  371 , (* 661*)    0 , (* 662*)   49 , (* 663*)    0
         , (* 664*)    0 , (* 665*)    0 , (* 666*)    0 , (* 667*)    0
         , (* 668*)    0 , (* 669*)    0 , (* 670*)   59 , (* 671*)    0
         , (* 672*)    0 , (* 673*)   89 , (* 674*)   92 , (* 675*)   93
         , (* 676*)  107 , (* 677*)    0 , (* 678*)    0 , (* 679*)    0
         , (* 680*)    0 , (* 681*)    0 , (* 682*)    0 , (* 683*)    0
         , (* 684*)    0 , (* 685*)  150 , (* 686*)  153 , (* 687*)    0
         , (* 688*)    0 , (* 689*)    0 , (* 690*)  307 , (* 691*)  308
         , (* 692*)  309 , (* 693*)  310 , (* 694*)  311 , (* 695*)  312
         , (* 696*)  313 , (* 697*)  314 , (* 698*)  315 , (* 699*)  316
         , (* 700*)  317 , (* 701*)  318 , (* 702*)  319 , (* 703*)  320
         , (* 704*)  321 , (* 705*)  322 , (* 706*)   45 , (* 707*)    0
         , (* 708*)  325 , (* 709*)    0 , (* 710*)    0 , (* 711*)    0
         , (* 712*)   35 , (* 713*)   49 , (* 714*)  367 , (* 715*)    0
         , (* 716*)    0 , (* 717*)    0 , (* 718*)    0 , (* 719*)    0
         , (* 720*)    0 , (* 721*)  128 , (* 722*)    0 , (* 723*)  370
         , (* 724*)   89 , (* 725*)   92 , (* 726*)   93 , (* 727*)  107
         , (* 728*)  134 , (* 729*)   59 , (* 730*)  373 , (* 731*)    0
         , (* 732*)    0 , (* 733*)  140 , (* 734*)    0 , (* 735*)  375
         , (* 736*)    0 , (* 737*)    0 , (* 738*)    0 , (* 739*)    0
         , (* 740*)    0 , (* 741*)    0 , (* 742*)   59 , (* 743*)    0
         , (* 744*)    0 , (* 745*)  377 , (* 746*)    0 , (* 747*)    0
         , (* 748*)    0 , (* 749*)    0 , (* 750*)    0 , (* 751*)    0
         , (* 752*)    0 , (* 753*)    0 , (* 754*)    0 , (* 755*)    0
         , (* 756*)    0 , (* 757*)    0 , (* 758*)  153 , (* 759*)   63
         , (* 760*)   77 , (* 761*)  333 , (* 762*)   67 , (* 763*)   78
         , (* 764*)    0 , (* 765*)   79 , (* 766*)    0 , (* 767*)  334
         , (* 768*)    0 , (* 769*)  330 , (* 770*)   73 , (* 771*)   74
         , (* 772*)    0 , (* 773*)    0 , (* 774*)    0 , (* 775*)    0
         , (* 776*)    0 , (* 777*)    0 , (* 778*)    0 , (* 779*)    0
         , (* 780*)  155 , (* 781*)  381 , (* 782*)  379 , (* 783*)   35
         , (* 784*)    0 , (* 785*)  367 , (* 786*)    0 , (* 787*)    0
         , (* 788*)  144 , (* 789*)    0 , (* 790*)  382 , (* 791*)    0
         , (* 792*)  128 , (* 793*)  173 , (* 794*)  370 , (* 795*)    0
         , (* 796*)    0 , (* 797*)    0 , (* 798*)    0 , (* 799*)  134
         , (* 800*)    0 , (* 801*)  373 , (* 802*)    0 , (* 803*)    0
         , (* 804*)  140 , (* 805*)    0 , (* 806*)  375 , (* 807*)   59
         , (* 808*)    0 , (* 809*)    0 , (* 810*)  383 , (* 811*)  384
         , (* 812*)  157 , (* 813*)    0 , (* 814*)    0 , (* 815*)    0
         , (* 816*)    0 , (* 817*)    0 , (* 818*)   63 , (* 819*)   77
         , (* 820*)  333 , (* 821*)   67 , (* 822*)   78 , (* 823*)  153
         , (* 824*)   79 , (* 825*)    0 , (* 826*)  334 , (* 827*)    0
         , (* 828*)  330 , (* 829*)   73 , (* 830*)   74 , (* 831*)   63
         , (* 832*)   77 , (* 833*)  333 , (* 834*)   67 , (* 835*)   78
         , (* 836*)    0 , (* 837*)   79 , (* 838*)    0 , (* 839*)  334
         , (* 840*)  171 , (* 841*)  330 , (* 842*)   73 , (* 843*)   74
         , (* 844*)    0 , (* 845*)    0 , (* 846*)    0 , (* 847*)    0
         , (* 848*)    0 , (* 849*)    0 , (* 850*)    0 , (* 851*)    0
         , (* 852*)    0 , (* 853*)  378 , (* 854*)  379 , (* 855*)    0
         , (* 856*)    0 , (* 857*)    0 , (* 858*)    0 , (* 859*)  144
         , (* 860*)    0 , (* 861*)  382 , (* 862*)    0 , (* 863*)    0
         , (* 864*)    0 , (* 865*)    0 , (* 866*)    0 , (* 867*)   35
         , (* 868*)    0 , (* 869*)  367 , (* 870*)    0 , (* 871*)    0
         , (* 872*)    0 , (* 873*)    0 , (* 874*)    0 , (* 875*)    0
         , (* 876*)  128 , (* 877*)    0 , (* 878*)  370 , (* 879*)    0
         , (* 880*)    0 , (* 881*)  385 , (* 882*)  384 , (* 883*)  134
         , (* 884*)  184 , (* 885*)  373 , (* 886*)    0 , (* 887*)    0
         , (* 888*)  140 , (* 889*)    0 , (* 890*)  375 , (* 891*)    0
         , (* 892*)    0 , (* 893*)    0 , (* 894*)    0 , (* 895*)    0
         , (* 896*)   63 , (* 897*)   77 , (* 898*)  333 , (* 899*)   67
         , (* 900*)   78 , (* 901*)    0 , (* 902*)   79 , (* 903*)    0
         , (* 904*)  334 , (* 905*)    0 , (* 906*)  330 , (* 907*)   73
         , (* 908*)   74 , (* 909*)    0 , (* 910*)    0 , (* 911*)   35
         , (* 912*)    0 , (* 913*)  367 , (* 914*)    0 , (* 915*)    0
         , (* 916*)    0 , (* 917*)  155 , (* 918*)  381 , (* 919*)  379
         , (* 920*)  128 , (* 921*)    0 , (* 922*)  370 , (* 923*)    0
         , (* 924*)    0 , (* 925*)    0 , (* 926*)    0 , (* 927*)  134
         , (* 928*)    0 , (* 929*)  373 , (* 930*)    0 , (* 931*)    0
         , (* 932*)  140 , (* 933*)    0 , (* 934*)  375 , (* 935*)    0
         , (* 936*)    0 , (* 937*)    0 , (* 938*)    0 , (* 939*)    0
         , (* 940*)    0 , (* 941*)    0 , (* 942*)    0 , (* 943*)  144
         , (* 944*)    0 , (* 945*)  382 , (* 946*)    0 , (* 947*)    0
         , (* 948*)    0 , (* 949*)    0 , (* 950*)    0 , (* 951*)    0
         , (* 952*)    0 , (* 953*)    0 , (* 954*)    0 , (* 955*)    0
         , (* 956*)    0 , (* 957*)    0 , (* 958*)    0 , (* 959*)    0
         , (* 960*)    0 , (* 961*)    0 , (* 962*)    0 , (* 963*)    0
         , (* 964*)    0 , (* 965*)  383 , (* 966*)  384 , (* 967*)  157
         , (* 968*)    0 , (* 969*)    0 , (* 970*)    0 , (* 971*)    0
         , (* 972*)    0 , (* 973*)    0 , (* 974*)    0 , (* 975*)    0
         , (* 976*)    0 , (* 977*)    0 , (* 978*)    0 , (* 979*)    0
         , (* 980*)    0 , (* 981*)    0 , (* 982*)    0 , (* 983*)    0
         , (* 984*)    0 , (* 985*)    0 , (* 986*)    0 , (* 987*)  144
         , (* 988*)    0 , (* 989*)  382 , (* 990*)    0 , (* 991*)    0
         , (* 992*)    0 , (* 993*)    0 , (* 994*)    0 , (* 995*)    0
         , (* 996*)    0 , (* 997*)    0 , (* 998*)    0 , (* 999*)    0
         , (*1000*)    0 , (*1001*)    0 , (*1002*)    0 , (*1003*)    0
         , (*1004*)    0 , (*1005*)    0 , (*1006*)    0 , (*1007*)    0
         , (*1008*)    0 , (*1009*)  383 , (*1010*)  384 , (*1011*)  157
         , (*1012*)    0 , (*1013*)    0 , (*1014*)    0 , (*1015*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 389(P   1)*)    2 , (*A 390(P   2)*)    1 , (*A 391(P   3)*)    1
         , (*A 392(P   4)*)    1 , (*A 393(P   5)*)    1 , (*A 394(P   6)*)    1
         , (*A 395(P   7)*)    1 , (*A 396(P   8)*)    0 , (*A 397(P   9)*)    0
         , (*A 398(P  10)*)    0 , (*A 399(P  11)*)    0 , (*A 400(P  12)*)    0
         , (*A 401(P  13)*)    0 , (*A 402(P  14)*)    3 , (*A 403(P  15)*)    7
         , (*A 404(P  16)*)    4 , (*A 405(P  17)*)    5 , (*A 406(P  18)*)    3
         , (*A 407(P  19)*)    7 , (*A 408(P  20)*)    5 , (*A 409(P  21)*)    7
         , (*A 410(P  22)*)    3 , (*A 411(P  23)*)   10 , (*A 412(P  24)*)    3
         , (*A 413(P  25)*)    9 , (*A 414(P  26)*)    1 , (*A 415(P  27)*)    0
         , (*A 416(P  28)*)    1 , (*A 417(P  29)*)    0 , (*A 418(P  30)*)    3
         , (*A 419(P  31)*)    3 , (*A 420(P  32)*)    0 , (*A 421(P  33)*)    2
         , (*A 422(P  34)*)    3 , (*A 423(P  35)*)    1 , (*A 424(P  36)*)    3
         , (*A 425(P  37)*)    1 , (*A 426(P  38)*)    3 , (*A 427(P  39)*)    3
         , (*A 428(P  40)*)    3 , (*A 429(P  41)*)    1 , (*A 430(P  42)*)    3
         , (*A 431(P  43)*)    0 , (*A 432(P  44)*)    0 , (*A 433(P  45)*)    2
         , (*A 434(P  46)*)    1 , (*A 435(P  47)*)    3 , (*A 436(P  48)*)    1
         , (*A 437(P  49)*)    1 , (*A 438(P  50)*)    1 , (*A 439(P  51)*)    3
         , (*A 440(P  52)*)    1 , (*A 441(P  53)*)    3 , (*A 442(P  54)*)    3
         , (*A 443(P  55)*)    0 , (*A 444(P  56)*)    0 , (*A 445(P  57)*)    1
         , (*A 446(P  58)*)    1 , (*A 447(P  59)*)    3 , (*A 448(P  60)*)    1
         , (*A 449(P  61)*)    3 , (*A 450(P  62)*)    1 , (*A 451(P  63)*)    1
         , (*A 452(P  64)*)    2 , (*A 453(P  65)*)    2 , (*A 454(P  66)*)    0
         , (*A 455(P  67)*)    1 , (*A 456(P  68)*)    2 , (*A 457(P  69)*)    0
         , (*A 458(P  70)*)    1 , (*A 459(P  71)*)    2 , (*A 460(P  72)*)    3
         , (*A 461(P  73)*)    1 , (*A 462(P  74)*)    4 , (*A 463(P  75)*)    1
         , (*A 464(P  76)*)    1 , (*A 465(P  77)*)    1 , (*A 466(P  78)*)    2
         , (*A 467(P  79)*)    0 , (*A 468(P  80)*)    1 , (*A 469(P  81)*)    2
         , (*A 470(P  82)*)    3 , (*A 471(P  83)*)    1 , (*A 472(P  84)*)    3
         , (*A 473(P  85)*)    1 , (*A 474(P  86)*)    1 , (*A 475(P  87)*)    1
         , (*A 476(P  88)*)    2 , (*A 477(P  89)*)    0 , (*A 478(P  90)*)    1
         , (*A 479(P  91)*)    2 , (*A 480(P  92)*)    3 , (*A 481(P  93)*)    3
         , (*A 482(P  94)*)    1 , (*A 483(P  95)*)    2 , (*A 484(P  96)*)    0
         , (*A 485(P  97)*)    1 , (*A 486(P  98)*)    2 , (*A 487(P  99)*)    3
         , (*A 488(P 100)*)    3 , (*A 489(P 101)*)    1 , (*A 490(P 102)*)    2
         , (*A 491(P 103)*)    0 , (*A 492(P 104)*)    2 , (*A 493(P 105)*)    0
         , (*A 494(P 106)*)    1 , (*A 495(P 107)*)    2 , (*A 496(P 108)*)    1
         , (*A 497(P 109)*)    1 , (*A 498(P 110)*)    1 , (*A 499(P 111)*)    1
         , (*A 500(P 112)*)    1 , (*A 501(P 113)*)    1 , (*A 502(P 114)*)    1
         , (*A 503(P 115)*)    1 , (*A 504(P 116)*)    1 , (*A 505(P 117)*)    1
         , (*A 506(P 118)*)    1 , (*A 507(P 119)*)    1 , (*A 508(P 120)*)    1
         , (*A 509(P 121)*)    1 , (*A 510(P 122)*)    1 , (*A 511(P 123)*)    1
         , (*A 512(P 124)*)    1 , (*A 513(P 125)*)    3 , (*A 514(P 126)*)    0
         , (*A 515(P 127)*)    1 , (*A 516(P 128)*)    1 , (*A 517(P 129)*)    3
         , (*A 518(P 130)*)    1 , (*A 519(P 131)*)    1 , (*A 520(P 132)*)    0
         , (*A 521(P 133)*)    2 , (*A 522(P 134)*)    1 , (*A 523(P 135)*)    3
         , (*A 524(P 136)*)    1 , (*A 525(P 137)*)    3 , (*A 526(P 138)*)    0
         , (*A 527(P 139)*)    1 , (*A 528(P 140)*)    3 , (*A 529(P 141)*)    1
         , (*A 530(P 142)*)    3 , (*A 531(P 143)*)    1 , (*A 532(P 144)*)    2
         , (*A 533(P 145)*)    0 , (*A 534(P 146)*)    1 , (*A 535(P 147)*)    3
         , (*A 536(P 148)*)    1 , (*A 537(P 149)*)    3 , (*A 538(P 150)*)    1
         , (*A 539(P 151)*)    3 , (*A 540(P 152)*)    0 , (*A 541(P 153)*)    1
         , (*A 542(P 154)*)    2 , (*A 543(P 155)*)    0 , (*A 544(P 156)*)    1
         , (*A 545(P 157)*)    1 , (*A 546(P 158)*)    3 , (*A 547(P 159)*)    5
         , (*A 548(P 160)*)    1 , (*A 549(P 161)*)    1 , (*A 550(P 162)*)    2
         , (*A 551(P 163)*)    3 , (*A 552(P 164)*)    3 , (*A 553(P 165)*)    0
         , (*A 554(P 166)*)    2 , (*A 555(P 167)*)    3 , (*A 556(P 168)*)    1
         , (*A 557(P 169)*)    0 , (*A 558(P 170)*)    1 , (*A 559(P 171)*)    1
         , (*A 560(P 172)*)    1 , (*A 561(P 173)*)    4 , (*A 562(P 174)*)    1
         , (*A 563(P 175)*)    2 , (*A 564(P 176)*)    0 , (*A 565(P 177)*)    2
         , (*A 566(P 178)*)    0 , (*A 567(P 179)*)    2 , (*A 568(P 180)*)    0
         , (*A 569(P 181)*)    0 , (*A 570(P 182)*)    2 , (*A 571(P 183)*)    4
         , (*A 572(P 184)*)    2 , (*A 573(P 185)*)    3 , (*A 574(P 186)*)    1
         , (*A 575(P 187)*)    1 , (*A 576(P 188)*)    4 , (*A 577(P 189)*)    1
         , (*A 578(P 190)*)    1 , (*A 579(P 191)*)    3 , (*A 580(P 192)*)    1
         , (*A 581(P 193)*)    3 , (*A 582(P 194)*)    1 , (*A 583(P 195)*)    2
         , (*A 584(P 196)*)    1 , (*A 585(P 197)*)    3 , (*A 586(P 198)*)    1
         , (*A 587(P 199)*)    3 , (*A 588(P 200)*)    1 , (*A 589(P 201)*)    3
         , (*A 590(P 202)*)    1 , (*A 591(P 203)*)    2 , (*A 592(P 204)*)    2
         , (*A 593(P 205)*)    3 , (*A 594(P 206)*)    1 , (*A 595(P 207)*)    2
         , (*A 596(P 208)*)    1 , (*A 597(P 209)*)    3 , (*A 598(P 210)*)    1
         , (*A 599(P 211)*)    3 , (*A 600(P 212)*)    1 , (*A 601(P 213)*)    3
         , (*A 602(P 214)*)    3 , (*A 603(P 215)*)    0 , (*A 604(P 216)*)    1
         , (*A 605(P 217)*)    3 , (*A 606(P 218)*)    1 , (*A 607(P 219)*)    3
         , (*A 608(P 220)*)    1 , (*A 609(P 221)*)    1 , (*A 610(P 222)*)    1
         , (*A 611(P 223)*)    1 , (*A 612(P 224)*)    1 , (*A 613(P 225)*)    1
         , (*A 614(P 226)*)    1 , (*A 615(P 227)*)    1 , (*A 616(P 228)*)    1
         , (*A 617(P 229)*)    1 , (*A 618(P 230)*)    1 , (*A 619(P 231)*)    3
         , (*A 620(P 232)*)    1 , (*A 621(P 233)*)    1 , (*A 622(P 234)*)    1
         , (*A 623(P 235)*)    1 , (*A 624(P 236)*)    1 , (*A 625(P 237)*)    1
         , (*A 626(P 238)*)    1 , (*A 627(P 239)*)    1 , (*A 628(P 240)*)    1
         , (*A 629(P 241)*)    1 , (*A 630(P 242)*)    1 , (*A 631(P 243)*)    1
         , (*A 632(P 244)*)    1 , (*A 633(P 245)*)    1 , (*A 634(P 246)*)    1
         , (*A 635(P 247)*)    1 , (*A 636(P 248)*)    0 , (*A 637(P 249)*)    5
         , (*A 638(P 250)*)    1 , (*A 639(P 251)*)    1 , (*A 640(P 252)*)    1
         , (*A 641(P 253)*)    1 , (*A 642(P 254)*)    1 , (*A 643(P 255)*)    1
         , (*A 644(P 256)*)    0 , (*A 645(P 257)*)    1 , (*A 646(P 258)*)    1
         , (*A 647(P 259)*)    2 , (*A 648(P 260)*)    0 , (*A 649(P 261)*)    2
         , (*A 650(P 262)*)    1 , (*A 651(P 263)*)    3 , (*A 652(P 264)*)    1
         , (*A 653(P 265)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 389(P   1)*)  258 , (*A 390(P   2)*)  109 , (*A 391(P   3)*)  109
         , (*A 392(P   4)*)  109 , (*A 393(P   5)*)  109 , (*A 394(P   6)*)  109
         , (*A 395(P   7)*)  109 , (*A 396(P   8)*)  115 , (*A 397(P   9)*)  116
         , (*A 398(P  10)*)  117 , (*A 399(P  11)*)  118 , (*A 400(P  12)*)  119
         , (*A 401(P  13)*)  120 , (*A 402(P  14)*)  122 , (*A 403(P  15)*)  113
         , (*A 404(P  16)*)  126 , (*A 405(P  17)*)  108 , (*A 406(P  18)*)  128
         , (*A 407(P  19)*)  114 , (*A 408(P  20)*)  130 , (*A 409(P  21)*)  110
         , (*A 410(P  22)*)  132 , (*A 411(P  23)*)  111 , (*A 412(P  24)*)  134
         , (*A 413(P  25)*)  112 , (*A 414(P  26)*)  121 , (*A 415(P  27)*)  121
         , (*A 416(P  28)*)  136 , (*A 417(P  29)*)  136 , (*A 418(P  30)*)  133
         , (*A 419(P  31)*)  123 , (*A 420(P  32)*)  124 , (*A 421(P  33)*)  124
         , (*A 422(P  34)*)  138 , (*A 423(P  35)*)  139 , (*A 424(P  36)*)  139
         , (*A 425(P  37)*)  140 , (*A 426(P  38)*)  140 , (*A 427(P  39)*)  141
         , (*A 428(P  40)*)  138 , (*A 429(P  41)*)  142 , (*A 430(P  42)*)  142
         , (*A 431(P  43)*)  125 , (*A 432(P  44)*)  129 , (*A 433(P  45)*)  129
         , (*A 434(P  46)*)  143 , (*A 435(P  47)*)  143 , (*A 436(P  48)*)  144
         , (*A 437(P  49)*)  145 , (*A 438(P  50)*)  146 , (*A 439(P  51)*)  146
         , (*A 440(P  52)*)  147 , (*A 441(P  53)*)  147 , (*A 442(P  54)*)  137
         , (*A 443(P  55)*)  137 , (*A 444(P  56)*)  148 , (*A 445(P  57)*)  148
         , (*A 446(P  58)*)  149 , (*A 447(P  59)*)  149 , (*A 448(P  60)*)  150
         , (*A 449(P  61)*)  150 , (*A 450(P  62)*)  151 , (*A 451(P  63)*)  151
         , (*A 452(P  64)*)  151 , (*A 453(P  65)*)  153 , (*A 454(P  66)*)  153
         , (*A 455(P  67)*)  154 , (*A 456(P  68)*)  156 , (*A 457(P  69)*)  155
         , (*A 458(P  70)*)  155 , (*A 459(P  71)*)  157 , (*A 460(P  72)*)  157
         , (*A 461(P  73)*)  159 , (*A 462(P  74)*)  158 , (*A 463(P  75)*)  162
         , (*A 464(P  76)*)  162 , (*A 465(P  77)*)  163 , (*A 466(P  78)*)  165
         , (*A 467(P  79)*)  164 , (*A 468(P  80)*)  164 , (*A 469(P  81)*)  166
         , (*A 470(P  82)*)  166 , (*A 471(P  83)*)  168 , (*A 472(P  84)*)  167
         , (*A 473(P  85)*)  169 , (*A 474(P  86)*)  169 , (*A 475(P  87)*)  170
         , (*A 476(P  88)*)  172 , (*A 477(P  89)*)  171 , (*A 478(P  90)*)  171
         , (*A 479(P  91)*)  173 , (*A 480(P  92)*)  173 , (*A 481(P  93)*)  174
         , (*A 482(P  94)*)  175 , (*A 483(P  95)*)  177 , (*A 484(P  96)*)  176
         , (*A 485(P  97)*)  176 , (*A 486(P  98)*)  178 , (*A 487(P  99)*)  178
         , (*A 488(P 100)*)  179 , (*A 489(P 101)*)  180 , (*A 490(P 102)*)  160
         , (*A 491(P 103)*)  160 , (*A 492(P 104)*)  181 , (*A 493(P 105)*)  181
         , (*A 494(P 106)*)  152 , (*A 495(P 107)*)  152 , (*A 496(P 108)*)  152
         , (*A 497(P 109)*)  152 , (*A 498(P 110)*)  152 , (*A 499(P 111)*)  152
         , (*A 500(P 112)*)  152 , (*A 501(P 113)*)  152 , (*A 502(P 114)*)  152
         , (*A 503(P 115)*)  152 , (*A 504(P 116)*)  152 , (*A 505(P 117)*)  152
         , (*A 506(P 118)*)  152 , (*A 507(P 119)*)  152 , (*A 508(P 120)*)  152
         , (*A 509(P 121)*)  152 , (*A 510(P 122)*)  152 , (*A 511(P 123)*)  152
         , (*A 512(P 124)*)  198 , (*A 513(P 125)*)  200 , (*A 514(P 126)*)  199
         , (*A 515(P 127)*)  199 , (*A 516(P 128)*)  201 , (*A 517(P 129)*)  201
         , (*A 518(P 130)*)  202 , (*A 519(P 131)*)  152 , (*A 520(P 132)*)  203
         , (*A 521(P 133)*)  203 , (*A 522(P 134)*)  204 , (*A 523(P 135)*)  204
         , (*A 524(P 136)*)  205 , (*A 525(P 137)*)  152 , (*A 526(P 138)*)  206
         , (*A 527(P 139)*)  206 , (*A 528(P 140)*)  206 , (*A 529(P 141)*)  207
         , (*A 530(P 142)*)  207 , (*A 531(P 143)*)  209 , (*A 532(P 144)*)  208
         , (*A 533(P 145)*)  211 , (*A 534(P 146)*)  211 , (*A 535(P 147)*)  211
         , (*A 536(P 148)*)  212 , (*A 537(P 149)*)  212 , (*A 538(P 150)*)  214
         , (*A 539(P 151)*)  213 , (*A 540(P 152)*)  215 , (*A 541(P 153)*)  215
         , (*A 542(P 154)*)  215 , (*A 543(P 155)*)  216 , (*A 544(P 156)*)  216
         , (*A 545(P 157)*)  216 , (*A 546(P 158)*)  218 , (*A 547(P 159)*)  217
         , (*A 548(P 160)*)  152 , (*A 549(P 161)*)  219 , (*A 550(P 162)*)  152
         , (*A 551(P 163)*)  210 , (*A 552(P 164)*)  220 , (*A 553(P 165)*)  223
         , (*A 554(P 166)*)  223 , (*A 555(P 167)*)  224 , (*A 556(P 168)*)  224
         , (*A 557(P 169)*)  226 , (*A 558(P 170)*)  226 , (*A 559(P 171)*)  226
         , (*A 560(P 172)*)  226 , (*A 561(P 173)*)  225 , (*A 562(P 174)*)  227
         , (*A 563(P 175)*)  228 , (*A 564(P 176)*)  228 , (*A 565(P 177)*)  229
         , (*A 566(P 178)*)  229 , (*A 567(P 179)*)  221 , (*A 568(P 180)*)  221
         , (*A 569(P 181)*)  222 , (*A 570(P 182)*)  222 , (*A 571(P 183)*)  222
         , (*A 572(P 184)*)  230 , (*A 573(P 185)*)  232 , (*A 574(P 186)*)  231
         , (*A 575(P 187)*)  233 , (*A 576(P 188)*)  231 , (*A 577(P 189)*)  161
         , (*A 578(P 190)*)  234 , (*A 579(P 191)*)  234 , (*A 580(P 192)*)  235
         , (*A 581(P 193)*)  235 , (*A 582(P 194)*)  236 , (*A 583(P 195)*)  236
         , (*A 584(P 196)*)  237 , (*A 585(P 197)*)  237 , (*A 586(P 198)*)  238
         , (*A 587(P 199)*)  238 , (*A 588(P 200)*)  240 , (*A 589(P 201)*)  240
         , (*A 590(P 202)*)  242 , (*A 591(P 203)*)  242 , (*A 592(P 204)*)  244
         , (*A 593(P 205)*)  244 , (*A 594(P 206)*)  244 , (*A 595(P 207)*)  244
         , (*A 596(P 208)*)  244 , (*A 597(P 209)*)  246 , (*A 598(P 210)*)  247
         , (*A 599(P 211)*)  247 , (*A 600(P 212)*)  248 , (*A 601(P 213)*)  248
         , (*A 602(P 214)*)  247 , (*A 603(P 215)*)  249 , (*A 604(P 216)*)  249
         , (*A 605(P 217)*)  249 , (*A 606(P 218)*)  250 , (*A 607(P 219)*)  250
         , (*A 608(P 220)*)  246 , (*A 609(P 221)*)  246 , (*A 610(P 222)*)  246
         , (*A 611(P 223)*)  246 , (*A 612(P 224)*)  246 , (*A 613(P 225)*)  246
         , (*A 614(P 226)*)  246 , (*A 615(P 227)*)  246 , (*A 616(P 228)*)  246
         , (*A 617(P 229)*)  246 , (*A 618(P 230)*)  246 , (*A 619(P 231)*)  246
         , (*A 620(P 232)*)  239 , (*A 621(P 233)*)  239 , (*A 622(P 234)*)  239
         , (*A 623(P 235)*)  239 , (*A 624(P 236)*)  239 , (*A 625(P 237)*)  239
         , (*A 626(P 238)*)  239 , (*A 627(P 239)*)  241 , (*A 628(P 240)*)  241
         , (*A 629(P 241)*)  241 , (*A 630(P 242)*)  243 , (*A 631(P 243)*)  243
         , (*A 632(P 244)*)  243 , (*A 633(P 245)*)  243 , (*A 634(P 246)*)  245
         , (*A 635(P 247)*)  245 , (*A 636(P 248)*)  251 , (*A 637(P 249)*)  135
         , (*A 638(P 250)*)  252 , (*A 639(P 251)*)  252 , (*A 640(P 252)*)  252
         , (*A 641(P 253)*)  252 , (*A 642(P 254)*)  252 , (*A 643(P 255)*)  252
         , (*A 644(P 256)*)  127 , (*A 645(P 257)*)  127 , (*A 646(P 258)*)  254
         , (*A 647(P 259)*)  254 , (*A 648(P 260)*)  131 , (*A 649(P 261)*)  131
         , (*A 650(P 262)*)  255 , (*A 651(P 263)*)  255 , (*A 652(P 264)*)  256
         , (*A 653(P 265)*)  257
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   95
         , (*:   9*)   66 , (*:  10*)   14 , (*:  11*)   14
         , (*:  12*)   95 , (*:  13*)   30 , (*:  14*)   95
         , (*:  15*)   66 , (*:  16*)   95 , (*:  17*)   66
         , (*:  18*)   95 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   95 , (*:  23*)   69
         , (*:  24*)   70 , (*:  25*)   70 , (*:  26*)   95
         , (*:  27*)   19 , (*:  28*)   95 , (*:  29*)   67
         , (*:  30*)   19 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)    9
         , (*:  36*)    9 , (*:  37*)   66 , (*:  38*)   68
         , (*:  39*)   95 , (*:  40*)   95 , (*:  41*)   52
         , (*:  42*)   11 , (*:  43*)   95 , (*:  44*)   19
         , (*:  45*)   76 , (*:  46*)   76 , (*:  47*)   76
         , (*:  48*)   95 , (*:  49*)   19 , (*:  50*)   19
         , (*:  51*)   95 , (*:  52*)   19 , (*:  53*)   19
         , (*:  54*)   96 , (*:  55*)   96 , (*:  56*)   96
         , (*:  57*)   67 , (*:  58*)   95 , (*:  59*)    5
         , (*:  60*)   70 , (*:  61*)   67 , (*:  62*)   96
         , (*:  63*)   19 , (*:  64*)   96 , (*:  65*)   19
         , (*:  66*)   96 , (*:  67*)    5 , (*:  68*)   96
         , (*:  69*)    5 , (*:  70*)   96 , (*:  71*)    5
         , (*:  72*)   96 , (*:  73*)   96 , (*:  74*)    5
         , (*:  75*)   95 , (*:  76*)   96 , (*:  77*)   19
         , (*:  78*)    5 , (*:  79*)    5 , (*:  80*)   81
         , (*:  81*)   96 , (*:  82*)   70 , (*:  83*)   96
         , (*:  84*)   70 , (*:  85*)    5 , (*:  86*)   19
         , (*:  87*)   19 , (*:  88*)   19 , (*:  89*)   39
         , (*:  90*)   39 , (*:  91*)   39 , (*:  92*)   19
         , (*:  93*)   19 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   19 , (*:  98*)   69
         , (*:  99*)   70 , (*: 100*)   70 , (*: 101*)   70
         , (*: 102*)   70 , (*: 103*)   95 , (*: 104*)   66
         , (*: 105*)   66 , (*: 106*)   95 , (*: 107*)   69
         , (*: 108*)   19 , (*: 109*)   95 , (*: 110*)   19
         , (*: 111*)    6 , (*: 112*)   76 , (*: 113*)   76
         , (*: 114*)   76 , (*: 115*)   95 , (*: 116*)   66
         , (*: 117*)   96 , (*: 118*)   19 , (*: 119*)   19
         , (*: 120*)   19 , (*: 121*)   19 , (*: 122*)   68
         , (*: 123*)   96 , (*: 124*)   19 , (*: 125*)   68
         , (*: 126*)   96 , (*: 127*)   66 , (*: 128*)    9
         , (*: 129*)    9 , (*: 130*)   66 , (*: 131*)   68
         , (*: 132*)   95 , (*: 133*)   66 , (*: 134*)    9
         , (*: 135*)   68 , (*: 136*)   95 , (*: 137*)    9
         , (*: 138*)   66 , (*: 139*)   66 , (*: 140*)    9
         , (*: 141*)    9 , (*: 142*)   66 , (*: 143*)   66
         , (*: 144*)   69 , (*: 145*)   66 , (*: 146*)    9
         , (*: 147*)   95 , (*: 148*)   66 , (*: 149*)    9
         , (*: 150*)    9 , (*: 151*)   19 , (*: 152*)   19
         , (*: 153*)   74 , (*: 154*)   96 , (*: 155*)   19
         , (*: 156*)   19 , (*: 157*)    9 , (*: 158*)   66
         , (*: 159*)   95 , (*: 160*)   66 , (*: 161*)   95
         , (*: 162*)   95 , (*: 163*)   69 , (*: 164*)   19
         , (*: 165*)   95 , (*: 166*)   67 , (*: 167*)   66
         , (*: 168*)    9 , (*: 169*)    9 , (*: 170*)    9
         , (*: 171*)    9 , (*: 172*)   19 , (*: 173*)   19
         , (*: 174*)   95 , (*: 175*)   67 , (*: 176*)   69
         , (*: 177*)   69 , (*: 178*)   70 , (*: 179*)   70
         , (*: 180*)   66 , (*: 181*)   14 , (*: 182*)   14
         , (*: 183*)   19 , (*: 184*)   19 , (*: 185*)   95
         , (*: 186*)   67 , (*: 187*)   69 , (*: 188*)   69
         , (*: 189*)   66 , (*: 190*)    9 , (*: 191*)    9
         , (*: 192*)    9 , (*: 193*)   95 , (*: 194*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 195)*)  410 (*P21*) , (*RR: 196)*)  412 (*P23*)
         , (*RR: 197)*)  414 (*P25*) , (*RR: 198)*)  402 (*P13*)
         , (*RR: 199)*)  406 (*P17*) , (*RR: 200)*)  427 (*P38*)
         , (*RR: 201)*)  426 (*P37*) , (*RR: 202)*)  422 (*P33*)
         , (*RR: 203)*)  429 (*P40*) , (*RR: 204)*)  428 (*P39*)
         , (*RR: 205)*)  430 (*P41*) , (*RR: 206)*)  419 (*P30*)
         , (*RR: 207)*)  437 (*P48*) , (*RR: 208)*)  403 (*P14*)
         , (*RR: 209)*)  455 (*P66*) , (*RR: 210)*)  572 (*P183*)
         , (*RR: 211)*)  475 (*P86*) , (*RR: 212)*)  465 (*P76*)
         , (*RR: 213)*)  482 (*P93*) , (*RR: 214)*)  405 (*P16*)
         , (*RR: 215)*)  461 (*P72*) , (*RR: 216)*)  460 (*P71*)
         , (*RR: 217)*)  549 (*P160*) , (*RR: 218)*)  524 (*P135*)
         , (*RR: 219)*)  451 (*P62*) , (*RR: 220)*)  452 (*P63*)
         , (*RR: 221)*)  512 (*P123*) , (*RR: 222)*)  449 (*P60*)
         , (*RR: 223)*)  518 (*P129*) , (*RR: 224)*)  513 (*P124*)
         , (*RR: 225)*)  440 (*P51*) , (*RR: 226)*)  441 (*P52*)
         , (*RR: 227)*)  634 (*P245*) , (*RR: 228)*)  635 (*P246*)
         , (*RR: 229)*)  597 (*P208*) , (*RR: 230)*)  608 (*P219*)
         , (*RR: 231)*)  609 (*P220*) , (*RR: 232)*)  610 (*P221*)
         , (*RR: 233)*)  611 (*P222*) , (*RR: 234)*)  612 (*P223*)
         , (*RR: 235)*)  613 (*P224*) , (*RR: 236)*)  614 (*P225*)
         , (*RR: 237)*)  617 (*P228*) , (*RR: 238)*)  618 (*P229*)
         , (*RR: 239)*)  615 (*P226*) , (*RR: 240)*)  616 (*P227*)
         , (*RR: 241)*)  626 (*P237*) , (*RR: 242)*)  620 (*P231*)
         , (*RR: 243)*)  621 (*P232*) , (*RR: 244)*)  622 (*P233*)
         , (*RR: 245)*)  623 (*P234*) , (*RR: 246)*)  624 (*P235*)
         , (*RR: 247)*)  625 (*P236*) , (*RR: 248)*)  627 (*P238*)
         , (*RR: 249)*)  628 (*P239*) , (*RR: 250)*)  629 (*P240*)
         , (*RR: 251)*)  632 (*P243*) , (*RR: 252)*)  633 (*P244*)
         , (*RR: 253)*)  630 (*P241*) , (*RR: 254)*)  631 (*P242*)
         , (*RR: 255)*)  593 (*P204*) , (*RR: 256)*)  599 (*P210*)
         , (*RR: 257)*)  598 (*P209*) , (*RR: 258)*)  602 (*P213*)
         , (*RR: 259)*)  619 (*P230*) , (*RR: 260)*)  525 (*P136*)
         , (*RR: 261)*)  546 (*P157*) , (*RR: 262)*)  531 (*P142*)
         , (*RR: 263)*)  560 (*P171*) , (*RR: 264)*)  558 (*P169*)
         , (*RR: 265)*)  559 (*P170*) , (*RR: 266)*)  552 (*P163*)
         , (*RR: 267)*)  570 (*P181*) , (*RR: 268)*)  571 (*P182*)
         , (*RR: 269)*)  538 (*P149*) , (*RR: 270)*)  547 (*P158*)
         , (*RR: 271)*)  459 (*P70*) , (*RR: 272)*)  471 (*P82*)
         , (*RR: 273)*)  470 (*P81*) , (*RR: 274)*)  463 (*P74*)
         , (*RR: 275)*)  464 (*P75*) , (*RR: 276)*)  469 (*P80*)
         , (*RR: 277)*)  473 (*P84*) , (*RR: 278)*)  474 (*P85*)
         , (*RR: 279)*)  480 (*P91*) , (*RR: 280)*)  479 (*P90*)
         , (*RR: 281)*)  487 (*P98*) , (*RR: 282)*)  486 (*P97*)
         , (*RR: 283)*)  574 (*P185*) , (*RR: 284)*)  575 (*P186*)
         , (*RR: 285)*)  576 (*P187*) , (*RR: 286)*)  637 (*P248*)
         , (*RR: 287)*)  436 (*P47*) , (*RR: 288)*)  407 (*P18*)
         , (*RR: 289)*)  409 (*P20*) , (*RR: 290)*)  418 (*P29*)
         , (*RR: 291)*)  411 (*P22*) , (*RR: 292)*)  413 (*P24*)
         , (*RR: 293)*)  390 (*P1*) , (*RR: 294)*)  391 (*P2*)
         , (*RR: 295)*)  392 (*P3*) , (*RR: 296)*)  393 (*P4*)
         , (*RR: 297)*)  394 (*P5*) , (*RR: 298)*)  395 (*P6*)
         , (*RR: 299)*)  424 (*P35*) , (*RR: 300)*)  423 (*P34*)
         , (*RR: 301)*)  404 (*P15*) , (*RR: 302)*)  421 (*P32*)
         , (*RR: 303)*)  442 (*P53*) , (*RR: 304)*)  456 (*P67*)
         , (*RR: 305)*)  450 (*P61*) , (*RR: 306)*)  495 (*P106*)
         , (*RR: 307)*)  496 (*P107*) , (*RR: 308)*)  497 (*P108*)
         , (*RR: 309)*)  498 (*P109*) , (*RR: 310)*)  499 (*P110*)
         , (*RR: 311)*)  500 (*P111*) , (*RR: 312)*)  501 (*P112*)
         , (*RR: 313)*)  502 (*P113*) , (*RR: 314)*)  503 (*P114*)
         , (*RR: 315)*)  504 (*P115*) , (*RR: 316)*)  505 (*P116*)
         , (*RR: 317)*)  506 (*P117*) , (*RR: 318)*)  507 (*P118*)
         , (*RR: 319)*)  508 (*P119*) , (*RR: 320)*)  509 (*P120*)
         , (*RR: 321)*)  510 (*P121*) , (*RR: 322)*)  511 (*P122*)
         , (*RR: 323)*)  517 (*P128*) , (*RR: 324)*)  516 (*P127*)
         , (*RR: 325)*)  519 (*P130*) , (*RR: 326)*)  522 (*P133*)
         , (*RR: 327)*)  607 (*P218*) , (*RR: 328)*)  581 (*P192*)
         , (*RR: 329)*)  589 (*P200*) , (*RR: 330)*)  590 (*P201*)
         , (*RR: 331)*)  591 (*P202*) , (*RR: 332)*)  600 (*P211*)
         , (*RR: 333)*)  580 (*P191*) , (*RR: 334)*)  588 (*P199*)
         , (*RR: 335)*)  601 (*P212*) , (*RR: 336)*)  592 (*P203*)
         , (*RR: 337)*)  606 (*P217*) , (*RR: 338)*)  605 (*P216*)
         , (*RR: 339)*)  604 (*P215*) , (*RR: 340)*)  595 (*P206*)
         , (*RR: 341)*)  492 (*P103*) , (*RR: 342)*)  488 (*P99*)
         , (*RR: 343)*)  523 (*P134*) , (*RR: 344)*)  521 (*P132*)
         , (*RR: 345)*)  542 (*P153*) , (*RR: 346)*)  530 (*P141*)
         , (*RR: 347)*)  555 (*P166*) , (*RR: 348)*)  563 (*P174*)
         , (*RR: 349)*)  550 (*P161*) , (*RR: 350)*)  567 (*P178*)
         , (*RR: 351)*)  447 (*P58*) , (*RR: 352)*)  446 (*P57*)
         , (*RR: 353)*)  551 (*P162*) , (*RR: 354)*)  565 (*P176*)
         , (*RR: 355)*)  561 (*P172*) , (*RR: 356)*)  554 (*P165*)
         , (*RR: 357)*)  556 (*P167*) , (*RR: 358)*)  532 (*P143*)
         , (*RR: 359)*)  528 (*P139*) , (*RR: 360)*)  529 (*P140*)
         , (*RR: 361)*)  537 (*P148*) , (*RR: 362)*)  535 (*P146*)
         , (*RR: 363)*)  536 (*P147*) , (*RR: 364)*)  539 (*P150*)
         , (*RR: 365)*)  490 (*P101*) , (*RR: 366)*)  462 (*P73*)
         , (*RR: 367)*)  638 (*P249*) , (*RR: 368)*)  466 (*P77*)
         , (*RR: 369)*)  472 (*P83*) , (*RR: 370)*)  639 (*P250*)
         , (*RR: 371)*)  481 (*P92*) , (*RR: 372)*)  476 (*P87*)
         , (*RR: 373)*)  643 (*P254*) , (*RR: 374)*)  483 (*P94*)
         , (*RR: 375)*)  641 (*P252*) , (*RR: 376)*)  573 (*P184*)
         , (*RR: 377)*)  653 (*P264*) , (*RR: 378)*)  651 (*P262*)
         , (*RR: 379)*)  652 (*P263*) , (*RR: 380)*)  649 (*P260*)
         , (*RR: 381)*)  650 (*P261*) , (*RR: 382)*)  642 (*P253*)
         , (*RR: 383)*)  646 (*P257*) , (*RR: 384)*)  640 (*P251*)
         , (*RR: 385)*)  647 (*P258*) , (*RR: 386)*)  435 (*P46*)
         , (*RR: 387)*)  434 (*P45*) , (*RR: 388)*)  408 (*P19*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 389 => (* P1 _0000_ (258): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 390,293 => (* P2 Compilation (109): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 391,294 => (* P3 Compilation (109): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 392,295 => (* P4 Compilation (109): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 393,296 => (* P5 Compilation (109): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 394,297 => (* P6 Compilation (109): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 395,298 => (* P7 Compilation (109): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 109;

              | 396 => (* P8 InterfaceKind (115): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 115;
                (* line 288 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 397 => (* P9 ModuleKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 398 => (* P10 GenInterfaceKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 399 => (* P11 GenModuleKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 400 => (* P12 InstInterfaceKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 401 => (* P13 InstModuleKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 402,198 => (* P14 InterfaceLt (122): OptUnsafe StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 122;
                (* line 306 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 403,208 => (* P15 InstInterface (113): InterfaceLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 113;
                (* line 325 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 404,301 => (* P16 InterfaceMiddle (126): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 126;
                (* line 332 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 405,214 => (* P17 Interface (108): InterfaceMiddle BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 108;
                (* line 343 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ; 
                       END ; 
                     
              | 406,199 => (* P18 ModuleLt (128): OptUnsafe StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 128;
                (* line 366 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END ; 
                     
              | 407,288 => (* P19 InstModule (114): ModuleLt StkEqual StkIdent GenActualList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 387 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 408,388 => (* P20 ModuleMiddle (130): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 130;
                (* line 394 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END ; 
                     
              | 409,289 => (* P21 Module (110): ModuleMiddle BlockDeclList StkRwBEGIN StmtList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 110;
                (* line 406 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 410,195 => (* P22 GenInterfaceLt (132): StkRwGENERIC StkRwINTERFACE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 432 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 411,291 => (* P23 GenInterface (111): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone BlockDeclList StkRwEND StkIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 111;
                (* line 452 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 412,196 => (* P24 GenModuleLt (134): StkRwGENERIC StkRwMODULE StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 134;
                (* line 460 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 413,292 => (* P25 GenModule (112): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block StkIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 112;
                (* line 480 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+7] . Scan , Ukt . UkGenModule ) ;
                     
              | 414,197 => (* P26 OptUnsafe (121): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 121;
                (* line 489 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 415 => (* P27 OptUnsafe (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 490 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 416 => (* P28 OptSemicolon (136): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 136;

              | 417 => (* P29 OptSemicolon (136): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 136;

              | 418,290 => (* P30 GenFormalList (133): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 133;
                (* line 499 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 419,206 => (* P31 GenActualList (123): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 123;
                (* line 505 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 420 => (* P32 ImportList (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 421,302 => (* P33 ImportList (124): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 422,202 => (* P34 Import (138): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 423,300 => (* P35 ImportItemPlusList (139): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 139;

              | 424,299 => (* P36 ImportItemPlusList (139): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 139;

              | 425 => (* P37 ImportItem (140): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;
                (* line 524 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 426,201 => (* P38 ImportItem (140): StkIdent StkRwAS StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 140;
                (* line 527 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 427,200 => (* P39 FromImportLt (141): StkRwFROM StkIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 531 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 428,204 => (* P40 Import (138): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;

              | 429,203 => (* P41 FromImportIdPlusList (142): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 142;
                (* line 542 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 430,205 => (* P42 FromImportIdPlusList (142): FromImportIdPlusList StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;
                (* line 547 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 431 => (* P43 ExpImpDone (125): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 125;
                (* line 552 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 432 => (* P44 Exports (129): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 129;
                (* line 559 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 433 => (* P45 Exports (129): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 129;

              | 434,387 => (* P46 ExportIdPlusList (143): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 435,386 => (* P47 ExportIdPlusList (143): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 436,287 => (* P48 ExportIdent (144): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 579 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 437,207 => (* P49 IdentRef (145): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 145;
                (* line 594 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 438 => (* P50 IdPlusList (146): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 598 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 439 => (* P51 IdPlusList (146): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 602 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 440,225 => (* P52 DeclIdListElems (147): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;
                (* line 614 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Valid Id count. *)
                         := ORD
                              ( FM3Pass1 . DeclIdL2R
                                  ( Itk . ItkDeclId 
                                  , FM3Decls . TopDeclInfo ( ) . DiKind
                                  , IdAttribute := yyAttributeStack^[yyStackPtr+1]
                                  )
                              ) ;
                     
              | 441,226 => (* P53 DeclIdListElems (147): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;
                (* line 625 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( Itk . ItkDeclId 
                            , FM3Decls . TopDeclInfo ( ) . DiKind
                            , IdAttribute := yyAttributeStack^[yyStackPtr+3]
                            )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *) yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;  
                       ELSE yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id count, no increase. *) ; 
                       END (*IF*) ;
                     
              | 442,303 => (* P54 IdStarList (137): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 638 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 443 => (* P55 IdStarList (137): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 137;
                (* line 640 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 444 => (* P56 QualIdentStarList (148): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 148;
                (* line 644 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 445 => (* P57 QualIdentStarList (148): QualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 646 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 446,352 => (* P58 QualIdentPlusList (149): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 648 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 447,351 => (* P59 QualIdentPlusList (149): QualIdentPlusList StkComma QualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 149;
                (* line 650 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 448 => (* P60 QualIdent (150): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 150;
                (* line 654 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 449,222 => (* P61 QualIdent (150): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 660 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaIsReservedId := yyAttributeStack^[yyStackPtr+1] . Scan . SaIsReservedId ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 450,305 => (* P62 TypeId (151): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;

              | 451,219 => (* P63 TypeId (151): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 672 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 452,220 => (* P64 TypeId (151): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 151;
                (* line 677 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedId
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 453 => (* P65 OptConstType (153): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 153;
                (* line 687 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 454 => (* P66 OptConstType (153): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 153;
                (* line 689 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 455,209 => (* P67 ConstDeclGroupLt (154): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 698 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 456,304 => (* P68 ConstDeclGroup (156): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 156;
                (* line 701 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 457 => (* P69 ConstDeclList (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 706 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 458 => (* P70 ConstDeclList (155): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 712 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 459,271 => (* P71 ConstDeclPlus (157): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 717 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 460,216 => (* P72 ConstDeclPlus (157): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 157;
                (* line 722 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 461,215 => (* P73 ConstDeclId (159): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 159;
                (* line 740 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 462,366 => (* P74 ConstDecl (158): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 158;
                (* line 747 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCPB_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                           
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 463,274 => (* P75 TypeRelation (162): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 773 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 464,275 => (* P76 TypeRelation (162): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 162;
                (* line 775 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 465,212 => (* P77 TypeDeclGroupLt (163): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 163;
                (* line 786 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 466,368 => (* P78 TypeDeclGroup (165): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 165;
                (* line 789 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 467 => (* P79 TypeDeclList (164): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 164;
                (* line 794 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 468 => (* P80 TypeDeclList (164): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 164;
                (* line 800 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 469,276 => (* P81 TypeDeclPlus (166): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 805 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 470,273 => (* P82 TypeDeclPlus (166): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 166;
                (* line 810 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 471,272 => (* P83 TypeDeclId (168): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 826 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId , Dkt . DkType , yyAttributeStack^[yyStackPtr+1] )
                                ) 
                     
              | 472,369 => (* P84 TypeDecl (167): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 167;
                (* line 833 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 473,277 => (* P85 RevelationRelation (169): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 853 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 474,278 => (* P86 RevelationRelation (169): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 855 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 475,211 => (* P87 RevelationGroupLt (170): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 866 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 476,372 => (* P88 RevelationGroup (172): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 869 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 477 => (* P89 RevelationList (171): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 171;
                (* line 874 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 478 => (* P90 RevelationList (171): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 171;
                (* line 880 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 479,280 => (* P91 RevelationPlus (173): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 173;
                (* line 885 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 480,279 => (* P92 RevelationPlus (173): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 890 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 481,371 => (* P93 Revelation (174): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 174;
                (* line 906 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 482,213 => (* P94 VarDeclGroupLt (175): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 933 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclInfoDepth *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 483,374 => (* P95 VarDeclGroup (177): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 177;
                (* line 947 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 484 => (* P96 VarDeclList (176): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 176;
                (* line 953 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 485 => (* P97 VarDeclList (176): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 959 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 486,282 => (* P98 VarDeclPlus (178): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 972 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 487,281 => (* P99 VarDeclPlus (178): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 178;
                (* line 977 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 488,342 => (* P100 VarDecl (179): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 995 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclInfo = FM3Decls . TopDeclInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                            ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 489 => (* P101 VarDeclIds (180): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 180;
                (* line 1023 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 490,365 => (* P102 OptDeclType (160): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 160;
                (* line 1035 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 491 => (* P103 OptDeclType (160): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 160;
                (* line 1039 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclTypeAbsent ) ; 
                     
              | 492,341 => (* P104 OptDeclValue (181): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 181;
                (* line 1044 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 493 => (* P105 OptDeclValue (181): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 181;
                (* line 1048 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_L ( Itk . ItkDeclValAbsent ) ; 
                     
              | 494 => (* P106 Type (152): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 495,306 => (* P107 Type (152): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 152;
                (* line 1058 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFDefLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 496,307 => (* P108 Type (152): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 497,308 => (* P109 Type (152): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 498,309 => (* P110 Type (152): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 499,310 => (* P111 Type (152): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 500,311 => (* P112 Type (152): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 501,312 => (* P113 Type (152): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 502,313 => (* P114 Type (152): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 503,314 => (* P115 Type (152): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 504,315 => (* P116 Type (152): StkRiDLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 505,316 => (* P117 Type (152): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 506,317 => (* P118 Type (152): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 507,318 => (* P119 Type (152): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 508,319 => (* P120 Type (152): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 509,320 => (* P121 Type (152): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 510,321 => (* P122 Type (152): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 511,322 => (* P123 Type (152): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 512,221 => (* P124 EnumTypeLt (198): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 198;
                (* line 1085 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the enum type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 513,224 => (* P125 EnumType (200): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 200;
                (* line 1101 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 514 => (* P126 EnumLitList (199): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 199;
                (* line 1118 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 515 => (* P127 EnumLitList (199): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 199;
                (* line 1121 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 516,324 => (* P128 EnumLitPlus (201): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 201;
                (* line 1124 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 517,323 => (* P129 EnumLitPlus (201): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 201;
                (* line 1127 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 518,223 => (* P130 EnumLit (202): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 202;
                (* line 1130 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Itk . ItkDeclId
                                    , Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 519,325 => (* P131 Type (152): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 520 => (* P132 FieldDeclList (203): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 203;
                (* line 1153 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 521,344 => (* P133 FieldDeclList (203): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 203;
                (* line 1161 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 522,326 => (* P134 FieldDeclPlus (204): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 204;
                (* line 1170 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 523,343 => (* P135 FieldDeclPlus (204): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 204;
                (* line 1173 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 524,218 => (* P136 RecTypeLt (205): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 205;
                (* line 1185 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 525,260 => (* P137 Type (152): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 1213 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 526 => (* P138 MethodDeclList (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;
                (* line 1235 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 527 => (* P139 MethodDeclList (206): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 206;
                (* line 1243 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 528,359 => (* P140 MethodDeclList (206): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 206;
                (* line 1248 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 529,360 => (* P141 MethodDeclPlus (207): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1257 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 530,346 => (* P142 MethodDeclPlus (207): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 207;
                (* line 1260 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 531,262 => (* P143 MethodDeclLt (209): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 209;
                (* line 1272 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] )
                                  ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 532,358 => (* P144 MethodDecl (208): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 208;
                (* line 1295 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 533 => (* P145 OverrideList (211): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 211;
                (* line 1325 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 534 => (* P146 OverrideList (211): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1333 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 535,362 => (* P147 OverrideList (211): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 211;
                (* line 1338 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 536,363 => (* P148 OverridePlus (212): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 212;
                (* line 1347 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 537,361 => (* P149 OverridePlus (212): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 212;
                (* line 1350 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 538,269 => (* P150 OverrideLt (214): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1362 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 539,364 => (* P151 Override (213): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1368 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 540 => (* P152 Brand (215): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 215;
                (* line 1380 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 541 => (* P153 Brand (215): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1385 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 542,345 => (* P154 Brand (215): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 215;
                (* line 1390 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 543 => (* P155 Supertype (216): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 216;
                (* line 1397 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 544 => (* P156 Supertype (216): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1403 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 545 => (* P157 Supertype (216): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1412 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 546,261 => (* P158 ObjTypeLt (218): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 218;
                (* line 1423 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclInfoDepth *) 
                           := FM3Decls . PushDeclInfo
                                ( FM3Decls . DeclInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdTok := Itk . ItkDeclId
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END; 
                     
              | 547,270 => (* P159 ObjType (217): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 217;
                (* line 1451 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjDefLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclInfoDepth. *)
                         *> 
                       END; 
                     
              | 548 => (* P160 Type (152): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;

              | 549,217 => (* P161 ProcTypeLt (219): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 219;
                (* line 1475 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo ) ;
                       END (*Block*)
                     
              | 550,349 => (* P162 Type (152): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 152;
                (* line 1490 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 551,353 => (* P163 Signature (210): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1498 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 552,266 => (* P164 Formals (220): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1518 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 553 => (* P165 FormalsList (223): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 223;
                (* line 1537 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 554,356 => (* P166 FormalsList (223): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 223;

              | 555,347 => (* P167 FormalPlus (224): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 224;
                (* line 1542 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 556,357 => (* P168 FormalPlus (224): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1552 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 557 => (* P169 FormalLt (226): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 226;
                (* line 1556 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 558,264 => (* P170 FormalLt (226): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 226;
                (* line 1571 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok
                                      := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 559,265 => (* P171 FormalLt (226): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 226;
                (* line 1587 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 560,263 => (* P172 FormalLt (226): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 226;
                (* line 1601 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclInfoDepth after push. *) 
                         := FM3Decls . PushDeclInfo
                              ( FM3Decls . DeclInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdTok := Itk . ItkDeclId
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 561,355 => (* P173 Formal (225): FormalLt FormalIds FormalType FormalExpr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 225;
                (* line 1618 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 562 => (* P174 FormalIds (227): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 227;
                (* line 1673 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid Id Ct. *) ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 563,348 => (* P175 FormalType (228): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 228;
                (* line 1685 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                (* This looks redundant to Itk<mode>FormalType & Itk<mode>FormalVal,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkFormalTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 564 => (* P176 FormalType (228): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 228;
                (* line 1694 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalTypeAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 565,354 => (* P177 FormalExpr (229): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 229;
                (* line 1702 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
                (* This looks redundant to Itk<mode>FormalVal & Itk<mode>FormalRt,
                   which already bracket the type of a formal. 
                       FM3Pass1 . PutBwd_LCP_rp
                         (  Itk . ItkFormalExprLt, yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position );
                *) 
                     
              | 566 => (* P178 FormalExpr (229): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 229;
                (* line 1711 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Expr is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkFormalExprAbsent , FM3Scanner . Attribute . Position ) ;
                     
              | 567,350 => (* P179 ResultType (221): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 221;
                (* line 1719 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 568 => (* P180 ResultType (221): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 221;
                (* line 1726 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 569 => (* P181 Raises (222): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 222;
                (* line 1736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 570,267 => (* P182 Raises (222): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 222;
                (* line 1742 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 571,268 => (* P183 Raises (222): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 222;
                (* line 1749 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 572,210 => (* P184 ProcDeclLt (230): StkRwPROCEDURE StkIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1756 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R
                                      ( Itk . ItkDeclId , Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] )
                                  ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN LScopeKind  := Skt . SkFormalsAndBody ; 
                         ELSE LScopeKind  := Skt . SkFormals ;
                         END (*IF*) ; 
                         LScopeRef
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , LScopeKind 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpScopeNo  ) ;
                       END (*Block*) 
                     
              | 573,376 => (* P185 ProcDecl (232): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 232;
                (* line 1781 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 574,283 => (* P186 OptProcBody (231): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 231;
                (* line 1825 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 575,284 => (* P187 ProcBodyLt (233): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1834 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushLookupScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeLt , LScopeRef ^ . ScpScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 576,285 => (* P188 OptProcBody (231): ProcBodyLt Block StkIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 231;
                (* line 1847 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . LookupScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkLookupScopeRt , LScopeRef ^ . ScpScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopLookupScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 577 => (* P189 Expr (161): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;

              | 578 => (* P190 E0 (234): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 234;

              | 579 => (* P191 E0 (234): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 234;
                (* line 1871 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkORLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 580,333 => (* P192 E1 (235): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;

              | 581,328 => (* P193 E1 (235): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 235;
                (* line 1881 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkANDLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 582 => (* P194 E2 (236): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;

              | 583 => (* P195 E2 (236): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 236;
                (* line 1891 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkNOTLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 584 => (* P196 E3 (237): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 237;

              | 585 => (* P197 E3 (237): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 237;
                (* line 1897 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 586 => (* P198 E4 (238): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 238;

              | 587 => (* P199 E4 (238): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 238;
                (* line 1907 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 588,334 => (* P200 E5 (240): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 240;

              | 589,329 => (* P201 E5 (240): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1917 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 590,330 => (* P202 E6 (242): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;

              | 591,331 => (* P203 E6 (242): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 242;
                (* line 1927 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( yyAttributeStack^[yyStackPtr+1] . PaTok1 , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 592,336 => (* P204 E7 (244): E8WOId SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 244;
                (* line 1940 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 593,255 => (* P205 E7 (244): E8WOId StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 244;
                (* line 1949 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 594 => (* P206 E7 (244): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 595,340 => (* P207 E7 (244): IdentRef SelectorWODot .*)
                DEC (yyStackPtr, 2); yyNonterminal := 244;
                (* line 1960 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 596 => (* P208 E7 (244): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 597,229 => (* P209 E8WOId (246): StkIdent StkDot StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 1974 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 598,257 => (* P210 SelectorWODot (247): StkDeref .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 1978 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDerefLt ;
                       yySynAttribute . PaInt := 0 (* Meaningless. *) ;
                     
              | 599,256 => (* P211 SelectorWODot (247): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 1984 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubscriptLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Subscript count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 600,332 => (* P212 SsPlusList (248): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;
                (* line 1995 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 601,335 => (* P213 SsPlusList (248): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 1998 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 602,258 => (* P214 SelectorWODot (247): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 247;
                (* line 2009 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkCallLt ;
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Actuals count. *) ;
                       FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 603 => (* P215 ActualList (249): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 249;
                (* line 2020 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 604,339 => (* P216 ActualList (249): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2023 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 605,338 => (* P217 ActualList (249): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 249;
                (* line 2026 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 606,337 => (* P218 Actual (250): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;
                (* line 2036 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 607,327 => (* P219 Actual (250): StkIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 250;
                (* line 2041 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 608,230 => (* P220 E8WOId (246): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2052 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 609,231 => (* P221 E8WOId (246): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2059 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 610,232 => (* P222 E8WOId (246): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2066 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 611,233 => (* P223 E8WOId (246): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2076 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 612,234 => (* P224 E8WOId (246): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2086 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 613,235 => (* P225 E8WOId (246): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2093 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 614,236 => (* P226 E8WOId (246): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2100 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 615,239 => (* P227 E8WOId (246): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2108 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 616,240 => (* P228 E8WOId (246): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2115 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 617,237 => (* P229 E8WOId (246): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2122 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 618,238 => (* P230 E8WOId (246): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;
                (* line 2124 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 619,259 => (* P231 E8WOId (246): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;

              | 620,242 => (* P232 ExprRelOp (239): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2128 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkEqualLt ; 
              | 621,243 => (* P233 ExprRelOp (239): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2129 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnequalLt ; 
              | 622,244 => (* P234 ExprRelOp (239): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2130 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessLt ; 
              | 623,245 => (* P235 ExprRelOp (239): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2131 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterLt ; 
              | 624,246 => (* P236 ExprRelOp (239): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2132 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkLessEqualLt ; 
              | 625,247 => (* P237 ExprRelOp (239): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2133 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkGreaterEqualLt ; 
              | 626,241 => (* P238 ExprRelOp (239): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 2134 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkINLt ; 
              | 627,248 => (* P239 ExprAddOp (241): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2137 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryPlusLt ; 
              | 628,249 => (* P240 ExprAddOp (241): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2138 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkBinaryMinusLt ; 
              | 629,250 => (* P241 ExprAddOp (241): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 2139 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkAmpersandLt ; 
              | 630,253 => (* P242 ExprMulOp (243): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2141 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkStarLt ; 
              | 631,254 => (* P243 ExprMulOp (243): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2142 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSlashLt ; 
              | 632,251 => (* P244 ExprMulOp (243): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2143 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkDIVLt ; 
              | 633,252 => (* P245 ExprMulOp (243): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;
                (* line 2144 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkMODLt ; 
              | 634,227 => (* P246 ExprUnaryAddOp (245): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2146 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryPlusLt ; 
              | 635,228 => (* P247 ExprUnaryAddOp (245): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;
                (* line 2147 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkUnaryMinusLt ; 
              | 636 => (* P248 BlockLt (251): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 251;
                (* line 2152 of "FM3Parser.lalr" *)
                
                     
              | 637,286 => (* P249 Block (135): BlockLt BlockDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 135;
                (* line 2156 of "FM3Parser.lalr" *)
                
                     
              | 638,367 => (* P250 BlockDecl (252): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2162 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 639,370 => (* P251 BlockDecl (252): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2166 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 640,384 => (* P252 BlockDecl (252): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2170 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 641,375 => (* P253 BlockDecl (252): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2174 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 642,382 => (* P254 BlockDecl (252): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2178 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 643,373 => (* P255 BlockDecl (252): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2182 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 644 => (* P256 BlockDeclList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;
                (* line 2190 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 645 => (* P257 BlockDeclList (127): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 127;
                (* line 2198 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkBlockDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 646,383 => (* P258 BlockDeclPlus (254): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2207 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 647,385 => (* P259 BlockDeclPlus (254): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 254;
                (* line 2212 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkBlockDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 648 => (* P260 StmtList (131): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 131;
                (* line 2231 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 649,380 => (* P261 StmtList (131): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 131;
                (* line 2239 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 650,381 => (* P262 StmtPlus (255): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 255;
                (* line 2247 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 651,378 => (* P263 StmtPlus (255): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 255;
                (* line 2250 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 652,379 => (* P264 Stmt (256): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 256;

              | 653,377 => (* P265 AssignStmt (257): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2264 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

