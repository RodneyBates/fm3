
(* This file was generated by metaprogram lalr,
   with command line:
   ../lib/lalr -M -g -i -t -d -D -k FM3Parser.lalr
*)




  UNSAFE MODULE FM3Parser;

  IMPORT FM3Scanner;

IMPORT Fmt, OSError, Rd, Thread, Text, TextWr, Word, Wr;

IMPORT Positions, Strings, IntSets, System;

IMPORT FM3SharedUtils;


(* -------------------------------------------------------------------------- *)
                   (* Global insertions from the .lalr file: *)

(* line 43 "FM3Parser.lalr" *)


(* -----------------------------------------------------------------------1- *)
(* This file is part of the FM3 Modula-3 compiler.                           *)
(* Copyright 2023..2025 Rodney M. Bates.                                     *)
(* rodney.m.bates@acm.org                                                    *)
(* Licensed under the MIT License.                                           *)
(* -----------------------------------------------------------------------2- *)

    IMPORT FM3Base;
    IMPORT FM3Decls;
    IMPORT FM3Messages;
    IMPORT FM3Globals;
    IMPORT FM3IntToks AS Itk;
    IMPORT FM3SrcToks AS Stk;
    IMPORT FM3Pass1;
    IMPORT FM3ExpImp;
    FROM FM3Pass1 IMPORT Coord;
    FROM FM3Pass1 IMPORT PutBwd_Attribute;
    FROM FM3Pass1 IMPORT tParsAttribute;
    FROM FM3Pass1 IMPORT ParsAttrNull;
    FROM FM3Pass1 IMPORT
      PutBwd_L , PutBwd_LP , PutBwd_LCr , PutBwd_LCP_rp , PutBwd_LCP_eCP_rP ,
      PutBwd_LCPeCprp , PutBwd_LIP , PutBwd_LIP_rip , PutBwd_EIP , PutBwd_ECIP , 
      PutBwd_ECIP_riP , PutBwd_LCBr , PutBwd_LI3 , PutBwd_LI6 , 
      PutBwd_LCIeCri , PutBwd_LCP_eCP_zCP_rP , Pop4 , Pop8 ;
    FROM FM3Pass1 IMPORT MakeListPos;
    IMPORT FM3Scopes;
    IMPORT FM3Units;
    FROM FM3Utils IMPORT PositionImage;
  

               (* End of global insertions from the .lalr file: *) 
(* -------------------------------------------------------------------------- *)

CONST
   yyInitStackSize      = 100;
   yyStackExpansionFactor = 2.0;
   yyNoState            = 0;

(* -------------------------------------------------------------------------- *)
                        (* Lalr-generated constants: *) 

   yyFirstTerminal          = 0;
   yyLastTerminal           = 108;
   yyFirstSymbol            = 0;
   yyLastSymbol             = 267;
   yyTableMax               = 923;
   yyNTableMax              = 1364;
   yyFirstReadState         = 1;
   yyLastReadState          = 198;
   yyFirstReadTermState             = 199;
   yyLastReadTermState              = 282;
   yyLastReadNontermState           = 399;
   yyFirstReduceState               = 400;
   yyLastReduceState                = 676;
   yyStartState             = 1;
   yyStopState              = 400;

                    (*  End of lalr-generated constants: *) 
(* -------------------------------------------------------------------------- *)

TYPE
   M2SHORTCARD = [ 0 .. 16_FFFF ];
   yyTableElmt = M2SHORTCARD;
   
CONST yyTableElmtBits = BITSIZE ( yyTableElmt );

   (* The conversion to Modula-3 is very fragile, in part due to the
      use of unsafe address arithmetic.
      On the one hand, some types, in some contexts, need to be
      subranges (particularly, as fixed array subscript types),
      and other times, need to have the same size as in Modula-2, to avoid
      undermining various unsafe address arithmetic.  Modula-3 infers
      its own sizes from subranges, except for fields and elements when
      BITS FOR is used.  But assignments involving scalars with BITS FOR
      types present problems and even CM3 code generator failures.

      So if it is a BITS FOR type, its name ends in "Packed", otherwise
      not, the relevant ones ending in "Range".

      Additionally, CM3 has code generator failures assigning between two
      BITS FOR types, at times.  Actual cases where this has happened are
      replaced by two-step copies with an intermediate, unpacked temporary.
  
      These BITS FOR types must occupy exactly a Modula2-SHORTCARD, when used
      as elements or fields, but must their have subrange bounds when
      used as array subscript types. There a few places where a scalar
      of one of these also must occupy exactly a Modula2-SHORTCARD. 
   *)
CONST
   yyFirstFinalState    = yyFirstReadTermState;
   (* ^Any action that does a reduce, i.e., readTermReduce, readNTReduce,
       or simple Reduce.  These are are actions, not true item-set states.
   *) 
   yyLastState          = yyLastReduceState;

TYPE
   yyTCombRangePacked      = BITS yyTableElmtBits FOR [0 .. yyTableMax];
   yyNCombRangePacked      = BITS yyTableElmtBits
                             FOR [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange            = [0 .. yyLastState];
   yyStateRangePacked      = BITS yyTableElmtBits FOR yyStateRange;
   yyReadRange             = [yyFirstReadState .. yyLastReadState];
   yyReadRangePacked       = BITS yyTableElmtBits FOR yyReadRange;
   yyReadReduceRangePacked = BITS yyTableElmtBits
                             FOR [yyFirstReadTermState .. yyLastReadNontermState];
   yyReduceRangePacked     = BITS yyTableElmtBits
                             FOR [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange           = [yyFirstSymbol .. yyLastSymbol];
   yySymbolRangePacked     = BITS yyTableElmtBits FOR yySymbolRange;
   yyTCombType          = RECORD Check, Next: yyStateRangePacked; END;
   yyNCombType          = yyStateRangePacked;
   yyTCombTypePtr       = UNTRACED BRANDED REF  yyTCombType;
   yyNCombTypePtr       = UNTRACED BRANDED REF  yyNCombType;
   yyStackPtrType       = BITS yyTableElmtBits FOR yyTableElmt;
   yyStackType          = REF  ARRAY OF yyStateRangePacked;
   yyAttributeStackType = REF  ARRAY OF tParsAttribute;

VAR
   yyTBasePtr
     (* Subscripted by a state-number action, used in combination
        with a terminal to find the new action after shifting
        the terminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyTCombTypePtr
         {
           (*   0*) ADR (yyTComb [   0]) , (*   1*) ADR (yyTComb [   0])
         , (*   2*) ADR (yyTComb [   1]) , (*   3*) ADR (yyTComb [   0])
         , (*   4*) ADR (yyTComb [   0]) , (*   5*) ADR (yyTComb [   0])
         , (*   6*) ADR (yyTComb [   2]) , (*   7*) ADR (yyTComb [   0])
         , (*   8*) ADR (yyTComb [   0]) , (*   9*) ADR (yyTComb [   1])
         , (*  10*) ADR (yyTComb [   0]) , (*  11*) ADR (yyTComb [   2])
         , (*  12*) ADR (yyTComb [   3]) , (*  13*) ADR (yyTComb [   0])
         , (*  14*) ADR (yyTComb [   4]) , (*  15*) ADR (yyTComb [   0])
         , (*  16*) ADR (yyTComb [   0]) , (*  17*) ADR (yyTComb [   0])
         , (*  18*) ADR (yyTComb [   0]) , (*  19*) ADR (yyTComb [   0])
         , (*  20*) ADR (yyTComb [   5]) , (*  21*) ADR (yyTComb [   0])
         , (*  22*) ADR (yyTComb [   7]) , (*  23*) ADR (yyTComb [   0])
         , (*  24*) ADR (yyTComb [   0]) , (*  25*) ADR (yyTComb [   8])
         , (*  26*) ADR (yyTComb [   0]) , (*  27*) ADR (yyTComb [   0])
         , (*  28*) ADR (yyTComb [   0]) , (*  29*) ADR (yyTComb [   0])
         , (*  30*) ADR (yyTComb [   5]) , (*  31*) ADR (yyTComb [   0])
         , (*  32*) ADR (yyTComb [   0]) , (*  33*) ADR (yyTComb [   0])
         , (*  34*) ADR (yyTComb [  10]) , (*  35*) ADR (yyTComb [   0])
         , (*  36*) ADR (yyTComb [   0]) , (*  37*) ADR (yyTComb [   1])
         , (*  38*) ADR (yyTComb [   0]) , (*  39*) ADR (yyTComb [  13])
         , (*  40*) ADR (yyTComb [  41]) , (*  41*) ADR (yyTComb [  72])
         , (*  42*) ADR (yyTComb [  16]) , (*  43*) ADR (yyTComb [  15])
         , (*  44*) ADR (yyTComb [  70]) , (*  45*) ADR (yyTComb [   0])
         , (*  46*) ADR (yyTComb [   0]) , (*  47*) ADR (yyTComb [   0])
         , (*  48*) ADR (yyTComb [   0]) , (*  49*) ADR (yyTComb [  91])
         , (*  50*) ADR (yyTComb [   0]) , (*  51*) ADR (yyTComb [   0])
         , (*  52*) ADR (yyTComb [   9]) , (*  53*) ADR (yyTComb [  12])
         , (*  54*) ADR (yyTComb [  30]) , (*  55*) ADR (yyTComb [   0])
         , (*  56*) ADR (yyTComb [   2]) , (*  57*) ADR (yyTComb [  92])
         , (*  58*) ADR (yyTComb [   4]) , (*  59*) ADR (yyTComb [ 106])
         , (*  60*) ADR (yyTComb [ 118]) , (*  61*) ADR (yyTComb [   0])
         , (*  62*) ADR (yyTComb [   0]) , (*  63*) ADR (yyTComb [   0])
         , (*  64*) ADR (yyTComb [ 162]) , (*  65*) ADR (yyTComb [   0])
         , (*  66*) ADR (yyTComb [ 160]) , (*  67*) ADR (yyTComb [  21])
         , (*  68*) ADR (yyTComb [  46]) , (*  69*) ADR (yyTComb [ 224])
         , (*  70*) ADR (yyTComb [   0]) , (*  71*) ADR (yyTComb [ 261])
         , (*  72*) ADR (yyTComb [   0]) , (*  73*) ADR (yyTComb [ 282])
         , (*  74*) ADR (yyTComb [   0]) , (*  75*) ADR (yyTComb [ 299])
         , (*  76*) ADR (yyTComb [   0]) , (*  77*) ADR (yyTComb [ 320])
         , (*  78*) ADR (yyTComb [   0]) , (*  79*) ADR (yyTComb [ 376])
         , (*  80*) ADR (yyTComb [  31]) , (*  81*) ADR (yyTComb [ 113])
         , (*  82*) ADR (yyTComb [ 436]) , (*  83*) ADR (yyTComb [   0])
         , (*  84*) ADR (yyTComb [ 524]) , (*  85*) ADR (yyTComb [ 612])
         , (*  86*) ADR (yyTComb [ 650]) , (*  87*) ADR (yyTComb [ 706])
         , (*  88*) ADR (yyTComb [  50]) , (*  89*) ADR (yyTComb [   0])
         , (*  90*) ADR (yyTComb [  43]) , (*  91*) ADR (yyTComb [   0])
         , (*  92*) ADR (yyTComb [  62]) , (*  93*) ADR (yyTComb [ 723])
         , (*  94*) ADR (yyTComb [   3]) , (*  95*) ADR (yyTComb [  65])
         , (*  96*) ADR (yyTComb [   0]) , (*  97*) ADR (yyTComb [   4])
         , (*  98*) ADR (yyTComb [   2]) , (*  99*) ADR (yyTComb [   5])
         , (* 100*) ADR (yyTComb [ 470]) , (* 101*) ADR (yyTComb [  11])
         , (* 102*) ADR (yyTComb [  12]) , (* 103*) ADR (yyTComb [   7])
         , (* 104*) ADR (yyTComb [  80]) , (* 105*) ADR (yyTComb [ 109])
         , (* 106*) ADR (yyTComb [   0]) , (* 107*) ADR (yyTComb [  37])
         , (* 108*) ADR (yyTComb [  39]) , (* 109*) ADR (yyTComb [  73])
         , (* 110*) ADR (yyTComb [ 194]) , (* 111*) ADR (yyTComb [  47])
         , (* 112*) ADR (yyTComb [ 117]) , (* 113*) ADR (yyTComb [ 196])
         , (* 114*) ADR (yyTComb [ 120]) , (* 115*) ADR (yyTComb [ 511])
         , (* 116*) ADR (yyTComb [   0]) , (* 117*) ADR (yyTComb [   0])
         , (* 118*) ADR (yyTComb [ 512]) , (* 119*) ADR (yyTComb [ 146])
         , (* 120*) ADR (yyTComb [   0]) , (* 121*) ADR (yyTComb [  69])
         , (* 122*) ADR (yyTComb [ 128]) , (* 123*) ADR (yyTComb [   4])
         , (* 124*) ADR (yyTComb [  83]) , (* 125*) ADR (yyTComb [   5])
         , (* 126*) ADR (yyTComb [  82]) , (* 127*) ADR (yyTComb [   0])
         , (* 128*) ADR (yyTComb [   6]) , (* 129*) ADR (yyTComb [  86])
         , (* 130*) ADR (yyTComb [   0]) , (* 131*) ADR (yyTComb [  89])
         , (* 132*) ADR (yyTComb [ 357]) , (* 133*) ADR (yyTComb [ 370])
         , (* 134*) ADR (yyTComb [  90]) , (* 135*) ADR (yyTComb [ 100])
         , (* 136*) ADR (yyTComb [   0]) , (* 137*) ADR (yyTComb [  96])
         , (* 138*) ADR (yyTComb [ 373]) , (* 139*) ADR (yyTComb [ 101])
         , (* 140*) ADR (yyTComb [ 613]) , (* 141*) ADR (yyTComb [ 700])
         , (* 142*) ADR (yyTComb [ 105]) , (* 143*) ADR (yyTComb [ 109])
         , (* 144*) ADR (yyTComb [ 759]) , (* 145*) ADR (yyTComb [ 760])
         , (* 146*) ADR (yyTComb [ 110]) , (* 147*) ADR (yyTComb [ 119])
         , (* 148*) ADR (yyTComb [ 127]) , (* 149*) ADR (yyTComb [ 139])
         , (* 150*) ADR (yyTComb [   0]) , (* 151*) ADR (yyTComb [   0])
         , (* 152*) ADR (yyTComb [ 134]) , (* 153*) ADR (yyTComb [   0])
         , (* 154*) ADR (yyTComb [   0]) , (* 155*) ADR (yyTComb [   0])
         , (* 156*) ADR (yyTComb [   8]) , (* 157*) ADR (yyTComb [ 132])
         , (* 158*) ADR (yyTComb [  13]) , (* 159*) ADR (yyTComb [ 201])
         , (* 160*) ADR (yyTComb [  10]) , (* 161*) ADR (yyTComb [ 216])
         , (* 162*) ADR (yyTComb [ 203]) , (* 163*) ADR (yyTComb [   0])
         , (* 164*) ADR (yyTComb [ 192]) , (* 165*) ADR (yyTComb [   0])
         , (* 166*) ADR (yyTComb [   0]) , (* 167*) ADR (yyTComb [ 153])
         , (* 168*) ADR (yyTComb [  17]) , (* 169*) ADR (yyTComb [   0])
         , (* 170*) ADR (yyTComb [ 156]) , (* 171*) ADR (yyTComb [ 158])
         , (* 172*) ADR (yyTComb [   0]) , (* 173*) ADR (yyTComb [   0])
         , (* 174*) ADR (yyTComb [ 423]) , (* 175*) ADR (yyTComb [   1])
         , (* 176*) ADR (yyTComb [  37]) , (* 177*) ADR (yyTComb [  38])
         , (* 178*) ADR (yyTComb [   0]) , (* 179*) ADR (yyTComb [ 170])
         , (* 180*) ADR (yyTComb [ 169]) , (* 181*) ADR (yyTComb [   0])
         , (* 182*) ADR (yyTComb [ 202]) , (* 183*) ADR (yyTComb [ 204])
         , (* 184*) ADR (yyTComb [ 193]) , (* 185*) ADR (yyTComb [ 607])
         , (* 186*) ADR (yyTComb [ 769]) , (* 187*) ADR (yyTComb [ 582])
         , (* 188*) ADR (yyTComb [  39]) , (* 189*) ADR (yyTComb [   0])
         , (* 190*) ADR (yyTComb [ 194]) , (* 191*) ADR (yyTComb [ 207])
         , (* 192*) ADR (yyTComb [ 208]) , (* 193*) ADR (yyTComb [ 212])
         , (* 194*) ADR (yyTComb [ 804]) , (* 195*) ADR (yyTComb [ 815])
         , (* 196*) ADR (yyTComb [ 425]) , (* 197*) ADR (yyTComb [ 184])
         , (* 198*) ADR (yyTComb [ 214])
         };
         
   yyNBasePtr
     (* Subscripted by a state-number action, used in combination
        with a nonterminal to find the new action after shifting
        the nonterminal in this state.
     *) 
     := ARRAY [0 .. yyLastReadState] OF yyNCombTypePtr
         {
           (*   0*) ADR (yyNComb [ 109]) , (*   1*) ADR (yyNComb [ 109])
         , (*   2*) ADR (yyNComb [ 109]) , (*   3*) ADR (yyNComb [ 109])
         , (*   4*) ADR (yyNComb [ 110]) , (*   5*) ADR (yyNComb [ 109])
         , (*   6*) ADR (yyNComb [ 109]) , (*   7*) ADR (yyNComb [ 112])
         , (*   8*) ADR (yyNComb [ 112]) , (*   9*) ADR (yyNComb [ 109])
         , (*  10*) ADR (yyNComb [ 109]) , (*  11*) ADR (yyNComb [ 109])
         , (*  12*) ADR (yyNComb [ 109]) , (*  13*) ADR (yyNComb [ 114])
         , (*  14*) ADR (yyNComb [ 109]) , (*  15*) ADR (yyNComb [ 112])
         , (*  16*) ADR (yyNComb [ 114]) , (*  17*) ADR (yyNComb [ 121])
         , (*  18*) ADR (yyNComb [ 109]) , (*  19*) ADR (yyNComb [ 123])
         , (*  20*) ADR (yyNComb [ 109]) , (*  21*) ADR (yyNComb [ 125])
         , (*  22*) ADR (yyNComb [ 109]) , (*  23*) ADR (yyNComb [ 126])
         , (*  24*) ADR (yyNComb [ 127]) , (*  25*) ADR (yyNComb [ 109])
         , (*  26*) ADR (yyNComb [ 128]) , (*  27*) ADR (yyNComb [ 129])
         , (*  28*) ADR (yyNComb [ 127]) , (*  29*) ADR (yyNComb [ 113])
         , (*  30*) ADR (yyNComb [ 109]) , (*  31*) ADR (yyNComb [ 132])
         , (*  32*) ADR (yyNComb [ 109]) , (*  33*) ADR (yyNComb [ 134])
         , (*  34*) ADR (yyNComb [ 109]) , (*  35*) ADR (yyNComb [ 128])
         , (*  36*) ADR (yyNComb [ 137]) , (*  37*) ADR (yyNComb [ 109])
         , (*  38*) ADR (yyNComb [ 138]) , (*  39*) ADR (yyNComb [ 109])
         , (*  40*) ADR (yyNComb [ 149]) , (*  41*) ADR (yyNComb [ 151])
         , (*  42*) ADR (yyNComb [ 109]) , (*  43*) ADR (yyNComb [ 109])
         , (*  44*) ADR (yyNComb [ 204]) , (*  45*) ADR (yyNComb [ 109])
         , (*  46*) ADR (yyNComb [ 263]) , (*  47*) ADR (yyNComb [ 322])
         , (*  48*) ADR (yyNComb [ 109]) , (*  49*) ADR (yyNComb [ 109])
         , (*  50*) ADR (yyNComb [ 109]) , (*  51*) ADR (yyNComb [ 381])
         , (*  52*) ADR (yyNComb [ 139]) , (*  53*) ADR (yyNComb [ 109])
         , (*  54*) ADR (yyNComb [ 109]) , (*  55*) ADR (yyNComb [ 140])
         , (*  56*) ADR (yyNComb [ 116]) , (*  57*) ADR (yyNComb [ 109])
         , (*  58*) ADR (yyNComb [ 109]) , (*  59*) ADR (yyNComb [ 110])
         , (*  60*) ADR (yyNComb [ 109]) , (*  61*) ADR (yyNComb [ 443])
         , (*  62*) ADR (yyNComb [ 194]) , (*  63*) ADR (yyNComb [ 383])
         , (*  64*) ADR (yyNComb [ 109]) , (*  65*) ADR (yyNComb [ 489])
         , (*  66*) ADR (yyNComb [ 109]) , (*  67*) ADR (yyNComb [ 109])
         , (*  68*) ADR (yyNComb [ 509]) , (*  69*) ADR (yyNComb [ 109])
         , (*  70*) ADR (yyNComb [ 545]) , (*  71*) ADR (yyNComb [ 109])
         , (*  72*) ADR (yyNComb [ 470]) , (*  73*) ADR (yyNComb [ 109])
         , (*  74*) ADR (yyNComb [ 525]) , (*  75*) ADR (yyNComb [ 109])
         , (*  76*) ADR (yyNComb [ 554]) , (*  77*) ADR (yyNComb [ 110])
         , (*  78*) ADR (yyNComb [ 351]) , (*  79*) ADR (yyNComb [ 109])
         , (*  80*) ADR (yyNComb [ 172]) , (*  81*) ADR (yyNComb [ 182])
         , (*  82*) ADR (yyNComb [ 114]) , (*  83*) ADR (yyNComb [ 141])
         , (*  84*) ADR (yyNComb [ 109]) , (*  85*) ADR (yyNComb [ 109])
         , (*  86*) ADR (yyNComb [ 110]) , (*  87*) ADR (yyNComb [ 109])
         , (*  88*) ADR (yyNComb [ 109]) , (*  89*) ADR (yyNComb [ 627])
         , (*  90*) ADR (yyNComb [ 109]) , (*  91*) ADR (yyNComb [ 660])
         , (*  92*) ADR (yyNComb [ 109]) , (*  93*) ADR (yyNComb [ 109])
         , (*  94*) ADR (yyNComb [ 109]) , (*  95*) ADR (yyNComb [ 125])
         , (*  96*) ADR (yyNComb [ 133]) , (*  97*) ADR (yyNComb [ 109])
         , (*  98*) ADR (yyNComb [ 680]) , (*  99*) ADR (yyNComb [ 109])
         , (* 100*) ADR (yyNComb [ 109]) , (* 101*) ADR (yyNComb [ 202])
         , (* 102*) ADR (yyNComb [ 109]) , (* 103*) ADR (yyNComb [ 155])
         , (* 104*) ADR (yyNComb [ 129]) , (* 105*) ADR (yyNComb [ 157])
         , (* 106*) ADR (yyNComb [ 111]) , (* 107*) ADR (yyNComb [ 144])
         , (* 108*) ADR (yyNComb [ 109]) , (* 109*) ADR (yyNComb [ 131])
         , (* 110*) ADR (yyNComb [ 110]) , (* 111*) ADR (yyNComb [ 127])
         , (* 112*) ADR (yyNComb [ 109]) , (* 113*) ADR (yyNComb [ 111])
         , (* 114*) ADR (yyNComb [ 111]) , (* 115*) ADR (yyNComb [ 109])
         , (* 116*) ADR (yyNComb [ 762]) , (* 117*) ADR (yyNComb [ 113])
         , (* 118*) ADR (yyNComb [ 110]) , (* 119*) ADR (yyNComb [ 109])
         , (* 120*) ADR (yyNComb [ 109]) , (* 121*) ADR (yyNComb [ 109])
         , (* 122*) ADR (yyNComb [ 114]) , (* 123*) ADR (yyNComb [ 159])
         , (* 124*) ADR (yyNComb [ 143]) , (* 125*) ADR (yyNComb [ 137])
         , (* 126*) ADR (yyNComb [ 109]) , (* 127*) ADR (yyNComb [ 694])
         , (* 128*) ADR (yyNComb [ 109]) , (* 129*) ADR (yyNComb [ 109])
         , (* 130*) ADR (yyNComb [ 826]) , (* 131*) ADR (yyNComb [ 109])
         , (* 132*) ADR (yyNComb [ 312]) , (* 133*) ADR (yyNComb [ 164])
         , (* 134*) ADR (yyNComb [ 109]) , (* 135*) ADR (yyNComb [ 116])
         , (* 136*) ADR (yyNComb [ 893]) , (* 137*) ADR (yyNComb [ 109])
         , (* 138*) ADR (yyNComb [ 492]) , (* 139*) ADR (yyNComb [ 111])
         , (* 140*) ADR (yyNComb [ 952]) , (* 141*) ADR (yyNComb [ 498])
         , (* 142*) ADR (yyNComb [ 109]) , (* 143*) ADR (yyNComb [ 109])
         , (* 144*) ADR (yyNComb [ 498]) , (* 145*) ADR (yyNComb [ 355])
         , (* 146*) ADR (yyNComb [ 109]) , (* 147*) ADR (yyNComb [ 109])
         , (* 148*) ADR (yyNComb [ 204]) , (* 149*) ADR (yyNComb [ 144])
         , (* 150*) ADR (yyNComb [ 168]) , (* 151*) ADR (yyNComb [ 168])
         , (* 152*) ADR (yyNComb [ 109]) , (* 153*) ADR (yyNComb [1005])
         , (* 154*) ADR (yyNComb [ 109]) , (* 155*) ADR (yyNComb [1040])
         , (* 156*) ADR (yyNComb [ 109]) , (* 157*) ADR (yyNComb [ 109])
         , (* 158*) ADR (yyNComb [1067]) , (* 159*) ADR (yyNComb [ 152])
         , (* 160*) ADR (yyNComb [1081]) , (* 161*) ADR (yyNComb [ 953])
         , (* 162*) ADR (yyNComb [ 160]) , (* 163*) ADR (yyNComb [ 350])
         , (* 164*) ADR (yyNComb [ 109]) , (* 165*) ADR (yyNComb [ 177])
         , (* 166*) ADR (yyNComb [ 171]) , (* 167*) ADR (yyNComb [ 177])
         , (* 168*) ADR (yyNComb [ 109]) , (* 169*) ADR (yyNComb [ 185])
         , (* 170*) ADR (yyNComb [ 109]) , (* 171*) ADR (yyNComb [ 109])
         , (* 172*) ADR (yyNComb [ 193]) , (* 173*) ADR (yyNComb [ 350])
         , (* 174*) ADR (yyNComb [1078]) , (* 175*) ADR (yyNComb [ 109])
         , (* 176*) ADR (yyNComb [1106]) , (* 177*) ADR (yyNComb [ 109])
         , (* 178*) ADR (yyNComb [ 212]) , (* 179*) ADR (yyNComb [ 109])
         , (* 180*) ADR (yyNComb [ 109]) , (* 181*) ADR (yyNComb [ 215])
         , (* 182*) ADR (yyNComb [ 214]) , (* 183*) ADR (yyNComb [ 109])
         , (* 184*) ADR (yyNComb [ 109]) , (* 185*) ADR (yyNComb [ 240])
         , (* 186*) ADR (yyNComb [ 414]) , (* 187*) ADR (yyNComb [1206])
         , (* 188*) ADR (yyNComb [ 109]) , (* 189*) ADR (yyNComb [ 261])
         , (* 190*) ADR (yyNComb [ 109]) , (* 191*) ADR (yyNComb [ 109])
         , (* 192*) ADR (yyNComb [ 282]) , (* 193*) ADR (yyNComb [ 109])
         , (* 194*) ADR (yyNComb [ 300]) , (* 195*) ADR (yyNComb [ 415])
         , (* 196*) ADR (yyNComb [ 298]) , (* 197*) ADR (yyNComb [ 315])
         , (* 198*) ADR (yyNComb [ 109])
         };
         
   yyDefault
     := ARRAY [0 .. yyLastReadState] OF [ 0 .. yyLastReadState ]
         {
           (*   0*)    0 , (*   1*)    0 , (*   2*)    0 , (*   3*)  197
         , (*   4*)  197 , (*   5*)    0 , (*   6*)    0 , (*   7*)  197
         , (*   8*)    0 , (*   9*)    0 , (*  10*)    0 , (*  11*)    0
         , (*  12*)    0 , (*  13*)  197 , (*  14*)    0 , (*  15*)  185
         , (*  16*)  186 , (*  17*)  197 , (*  18*)    0 , (*  19*)  197
         , (*  20*)    0 , (*  21*)  197 , (*  22*)    0 , (*  23*)  197
         , (*  24*)  197 , (*  25*)    0 , (*  26*)  197 , (*  27*)  197
         , (*  28*)  167 , (*  29*)  182 , (*  30*)  183 , (*  31*)  197
         , (*  32*)    0 , (*  33*)  197 , (*  34*)    0 , (*  35*)  187
         , (*  36*)  197 , (*  37*)    0 , (*  38*)  197 , (*  39*)    0
         , (*  40*)  197 , (*  41*)  197 , (*  42*)    0 , (*  43*)    0
         , (*  44*)  140 , (*  45*)    0 , (*  46*)  116 , (*  47*)  116
         , (*  48*)    0 , (*  49*)    0 , (*  50*)    0 , (*  51*)  116
         , (*  52*)  197 , (*  53*)    0 , (*  54*)    0 , (*  55*)  197
         , (*  56*)  111 , (*  57*)    0 , (*  58*)    0 , (*  59*)    0
         , (*  60*)    0 , (*  61*)  158 , (*  62*)   80 , (*  63*)  158
         , (*  64*)    0 , (*  65*)  158 , (*  66*)   69 , (*  67*)    0
         , (*  68*)  158 , (*  69*)    0 , (*  70*)  158 , (*  71*)   92
         , (*  72*)  158 , (*  73*)   87 , (*  74*)  158 , (*  75*)   93
         , (*  76*)   80 , (*  77*)   86 , (*  78*)   80 , (*  79*)   85
         , (*  80*)   81 , (*  81*)    0 , (*  82*)   67 , (*  83*)  197
         , (*  84*)    0 , (*  85*)    0 , (*  86*)    0 , (*  87*)    0
         , (*  88*)    0 , (*  89*)  158 , (*  90*)    0 , (*  91*)  158
         , (*  92*)    0 , (*  93*)    0 , (*  94*)    0 , (*  95*)  104
         , (*  96*)  125 , (*  97*)    0 , (*  98*)  158 , (*  99*)    0
         , (* 100*)    0 , (* 101*)   56 , (* 102*)    0 , (* 103*)  197
         , (* 104*)  159 , (* 105*)  197 , (* 106*)  148 , (* 107*)  110
         , (* 108*)    0 , (* 109*)    0 , (* 110*)    0 , (* 111*)    0
         , (* 112*)    0 , (* 113*)    0 , (* 114*)    0 , (* 115*)    0
         , (* 116*)   44 , (* 117*)  148 , (* 118*)    0 , (* 119*)    0
         , (* 120*)    0 , (* 121*)    0 , (* 122*)    0 , (* 123*)  197
         , (* 124*)  159 , (* 125*)  111 , (* 126*)    0 , (* 127*)  158
         , (* 128*)    0 , (* 129*)    0 , (* 130*)  158 , (* 131*)    0
         , (* 132*)  197 , (* 133*)  197 , (* 134*)    0 , (* 135*)    0
         , (* 136*)  140 , (* 137*)    0 , (* 138*)  141 , (* 139*)    0
         , (* 140*)  197 , (* 141*)  197 , (* 142*)    0 , (* 143*)    0
         , (* 144*)  111 , (* 145*)  111 , (* 146*)    0 , (* 147*)    0
         , (* 148*)    0 , (* 149*)    0 , (* 150*)  196 , (* 151*)  197
         , (* 152*)    0 , (* 153*)  174 , (* 154*)    0 , (* 155*)  176
         , (* 156*)    0 , (* 157*)    0 , (* 158*)   80 , (* 159*)    0
         , (* 160*)  158 , (* 161*)  187 , (* 162*)    0 , (* 163*)  197
         , (* 164*)    0 , (* 165*)  197 , (* 166*)  197 , (* 167*)    0
         , (* 168*)    0 , (* 169*)  197 , (* 170*)    0 , (* 171*)    0
         , (* 172*)  194 , (* 173*)  195 , (* 174*)    0 , (* 175*)    0
         , (* 176*)  158 , (* 177*)    0 , (* 178*)  197 , (* 179*)    0
         , (* 180*)    0 , (* 181*)  192 , (* 182*)    0 , (* 183*)    0
         , (* 184*)    0 , (* 185*)    0 , (* 186*)    0 , (* 187*)    0
         , (* 188*)    0 , (* 189*)  197 , (* 190*)    0 , (* 191*)    0
         , (* 192*)    0 , (* 193*)    0 , (* 194*)    0 , (* 195*)    0
         , (* 196*)    0 , (* 197*)    0 , (* 198*)    0
         };
         
   yyTComb
     := ARRAY yyTCombRangePacked OF yyTCombType
         {
           (*   0*) yyTCombType {   5,  400} , (*   1*) yyTCombType {   0,    0}
         , (*   2*) yyTCombType {   0,    0} , (*   3*) yyTCombType {   0,    0}
         , (*   4*) yyTCombType {   0,    0} , (*   5*) yyTCombType {   0,    0}
         , (*   6*) yyTCombType {   0,    0} , (*   7*) yyTCombType {   0,    0}
         , (*   8*) yyTCombType {   0,    0} , (*   9*) yyTCombType { 154,  155}
         , (*  10*) yyTCombType { 175,  176} , (*  11*) yyTCombType {   0,    0}
         , (*  12*) yyTCombType {   0,    0} , (*  13*) yyTCombType {  20,   21}
         , (*  14*) yyTCombType {   0,    0} , (*  15*) yyTCombType {  97,   98}
         , (*  16*) yyTCombType {   0,    0} , (*  17*) yyTCombType {   0,    0}
         , (*  18*) yyTCombType {   0,    0} , (*  19*) yyTCombType {  32,   33}
         , (*  20*) yyTCombType {  37,   38} , (*  21*) yyTCombType {  56,  543}
         , (*  22*) yyTCombType {  94,  254} , (*  23*) yyTCombType { 123,  557}
         , (*  24*) yyTCombType { 125,  431} , (*  25*) yyTCombType { 128,  262}
         , (*  26*) yyTCombType { 103,  550} , (*  27*) yyTCombType { 156,  277}
         , (*  28*) yyTCombType {   1,    2} , (*  29*) yyTCombType { 160,  431}
         , (*  30*) yyTCombType {  18,  203} , (*  31*) yyTCombType { 102,  549}
         , (*  32*) yyTCombType {   1,  430} , (*  33*) yyTCombType {   2,    3}
         , (*  34*) yyTCombType {   6,    7} , (*  35*) yyTCombType {  96,  431}
         , (*  36*) yyTCombType { 168,  169} , (*  37*) yyTCombType {   1,  430}
         , (*  38*) yyTCombType {   2,    4} , (*  39*) yyTCombType {   6,   13}
         , (*  40*) yyTCombType {  45,   46} , (*  41*) yyTCombType {  98,  564}
         , (*  42*) yyTCombType {  96,  431} , (*  43*) yyTCombType {  97,  563}
         , (*  44*) yyTCombType {  99,  255} , (*  45*) yyTCombType { 116,  534}
         , (*  46*) yyTCombType { 101,  543} , (*  47*) yyTCombType { 102,  103}
         , (*  48*) yyTCombType {  50,   51} , (*  49*) yyTCombType { 103,  550}
         , (*  50*) yyTCombType {  40,  475} , (*  51*) yyTCombType { 158,   62}
         , (*  52*) yyTCombType {  48,  217} , (*  53*) yyTCombType { 101,  543}
         , (*  54*) yyTCombType { 102,  549} , (*  55*) yyTCombType {  40,  475}
         , (*  56*) yyTCombType { 176,  671} , (*  57*) yyTCombType { 177,  178}
         , (*  58*) yyTCombType { 188,  189} , (*  59*) yyTCombType {   1,  200}
         , (*  60*) yyTCombType {  40,  475} , (*  61*) yyTCombType {   0,    0}
         , (*  62*) yyTCombType {   0,    0} , (*  63*) yyTCombType {   0,    0}
         , (*  64*) yyTCombType {   0,    0} , (*  65*) yyTCombType {   0,    0}
         , (*  66*) yyTCombType {   8,  417} , (*  67*) yyTCombType {   9,  413}
         , (*  68*) yyTCombType {   8,  417} , (*  69*) yyTCombType {   9,  413}
         , (*  70*) yyTCombType {  14,   15} , (*  71*) yyTCombType {  20,  440}
         , (*  72*) yyTCombType {  14,   27} , (*  73*) yyTCombType {  22,  204}
         , (*  74*) yyTCombType {  25,  205} , (*  75*) yyTCombType {  30,  206}
         , (*  76*) yyTCombType {  20,  440} , (*  77*) yyTCombType {  34,  207}
         , (*  78*) yyTCombType {  22,   23} , (*  79*) yyTCombType {  25,   26}
         , (*  80*) yyTCombType {  39,  212} , (*  81*) yyTCombType {  41,  476}
         , (*  82*) yyTCombType {  42,  213} , (*  83*) yyTCombType {  43,  509}
         , (*  84*) yyTCombType {  40,  475} , (*  85*) yyTCombType {  52,  537}
         , (*  86*) yyTCombType {  41,  476} , (*  87*) yyTCombType {  43,   44}
         , (*  88*) yyTCombType {  53,  219} , (*  89*) yyTCombType {  44,  534}
         , (*  90*) yyTCombType {  67,   68} , (*  91*) yyTCombType {  41,  476}
         , (*  92*) yyTCombType {  40,  475} , (*  93*) yyTCombType {   8,  417}
         , (*  94*) yyTCombType {   9,   10} , (*  95*) yyTCombType {  10,   11}
         , (*  96*) yyTCombType {  11,  201} , (*  97*) yyTCombType {  12,  202}
         , (*  98*) yyTCombType {  40,  475} , (*  99*) yyTCombType {  58,  221}
         , (* 100*) yyTCombType {  95,  432} , (* 101*) yyTCombType {  54,   55}
         , (* 102*) yyTCombType {  49,  567} , (* 103*) yyTCombType {  92,   72}
         , (* 104*) yyTCombType {  40,  475} , (* 105*) yyTCombType {  44,  534}
         , (* 106*) yyTCombType {  54,  538} , (* 107*) yyTCombType { 107,  576}
         , (* 108*) yyTCombType {  10,   12} , (* 109*) yyTCombType { 108,  259}
         , (* 110*) yyTCombType {  49,  512} , (* 111*) yyTCombType {  57,  507}
         , (* 112*) yyTCombType {  44,  534} , (* 113*) yyTCombType {  67,  251}
         , (* 114*) yyTCombType {  90,   91} , (* 115*) yyTCombType {  41,  476}
         , (* 116*) yyTCombType {  68,  625} , (* 117*) yyTCombType {  68,  625}
         , (* 118*) yyTCombType {  80,  222} , (* 119*) yyTCombType {  80,  223}
         , (* 120*) yyTCombType {  88,  250} , (* 121*) yyTCombType {  88,   89}
         , (* 122*) yyTCombType { 104,  432} , (* 123*) yyTCombType {  41,  476}
         , (* 124*) yyTCombType {  90,  252} , (* 125*) yyTCombType {  59,  509}
         , (* 126*) yyTCombType {  49,  512} , (* 127*) yyTCombType {  57,  507}
         , (* 128*) yyTCombType { 105,  431} , (* 129*) yyTCombType {  41,  476}
         , (* 130*) yyTCombType {  49,  567} , (* 131*) yyTCombType {  95,   96}
         , (* 132*) yyTCombType {  92,  253} , (* 133*) yyTCombType {  49,  512}
         , (* 134*) yyTCombType {  57,  507} , (* 135*) yyTCombType {  41,  476}
         , (* 136*) yyTCombType {  49,  512} , (* 137*) yyTCombType {  60,  511}
         , (* 138*) yyTCombType {  44,  534} , (* 139*) yyTCombType { 109,  110}
         , (* 140*) yyTCombType {  44,  534} , (* 141*) yyTCombType {  59,  509}
         , (* 142*) yyTCombType { 111,  220} , (* 143*) yyTCombType { 109,  432}
         , (* 144*) yyTCombType {  44,  534} , (* 145*) yyTCombType { 121,  261}
         , (* 146*) yyTCombType { 104,  105} , (* 147*) yyTCombType { 122,  556}
         , (* 148*) yyTCombType {  59,  509} , (* 149*) yyTCombType { 124,  125}
         , (* 150*) yyTCombType { 126,  127} , (* 151*) yyTCombType { 105,  431}
         , (* 152*) yyTCombType { 119,  260} , (* 153*) yyTCombType {  60,  511}
         , (* 154*) yyTCombType { 129,  130} , (* 155*) yyTCombType { 131,  263}
         , (* 156*) yyTCombType { 134,  264} , (* 157*) yyTCombType {  49,  512}
         , (* 158*) yyTCombType {  57,  507} , (* 159*) yyTCombType {  49,  512}
         , (* 160*) yyTCombType {  60,  511} , (* 161*) yyTCombType {  49,  512}
         , (* 162*) yyTCombType { 137,  267} , (* 163*) yyTCombType {  57,   58}
         , (* 164*) yyTCombType {  57,  507} , (* 165*) yyTCombType {  49,  512}
         , (* 166*) yyTCombType {  57,  507} , (* 167*) yyTCombType {  64,  452}
         , (* 168*) yyTCombType { 135,  265} , (* 169*) yyTCombType { 139,  268}
         , (* 170*) yyTCombType { 122,  123} , (* 171*) yyTCombType { 142,  270}
         , (* 172*) yyTCombType {  59,  509} , (* 173*) yyTCombType { 135,  266}
         , (* 174*) yyTCombType { 139,  269} , (* 175*) yyTCombType { 143,  271}
         , (* 176*) yyTCombType { 146,  272} , (* 177*) yyTCombType {  64,  452}
         , (* 178*) yyTCombType {  59,   44} , (* 179*) yyTCombType {  66,  463}
         , (* 180*) yyTCombType {  59,  509} , (* 181*) yyTCombType {  64,  452}
         , (* 182*) yyTCombType {  81,   63} , (* 183*) yyTCombType { 112,  585}
         , (* 184*) yyTCombType {  60,  511} , (* 185*) yyTCombType { 147,  273}
         , (* 186*) yyTCombType { 114,  511} , (* 187*) yyTCombType { 112,  585}
         , (* 188*) yyTCombType { 112,   58} , (* 189*) yyTCombType { 112,  585}
         , (* 190*) yyTCombType { 114,  511} , (* 191*) yyTCombType { 112,  585}
         , (* 192*) yyTCombType {  60,   61} , (* 193*) yyTCombType {  64,  452}
         , (* 194*) yyTCombType { 114,   61} , (* 195*) yyTCombType {  66,  463}
         , (* 196*) yyTCombType { 148,  107} , (* 197*) yyTCombType {  64,  452}
         , (* 198*) yyTCombType {  64,  452} , (* 199*) yyTCombType {  66,  463}
         , (* 200*) yyTCombType { 152,  276} , (* 201*) yyTCombType {  64,  452}
         , (* 202*) yyTCombType {  66,  463} , (* 203*) yyTCombType {  64,  452}
         , (* 204*) yyTCombType {  64,  452} , (* 205*) yyTCombType { 149,  274}
         , (* 206*) yyTCombType { 157,  158} , (* 207*) yyTCombType { 149,  275}
         , (* 208*) yyTCombType {  81,   64} , (* 209*) yyTCombType {  81,  224}
         , (* 210*) yyTCombType {  81,  225} , (* 211*) yyTCombType {  81,  226}
         , (* 212*) yyTCombType {  81,  227} , (* 213*) yyTCombType {  81,  228}
         , (* 214*) yyTCombType {  81,  229} , (* 215*) yyTCombType {  81,  230}
         , (* 216*) yyTCombType {  81,  231} , (* 217*) yyTCombType {  81,  232}
         , (* 218*) yyTCombType {  81,  233} , (* 219*) yyTCombType {  81,  234}
         , (* 220*) yyTCombType { 159,  432} , (* 221*) yyTCombType { 119,  120}
         , (* 222*) yyTCombType { 167,   29} , (* 223*) yyTCombType { 170,  278}
         , (* 224*) yyTCombType { 171,  172} , (* 225*) yyTCombType { 161,  668}
         , (* 226*) yyTCombType {  66,  463} , (* 227*) yyTCombType { 162,  163}
         , (* 228*) yyTCombType {  64,  452} , (* 229*) yyTCombType {  69,  463}
         , (* 230*) yyTCombType {  64,  452} , (* 231*) yyTCombType {  64,  452}
         , (* 232*) yyTCombType {  64,  452} , (* 233*) yyTCombType {  64,  452}
         , (* 234*) yyTCombType {  66,  463} , (* 235*) yyTCombType { 161,  668}
         , (* 236*) yyTCombType {  64,  452} , (* 237*) yyTCombType { 179,  279}
         , (* 238*) yyTCombType { 180,  409} , (* 239*) yyTCombType {  69,  463}
         , (* 240*) yyTCombType { 110,  256} , (* 241*) yyTCombType {  66,  463}
         , (* 242*) yyTCombType {  64,   65} , (* 243*) yyTCombType {  64,  452}
         , (* 244*) yyTCombType {  64,  452} , (* 245*) yyTCombType {  64,  452}
         , (* 246*) yyTCombType {  64,  452} , (* 247*) yyTCombType {  64,  452}
         , (* 248*) yyTCombType {  64,  452} , (* 249*) yyTCombType {  64,  452}
         , (* 250*) yyTCombType {  64,  452} , (* 251*) yyTCombType {  64,  452}
         , (* 252*) yyTCombType {  64,  452} , (* 253*) yyTCombType {  64,  452}
         , (* 254*) yyTCombType {  64,  452} , (* 255*) yyTCombType {  69,  463}
         , (* 256*) yyTCombType { 110,  257} , (* 257*) yyTCombType { 110,  258}
         , (* 258*) yyTCombType { 164,  448} , (* 259*) yyTCombType { 184,  185}
         , (* 260*) yyTCombType {  69,  463} , (* 261*) yyTCombType { 190,  281}
         , (* 262*) yyTCombType { 113,  509} , (* 263*) yyTCombType { 164,  165}
         , (* 264*) yyTCombType { 110,  431} , (* 265*) yyTCombType {  69,  463}
         , (* 266*) yyTCombType { 113,  509} , (* 267*) yyTCombType { 159,  160}
         , (* 268*) yyTCombType { 113,   44} , (* 269*) yyTCombType { 162,  447}
         , (* 270*) yyTCombType { 113,  509} , (* 271*) yyTCombType { 162,  166}
         , (* 272*) yyTCombType { 182,  460} , (* 273*) yyTCombType { 182,  460}
         , (* 274*) yyTCombType { 183,  280} , (* 275*) yyTCombType { 183,   31}
         , (* 276*) yyTCombType { 191,  410} , (* 277*) yyTCombType { 192,  182}
         , (* 278*) yyTCombType { 193,  194} , (* 279*) yyTCombType { 197,  199}
         , (* 280*) yyTCombType {  71,  596} , (* 281*) yyTCombType { 198,  282}
         , (* 282*) yyTCombType {   0,    0} , (* 283*) yyTCombType {   0,    0}
         , (* 284*) yyTCombType {   0,    0} , (* 285*) yyTCombType {   0,    0}
         , (* 286*) yyTCombType {   0,    0} , (* 287*) yyTCombType {   0,    0}
         , (* 288*) yyTCombType {   0,    0} , (* 289*) yyTCombType { 110,  580}
         , (* 290*) yyTCombType {   0,    0} , (* 291*) yyTCombType {   0,    0}
         , (* 292*) yyTCombType {  69,  463} , (* 293*) yyTCombType {  69,  453}
         , (* 294*) yyTCombType {  69,  463} , (* 295*) yyTCombType {  69,  463}
         , (* 296*) yyTCombType {  71,  596} , (* 297*) yyTCombType {   0,    0}
         , (* 298*) yyTCombType {  69,   70} , (* 299*) yyTCombType {   0,    0}
         , (* 300*) yyTCombType {  71,  596} , (* 301*) yyTCombType {  73,  598}
         , (* 302*) yyTCombType {   0,    0} , (* 303*) yyTCombType {  71,  596}
         , (* 304*) yyTCombType {  75,  601} , (* 305*) yyTCombType {   0,    0}
         , (* 306*) yyTCombType {  69,  463} , (* 307*) yyTCombType {  69,  463}
         , (* 308*) yyTCombType {  69,  463} , (* 309*) yyTCombType {  69,  463}
         , (* 310*) yyTCombType {  69,  463} , (* 311*) yyTCombType {  69,  463}
         , (* 312*) yyTCombType {  69,  463} , (* 313*) yyTCombType {  69,  463}
         , (* 314*) yyTCombType {  69,  463} , (* 315*) yyTCombType {  69,  463}
         , (* 316*) yyTCombType {  69,  453} , (* 317*) yyTCombType {  73,  598}
         , (* 318*) yyTCombType {  75,  601} , (* 319*) yyTCombType {   0,    0}
         , (* 320*) yyTCombType {   0,    0} , (* 321*) yyTCombType {  73,  598}
         , (* 322*) yyTCombType {   0,    0} , (* 323*) yyTCombType {  73,  598}
         , (* 324*) yyTCombType {  73,  598} , (* 325*) yyTCombType {  77,  604}
         , (* 326*) yyTCombType {   0,    0} , (* 327*) yyTCombType {  71,  596}
         , (* 328*) yyTCombType {   0,    0} , (* 329*) yyTCombType {   0,    0}
         , (* 330*) yyTCombType {   0,    0} , (* 331*) yyTCombType {  71,  596}
         , (* 332*) yyTCombType {  71,  596} , (* 333*) yyTCombType {   0,    0}
         , (* 334*) yyTCombType {  75,  601} , (* 335*) yyTCombType {  71,  596}
         , (* 336*) yyTCombType {   0,    0} , (* 337*) yyTCombType {   0,    0}
         , (* 338*) yyTCombType {  75,  601} , (* 339*) yyTCombType {  77,  604}
         , (* 340*) yyTCombType {  75,  601} , (* 341*) yyTCombType {  75,  601}
         , (* 342*) yyTCombType {  71,  596} , (* 343*) yyTCombType {   0,    0}
         , (* 344*) yyTCombType {   0,    0} , (* 345*) yyTCombType {   0,    0}
         , (* 346*) yyTCombType {   0,    0} , (* 347*) yyTCombType {   0,    0}
         , (* 348*) yyTCombType {  73,  598} , (* 349*) yyTCombType {   0,    0}
         , (* 350*) yyTCombType {   0,    0} , (* 351*) yyTCombType {  77,  604}
         , (* 352*) yyTCombType {  73,  598} , (* 353*) yyTCombType {  73,  598}
         , (* 354*) yyTCombType {   0,    0} , (* 355*) yyTCombType {  77,  604}
         , (* 356*) yyTCombType {  73,  598} , (* 357*) yyTCombType {   0,    0}
         , (* 358*) yyTCombType {   0,    0} , (* 359*) yyTCombType {  77,  604}
         , (* 360*) yyTCombType {   0,    0} , (* 361*) yyTCombType {  77,  604}
         , (* 362*) yyTCombType {  77,  604} , (* 363*) yyTCombType {  73,  598}
         , (* 364*) yyTCombType {   0,    0} , (* 365*) yyTCombType {  75,  601}
         , (* 366*) yyTCombType { 132,  485} , (* 367*) yyTCombType {   0,    0}
         , (* 368*) yyTCombType {   0,    0} , (* 369*) yyTCombType {  75,  601}
         , (* 370*) yyTCombType {  75,  601} , (* 371*) yyTCombType { 132,  485}
         , (* 372*) yyTCombType {   0,    0} , (* 373*) yyTCombType {  75,  601}
         , (* 374*) yyTCombType {   0,    0} , (* 375*) yyTCombType {   0,    0}
         , (* 376*) yyTCombType { 132,  485} , (* 377*) yyTCombType {   0,    0}
         , (* 378*) yyTCombType {   0,    0} , (* 379*) yyTCombType { 133,  486}
         , (* 380*) yyTCombType {  75,  601} , (* 381*) yyTCombType {  79,  606}
         , (* 382*) yyTCombType { 138,  495} , (* 383*) yyTCombType {   0,    0}
         , (* 384*) yyTCombType { 133,  486} , (* 385*) yyTCombType {   0,    0}
         , (* 386*) yyTCombType {  77,  604} , (* 387*) yyTCombType { 138,  495}
         , (* 388*) yyTCombType {  77,  604} , (* 389*) yyTCombType { 133,  486}
         , (* 390*) yyTCombType {  77,  604} , (* 391*) yyTCombType {  77,  604}
         , (* 392*) yyTCombType { 138,  495} , (* 393*) yyTCombType {   0,    0}
         , (* 394*) yyTCombType {  77,  604} , (* 395*) yyTCombType {  79,  606}
         , (* 396*) yyTCombType {   0,    0} , (* 397*) yyTCombType {   0,    0}
         , (* 398*) yyTCombType {   0,    0} , (* 399*) yyTCombType {   0,    0}
         , (* 400*) yyTCombType { 132,  485} , (* 401*) yyTCombType {  77,  604}
         , (* 402*) yyTCombType {  77,  604} , (* 403*) yyTCombType {  77,  604}
         , (* 404*) yyTCombType {  77,  604} , (* 405*) yyTCombType {  77,  604}
         , (* 406*) yyTCombType {  77,  604} , (* 407*) yyTCombType {  79,  606}
         , (* 408*) yyTCombType { 132,  485} , (* 409*) yyTCombType {   0,    0}
         , (* 410*) yyTCombType {   0,    0} , (* 411*) yyTCombType {  79,  606}
         , (* 412*) yyTCombType {   0,    0} , (* 413*) yyTCombType { 133,  486}
         , (* 414*) yyTCombType { 132,  485} , (* 415*) yyTCombType {  79,  606}
         , (* 416*) yyTCombType { 138,  495} , (* 417*) yyTCombType {  79,  606}
         , (* 418*) yyTCombType {  79,  606} , (* 419*) yyTCombType {   0,    0}
         , (* 420*) yyTCombType { 132,  485} , (* 421*) yyTCombType { 133,  486}
         , (* 422*) yyTCombType {   0,    0} , (* 423*) yyTCombType {   0,    0}
         , (* 424*) yyTCombType { 138,  495} , (* 425*) yyTCombType {   0,    0}
         , (* 426*) yyTCombType {   0,    0} , (* 427*) yyTCombType { 133,  486}
         , (* 428*) yyTCombType {   0,    0} , (* 429*) yyTCombType {   0,    0}
         , (* 430*) yyTCombType { 138,  495} , (* 431*) yyTCombType {   0,    0}
         , (* 432*) yyTCombType { 174,  667} , (* 433*) yyTCombType { 133,  486}
         , (* 434*) yyTCombType { 196,  659} , (* 435*) yyTCombType {   0,    0}
         , (* 436*) yyTCombType { 138,  495} , (* 437*) yyTCombType { 174,  208}
         , (* 438*) yyTCombType {   0,    0} , (* 439*) yyTCombType { 196,  659}
         , (* 440*) yyTCombType {   0,    0} , (* 441*) yyTCombType {  82,  615}
         , (* 442*) yyTCombType {  79,  606} , (* 443*) yyTCombType {   0,    0}
         , (* 444*) yyTCombType {  79,  606} , (* 445*) yyTCombType {   0,    0}
         , (* 446*) yyTCombType {  79,  606} , (* 447*) yyTCombType {  79,  606}
         , (* 448*) yyTCombType {   0,    0} , (* 449*) yyTCombType {   0,    0}
         , (* 450*) yyTCombType {  79,  606} , (* 451*) yyTCombType {  82,  615}
         , (* 452*) yyTCombType {   0,    0} , (* 453*) yyTCombType {   0,    0}
         , (* 454*) yyTCombType {   0,    0} , (* 455*) yyTCombType {  82,  615}
         , (* 456*) yyTCombType {   0,    0} , (* 457*) yyTCombType {  79,  606}
         , (* 458*) yyTCombType {  79,  606} , (* 459*) yyTCombType {  79,  606}
         , (* 460*) yyTCombType {  79,  606} , (* 461*) yyTCombType {  79,  606}
         , (* 462*) yyTCombType {  79,  606} , (* 463*) yyTCombType {  79,  606}
         , (* 464*) yyTCombType {  79,  606} , (* 465*) yyTCombType {  79,  606}
         , (* 466*) yyTCombType { 174,   36} , (* 467*) yyTCombType {  82,  615}
         , (* 468*) yyTCombType { 196,  659} , (* 469*) yyTCombType {   0,    0}
         , (* 470*) yyTCombType {   0,    0} , (* 471*) yyTCombType {  82,  615}
         , (* 472*) yyTCombType {  82,  615} , (* 473*) yyTCombType {   0,    0}
         , (* 474*) yyTCombType { 174,  209} , (* 475*) yyTCombType {  82,  615}
         , (* 476*) yyTCombType { 196,  659} , (* 477*) yyTCombType {  82,  615}
         , (* 478*) yyTCombType {  82,  615} , (* 479*) yyTCombType {   0,    0}
         , (* 480*) yyTCombType { 174,  210} , (* 481*) yyTCombType { 100,  568}
         , (* 482*) yyTCombType { 196,  659} , (* 483*) yyTCombType {   0,    0}
         , (* 484*) yyTCombType {   0,    0} , (* 485*) yyTCombType {   0,    0}
         , (* 486*) yyTCombType { 174,  211} , (* 487*) yyTCombType {   0,    0}
         , (* 488*) yyTCombType { 196,  659} , (* 489*) yyTCombType { 100,  571}
         , (* 490*) yyTCombType {   0,    0} , (* 491*) yyTCombType {   0,    0}
         , (* 492*) yyTCombType {   0,    0} , (* 493*) yyTCombType {   0,    0}
         , (* 494*) yyTCombType {   0,    0} , (* 495*) yyTCombType {   0,    0}
         , (* 496*) yyTCombType {   0,    0} , (* 497*) yyTCombType {   0,    0}
         , (* 498*) yyTCombType {   0,    0} , (* 499*) yyTCombType {   0,    0}
         , (* 500*) yyTCombType {   0,    0} , (* 501*) yyTCombType {   0,    0}
         , (* 502*) yyTCombType {  82,  615} , (* 503*) yyTCombType {  82,   83}
         , (* 504*) yyTCombType {  82,  615} , (* 505*) yyTCombType { 100,  571}
         , (* 506*) yyTCombType {  82,  615} , (* 507*) yyTCombType {  82,  615}
         , (* 508*) yyTCombType {   0,    0} , (* 509*) yyTCombType { 100,  568}
         , (* 510*) yyTCombType {  82,  615} , (* 511*) yyTCombType {   0,    0}
         , (* 512*) yyTCombType { 100,  571} , (* 513*) yyTCombType {   0,    0}
         , (* 514*) yyTCombType {   0,    0} , (* 515*) yyTCombType { 100,  571}
         , (* 516*) yyTCombType {  82,   65} , (* 517*) yyTCombType {  82,  615}
         , (* 518*) yyTCombType {  82,  615} , (* 519*) yyTCombType {  82,  615}
         , (* 520*) yyTCombType {  82,  615} , (* 521*) yyTCombType {  82,  615}
         , (* 522*) yyTCombType {  82,  615} , (* 523*) yyTCombType {  82,  615}
         , (* 524*) yyTCombType {  82,  615} , (* 525*) yyTCombType {  82,  615}
         , (* 526*) yyTCombType {  82,  615} , (* 527*) yyTCombType {  82,  615}
         , (* 528*) yyTCombType {  82,  249} , (* 529*) yyTCombType {  84,  614}
         , (* 530*) yyTCombType { 115,  587} , (* 531*) yyTCombType { 118,  588}
         , (* 532*) yyTCombType {   0,    0} , (* 533*) yyTCombType {   0,    0}
         , (* 534*) yyTCombType {   0,    0} , (* 535*) yyTCombType {   0,    0}
         , (* 536*) yyTCombType { 100,  571} , (* 537*) yyTCombType {   0,    0}
         , (* 538*) yyTCombType { 100,  571} , (* 539*) yyTCombType {  84,  614}
         , (* 540*) yyTCombType { 100,  571} , (* 541*) yyTCombType {   0,    0}
         , (* 542*) yyTCombType {   0,    0} , (* 543*) yyTCombType {  84,  614}
         , (* 544*) yyTCombType { 100,  571} , (* 545*) yyTCombType {   0,    0}
         , (* 546*) yyTCombType { 115,  587} , (* 547*) yyTCombType { 118,  588}
         , (* 548*) yyTCombType {   0,    0} , (* 549*) yyTCombType {   0,    0}
         , (* 550*) yyTCombType {   0,    0} , (* 551*) yyTCombType {   0,    0}
         , (* 552*) yyTCombType {   0,    0} , (* 553*) yyTCombType { 115,  587}
         , (* 554*) yyTCombType { 118,  588} , (* 555*) yyTCombType {  84,  614}
         , (* 556*) yyTCombType { 115,  587} , (* 557*) yyTCombType { 118,  119}
         , (* 558*) yyTCombType {   0,    0} , (* 559*) yyTCombType {  84,  614}
         , (* 560*) yyTCombType {  84,  614} , (* 561*) yyTCombType {   0,    0}
         , (* 562*) yyTCombType {   0,    0} , (* 563*) yyTCombType {  84,  614}
         , (* 564*) yyTCombType {   0,    0} , (* 565*) yyTCombType {  84,  614}
         , (* 566*) yyTCombType {  84,  614} , (* 567*) yyTCombType {   0,    0}
         , (* 568*) yyTCombType {   0,    0} , (* 569*) yyTCombType {   0,    0}
         , (* 570*) yyTCombType {   0,    0} , (* 571*) yyTCombType {   0,    0}
         , (* 572*) yyTCombType {   0,    0} , (* 573*) yyTCombType {   0,    0}
         , (* 574*) yyTCombType {   0,    0} , (* 575*) yyTCombType {   0,    0}
         , (* 576*) yyTCombType {   0,    0} , (* 577*) yyTCombType { 115,  587}
         , (* 578*) yyTCombType { 118,  588} , (* 579*) yyTCombType { 115,  587}
         , (* 580*) yyTCombType { 118,  588} , (* 581*) yyTCombType { 115,  587}
         , (* 582*) yyTCombType { 118,  588} , (* 583*) yyTCombType { 115,  116}
         , (* 584*) yyTCombType {   0,    0} , (* 585*) yyTCombType { 115,  587}
         , (* 586*) yyTCombType { 118,  588} , (* 587*) yyTCombType {   0,    0}
         , (* 588*) yyTCombType {   0,    0} , (* 589*) yyTCombType {   0,    0}
         , (* 590*) yyTCombType {  84,  614} , (* 591*) yyTCombType {  84,  630}
         , (* 592*) yyTCombType {  84,  614} , (* 593*) yyTCombType {  84,  630}
         , (* 594*) yyTCombType {  84,  614} , (* 595*) yyTCombType {  84,  614}
         , (* 596*) yyTCombType { 187,  208} , (* 597*) yyTCombType {   0,    0}
         , (* 598*) yyTCombType {  84,  614} , (* 599*) yyTCombType {   0,    0}
         , (* 600*) yyTCombType {   0,    0} , (* 601*) yyTCombType { 187,  667}
         , (* 602*) yyTCombType {   0,    0} , (* 603*) yyTCombType {   0,    0}
         , (* 604*) yyTCombType {  84,  630} , (* 605*) yyTCombType {  84,  614}
         , (* 606*) yyTCombType {  84,  614} , (* 607*) yyTCombType {  84,  614}
         , (* 608*) yyTCombType {  84,  614} , (* 609*) yyTCombType {  84,  614}
         , (* 610*) yyTCombType {  84,  614} , (* 611*) yyTCombType {  84,  614}
         , (* 612*) yyTCombType {  84,  614} , (* 613*) yyTCombType {  84,  614}
         , (* 614*) yyTCombType {  84,  614} , (* 615*) yyTCombType {  84,  614}
         , (* 616*) yyTCombType {  84,  630} , (* 617*) yyTCombType {  85,  605}
         , (* 618*) yyTCombType {   0,    0} , (* 619*) yyTCombType {   0,    0}
         , (* 620*) yyTCombType { 140,   45} , (* 621*) yyTCombType { 185,  435}
         , (* 622*) yyTCombType {   0,    0} , (* 623*) yyTCombType {   0,    0}
         , (* 624*) yyTCombType { 140,  566} , (* 625*) yyTCombType { 187,   36}
         , (* 626*) yyTCombType { 185,  435} , (* 627*) yyTCombType {  85,  245}
         , (* 628*) yyTCombType {   0,    0} , (* 629*) yyTCombType {   0,    0}
         , (* 630*) yyTCombType {   0,    0} , (* 631*) yyTCombType {  85,  605}
         , (* 632*) yyTCombType {   0,    0} , (* 633*) yyTCombType { 187,  209}
         , (* 634*) yyTCombType { 185,  435} , (* 635*) yyTCombType {   0,    0}
         , (* 636*) yyTCombType {   0,    0} , (* 637*) yyTCombType { 185,  435}
         , (* 638*) yyTCombType {   0,    0} , (* 639*) yyTCombType { 187,  210}
         , (* 640*) yyTCombType {   0,    0} , (* 641*) yyTCombType {   0,    0}
         , (* 642*) yyTCombType {   0,    0} , (* 643*) yyTCombType {  85,  605}
         , (* 644*) yyTCombType {   0,    0} , (* 645*) yyTCombType { 187,  211}
         , (* 646*) yyTCombType {   0,    0} , (* 647*) yyTCombType {  85,  605}
         , (* 648*) yyTCombType {  85,  246} , (* 649*) yyTCombType {   0,    0}
         , (* 650*) yyTCombType { 185,  435} , (* 651*) yyTCombType {  85,  605}
         , (* 652*) yyTCombType { 140,  566} , (* 653*) yyTCombType {  85,  605}
         , (* 654*) yyTCombType {  85,  605} , (* 655*) yyTCombType {  86,  603}
         , (* 656*) yyTCombType { 140,  214} , (* 657*) yyTCombType {   0,    0}
         , (* 658*) yyTCombType { 185,  435} , (* 659*) yyTCombType {   0,    0}
         , (* 660*) yyTCombType { 140,  215} , (* 661*) yyTCombType { 140,   47}
         , (* 662*) yyTCombType {   0,    0} , (* 663*) yyTCombType {   0,    0}
         , (* 664*) yyTCombType { 185,  435} , (* 665*) yyTCombType { 140,  216}
         , (* 666*) yyTCombType {   0,    0} , (* 667*) yyTCombType {   0,    0}
         , (* 668*) yyTCombType {   0,    0} , (* 669*) yyTCombType {  86,  603}
         , (* 670*) yyTCombType { 185,  435} , (* 671*) yyTCombType {   0,    0}
         , (* 672*) yyTCombType {   0,    0} , (* 673*) yyTCombType {   0,    0}
         , (* 674*) yyTCombType { 140,   48} , (* 675*) yyTCombType {   0,    0}
         , (* 676*) yyTCombType {   0,    0} , (* 677*) yyTCombType {   0,    0}
         , (* 678*) yyTCombType {  85,  605} , (* 679*) yyTCombType { 140,  534}
         , (* 680*) yyTCombType {  85,  605} , (* 681*) yyTCombType {  86,  603}
         , (* 682*) yyTCombType {  85,  605} , (* 683*) yyTCombType {  85,  605}
         , (* 684*) yyTCombType {   0,    0} , (* 685*) yyTCombType {  86,  603}
         , (* 686*) yyTCombType {  85,  605} , (* 687*) yyTCombType {   0,    0}
         , (* 688*) yyTCombType { 140,  218} , (* 689*) yyTCombType {  86,  603}
         , (* 690*) yyTCombType {   0,    0} , (* 691*) yyTCombType {  86,  603}
         , (* 692*) yyTCombType {  86,  603} , (* 693*) yyTCombType {  85,  605}
         , (* 694*) yyTCombType {  85,  605} , (* 695*) yyTCombType {  85,  605}
         , (* 696*) yyTCombType {  85,  605} , (* 697*) yyTCombType {  85,  605}
         , (* 698*) yyTCombType {  85,  605} , (* 699*) yyTCombType {  85,  605}
         , (* 700*) yyTCombType {  85,  605} , (* 701*) yyTCombType {  85,  605}
         , (* 702*) yyTCombType {  85,  247} , (* 703*) yyTCombType {  85,  248}
         , (* 704*) yyTCombType {   0,    0} , (* 705*) yyTCombType {   0,    0}
         , (* 706*) yyTCombType {   0,    0} , (* 707*) yyTCombType {   0,    0}
         , (* 708*) yyTCombType {   0,    0} , (* 709*) yyTCombType { 141,  496}
         , (* 710*) yyTCombType {   0,    0} , (* 711*) yyTCombType {  87,   74}
         , (* 712*) yyTCombType {   0,    0} , (* 713*) yyTCombType {   0,    0}
         , (* 714*) yyTCombType { 141,  496} , (* 715*) yyTCombType {   0,    0}
         , (* 716*) yyTCombType {  86,  603} , (* 717*) yyTCombType {   0,    0}
         , (* 718*) yyTCombType {  86,  603} , (* 719*) yyTCombType { 141,  496}
         , (* 720*) yyTCombType {  86,  603} , (* 721*) yyTCombType {  86,  603}
         , (* 722*) yyTCombType {   0,    0} , (* 723*) yyTCombType {   0,    0}
         , (* 724*) yyTCombType {  86,  603} , (* 725*) yyTCombType {  87,  597}
         , (* 726*) yyTCombType {   0,    0} , (* 727*) yyTCombType {   0,    0}
         , (* 728*) yyTCombType {  93,  602} , (* 729*) yyTCombType {   0,    0}
         , (* 730*) yyTCombType {   0,    0} , (* 731*) yyTCombType {  86,  603}
         , (* 732*) yyTCombType {  86,  603} , (* 733*) yyTCombType {  86,  603}
         , (* 734*) yyTCombType {  86,  603} , (* 735*) yyTCombType {  86,  603}
         , (* 736*) yyTCombType {  86,  603} , (* 737*) yyTCombType {  86,  242}
         , (* 738*) yyTCombType {  86,  243} , (* 739*) yyTCombType {  86,  244}
         , (* 740*) yyTCombType {   0,    0} , (* 741*) yyTCombType {  87,  597}
         , (* 742*) yyTCombType {  93,  602} , (* 743*) yyTCombType { 141,  496}
         , (* 744*) yyTCombType {   0,    0} , (* 745*) yyTCombType {  87,  597}
         , (* 746*) yyTCombType {   0,    0} , (* 747*) yyTCombType {  87,  597}
         , (* 748*) yyTCombType {  87,  597} , (* 749*) yyTCombType {   0,    0}
         , (* 750*) yyTCombType {   0,    0} , (* 751*) yyTCombType { 141,  496}
         , (* 752*) yyTCombType { 141,  216} , (* 753*) yyTCombType {   0,    0}
         , (* 754*) yyTCombType {  93,  235} , (* 755*) yyTCombType {   0,    0}
         , (* 756*) yyTCombType {   0,    0} , (* 757*) yyTCombType { 141,  496}
         , (* 758*) yyTCombType {  93,  602} , (* 759*) yyTCombType {   0,    0}
         , (* 760*) yyTCombType {   0,    0} , (* 761*) yyTCombType { 141,   48}
         , (* 762*) yyTCombType {  93,  602} , (* 763*) yyTCombType { 141,  496}
         , (* 764*) yyTCombType {  93,  602} , (* 765*) yyTCombType {  93,  602}
         , (* 766*) yyTCombType {   0,    0} , (* 767*) yyTCombType {   0,    0}
         , (* 768*) yyTCombType { 144,  502} , (* 769*) yyTCombType { 145,  503}
         , (* 770*) yyTCombType {   0,    0} , (* 771*) yyTCombType {   0,    0}
         , (* 772*) yyTCombType {  87,  597} , (* 773*) yyTCombType { 144,  502}
         , (* 774*) yyTCombType { 145,  503} , (* 775*) yyTCombType {   0,    0}
         , (* 776*) yyTCombType {  87,  597} , (* 777*) yyTCombType {  87,  597}
         , (* 778*) yyTCombType { 144,  502} , (* 779*) yyTCombType { 145,  503}
         , (* 780*) yyTCombType {  87,  597} , (* 781*) yyTCombType {   0,    0}
         , (* 782*) yyTCombType {   0,    0} , (* 783*) yyTCombType { 186,  446}
         , (* 784*) yyTCombType {   0,    0} , (* 785*) yyTCombType {   0,    0}
         , (* 786*) yyTCombType {   0,    0} , (* 787*) yyTCombType {  87,  597}
         , (* 788*) yyTCombType { 186,  446} , (* 789*) yyTCombType {  93,  602}
         , (* 790*) yyTCombType {   0,    0} , (* 791*) yyTCombType {  93,  236}
         , (* 792*) yyTCombType {   0,    0} , (* 793*) yyTCombType {  93,  602}
         , (* 794*) yyTCombType {  93,  602} , (* 795*) yyTCombType {   0,    0}
         , (* 796*) yyTCombType { 186,   17} , (* 797*) yyTCombType {  93,  602}
         , (* 798*) yyTCombType {   0,    0} , (* 799*) yyTCombType { 186,   19}
         , (* 800*) yyTCombType {   0,    0} , (* 801*) yyTCombType {   0,    0}
         , (* 802*) yyTCombType { 144,  502} , (* 803*) yyTCombType { 145,  503}
         , (* 804*) yyTCombType {  93,  602} , (* 805*) yyTCombType {  93,  237}
         , (* 806*) yyTCombType {  93,  238} , (* 807*) yyTCombType {  93,  239}
         , (* 808*) yyTCombType {  93,  240} , (* 809*) yyTCombType {  93,  241}
         , (* 810*) yyTCombType { 144,  502} , (* 811*) yyTCombType { 145,  503}
         , (* 812*) yyTCombType { 186,  446} , (* 813*) yyTCombType { 194,  435}
         , (* 814*) yyTCombType {   0,    0} , (* 815*) yyTCombType {   0,    0}
         , (* 816*) yyTCombType { 144,  502} , (* 817*) yyTCombType { 145,  503}
         , (* 818*) yyTCombType { 194,  435} , (* 819*) yyTCombType {   0,    0}
         , (* 820*) yyTCombType { 186,  446} , (* 821*) yyTCombType {   0,    0}
         , (* 822*) yyTCombType { 144,  502} , (* 823*) yyTCombType { 145,  503}
         , (* 824*) yyTCombType { 195,  446} , (* 825*) yyTCombType {   0,    0}
         , (* 826*) yyTCombType { 186,  446} , (* 827*) yyTCombType {   0,    0}
         , (* 828*) yyTCombType {   0,    0} , (* 829*) yyTCombType { 195,  446}
         , (* 830*) yyTCombType {   0,    0} , (* 831*) yyTCombType { 194,  435}
         , (* 832*) yyTCombType { 186,  446} , (* 833*) yyTCombType {   0,    0}
         , (* 834*) yyTCombType { 194,  435} , (* 835*) yyTCombType {   0,    0}
         , (* 836*) yyTCombType {   0,    0} , (* 837*) yyTCombType {   0,    0}
         , (* 838*) yyTCombType {   0,    0} , (* 839*) yyTCombType {   0,    0}
         , (* 840*) yyTCombType {   0,    0} , (* 841*) yyTCombType {   0,    0}
         , (* 842*) yyTCombType { 195,   17} , (* 843*) yyTCombType {   0,    0}
         , (* 844*) yyTCombType {   0,    0} , (* 845*) yyTCombType { 195,   19}
         , (* 846*) yyTCombType {   0,    0} , (* 847*) yyTCombType { 194,  435}
         , (* 848*) yyTCombType {   0,    0} , (* 849*) yyTCombType {   0,    0}
         , (* 850*) yyTCombType {   0,    0} , (* 851*) yyTCombType {   0,    0}
         , (* 852*) yyTCombType {   0,    0} , (* 853*) yyTCombType {   0,    0}
         , (* 854*) yyTCombType {   0,    0} , (* 855*) yyTCombType { 194,  435}
         , (* 856*) yyTCombType {   0,    0} , (* 857*) yyTCombType {   0,    0}
         , (* 858*) yyTCombType { 195,  446} , (* 859*) yyTCombType {   0,    0}
         , (* 860*) yyTCombType {   0,    0} , (* 861*) yyTCombType { 194,  435}
         , (* 862*) yyTCombType {   0,    0} , (* 863*) yyTCombType {   0,    0}
         , (* 864*) yyTCombType {   0,    0} , (* 865*) yyTCombType {   0,    0}
         , (* 866*) yyTCombType { 195,  446} , (* 867*) yyTCombType { 194,  435}
         , (* 868*) yyTCombType {   0,    0} , (* 869*) yyTCombType {   0,    0}
         , (* 870*) yyTCombType {   0,    0} , (* 871*) yyTCombType {   0,    0}
         , (* 872*) yyTCombType { 195,  446} , (* 873*) yyTCombType {   0,    0}
         , (* 874*) yyTCombType {   0,    0} , (* 875*) yyTCombType {   0,    0}
         , (* 876*) yyTCombType {   0,    0} , (* 877*) yyTCombType {   0,    0}
         , (* 878*) yyTCombType { 195,  446} , (* 879*) yyTCombType {   0,    0}
         , (* 880*) yyTCombType {   0,    0} , (* 881*) yyTCombType {   0,    0}
         , (* 882*) yyTCombType {   0,    0} , (* 883*) yyTCombType {   0,    0}
         , (* 884*) yyTCombType {   0,    0} , (* 885*) yyTCombType {   0,    0}
         , (* 886*) yyTCombType {   0,    0} , (* 887*) yyTCombType {   0,    0}
         , (* 888*) yyTCombType {   0,    0} , (* 889*) yyTCombType {   0,    0}
         , (* 890*) yyTCombType {   0,    0} , (* 891*) yyTCombType {   0,    0}
         , (* 892*) yyTCombType {   0,    0} , (* 893*) yyTCombType {   0,    0}
         , (* 894*) yyTCombType {   0,    0} , (* 895*) yyTCombType {   0,    0}
         , (* 896*) yyTCombType {   0,    0} , (* 897*) yyTCombType {   0,    0}
         , (* 898*) yyTCombType {   0,    0} , (* 899*) yyTCombType {   0,    0}
         , (* 900*) yyTCombType {   0,    0} , (* 901*) yyTCombType {   0,    0}
         , (* 902*) yyTCombType {   0,    0} , (* 903*) yyTCombType {   0,    0}
         , (* 904*) yyTCombType {   0,    0} , (* 905*) yyTCombType {   0,    0}
         , (* 906*) yyTCombType {   0,    0} , (* 907*) yyTCombType {   0,    0}
         , (* 908*) yyTCombType {   0,    0} , (* 909*) yyTCombType {   0,    0}
         , (* 910*) yyTCombType {   0,    0} , (* 911*) yyTCombType {   0,    0}
         , (* 912*) yyTCombType {   0,    0} , (* 913*) yyTCombType {   0,    0}
         , (* 914*) yyTCombType {   0,    0} , (* 915*) yyTCombType {   0,    0}
         , (* 916*) yyTCombType {   0,    0} , (* 917*) yyTCombType {   0,    0}
         , (* 918*) yyTCombType {   0,    0} , (* 919*) yyTCombType {   0,    0}
         , (* 920*) yyTCombType {   0,    0} , (* 921*) yyTCombType {   0,    0}
         , (* 922*) yyTCombType {   0,    0} , (* 923*) yyTCombType {   0,    0}
         };
         
   yyNComb 
     (* This bounds range is arbitrary, unjustified, and confusing.
        It has nothing to do with states, actions, symbols, or anything
        else.  It is just a space for interspersed actions.  Moreover,
        during use, its elements are accessed only by unsafe pointers to
        them, from elements of yyNBasePtr, not by subscripts, for a bit
        of speed.  It would make the most sense to start it at zero, like
        yyTComb.  But that would require care to make consistent changes.
     *) 
     := ARRAY yyNCombRangePacked OF yyNCombType
         {
           (* 109*)  285 , (* 110*)    5 , (* 111*)  286 , (* 112*)  287
         , (* 113*)  288 , (* 114*)  289 , (* 115*)  290 , (* 116*)    0
         , (* 117*)    0 , (* 118*)  181 , (* 119*)  192 , (* 120*)    0
         , (* 121*)    0 , (* 122*)    6 , (* 123*)  283 , (* 124*)  284
         , (* 125*)   14 , (* 126*)    8 , (* 127*)    9 , (* 128*)  292
         , (* 129*)   35 , (* 130*)   16 , (* 131*)  291 , (* 132*)  162
         , (* 133*)  296 , (* 134*)  174 , (* 135*)   18 , (* 136*)  180
         , (* 137*)   20 , (* 138*)  191 , (* 139*)  293 , (* 140*)   20
         , (* 141*)  298 , (* 142*)  299 , (* 143*)   28 , (* 144*)   32
         , (* 145*)   30 , (* 146*)  300 , (* 147*)  297 , (* 148*)   34
         , (* 149*)   37 , (* 150*)   24 , (* 151*)  302 , (* 152*)   39
         , (* 153*)  329 , (* 154*)  329 , (* 155*)   84 , (* 156*)  354
         , (* 157*)   22 , (* 158*)  295 , (* 159*)   57 , (* 160*)  366
         , (* 161*)  294 , (* 162*)  360 , (* 163*)  303 , (* 164*)   25
         , (* 165*)  303 , (* 166*)  129 , (* 167*)   60 , (* 168*)  114
         , (* 169*)  356 , (* 170*)  112 , (* 171*)  356 , (* 172*)  301
         , (* 173*)  368 , (* 174*)  370 , (* 175*)  136 , (* 176*)   57
         , (* 177*)  140 , (* 178*)  377 , (* 179*)   40 , (* 180*)   57
         , (* 181*)  376 , (* 182*)  152 , (* 183*)  390 , (* 184*)  171
         , (* 185*)  167 , (* 186*)   66 , (* 187*)  352 , (* 188*)  132
         , (* 189*)  359 , (* 190*)  380 , (* 191*)  396 , (* 192*)  333
         , (* 193*)   59 , (* 194*)  168 , (* 195*)  138 , (* 196*)   66
         , (* 197*)  383 , (* 198*)  151 , (* 199*)  170 , (* 200*)  144
         , (* 201*)  304 , (* 202*)  385 , (* 203*)   41 , (* 204*)  131
         , (* 205*)   43 , (* 206*)   42 , (* 207*)   43 , (* 208*)   66
         , (* 209*)  353 , (* 210*)   59 , (* 211*)  173 , (* 212*)   67
         , (* 213*)  369 , (* 214*)   59 , (* 215*)  122 , (* 216*)  397
         , (* 217*)  334 , (* 218*)  305 , (* 219*)   94 , (* 220*)   95
         , (* 221*)  362 , (* 222*)   67 , (* 223*)  364 , (* 224*)   99
         , (* 225*)  128 , (* 226*)  179 , (* 227*)  334 , (* 228*)  134
         , (* 229*)  135 , (* 230*)  118 , (* 231*)  115 , (* 232*)  365
         , (* 233*)  115 , (* 234*)   67 , (* 235*)  358 , (* 236*)  111
         , (* 237*)  121 , (* 238*)   53 , (* 239*)  334 , (* 240*)   54
         , (* 241*)  331 , (* 242*)  330 , (* 243*)  184 , (* 244*)  306
         , (* 245*)   57 , (* 246*)  183 , (* 247*)   76 , (* 248*)  307
         , (* 249*)  308 , (* 250*)   78 , (* 251*)   80 , (* 252*)   49
         , (* 253*)  374 , (* 254*)  113 , (* 255*)  350 , (* 256*)  347
         , (* 257*)  148 , (* 258*)  186 , (* 259*)  392 , (* 260*)  340
         , (* 261*)  341 , (* 262*)  104 , (* 263*)  367 , (* 264*)  106
         , (* 265*)  357 , (* 266*)  106 , (* 267*)  108 , (* 268*)  109
         , (* 269*)  361 , (* 270*)  111 , (* 271*)  124 , (* 272*)  371
         , (* 273*)  126 , (* 274*)  386 , (* 275*)  190 , (* 276*)  150
         , (* 277*)  305 , (* 278*)  333 , (* 279*)   59 , (* 280*)  393
         , (* 281*)  394 , (* 282*)  161 , (* 283*)  310 , (* 284*)  311
         , (* 285*)  312 , (* 286*)  313 , (* 287*)  314 , (* 288*)  315
         , (* 289*)  316 , (* 290*)  317 , (* 291*)  318 , (* 292*)  319
         , (* 293*)  320 , (* 294*)  321 , (* 295*)  322 , (* 296*)  323
         , (* 297*)  324 , (* 298*)  325 , (* 299*)   50 , (* 300*)  327
         , (* 301*)  328 , (* 302*)   52 , (* 303*)  306 , (* 304*)  332
         , (* 305*)  102 , (* 306*)   95 , (* 307*)  307 , (* 308*)  308
         , (* 309*)   56 , (* 310*)  193 , (* 311*)   49 , (* 312*)  373
         , (* 313*)  337 , (* 314*)  149 , (* 315*)  338 , (* 316*)   81
         , (* 317*)   82 , (* 318*)  195 , (* 319*)  153 , (* 320*)   97
         , (* 321*)  100 , (* 322*)  101 , (* 323*)  117 , (* 324*)  115
         , (* 325*)  339 , (* 326*)  377 , (* 327*)   82 , (* 328*)  197
         , (* 329*)  198 , (* 330*)   93 , (* 331*)   86 , (* 332*)    0
         , (* 333*)   85 , (* 334*)    0 , (* 335*)  342 , (* 336*)  305
         , (* 337*)  338 , (* 338*)   81 , (* 339*)   82 , (* 340*)    0
         , (* 341*)    0 , (* 342*)  310 , (* 343*)  311 , (* 344*)  312
         , (* 345*)  313 , (* 346*)  314 , (* 347*)  315 , (* 348*)  316
         , (* 349*)  317 , (* 350*)  318 , (* 351*)  319 , (* 352*)  320
         , (* 353*)  321 , (* 354*)  322 , (* 355*)  323 , (* 356*)  324
         , (* 357*)  325 , (* 358*)   50 , (* 359*)  327 , (* 360*)  328
         , (* 361*)   52 , (* 362*)  306 , (* 363*)  332 , (* 364*)  396
         , (* 365*)   66 , (* 366*)  307 , (* 367*)  308 , (* 368*)   56
         , (* 369*)  399 , (* 370*)   49 , (* 371*)  309 , (* 372*)    0
         , (* 373*)  378 , (* 374*)    0 , (* 375*)  133 , (* 376*)  137
         , (* 377*)  135 , (* 378*)    0 , (* 379*)   97 , (* 380*)  100
         , (* 381*)  101 , (* 382*)  117 , (* 383*)  297 , (* 384*)    0
         , (* 385*)    0 , (* 386*)   24 , (* 387*)    0 , (* 388*)  164
         , (* 389*)  398 , (* 390*)    0 , (* 391*)   67 , (* 392*)    0
         , (* 393*)    0 , (* 394*)    0 , (* 395*)  305 , (* 396*)  334
         , (* 397*)   66 , (* 398*)   57 , (* 399*)    0 , (* 400*)    0
         , (* 401*)  310 , (* 402*)  311 , (* 403*)  312 , (* 404*)  313
         , (* 405*)  314 , (* 406*)  315 , (* 407*)  316 , (* 408*)  317
         , (* 409*)  318 , (* 410*)  319 , (* 411*)  320 , (* 412*)  321
         , (* 413*)  322 , (* 414*)  323 , (* 415*)  324 , (* 416*)  325
         , (* 417*)   50 , (* 418*)  327 , (* 419*)  328 , (* 420*)   52
         , (* 421*)  306 , (* 422*)  332 , (* 423*)   67 , (* 424*)    0
         , (* 425*)  307 , (* 426*)  308 , (* 427*)   56 , (* 428*)  334
         , (* 429*)   49 , (* 430*)  326 , (* 431*)  146 , (* 432*)   59
         , (* 433*)  187 , (* 434*)  196 , (* 435*)    0 , (* 436*)    0
         , (* 437*)    0 , (* 438*)   97 , (* 439*)  100 , (* 440*)  101
         , (* 441*)  117 , (* 442*)    0 , (* 443*)    0 , (* 444*)    0
         , (* 445*)    0 , (* 446*)    0 , (* 447*)  297 , (* 448*)  297
         , (* 449*)  153 , (* 450*)   24 , (* 451*)   24 , (* 452*)    0
         , (* 453*)    0 , (* 454*)    0 , (* 455*)    0 , (* 456*)    0
         , (* 457*)   66 , (* 458*)    0 , (* 459*)    0 , (* 460*)  310
         , (* 461*)  311 , (* 462*)  312 , (* 463*)  313 , (* 464*)  314
         , (* 465*)  315 , (* 466*)  316 , (* 467*)  317 , (* 468*)  318
         , (* 469*)  319 , (* 470*)  320 , (* 471*)  321 , (* 472*)  322
         , (* 473*)  323 , (* 474*)  324 , (* 475*)  325 , (* 476*)   50
         , (* 477*)  327 , (* 478*)  328 , (* 479*)   52 , (* 480*)    0
         , (* 481*)  332 , (* 482*)    0 , (* 483*)   67 , (* 484*)   66
         , (* 485*)    0 , (* 486*)   56 , (* 487*)    0 , (* 488*)  334
         , (* 489*)    0 , (* 490*)   79 , (* 491*)    0 , (* 492*)  342
         , (* 493*)    0 , (* 494*)  338 , (* 495*)   81 , (* 496*)   82
         , (* 497*)   97 , (* 498*)  100 , (* 499*)  101 , (* 500*)  117
         , (* 501*)  351 , (* 502*)    0 , (* 503*)   66 , (* 504*)    0
         , (* 505*)    0 , (* 506*)  305 , (* 507*)    0 , (* 508*)    0
         , (* 509*)    0 , (* 510*)   67 , (* 511*)    0 , (* 512*)  305
         , (* 513*)    0 , (* 514*)    0 , (* 515*)  334 , (* 516*)   92
         , (* 517*)   87 , (* 518*)  343 , (* 519*)   75 , (* 520*)   86
         , (* 521*)    0 , (* 522*)   85 , (* 523*)   69 , (* 524*)  342
         , (* 525*)    0 , (* 526*)  338 , (* 527*)   81 , (* 528*)   82
         , (* 529*)   67 , (* 530*)    0 , (* 531*)    0 , (* 532*)  306
         , (* 533*)    0 , (* 534*)  334 , (* 535*)    0 , (* 536*)  307
         , (* 537*)  308 , (* 538*)  306 , (* 539*)   66 , (* 540*)  139
         , (* 541*)   57 , (* 542*)  307 , (* 543*)  308 , (* 544*)    0
         , (* 545*)    0 , (* 546*)  139 , (* 547*)  348 , (* 548*)    0
         , (* 549*)   67 , (* 550*)    0 , (* 551*)    0 , (* 552*)    0
         , (* 553*)    0 , (* 554*)  334 , (* 555*)    0 , (* 556*)    0
         , (* 557*)    0 , (* 558*)    0 , (* 559*)   66 , (* 560*)  382
         , (* 561*)    0 , (* 562*)  141 , (* 563*)  143 , (* 564*)    0
         , (* 565*)   67 , (* 566*)    0 , (* 567*)  344 , (* 568*)   66
         , (* 569*)  142 , (* 570*)  334 , (* 571*)  384 , (* 572*)    0
         , (* 573*)  145 , (* 574*)  147 , (* 575*)   59 , (* 576*)   71
         , (* 577*)   87 , (* 578*)  343 , (* 579*)   75 , (* 580*)   86
         , (* 581*)    0 , (* 582*)   85 , (* 583*)    0 , (* 584*)  342
         , (* 585*)   67 , (* 586*)  338 , (* 587*)   81 , (* 588*)   82
         , (* 589*)    0 , (* 590*)  334 , (* 591*)    0 , (* 592*)    0
         , (* 593*)    0 , (* 594*)   67 , (* 595*)    0 , (* 596*)    0
         , (* 597*)    0 , (* 598*)    0 , (* 599*)  334 , (* 600*)    0
         , (* 601*)    0 , (* 602*)    0 , (* 603*)  335 , (* 604*)   73
         , (* 605*)  343 , (* 606*)   75 , (* 607*)   86 , (* 608*)    0
         , (* 609*)   85 , (* 610*)    0 , (* 611*)  342 , (* 612*)    0
         , (* 613*)  338 , (* 614*)   81 , (* 615*)   82 , (* 616*)    0
         , (* 617*)    0 , (* 618*)    0 , (* 619*)    0 , (* 620*)    0
         , (* 621*)    0 , (* 622*)   71 , (* 623*)   87 , (* 624*)  343
         , (* 625*)   75 , (* 626*)   86 , (* 627*)    0 , (* 628*)   85
         , (* 629*)    0 , (* 630*)  342 , (* 631*)    0 , (* 632*)  338
         , (* 633*)   81 , (* 634*)   82 , (* 635*)    0 , (* 636*)    0
         , (* 637*)   90 , (* 638*)    0 , (* 639*)    0 , (* 640*)    0
         , (* 641*)   69 , (* 642*)   71 , (* 643*)   87 , (* 644*)  343
         , (* 645*)   75 , (* 646*)   86 , (* 647*)    0 , (* 648*)   85
         , (* 649*)    0 , (* 650*)  342 , (* 651*)    0 , (* 652*)  338
         , (* 653*)   81 , (* 654*)   82 , (* 655*)    0 , (* 656*)    0
         , (* 657*)    0 , (* 658*)   88 , (* 659*)  346 , (* 660*)  336
         , (* 661*)   75 , (* 662*)   86 , (* 663*)    0 , (* 664*)   85
         , (* 665*)    0 , (* 666*)  342 , (* 667*)   67 , (* 668*)  338
         , (* 669*)   81 , (* 670*)   82 , (* 671*)    0 , (* 672*)  334
         , (* 673*)    0 , (* 674*)   66 , (* 675*)    0 , (* 676*)    0
         , (* 677*)    0 , (* 678*)   71 , (* 679*)   87 , (* 680*)  343
         , (* 681*)   75 , (* 682*)   86 , (* 683*)    0 , (* 684*)   85
         , (* 685*)  344 , (* 686*)  342 , (* 687*)    0 , (* 688*)  338
         , (* 689*)   81 , (* 690*)   82 , (* 691*)   77 , (* 692*)    0
         , (* 693*)   85 , (* 694*)   66 , (* 695*)  342 , (* 696*)    0
         , (* 697*)  338 , (* 698*)   81 , (* 699*)   82 , (* 700*)   67
         , (* 701*)    0 , (* 702*)    0 , (* 703*)    0 , (* 704*)    0
         , (* 705*)  334 , (* 706*)    0 , (* 707*)    0 , (* 708*)   66
         , (* 709*)    0 , (* 710*)    0 , (* 711*)    0 , (* 712*)    0
         , (* 713*)    0 , (* 714*)    0 , (* 715*)    0 , (* 716*)    0
         , (* 717*)    0 , (* 718*)  349 , (* 719*)    0 , (* 720*)   67
         , (* 721*)    0 , (* 722*)    0 , (* 723*)    0 , (* 724*)    0
         , (* 725*)  334 , (* 726*)    0 , (* 727*)    0 , (* 728*)    0
         , (* 729*)    0 , (* 730*)    0 , (* 731*)    0 , (* 732*)    0
         , (* 733*)    0 , (* 734*)   67 , (* 735*)    0 , (* 736*)    0
         , (* 737*)    0 , (* 738*)  355 , (* 739*)  334 , (* 740*)    0
         , (* 741*)    0 , (* 742*)    0 , (* 743*)    0 , (* 744*)    0
         , (* 745*)    0 , (* 746*)    0 , (* 747*)    0 , (* 748*)    0
         , (* 749*)    0 , (* 750*)    0 , (* 751*)    0 , (* 752*)  372
         , (* 753*)    0 , (* 754*)    0 , (* 755*)    0 , (* 756*)    0
         , (* 757*)    0 , (* 758*)    0 , (* 759*)    0 , (* 760*)   71
         , (* 761*)   87 , (* 762*)  343 , (* 763*)   75 , (* 764*)   86
         , (* 765*)    0 , (* 766*)   85 , (* 767*)    0 , (* 768*)  342
         , (* 769*)    0 , (* 770*)  338 , (* 771*)   81 , (* 772*)   82
         , (* 773*)    0 , (* 774*)    0 , (* 775*)    0 , (* 776*)  305
         , (* 777*)  345 , (* 778*)    0 , (* 779*)    0 , (* 780*)    0
         , (* 781*)    0 , (* 782*)    0 , (* 783*)    0 , (* 784*)    0
         , (* 785*)    0 , (* 786*)    0 , (* 787*)    0 , (* 788*)    0
         , (* 789*)    0 , (* 790*)    0 , (* 791*)    0 , (* 792*)    0
         , (* 793*)   71 , (* 794*)   87 , (* 795*)  343 , (* 796*)   75
         , (* 797*)   86 , (* 798*)    0 , (* 799*)   85 , (* 800*)    0
         , (* 801*)  342 , (* 802*)  306 , (* 803*)  338 , (* 804*)   81
         , (* 805*)   82 , (* 806*)  307 , (* 807*)  308 , (* 808*)    0
         , (* 809*)    0 , (* 810*)   49 , (* 811*)  363 , (* 812*)    0
         , (* 813*)   71 , (* 814*)   87 , (* 815*)  343 , (* 816*)   75
         , (* 817*)   86 , (* 818*)    0 , (* 819*)   85 , (* 820*)    0
         , (* 821*)  342 , (* 822*)    0 , (* 823*)  338 , (* 824*)   81
         , (* 825*)   82 , (* 826*)    0 , (* 827*)   71 , (* 828*)   87
         , (* 829*)  343 , (* 830*)   75 , (* 831*)   86 , (* 832*)    0
         , (* 833*)   85 , (* 834*)    0 , (* 835*)  342 , (* 836*)    0
         , (* 837*)  338 , (* 838*)   81 , (* 839*)   82 , (* 840*)   66
         , (* 841*)  310 , (* 842*)  311 , (* 843*)  312 , (* 844*)  313
         , (* 845*)  314 , (* 846*)  315 , (* 847*)  316 , (* 848*)  317
         , (* 849*)  318 , (* 850*)  319 , (* 851*)  320 , (* 852*)  321
         , (* 853*)  322 , (* 854*)  323 , (* 855*)  324 , (* 856*)  325
         , (* 857*)   50 , (* 858*)  327 , (* 859*)  328 , (* 860*)   52
         , (* 861*)    0 , (* 862*)  332 , (* 863*)    0 , (* 864*)    0
         , (* 865*)    0 , (* 866*)   67 , (* 867*)   56 , (* 868*)    0
         , (* 869*)    0 , (* 870*)    0 , (* 871*)  334 , (* 872*)    0
         , (* 873*)    0 , (* 874*)    0 , (* 875*)    0 , (* 876*)    0
         , (* 877*)    0 , (* 878*)   97 , (* 879*)  100 , (* 880*)  101
         , (* 881*)  117 , (* 882*)    0 , (* 883*)    0 , (* 884*)  375
         , (* 885*)    0 , (* 886*)    0 , (* 887*)    0 , (* 888*)    0
         , (* 889*)    0 , (* 890*)    0 , (* 891*)    0 , (* 892*)    0
         , (* 893*)    0 , (* 894*)    0 , (* 895*)    0 , (* 896*)    0
         , (* 897*)    0 , (* 898*)    0 , (* 899*)    0 , (* 900*)    0
         , (* 901*)    0 , (* 902*)    0 , (* 903*)    0 , (* 904*)    0
         , (* 905*)    0 , (* 906*)    0 , (* 907*)  305 , (* 908*)    0
         , (* 909*)    0 , (* 910*)    0 , (* 911*)    0 , (* 912*)    0
         , (* 913*)    0 , (* 914*)    0 , (* 915*)    0 , (* 916*)    0
         , (* 917*)    0 , (* 918*)    0 , (* 919*)    0 , (* 920*)    0
         , (* 921*)    0 , (* 922*)    0 , (* 923*)    0 , (* 924*)    0
         , (* 925*)    0 , (* 926*)    0 , (* 927*)    0 , (* 928*)    0
         , (* 929*)    0 , (* 930*)    0 , (* 931*)    0 , (* 932*)    0
         , (* 933*)  306 , (* 934*)    0 , (* 935*)    0 , (* 936*)    0
         , (* 937*)  307 , (* 938*)  308 , (* 939*)    0 , (* 940*)    0
         , (* 941*)   49 , (* 942*)  379 , (* 943*)    0 , (* 944*)    0
         , (* 945*)    0 , (* 946*)    0 , (* 947*)    0 , (* 948*)    0
         , (* 949*)    0 , (* 950*)    0 , (* 951*)    0 , (* 952*)    0
         , (* 953*)    0 , (* 954*)    0 , (* 955*)    0 , (* 956*)    0
         , (* 957*)    0 , (* 958*)    0 , (* 959*)   71 , (* 960*)   87
         , (* 961*)  343 , (* 962*)   75 , (* 963*)   86 , (* 964*)    0
         , (* 965*)   85 , (* 966*)  305 , (* 967*)  342 , (* 968*)    0
         , (* 969*)  338 , (* 970*)   81 , (* 971*)   82 , (* 972*)  310
         , (* 973*)  311 , (* 974*)  312 , (* 975*)  313 , (* 976*)  314
         , (* 977*)  315 , (* 978*)  316 , (* 979*)  317 , (* 980*)  318
         , (* 981*)  319 , (* 982*)  320 , (* 983*)  321 , (* 984*)  322
         , (* 985*)  323 , (* 986*)  324 , (* 987*)  325 , (* 988*)   50
         , (* 989*)  327 , (* 990*)  328 , (* 991*)   52 , (* 992*)  306
         , (* 993*)  332 , (* 994*)    0 , (* 995*)    0 , (* 996*)  307
         , (* 997*)  308 , (* 998*)   56 , (* 999*)    0 , (*1000*)   49
         , (*1001*)  381 , (*1002*)    0 , (*1003*)    0 , (*1004*)   40
         , (*1005*)    0 , (*1006*)  376 , (*1007*)    0 , (*1008*)    0
         , (*1009*)   97 , (*1010*)  100 , (*1011*)  101 , (*1012*)  117
         , (*1013*)  132 , (*1014*)    0 , (*1015*)  380 , (*1016*)    0
         , (*1017*)    0 , (*1018*)    0 , (*1019*)    0 , (*1020*)  138
         , (*1021*)    0 , (*1022*)  383 , (*1023*)    0 , (*1024*)    0
         , (*1025*)  144 , (*1026*)  154 , (*1027*)  385 , (*1028*)    0
         , (*1029*)    0 , (*1030*)    0 , (*1031*)  310 , (*1032*)  311
         , (*1033*)  312 , (*1034*)  313 , (*1035*)  314 , (*1036*)  315
         , (*1037*)  316 , (*1038*)  317 , (*1039*)  318 , (*1040*)  319
         , (*1041*)  320 , (*1042*)  321 , (*1043*)  322 , (*1044*)  323
         , (*1045*)  324 , (*1046*)  325 , (*1047*)   50 , (*1048*)  327
         , (*1049*)  328 , (*1050*)   52 , (*1051*)    0 , (*1052*)  332
         , (*1053*)    0 , (*1054*)   66 , (*1055*)    0 , (*1056*)   40
         , (*1057*)   56 , (*1058*)  376 , (*1059*)    0 , (*1060*)    0
         , (*1061*)    0 , (*1062*)    0 , (*1063*)    0 , (*1064*)    0
         , (*1065*)  132 , (*1066*)  156 , (*1067*)  380 , (*1068*)   97
         , (*1069*)  100 , (*1070*)  101 , (*1071*)  117 , (*1072*)  138
         , (*1073*)    0 , (*1074*)  383 , (*1075*)    0 , (*1076*)    0
         , (*1077*)  144 , (*1078*)    0 , (*1079*)  385 , (*1080*)   67
         , (*1081*)   66 , (*1082*)  148 , (*1083*)    0 , (*1084*)  392
         , (*1085*)  334 , (*1086*)    0 , (*1087*)    0 , (*1088*)    0
         , (*1089*)    0 , (*1090*)    0 , (*1091*)    0 , (*1092*)    0
         , (*1093*)    0 , (*1094*)    0 , (*1095*)   66 , (*1096*)    0
         , (*1097*)    0 , (*1098*)  157 , (*1099*)  175 , (*1100*)    0
         , (*1101*)    0 , (*1102*)    0 , (*1103*)    0 , (*1104*)    0
         , (*1105*)  395 , (*1106*)  394 , (*1107*)   67 , (*1108*)    0
         , (*1109*)    0 , (*1110*)    0 , (*1111*)    0 , (*1112*)  334
         , (*1113*)    0 , (*1114*)    0 , (*1115*)    0 , (*1116*)    0
         , (*1117*)    0 , (*1118*)    0 , (*1119*)    0 , (*1120*)   66
         , (*1121*)   67 , (*1122*)    0 , (*1123*)    0 , (*1124*)    0
         , (*1125*)  387 , (*1126*)  334 , (*1127*)    0 , (*1128*)    0
         , (*1129*)   40 , (*1130*)    0 , (*1131*)  376 , (*1132*)  177
         , (*1133*)    0 , (*1134*)  148 , (*1135*)    0 , (*1136*)  392
         , (*1137*)    0 , (*1138*)  132 , (*1139*)  157 , (*1140*)  380
         , (*1141*)    0 , (*1142*)    0 , (*1143*)    0 , (*1144*)    0
         , (*1145*)  138 , (*1146*)   67 , (*1147*)  383 , (*1148*)    0
         , (*1149*)    0 , (*1150*)  144 , (*1151*)  334 , (*1152*)  385
         , (*1153*)    0 , (*1154*)    0 , (*1155*)    0 , (*1156*)    0
         , (*1157*)  393 , (*1158*)  394 , (*1159*)  161 , (*1160*)    0
         , (*1161*)    0 , (*1162*)    0 , (*1163*)    0 , (*1164*)  157
         , (*1165*)    0 , (*1166*)    0 , (*1167*)    0 , (*1168*)    0
         , (*1169*)    0 , (*1170*)    0 , (*1171*)    0 , (*1172*)    0
         , (*1173*)   71 , (*1174*)   87 , (*1175*)  343 , (*1176*)   75
         , (*1177*)   86 , (*1178*)    0 , (*1179*)   85 , (*1180*)    0
         , (*1181*)  342 , (*1182*)    0 , (*1183*)  338 , (*1184*)   81
         , (*1185*)   82 , (*1186*)    0 , (*1187*)    0 , (*1188*)    0
         , (*1189*)    0 , (*1190*)    0 , (*1191*)    0 , (*1192*)    0
         , (*1193*)    0 , (*1194*)    0 , (*1195*)  159 , (*1196*)  391
         , (*1197*)  389 , (*1198*)    0 , (*1199*)    0 , (*1200*)   71
         , (*1201*)   87 , (*1202*)  343 , (*1203*)   75 , (*1204*)   86
         , (*1205*)    0 , (*1206*)   85 , (*1207*)  148 , (*1208*)  342
         , (*1209*)  392 , (*1210*)  338 , (*1211*)   81 , (*1212*)   82
         , (*1213*)    0 , (*1214*)   71 , (*1215*)   87 , (*1216*)  343
         , (*1217*)   75 , (*1218*)   86 , (*1219*)    0 , (*1220*)   85
         , (*1221*)    0 , (*1222*)  342 , (*1223*)    0 , (*1224*)  338
         , (*1225*)   81 , (*1226*)   82 , (*1227*)  188 , (*1228*)    0
         , (*1229*)    0 , (*1230*)  393 , (*1231*)  394 , (*1232*)  161
         , (*1233*)    0 , (*1234*)    0 , (*1235*)    0 , (*1236*)    0
         , (*1237*)  388 , (*1238*)  389 , (*1239*)   71 , (*1240*)   87
         , (*1241*)  343 , (*1242*)   75 , (*1243*)   86 , (*1244*)    0
         , (*1245*)   85 , (*1246*)    0 , (*1247*)  342 , (*1248*)    0
         , (*1249*)  338 , (*1250*)   81 , (*1251*)   82 , (*1252*)    0
         , (*1253*)    0 , (*1254*)    0 , (*1255*)    0 , (*1256*)    0
         , (*1257*)   40 , (*1258*)    0 , (*1259*)  376 , (*1260*)    0
         , (*1261*)  159 , (*1262*)  391 , (*1263*)  389 , (*1264*)    0
         , (*1265*)    0 , (*1266*)  132 , (*1267*)    0 , (*1268*)  380
         , (*1269*)    0 , (*1270*)    0 , (*1271*)    0 , (*1272*)    0
         , (*1273*)  138 , (*1274*)    0 , (*1275*)  383 , (*1276*)    0
         , (*1277*)    0 , (*1278*)  144 , (*1279*)    0 , (*1280*)  385
         , (*1281*)    0 , (*1282*)    0 , (*1283*)    0 , (*1284*)    0
         , (*1285*)    0 , (*1286*)    0 , (*1287*)    0 , (*1288*)    0
         , (*1289*)    0 , (*1290*)    0 , (*1291*)    0 , (*1292*)    0
         , (*1293*)    0 , (*1294*)    0 , (*1295*)    0 , (*1296*)    0
         , (*1297*)    0 , (*1298*)    0 , (*1299*)    0 , (*1300*)    0
         , (*1301*)    0 , (*1302*)    0 , (*1303*)    0 , (*1304*)    0
         , (*1305*)    0 , (*1306*)    0 , (*1307*)    0 , (*1308*)    0
         , (*1309*)    0 , (*1310*)    0 , (*1311*)    0 , (*1312*)    0
         , (*1313*)    0 , (*1314*)    0 , (*1315*)    0 , (*1316*)    0
         , (*1317*)    0 , (*1318*)    0 , (*1319*)    0 , (*1320*)    0
         , (*1321*)    0 , (*1322*)    0 , (*1323*)    0 , (*1324*)    0
         , (*1325*)    0 , (*1326*)    0 , (*1327*)    0 , (*1328*)    0
         , (*1329*)    0 , (*1330*)    0 , (*1331*)    0 , (*1332*)    0
         , (*1333*)    0 , (*1334*)    0 , (*1335*)  148 , (*1336*)    0
         , (*1337*)  392 , (*1338*)    0 , (*1339*)    0 , (*1340*)    0
         , (*1341*)    0 , (*1342*)    0 , (*1343*)    0 , (*1344*)    0
         , (*1345*)    0 , (*1346*)    0 , (*1347*)    0 , (*1348*)    0
         , (*1349*)    0 , (*1350*)    0 , (*1351*)    0 , (*1352*)    0
         , (*1353*)    0 , (*1354*)    0 , (*1355*)    0 , (*1356*)    0
         , (*1357*)    0 , (*1358*)  393 , (*1359*)  394 , (*1360*)  161
         , (*1361*)    0 , (*1362*)    0 , (*1363*)    0 , (*1364*)    0
         };
         
   yyLength
     (* Subscripted by a reduce action, maps to LHS length of the
        production to reduce by. A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yyTableElmt
         {
           (*A 400(P   1)*)    2 , (*A 401(P   2)*)    1 , (*A 402(P   3)*)    1
         , (*A 403(P   4)*)    1 , (*A 404(P   5)*)    1 , (*A 405(P   6)*)    1
         , (*A 406(P   7)*)    1 , (*A 407(P   8)*)    0 , (*A 408(P   9)*)    0
         , (*A 409(P  10)*)    0 , (*A 410(P  11)*)    0 , (*A 411(P  12)*)    0
         , (*A 412(P  13)*)    0 , (*A 413(P  14)*)    4 , (*A 414(P  15)*)    7
         , (*A 415(P  16)*)    4 , (*A 416(P  17)*)    5 , (*A 417(P  18)*)    0
         , (*A 418(P  19)*)    2 , (*A 419(P  20)*)    3 , (*A 420(P  21)*)    3
         , (*A 421(P  22)*)    3 , (*A 422(P  23)*)    7 , (*A 423(P  24)*)    5
         , (*A 424(P  25)*)    7 , (*A 425(P  26)*)    3 , (*A 426(P  27)*)   10
         , (*A 427(P  28)*)    3 , (*A 428(P  29)*)    9 , (*A 429(P  30)*)    1
         , (*A 430(P  31)*)    0 , (*A 431(P  32)*)    1 , (*A 432(P  33)*)    0
         , (*A 433(P  34)*)    3 , (*A 434(P  35)*)    3 , (*A 435(P  36)*)    0
         , (*A 436(P  37)*)    2 , (*A 437(P  38)*)    3 , (*A 438(P  39)*)    1
         , (*A 439(P  40)*)    3 , (*A 440(P  41)*)    1 , (*A 441(P  42)*)    3
         , (*A 442(P  43)*)    3 , (*A 443(P  44)*)    3 , (*A 444(P  45)*)    1
         , (*A 445(P  46)*)    3 , (*A 446(P  47)*)    0 , (*A 447(P  48)*)    0
         , (*A 448(P  49)*)    2 , (*A 449(P  50)*)    1 , (*A 450(P  51)*)    3
         , (*A 451(P  52)*)    1 , (*A 452(P  53)*)    1 , (*A 453(P  54)*)    1
         , (*A 454(P  55)*)    3 , (*A 455(P  56)*)    1 , (*A 456(P  57)*)    3
         , (*A 457(P  58)*)    1 , (*A 458(P  59)*)    3 , (*A 459(P  60)*)    3
         , (*A 460(P  61)*)    0 , (*A 461(P  62)*)    1 , (*A 462(P  63)*)    1
         , (*A 463(P  64)*)    1 , (*A 464(P  65)*)    0 , (*A 465(P  66)*)    1
         , (*A 466(P  67)*)    1 , (*A 467(P  68)*)    3 , (*A 468(P  69)*)    1
         , (*A 469(P  70)*)    1 , (*A 470(P  71)*)    2 , (*A 471(P  72)*)    2
         , (*A 472(P  73)*)    0 , (*A 473(P  74)*)    1 , (*A 474(P  75)*)    2
         , (*A 475(P  76)*)    0 , (*A 476(P  77)*)    1 , (*A 477(P  78)*)    2
         , (*A 478(P  79)*)    3 , (*A 479(P  80)*)    1 , (*A 480(P  81)*)    4
         , (*A 481(P  82)*)    1 , (*A 482(P  83)*)    1 , (*A 483(P  84)*)    1
         , (*A 484(P  85)*)    2 , (*A 485(P  86)*)    0 , (*A 486(P  87)*)    1
         , (*A 487(P  88)*)    2 , (*A 488(P  89)*)    3 , (*A 489(P  90)*)    1
         , (*A 490(P  91)*)    3 , (*A 491(P  92)*)    1 , (*A 492(P  93)*)    1
         , (*A 493(P  94)*)    1 , (*A 494(P  95)*)    2 , (*A 495(P  96)*)    0
         , (*A 496(P  97)*)    1 , (*A 497(P  98)*)    2 , (*A 498(P  99)*)    3
         , (*A 499(P 100)*)    3 , (*A 500(P 101)*)    1 , (*A 501(P 102)*)    2
         , (*A 502(P 103)*)    0 , (*A 503(P 104)*)    1 , (*A 504(P 105)*)    2
         , (*A 505(P 106)*)    3 , (*A 506(P 107)*)    3 , (*A 507(P 108)*)    1
         , (*A 508(P 109)*)    2 , (*A 509(P 110)*)    0 , (*A 510(P 111)*)    2
         , (*A 511(P 112)*)    0 , (*A 512(P 113)*)    1 , (*A 513(P 114)*)    1
         , (*A 514(P 115)*)    1 , (*A 515(P 116)*)    1 , (*A 516(P 117)*)    1
         , (*A 517(P 118)*)    1 , (*A 518(P 119)*)    1 , (*A 519(P 120)*)    1
         , (*A 520(P 121)*)    1 , (*A 521(P 122)*)    1 , (*A 522(P 123)*)    1
         , (*A 523(P 124)*)    1 , (*A 524(P 125)*)    1 , (*A 525(P 126)*)    1
         , (*A 526(P 127)*)    1 , (*A 527(P 128)*)    1 , (*A 528(P 129)*)    1
         , (*A 529(P 130)*)    2 , (*A 530(P 131)*)    3 , (*A 531(P 132)*)    1
         , (*A 532(P 133)*)    3 , (*A 533(P 134)*)    1 , (*A 534(P 135)*)    0
         , (*A 535(P 136)*)    1 , (*A 536(P 137)*)    3 , (*A 537(P 138)*)    0
         , (*A 538(P 139)*)    1 , (*A 539(P 140)*)    1 , (*A 540(P 141)*)    3
         , (*A 541(P 142)*)    1 , (*A 542(P 143)*)    1 , (*A 543(P 144)*)    0
         , (*A 544(P 145)*)    2 , (*A 545(P 146)*)    1 , (*A 546(P 147)*)    3
         , (*A 547(P 148)*)    1 , (*A 548(P 149)*)    3 , (*A 549(P 150)*)    0
         , (*A 550(P 151)*)    1 , (*A 551(P 152)*)    3 , (*A 552(P 153)*)    1
         , (*A 553(P 154)*)    3 , (*A 554(P 155)*)    1 , (*A 555(P 156)*)    2
         , (*A 556(P 157)*)    0 , (*A 557(P 158)*)    1 , (*A 558(P 159)*)    3
         , (*A 559(P 160)*)    1 , (*A 560(P 161)*)    3 , (*A 561(P 162)*)    1
         , (*A 562(P 163)*)    3 , (*A 563(P 164)*)    0 , (*A 564(P 165)*)    1
         , (*A 565(P 166)*)    2 , (*A 566(P 167)*)    0 , (*A 567(P 168)*)    1
         , (*A 568(P 169)*)    1 , (*A 569(P 170)*)    3 , (*A 570(P 171)*)    5
         , (*A 571(P 172)*)    1 , (*A 572(P 173)*)    1 , (*A 573(P 174)*)    2
         , (*A 574(P 175)*)    3 , (*A 575(P 176)*)    3 , (*A 576(P 177)*)    0
         , (*A 577(P 178)*)    2 , (*A 578(P 179)*)    3 , (*A 579(P 180)*)    1
         , (*A 580(P 181)*)    0 , (*A 581(P 182)*)    1 , (*A 582(P 183)*)    1
         , (*A 583(P 184)*)    1 , (*A 584(P 185)*)    4 , (*A 585(P 186)*)    1
         , (*A 586(P 187)*)    2 , (*A 587(P 188)*)    0 , (*A 588(P 189)*)    0
         , (*A 589(P 190)*)    2 , (*A 590(P 191)*)    4 , (*A 591(P 192)*)    2
         , (*A 592(P 193)*)    3 , (*A 593(P 194)*)    1 , (*A 594(P 195)*)    1
         , (*A 595(P 196)*)    4 , (*A 596(P 197)*)    1 , (*A 597(P 198)*)    1
         , (*A 598(P 199)*)    3 , (*A 599(P 200)*)    1 , (*A 600(P 201)*)    3
         , (*A 601(P 202)*)    1 , (*A 602(P 203)*)    2 , (*A 603(P 204)*)    1
         , (*A 604(P 205)*)    3 , (*A 605(P 206)*)    1 , (*A 606(P 207)*)    3
         , (*A 607(P 208)*)    1 , (*A 608(P 209)*)    3 , (*A 609(P 210)*)    1
         , (*A 610(P 211)*)    2 , (*A 611(P 212)*)    2 , (*A 612(P 213)*)    2
         , (*A 613(P 214)*)    2 , (*A 614(P 215)*)    3 , (*A 615(P 216)*)    1
         , (*A 616(P 217)*)    2 , (*A 617(P 218)*)    2 , (*A 618(P 219)*)    2
         , (*A 619(P 220)*)    1 , (*A 620(P 221)*)    1 , (*A 621(P 222)*)    3
         , (*A 622(P 223)*)    1 , (*A 623(P 224)*)    3 , (*A 624(P 225)*)    3
         , (*A 625(P 226)*)    0 , (*A 626(P 227)*)    1 , (*A 627(P 228)*)    3
         , (*A 628(P 229)*)    1 , (*A 629(P 230)*)    3 , (*A 630(P 231)*)    3
         , (*A 631(P 232)*)    1 , (*A 632(P 233)*)    1 , (*A 633(P 234)*)    1
         , (*A 634(P 235)*)    1 , (*A 635(P 236)*)    1 , (*A 636(P 237)*)    1
         , (*A 637(P 238)*)    1 , (*A 638(P 239)*)    1 , (*A 639(P 240)*)    1
         , (*A 640(P 241)*)    1 , (*A 641(P 242)*)    1 , (*A 642(P 243)*)    3
         , (*A 643(P 244)*)    1 , (*A 644(P 245)*)    1 , (*A 645(P 246)*)    1
         , (*A 646(P 247)*)    1 , (*A 647(P 248)*)    1 , (*A 648(P 249)*)    1
         , (*A 649(P 250)*)    1 , (*A 650(P 251)*)    1 , (*A 651(P 252)*)    1
         , (*A 652(P 253)*)    1 , (*A 653(P 254)*)    1 , (*A 654(P 255)*)    1
         , (*A 655(P 256)*)    1 , (*A 656(P 257)*)    1 , (*A 657(P 258)*)    1
         , (*A 658(P 259)*)    1 , (*A 659(P 260)*)    0 , (*A 660(P 261)*)    5
         , (*A 661(P 262)*)    1 , (*A 662(P 263)*)    1 , (*A 663(P 264)*)    1
         , (*A 664(P 265)*)    1 , (*A 665(P 266)*)    1 , (*A 666(P 267)*)    1
         , (*A 667(P 268)*)    0 , (*A 668(P 269)*)    1 , (*A 669(P 270)*)    1
         , (*A 670(P 271)*)    2 , (*A 671(P 272)*)    0 , (*A 672(P 273)*)    2
         , (*A 673(P 274)*)    1 , (*A 674(P 275)*)    3 , (*A 675(P 276)*)    1
         , (*A 676(P 277)*)    3
         };
         
   yyLeftHandSide
     (* Subscripted by a reduce action, maps to LHS NT of the
        of production to reduce by.  A<a> is a reduce action number.
        P<p> is the correponding production number.
     *)
     := ARRAY yyReduceRangePacked OF yySymbolRangePacked
         {
           (*A 400(P   1)*)  267 , (*A 401(P   2)*)  110 , (*A 402(P   3)*)  110
         , (*A 403(P   4)*)  110 , (*A 404(P   5)*)  110 , (*A 405(P   6)*)  110
         , (*A 406(P   7)*)  110 , (*A 407(P   8)*)  116 , (*A 408(P   9)*)  117
         , (*A 409(P  10)*)  118 , (*A 410(P  11)*)  119 , (*A 411(P  12)*)  120
         , (*A 412(P  13)*)  121 , (*A 413(P  14)*)  125 , (*A 414(P  15)*)  114
         , (*A 415(P  16)*)  129 , (*A 416(P  17)*)  109 , (*A 417(P  18)*)  124
         , (*A 418(P  19)*)  124 , (*A 419(P  20)*)  131 , (*A 420(P  21)*)  131
         , (*A 421(P  22)*)  132 , (*A 422(P  23)*)  115 , (*A 423(P  24)*)  134
         , (*A 424(P  25)*)  111 , (*A 425(P  26)*)  136 , (*A 426(P  27)*)  112
         , (*A 427(P  28)*)  138 , (*A 428(P  29)*)  113 , (*A 429(P  30)*)  122
         , (*A 430(P  31)*)  122 , (*A 431(P  32)*)  140 , (*A 432(P  33)*)  140
         , (*A 433(P  34)*)  137 , (*A 434(P  35)*)  126 , (*A 435(P  36)*)  127
         , (*A 436(P  37)*)  127 , (*A 437(P  38)*)  142 , (*A 438(P  39)*)  143
         , (*A 439(P  40)*)  143 , (*A 440(P  41)*)  144 , (*A 441(P  42)*)  144
         , (*A 442(P  43)*)  145 , (*A 443(P  44)*)  142 , (*A 444(P  45)*)  146
         , (*A 445(P  46)*)  146 , (*A 446(P  47)*)  128 , (*A 447(P  48)*)  133
         , (*A 448(P  49)*)  133 , (*A 449(P  50)*)  147 , (*A 450(P  51)*)  147
         , (*A 451(P  52)*)  148 , (*A 452(P  53)*)  123 , (*A 453(P  54)*)  149
         , (*A 454(P  55)*)  150 , (*A 455(P  56)*)  151 , (*A 456(P  57)*)  151
         , (*A 457(P  58)*)  152 , (*A 458(P  59)*)  152 , (*A 459(P  60)*)  141
         , (*A 460(P  61)*)  141 , (*A 461(P  62)*)  153 , (*A 462(P  63)*)  153
         , (*A 463(P  64)*)  154 , (*A 464(P  65)*)  155 , (*A 465(P  66)*)  155
         , (*A 466(P  67)*)  156 , (*A 467(P  68)*)  156 , (*A 468(P  69)*)  157
         , (*A 469(P  70)*)  157 , (*A 470(P  71)*)  157 , (*A 471(P  72)*)  159
         , (*A 472(P  73)*)  159 , (*A 473(P  74)*)  160 , (*A 474(P  75)*)  162
         , (*A 475(P  76)*)  161 , (*A 476(P  77)*)  161 , (*A 477(P  78)*)  163
         , (*A 478(P  79)*)  163 , (*A 479(P  80)*)  165 , (*A 480(P  81)*)  164
         , (*A 481(P  82)*)  168 , (*A 482(P  83)*)  168 , (*A 483(P  84)*)  169
         , (*A 484(P  85)*)  171 , (*A 485(P  86)*)  170 , (*A 486(P  87)*)  170
         , (*A 487(P  88)*)  172 , (*A 488(P  89)*)  172 , (*A 489(P  90)*)  174
         , (*A 490(P  91)*)  173 , (*A 491(P  92)*)  175 , (*A 492(P  93)*)  175
         , (*A 493(P  94)*)  176 , (*A 494(P  95)*)  178 , (*A 495(P  96)*)  177
         , (*A 496(P  97)*)  177 , (*A 497(P  98)*)  179 , (*A 498(P  99)*)  179
         , (*A 499(P 100)*)  180 , (*A 500(P 101)*)  181 , (*A 501(P 102)*)  183
         , (*A 502(P 103)*)  182 , (*A 503(P 104)*)  182 , (*A 504(P 105)*)  184
         , (*A 505(P 106)*)  184 , (*A 506(P 107)*)  185 , (*A 507(P 108)*)  186
         , (*A 508(P 109)*)  166 , (*A 509(P 110)*)  166 , (*A 510(P 111)*)  187
         , (*A 511(P 112)*)  187 , (*A 512(P 113)*)  158 , (*A 513(P 114)*)  158
         , (*A 514(P 115)*)  158 , (*A 515(P 116)*)  158 , (*A 516(P 117)*)  158
         , (*A 517(P 118)*)  158 , (*A 518(P 119)*)  158 , (*A 519(P 120)*)  158
         , (*A 520(P 121)*)  158 , (*A 521(P 122)*)  158 , (*A 522(P 123)*)  158
         , (*A 523(P 124)*)  158 , (*A 524(P 125)*)  158 , (*A 525(P 126)*)  158
         , (*A 526(P 127)*)  158 , (*A 527(P 128)*)  158 , (*A 528(P 129)*)  158
         , (*A 529(P 130)*)  158 , (*A 530(P 131)*)  158 , (*A 531(P 132)*)  158
         , (*A 532(P 133)*)  205 , (*A 533(P 134)*)  158 , (*A 534(P 135)*)  206
         , (*A 535(P 136)*)  207 , (*A 536(P 137)*)  209 , (*A 537(P 138)*)  208
         , (*A 538(P 139)*)  208 , (*A 539(P 140)*)  210 , (*A 540(P 141)*)  210
         , (*A 541(P 142)*)  211 , (*A 542(P 143)*)  158 , (*A 543(P 144)*)  212
         , (*A 544(P 145)*)  212 , (*A 545(P 146)*)  213 , (*A 546(P 147)*)  213
         , (*A 547(P 148)*)  214 , (*A 548(P 149)*)  158 , (*A 549(P 150)*)  215
         , (*A 550(P 151)*)  215 , (*A 551(P 152)*)  215 , (*A 552(P 153)*)  216
         , (*A 553(P 154)*)  216 , (*A 554(P 155)*)  218 , (*A 555(P 156)*)  217
         , (*A 556(P 157)*)  220 , (*A 557(P 158)*)  220 , (*A 558(P 159)*)  220
         , (*A 559(P 160)*)  221 , (*A 560(P 161)*)  221 , (*A 561(P 162)*)  223
         , (*A 562(P 163)*)  222 , (*A 563(P 164)*)  224 , (*A 564(P 165)*)  224
         , (*A 565(P 166)*)  224 , (*A 566(P 167)*)  225 , (*A 567(P 168)*)  225
         , (*A 568(P 169)*)  225 , (*A 569(P 170)*)  227 , (*A 570(P 171)*)  226
         , (*A 571(P 172)*)  158 , (*A 572(P 173)*)  228 , (*A 573(P 174)*)  158
         , (*A 574(P 175)*)  219 , (*A 575(P 176)*)  229 , (*A 576(P 177)*)  232
         , (*A 577(P 178)*)  232 , (*A 578(P 179)*)  233 , (*A 579(P 180)*)  233
         , (*A 580(P 181)*)  235 , (*A 581(P 182)*)  235 , (*A 582(P 183)*)  235
         , (*A 583(P 184)*)  235 , (*A 584(P 185)*)  234 , (*A 585(P 186)*)  236
         , (*A 586(P 187)*)  230 , (*A 587(P 188)*)  230 , (*A 588(P 189)*)  231
         , (*A 589(P 190)*)  231 , (*A 590(P 191)*)  231 , (*A 591(P 192)*)  238
         , (*A 592(P 193)*)  240 , (*A 593(P 194)*)  239 , (*A 594(P 195)*)  241
         , (*A 595(P 196)*)  239 , (*A 596(P 197)*)  167 , (*A 597(P 198)*)  242
         , (*A 598(P 199)*)  242 , (*A 599(P 200)*)  243 , (*A 600(P 201)*)  243
         , (*A 601(P 202)*)  244 , (*A 602(P 203)*)  244 , (*A 603(P 204)*)  245
         , (*A 604(P 205)*)  245 , (*A 605(P 206)*)  246 , (*A 606(P 207)*)  246
         , (*A 607(P 208)*)  248 , (*A 608(P 209)*)  248 , (*A 609(P 210)*)  250
         , (*A 610(P 211)*)  250 , (*A 611(P 212)*)  252 , (*A 612(P 213)*)  252
         , (*A 613(P 214)*)  252 , (*A 614(P 215)*)  252 , (*A 615(P 216)*)  252
         , (*A 616(P 217)*)  252 , (*A 617(P 218)*)  252 , (*A 618(P 219)*)  252
         , (*A 619(P 220)*)  252 , (*A 620(P 221)*)  252 , (*A 621(P 222)*)  255
         , (*A 622(P 223)*)  257 , (*A 623(P 224)*)  257 , (*A 624(P 225)*)  256
         , (*A 625(P 226)*)  258 , (*A 626(P 227)*)  258 , (*A 627(P 228)*)  258
         , (*A 628(P 229)*)  259 , (*A 629(P 230)*)  259 , (*A 630(P 231)*)  254
         , (*A 631(P 232)*)  254 , (*A 632(P 233)*)  254 , (*A 633(P 234)*)  254
         , (*A 634(P 235)*)  254 , (*A 635(P 236)*)  254 , (*A 636(P 237)*)  254
         , (*A 637(P 238)*)  254 , (*A 638(P 239)*)  254 , (*A 639(P 240)*)  254
         , (*A 640(P 241)*)  254 , (*A 641(P 242)*)  254 , (*A 642(P 243)*)  254
         , (*A 643(P 244)*)  247 , (*A 644(P 245)*)  247 , (*A 645(P 246)*)  247
         , (*A 646(P 247)*)  247 , (*A 647(P 248)*)  247 , (*A 648(P 249)*)  247
         , (*A 649(P 250)*)  247 , (*A 650(P 251)*)  249 , (*A 651(P 252)*)  249
         , (*A 652(P 253)*)  249 , (*A 653(P 254)*)  251 , (*A 654(P 255)*)  251
         , (*A 655(P 256)*)  251 , (*A 656(P 257)*)  251 , (*A 657(P 258)*)  253
         , (*A 658(P 259)*)  253 , (*A 659(P 260)*)  260 , (*A 660(P 261)*)  139
         , (*A 661(P 262)*)  261 , (*A 662(P 263)*)  261 , (*A 663(P 264)*)  261
         , (*A 664(P 265)*)  261 , (*A 665(P 266)*)  261 , (*A 666(P 267)*)  261
         , (*A 667(P 268)*)  130 , (*A 668(P 269)*)  130 , (*A 669(P 270)*)  263
         , (*A 670(P 271)*)  263 , (*A 671(P 272)*)  135 , (*A 672(P 273)*)  135
         , (*A 673(P 274)*)  264 , (*A 674(P 275)*)  264 , (*A 675(P 276)*)  265
         , (*A 676(P 277)*)  266
         };
         
   yyContinuation
     := ARRAY [0 .. yyLastReadState] OF yySymbolRangePacked
         {
           (*:   0*)    0 , (*:   1*)   32 , (*:   2*)   32
         , (*:   3*)   95 , (*:   4*)   95 , (*:   5*)    0
         , (*:   6*)   32 , (*:   7*)   95 , (*:   8*)   66
         , (*:   9*)   66 , (*:  10*)  108 , (*:  11*)   94
         , (*:  12*)   94 , (*:  13*)   95 , (*:  14*)   66
         , (*:  15*)   14 , (*:  16*)   14 , (*:  17*)   95
         , (*:  18*)   30 , (*:  19*)   95 , (*:  20*)   66
         , (*:  21*)   95 , (*:  22*)   66 , (*:  23*)   95
         , (*:  24*)   95 , (*:  25*)   66 , (*:  26*)   95
         , (*:  27*)   95 , (*:  28*)   69 , (*:  29*)   70
         , (*:  30*)   70 , (*:  31*)   95 , (*:  32*)   19
         , (*:  33*)   95 , (*:  34*)   67 , (*:  35*)   19
         , (*:  36*)   95 , (*:  37*)   19 , (*:  38*)   95
         , (*:  39*)   67 , (*:  40*)    9 , (*:  41*)    9
         , (*:  42*)   66 , (*:  43*)   68 , (*:  44*)   19
         , (*:  45*)   40 , (*:  46*)   19 , (*:  47*)   19
         , (*:  48*)   52 , (*:  49*)   19 , (*:  50*)   48
         , (*:  51*)   19 , (*:  52*)   76 , (*:  53*)   76
         , (*:  54*)   76 , (*:  55*)   95 , (*:  56*)   19
         , (*:  57*)   19 , (*:  58*)   95 , (*:  59*)   19
         , (*:  60*)   19 , (*:  61*)   96 , (*:  62*)   96
         , (*:  63*)   96 , (*:  64*)    5 , (*:  65*)   96
         , (*:  66*)    5 , (*:  67*)   92 , (*:  68*)   70
         , (*:  69*)    5 , (*:  70*)   96 , (*:  71*)   19
         , (*:  72*)   96 , (*:  73*)   19 , (*:  74*)   96
         , (*:  75*)    5 , (*:  76*)   96 , (*:  77*)    5
         , (*:  78*)   96 , (*:  79*)    5 , (*:  80*)   96
         , (*:  81*)   96 , (*:  82*)    5 , (*:  83*)   95
         , (*:  84*)   67 , (*:  85*)    5 , (*:  86*)    5
         , (*:  87*)   19 , (*:  88*)   70 , (*:  89*)   96
         , (*:  90*)   81 , (*:  91*)   96 , (*:  92*)   70
         , (*:  93*)    5 , (*:  94*)   19 , (*:  95*)   19
         , (*:  96*)   19 , (*:  97*)   39 , (*:  98*)   39
         , (*:  99*)   39 , (*: 100*)   19 , (*: 101*)   19
         , (*: 102*)   19 , (*: 103*)   19 , (*: 104*)   19
         , (*: 105*)   19 , (*: 106*)   69 , (*: 107*)   70
         , (*: 108*)   70 , (*: 109*)   70 , (*: 110*)   70
         , (*: 111*)   95 , (*: 112*)   66 , (*: 113*)   66
         , (*: 114*)   66 , (*: 115*)   19 , (*: 116*)   19
         , (*: 117*)   69 , (*: 118*)   19 , (*: 119*)    6
         , (*: 120*)    6 , (*: 121*)   76 , (*: 122*)   19
         , (*: 123*)   19 , (*: 124*)   19 , (*: 125*)   19
         , (*: 126*)   68 , (*: 127*)   96 , (*: 128*)   19
         , (*: 129*)   68 , (*: 130*)   96 , (*: 131*)   66
         , (*: 132*)    9 , (*: 133*)    9 , (*: 134*)   66
         , (*: 135*)   68 , (*: 136*)   66 , (*: 137*)   66
         , (*: 138*)    9 , (*: 139*)   68 , (*: 140*)   66
         , (*: 141*)    9 , (*: 142*)   66 , (*: 143*)   66
         , (*: 144*)    9 , (*: 145*)    9 , (*: 146*)   66
         , (*: 147*)   66 , (*: 148*)   69 , (*: 149*)   66
         , (*: 150*)    9 , (*: 151*)   95 , (*: 152*)   66
         , (*: 153*)    9 , (*: 154*)    9 , (*: 155*)   19
         , (*: 156*)   19 , (*: 157*)   74 , (*: 158*)   96
         , (*: 159*)   19 , (*: 160*)   19 , (*: 161*)    9
         , (*: 162*)   66 , (*: 163*)   95 , (*: 164*)   66
         , (*: 165*)   95 , (*: 166*)   95 , (*: 167*)   69
         , (*: 168*)   19 , (*: 169*)   95 , (*: 170*)   67
         , (*: 171*)   66 , (*: 172*)    9 , (*: 173*)    9
         , (*: 174*)    9 , (*: 175*)    9 , (*: 176*)   19
         , (*: 177*)   19 , (*: 178*)   95 , (*: 179*)   67
         , (*: 180*)   69 , (*: 181*)   69 , (*: 182*)   70
         , (*: 183*)   70 , (*: 184*)   66 , (*: 185*)   14
         , (*: 186*)   14 , (*: 187*)   19 , (*: 188*)   19
         , (*: 189*)   95 , (*: 190*)   67 , (*: 191*)   69
         , (*: 192*)   69 , (*: 193*)   66 , (*: 194*)    9
         , (*: 195*)    9 , (*: 196*)    9 , (*: 197*)   95
         , (*: 198*)   67
         };
         
   yyFinalToProd
     (* Subscripted by a read-reduce action, maps to the reduce
        action to take after the read.
     *) 
     := ARRAY yyReadReduceRangePacked OF yyReduceRangePacked
         {
           (*RR: 199)*)  452 (*P52*) , (*RR: 200)*)  429 (*P29*)
         , (*RR: 201)*)  420 (*P20*) , (*RR: 202)*)  419 (*P19*)
         , (*RR: 203)*)  442 (*P42*) , (*RR: 204)*)  437 (*P37*)
         , (*RR: 205)*)  443 (*P43*) , (*RR: 206)*)  434 (*P34*)
         , (*RR: 207)*)  414 (*P14*) , (*RR: 208)*)  473 (*P73*)
         , (*RR: 209)*)  493 (*P93*) , (*RR: 210)*)  483 (*P83*)
         , (*RR: 211)*)  500 (*P100*) , (*RR: 212)*)  416 (*P16*)
         , (*RR: 213)*)  478 (*P78*) , (*RR: 214)*)  572 (*P172*)
         , (*RR: 215)*)  547 (*P147*) , (*RR: 216)*)  469 (*P69*)
         , (*RR: 217)*)  470 (*P70*) , (*RR: 218)*)  535 (*P135*)
         , (*RR: 219)*)  536 (*P136*) , (*RR: 220)*)  457 (*P57*)
         , (*RR: 221)*)  458 (*P58*) , (*RR: 222)*)  657 (*P257*)
         , (*RR: 223)*)  658 (*P258*) , (*RR: 224)*)  631 (*P231*)
         , (*RR: 225)*)  632 (*P232*) , (*RR: 226)*)  633 (*P233*)
         , (*RR: 227)*)  634 (*P234*) , (*RR: 228)*)  635 (*P235*)
         , (*RR: 229)*)  636 (*P236*) , (*RR: 230)*)  637 (*P237*)
         , (*RR: 231)*)  640 (*P240*) , (*RR: 232)*)  641 (*P241*)
         , (*RR: 233)*)  638 (*P238*) , (*RR: 234)*)  639 (*P239*)
         , (*RR: 235)*)  649 (*P249*) , (*RR: 236)*)  643 (*P243*)
         , (*RR: 237)*)  644 (*P244*) , (*RR: 238)*)  645 (*P245*)
         , (*RR: 239)*)  646 (*P246*) , (*RR: 240)*)  647 (*P247*)
         , (*RR: 241)*)  648 (*P248*) , (*RR: 242)*)  650 (*P250*)
         , (*RR: 243)*)  651 (*P251*) , (*RR: 244)*)  652 (*P252*)
         , (*RR: 245)*)  655 (*P255*) , (*RR: 246)*)  656 (*P256*)
         , (*RR: 247)*)  653 (*P253*) , (*RR: 248)*)  654 (*P254*)
         , (*RR: 249)*)  611 (*P211*) , (*RR: 250)*)  624 (*P224*)
         , (*RR: 251)*)  616 (*P216*) , (*RR: 252)*)  621 (*P221*)
         , (*RR: 253)*)  642 (*P242*) , (*RR: 254)*)  548 (*P148*)
         , (*RR: 255)*)  569 (*P169*) , (*RR: 256)*)  583 (*P183*)
         , (*RR: 257)*)  581 (*P181*) , (*RR: 258)*)  582 (*P182*)
         , (*RR: 259)*)  575 (*P175*) , (*RR: 260)*)  589 (*P189*)
         , (*RR: 261)*)  590 (*P190*) , (*RR: 262)*)  570 (*P170*)
         , (*RR: 263)*)  477 (*P77*) , (*RR: 264)*)  488 (*P88*)
         , (*RR: 265)*)  481 (*P81*) , (*RR: 266)*)  482 (*P82*)
         , (*RR: 267)*)  487 (*P87*) , (*RR: 268)*)  491 (*P91*)
         , (*RR: 269)*)  492 (*P92*) , (*RR: 270)*)  498 (*P98*)
         , (*RR: 271)*)  497 (*P97*) , (*RR: 272)*)  505 (*P105*)
         , (*RR: 273)*)  504 (*P104*) , (*RR: 274)*)  593 (*P193*)
         , (*RR: 275)*)  594 (*P194*) , (*RR: 276)*)  595 (*P195*)
         , (*RR: 277)*)  660 (*P260*) , (*RR: 278)*)  422 (*P22*)
         , (*RR: 279)*)  424 (*P24*) , (*RR: 280)*)  433 (*P33*)
         , (*RR: 281)*)  426 (*P26*) , (*RR: 282)*)  428 (*P28*)
         , (*RR: 283)*)  425 (*P25*) , (*RR: 284)*)  427 (*P27*)
         , (*RR: 285)*)  401 (*P1*) , (*RR: 286)*)  402 (*P2*)
         , (*RR: 287)*)  403 (*P3*) , (*RR: 288)*)  404 (*P4*)
         , (*RR: 289)*)  405 (*P5*) , (*RR: 290)*)  406 (*P6*)
         , (*RR: 291)*)  418 (*P18*) , (*RR: 292)*)  421 (*P21*)
         , (*RR: 293)*)  441 (*P41*) , (*RR: 294)*)  439 (*P39*)
         , (*RR: 295)*)  438 (*P38*) , (*RR: 296)*)  415 (*P15*)
         , (*RR: 297)*)  436 (*P36*) , (*RR: 298)*)  444 (*P44*)
         , (*RR: 299)*)  445 (*P45*) , (*RR: 300)*)  453 (*P53*)
         , (*RR: 301)*)  459 (*P59*) , (*RR: 302)*)  591 (*P191*)
         , (*RR: 303)*)  479 (*P79*) , (*RR: 304)*)  474 (*P74*)
         , (*RR: 305)*)  453 (*P53*) , (*RR: 306)*)  461 (*P61*)
         , (*RR: 307)*)  468 (*P68*) , (*RR: 308)*)  462 (*P62*)
         , (*RR: 309)*)  529 (*P129*) , (*RR: 310)*)  513 (*P113*)
         , (*RR: 311)*)  514 (*P114*) , (*RR: 312)*)  515 (*P115*)
         , (*RR: 313)*)  516 (*P116*) , (*RR: 314)*)  517 (*P117*)
         , (*RR: 315)*)  518 (*P118*) , (*RR: 316)*)  519 (*P119*)
         , (*RR: 317)*)  520 (*P120*) , (*RR: 318)*)  521 (*P121*)
         , (*RR: 319)*)  522 (*P122*) , (*RR: 320)*)  523 (*P123*)
         , (*RR: 321)*)  524 (*P124*) , (*RR: 322)*)  525 (*P125*)
         , (*RR: 323)*)  526 (*P126*) , (*RR: 324)*)  527 (*P127*)
         , (*RR: 325)*)  528 (*P128*) , (*RR: 326)*)  530 (*P130*)
         , (*RR: 327)*)  531 (*P131*) , (*RR: 328)*)  533 (*P133*)
         , (*RR: 329)*)  541 (*P141*) , (*RR: 330)*)  540 (*P140*)
         , (*RR: 331)*)  539 (*P139*) , (*RR: 332)*)  542 (*P142*)
         , (*RR: 333)*)  545 (*P145*) , (*RR: 334)*)  620 (*P220*)
         , (*RR: 335)*)  629 (*P229*) , (*RR: 336)*)  600 (*P200*)
         , (*RR: 337)*)  608 (*P208*) , (*RR: 338)*)  609 (*P209*)
         , (*RR: 339)*)  610 (*P210*) , (*RR: 340)*)  612 (*P212*)
         , (*RR: 341)*)  613 (*P213*) , (*RR: 342)*)  607 (*P207*)
         , (*RR: 343)*)  599 (*P199*) , (*RR: 344)*)  628 (*P228*)
         , (*RR: 345)*)  627 (*P227*) , (*RR: 346)*)  626 (*P226*)
         , (*RR: 347)*)  618 (*P218*) , (*RR: 348)*)  622 (*P222*)
         , (*RR: 349)*)  623 (*P223*) , (*RR: 350)*)  617 (*P217*)
         , (*RR: 351)*)  510 (*P110*) , (*RR: 352)*)  506 (*P106*)
         , (*RR: 353)*)  546 (*P146*) , (*RR: 354)*)  544 (*P144*)
         , (*RR: 355)*)  565 (*P165*) , (*RR: 356)*)  554 (*P154*)
         , (*RR: 357)*)  553 (*P153*) , (*RR: 358)*)  578 (*P178*)
         , (*RR: 359)*)  584 (*P184*) , (*RR: 360)*)  577 (*P177*)
         , (*RR: 361)*)  579 (*P179*) , (*RR: 362)*)  555 (*P155*)
         , (*RR: 363)*)  586 (*P186*) , (*RR: 364)*)  573 (*P173*)
         , (*RR: 365)*)  574 (*P174*) , (*RR: 366)*)  551 (*P151*)
         , (*RR: 367)*)  552 (*P152*) , (*RR: 368)*)  561 (*P161*)
         , (*RR: 369)*)  560 (*P160*) , (*RR: 370)*)  558 (*P158*)
         , (*RR: 371)*)  559 (*P159*) , (*RR: 372)*)  562 (*P162*)
         , (*RR: 373)*)  532 (*P132*) , (*RR: 374)*)  508 (*P108*)
         , (*RR: 375)*)  480 (*P80*) , (*RR: 376)*)  661 (*P261*)
         , (*RR: 377)*)  489 (*P89*) , (*RR: 378)*)  484 (*P84*)
         , (*RR: 379)*)  490 (*P90*) , (*RR: 380)*)  662 (*P262*)
         , (*RR: 381)*)  499 (*P99*) , (*RR: 382)*)  494 (*P94*)
         , (*RR: 383)*)  666 (*P266*) , (*RR: 384)*)  501 (*P101*)
         , (*RR: 385)*)  664 (*P264*) , (*RR: 386)*)  592 (*P192*)
         , (*RR: 387)*)  676 (*P276*) , (*RR: 388)*)  674 (*P274*)
         , (*RR: 389)*)  675 (*P275*) , (*RR: 390)*)  672 (*P272*)
         , (*RR: 391)*)  673 (*P273*) , (*RR: 392)*)  665 (*P265*)
         , (*RR: 393)*)  669 (*P269*) , (*RR: 394)*)  663 (*P263*)
         , (*RR: 395)*)  670 (*P270*) , (*RR: 396)*)  451 (*P51*)
         , (*RR: 397)*)  450 (*P50*) , (*RR: 398)*)  449 (*P49*)
         , (*RR: 399)*)  423 (*P23*)
         }; 

VAR
   yyModuleIsInitialized      : BOOLEAN;
   
(* Copied in from Parser.m30.orig: *) 
    PROCEDURE ExpandStateStack ( VAR Stack : yyStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END;
      END ExpandStateStack; 

    PROCEDURE ExpandAttributeStack
      ( VAR Stack : yyAttributeStackType ; ToSize : INTEGER ) =

      VAR LOldStack : yyAttributeStackType;
      VAR LStackNumber : INTEGER; 
      BEGIN
        LStackNumber := NUMBER ( Stack ^ );
        IF LStackNumber < ToSize
        THEN
          LOldStack := Stack; 
          Stack := NEW ( yyAttributeStackType , ToSize );
          SUBARRAY ( Stack ^ , 0 , LStackNumber ) := LOldStack ^;
          LOldStack := NIL; 
        END; 
      END ExpandAttributeStack; 
(* END From Parser.m30.orig: *) 

(*EXPORTED*)
PROCEDURE TokenName (Token: INTEGER; VAR Name: TEXT) =
   BEGIN
(*TODO: Implement a version of this that returns, e.g. BEGIN
        instead of StkRwBegin.  Use it in messages giving error token,
        expected token(s), and inserted token(s).
*)
      CASE Token OF
(* -------------------------------------------------------------------------- *)
                          (* Lalr-generated token names. *) 
      | 0 => Name := "_EndOfFile";
      | 5 => Name := "StkRwAND";
      | 6 => Name := "StkRwANY";
      | 7 => Name := "StkRwARRAY";
      | 8 => Name := "StkRwAS";
      | 9 => Name := "StkRwBEGIN";
      | 10 => Name := "StkRwBITS";
      | 11 => Name := "StkRwBRANDED";
      | 12 => Name := "StkRwBY";
      | 13 => Name := "StkRwCASE";
      | 14 => Name := "StkRwCONST";
      | 15 => Name := "StkRwDIV";
      | 16 => Name := "StkRwDO";
      | 17 => Name := "StkRwELSE";
      | 18 => Name := "StkRwELSIF";
      | 19 => Name := "StkRwEND";
      | 20 => Name := "StkRwEVAL";
      | 21 => Name := "StkRwEXCEPT";
      | 22 => Name := "StkRwEXCEPTION";
      | 23 => Name := "StkRwEXIT";
      | 24 => Name := "StkRwEXPORTS";
      | 25 => Name := "StkRwFINALLY";
      | 26 => Name := "StkRwFOR";
      | 27 => Name := "StkRwFROM";
      | 28 => Name := "StkRwGENERIC";
      | 29 => Name := "StkRwIF";
      | 30 => Name := "StkRwIMPORT";
      | 31 => Name := "StkRwIN";
      | 32 => Name := "StkRwINTERFACE";
      | 33 => Name := "StkRwLOCK";
      | 34 => Name := "StkRwLOOP";
      | 35 => Name := "StkRwMETHODS";
      | 36 => Name := "StkRwMOD";
      | 37 => Name := "StkRwMODULE";
      | 38 => Name := "StkRwNOT";
      | 39 => Name := "StkRwOBJECT";
      | 40 => Name := "StkRwOF";
      | 41 => Name := "StkRwOR";
      | 42 => Name := "StkRwOVERRIDES";
      | 43 => Name := "StkRwPROCEDURE";
      | 44 => Name := "StkRwRAISE";
      | 45 => Name := "StkRwRAISES";
      | 46 => Name := "StkRwREADONLY";
      | 47 => Name := "StkRwRECORD";
      | 48 => Name := "StkRwREF";
      | 49 => Name := "StkRwREPEAT";
      | 50 => Name := "StkRwRETURN";
      | 51 => Name := "StkRwREVEAL";
      | 52 => Name := "StkRwROOT";
      | 53 => Name := "StkRwSET";
      | 54 => Name := "StkRwTHEN";
      | 55 => Name := "StkRwTO";
      | 56 => Name := "StkRwTRY";
      | 57 => Name := "StkRwTYPE";
      | 58 => Name := "StkRwTYPECASE";
      | 59 => Name := "StkRwUNSAFE";
      | 60 => Name := "StkRwUNTIL";
      | 61 => Name := "StkRwUNTRACED";
      | 62 => Name := "StkRwVALUE";
      | 63 => Name := "StkRwVAR";
      | 64 => Name := "StkRwWHILE";
      | 65 => Name := "StkRwWITH";
      | 66 => Name := "StkSemicolon";
      | 67 => Name := "StkDot";
      | 68 => Name := "StkEqual";
      | 69 => Name := "StkOpenParen";
      | 70 => Name := "StkCloseParen";
      | 71 => Name := "StkComma";
      | 72 => Name := "StkColon";
      | 73 => Name := "StkSubtype";
      | 74 => Name := "StkBecomes";
      | 75 => Name := "StkOpenBrace";
      | 76 => Name := "StkCloseBrace";
      | 77 => Name := "StkStroke";
      | 78 => Name := "StkArrow";
      | 79 => Name := "StkEllipsis";
      | 80 => Name := "StkOpenBracket";
      | 81 => Name := "StkCloseBracket";
      | 82 => Name := "StkUnequal";
      | 83 => Name := "StkLess";
      | 84 => Name := "StkGreater";
      | 85 => Name := "StkLessEqual";
      | 86 => Name := "StkGreaterEqual";
      | 87 => Name := "StkPlus";
      | 88 => Name := "StkMinus";
      | 89 => Name := "StkAmpersand";
      | 90 => Name := "StkStar";
      | 91 => Name := "StkSlash";
      | 92 => Name := "StkDeref";
      | 93 => Name := "StkOpenPragma";
      | 94 => Name := "StkClosePragma";
      | 95 => Name := "StkIdent";
      | 96 => Name := "StkIntLit";
      | 97 => Name := "StkLongIntLit";
      | 98 => Name := "StkBasedLit";
      | 99 => Name := "StkLongBasedLit";
      | 100 => Name := "StkRealLit";
      | 101 => Name := "StkLongRealLit";
      | 102 => Name := "StkExtendedLit";
      | 103 => Name := "StkTextLit";
      | 104 => Name := "StkWideTextLit";
      | 105 => Name := "StkCharLit";
      | 106 => Name := "StkWideCharLit";
      | 107 => Name := "StkLexErrChars";
      | 108 => Name := "StkPragmaId";
                      (* End of lalr-generated token names. *) 
(* -------------------------------------------------------------------------- *)
      ELSE Name := "" 
      END;
   END TokenName;

(* NOTE regarding the parser's default setting of the PaPass1Coord field:
   A shift, including an error repair insertion, copies the current unnest
   stack pointer into .PaPass1Coord.  For a reduce, and if the semantic
   action doesn't set PaPass1Coord, then the parser sets it to a default.
   If the RHS is empty, this is the current unnest stack pointer, as it
   is before the reduce semantic actions are performed.  If the reduce
   is nonempty, this is a copy from the leftmost RHS's attribute.
   How confusing, but it preserves a bit of lalr's original parsing speed.
*) 

(*EXPORTED*)
  PROCEDURE FM3Parser (): CARDINAL =

(* -------------------------------------------------------------------------- *)
            (* Declarations from the LOCAL section of the .lalr file: *)
            
(* line 77 "FM3Parser.lalr" *)
 TYPE Skt = FM3Scopes . ScopeKindTyp ;
    TYPE Dkt = FM3Decls . DeclKindTyp ; 
    TYPE Ukt = FM3Units . UnitKindTyp ;

    PROCEDURE Test ( READONLY Attr : tParsAttribute )
    = VAR Debug : INTEGER := 0
    ; BEGIN
        IF Attr . PaInt = FIRST ( INTEGER)
        THEN
          Debug := 19
        END 
      END Test ;

  

        (* End of declarations from the LOCAL section of the .lalr file: *)
(* -------------------------------------------------------------------------- *)
   
   VAR
      yyRHSCoord        : LONGINT; 
      yyPrereduceCoord  : LONGINT; 
      yyState                 : yyStateRange;
      (* NOTE: "yyState" and other occurrences of "State" are misleading.
               They are, in general, parsing *actions*, only the low range
               up to yyLastReadState (a constant inserted by the generator)
               being truly states.  These correspond to item sets, and as
               actions, they mean read (it will be a terminal) and enter
               new state yyState.  Higher ranges are read-terminal-reduce,
               read-nonterminal-reduce, and just reduce actions.
               Deconfusing this terminology would require extensive and
               error-prone work.
      *) 
      yyTerminal        : yySymbolRange;
      yyNonterminal     : yySymbolRange;
        (* ^LHS NT to be pushed as result of a reduction.*)
     yyNTPos           : FM3Scanner.tPosition (* Position for yyNonterminal. *) ;  

      yyStackPtr        : yyStackPtrType;
      yyPrereduceStackPtr : yyStackPtrType;
      yyStackLAST       : INTEGER;
      yyStateStackSize  : INTEGER;
      yyAttrStackSize   := yyStateStackSize; 
      (* yyStackPtr, yyStackLAST, and yyStateStackSize always apply equally
         to yyStateStack and yyAttributeStack. *)
      yyStateStack      : yyStackType;
      yyAttributeStack  : yyAttributeStackType;
      yySynAttribute    : tParsAttribute;
        (* ^Synthesized attribute, by .lalr-provided semantic actions. *)
     yyRepairAttribute : FM3Scanner.tScanAttribute;
      yyRepairToken     : yySymbolRange;
      yyTCombPtr        : yyTCombTypePtr;
      yyNCombPtr        : yyNCombTypePtr;
      yyErrorCount      : CARDINAL;
      yyText            : TEXT; 
     yyErrorPos        : FM3Scanner.tPosition;
      yyErrMsgWrT       : TextWr . T;
      yyMsgLineLen      : INTEGER;
      yyTokenStringxxx  : TEXT (*ARRAY [0..127] OF CHAR*);
      (* ^For use in a debugger. *) 
      yyRepairsInserted : INTEGER;
      (* ^<0 => not repairing. Otherwise, number of tokens inserted so far. *)

   BEGIN (* FM3Parser *) 
     BeginFM3Parser ();
      yyState           := yyStartState;
     yyTerminal        := FM3Scanner.GetToken ();
      yyStateStackSize  := yyInitStackSize;
      yyAttrStackSize   := yyInitStackSize;
      yyStateStack      := NEW ( yyStackType , yyStateStackSize );
      yyAttributeStack  := NEW ( yyAttributeStackType , yyStateStackSize ); 
      yyStackLAST       := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
      yyStackPtr        := 0;
      yyErrorCount      := 0;
      yyRepairsInserted := - 1;

      LOOP (* Through parsing actions. One iteration does:
              1) Any token deletions called for by an error.
              2) Any continuation token insertions called for 
                 after an error.
              3) Either: 
                 a) Possibly one read-reduce followed by 
                    a sequence of reduces
              or b) One read
           *)  
         (* Make room and push true state onto state stack. *) 
         IF yyStackPtr >= yyStackLAST 
         THEN
            yyStateStackSize
              := MAX ( NUMBER ( yyStateStack ^ ) * 2 , yyStackPtr + 2 ); 
            ExpandStateStack ( yyStateStack , yyStateStackSize ); 
            ExpandAttributeStack ( yyAttributeStack , yyStateStackSize );
            yyStackLAST
              := LAST ( yyStateStack ^ ) (* Of yyAttributeStack too. *);
         END (* IF *) ;
         yyStateStack^ [yyStackPtr] := (*State*)yyState;

         LOOP (* Through all continuation shifts, plus compute the state
                 after that.  This loop also goes through the default state
                 computations. *) 
            (* SPEC State := Next (State, Terminal); terminal transition *)
            
            yyTCombPtr := LOOPHOLE 
                            ( LOOPHOLE ( yyTBasePtr [yyState (*State*)] ,INTEGER) 
                              + yyTerminal * BYTESIZE (yyTCombType)
                            , yyTCombTypePtr
                            );
            IF yyTCombPtr^.Check = (*State*)yyState 
            THEN
               yyState := yyTCombPtr^.Next;
               EXIT;
            END (* IF *) ;
            (*State*)yyState := yyDefault [(*State*)yyState];

            IF yyState = yyNoState 
            THEN (* syntax error *)
               (*State*)yyState := yyStateStack^ [yyStackPtr];
               IF yyRepairsInserted >= 0 
               THEN (* Repairing. *)
                  (*ASSERT yyErrMsgWrT # NIL *)
                  yyRepairToken := yyContinuation [yyState];
                  yyState (*Any action*) := Next (yyState, yyRepairToken);
                  IF yyState <= yyLastReadTermState 
                  THEN (* read or read terminal reduce ? *)
                    FM3Scanner.ErrorAttribute 
                         (yyRepairToken, (*OUT*)yyRepairAttribute);
                     IF yyRepairsInserted = 0 THEN 
                       Wr.PutText (yyErrMsgWrT, FM3Messages.NLIndent);
                       yyMsgLineLen := FM3Messages.IndentLen;
                       yyText := "Repair token(s) inserted: ";
                       Wr.PutText (yyErrMsgWrT, yyText);
                       INC (yyMsgLineLen, Text.Length (yyText))
                     END (*IF*);
                     TokenName (yyRepairToken, (*OUT*) yyText);
                     QuoteAndFillOnLine ( yyText , yyErrMsgWrT , yyMsgLineLen );
                     INC (yyRepairsInserted );
                     IF yyState >= yyFirstFinalState 
                     THEN (* avoid second push *)
                        yyState (*Reduce*) := yyFinalToProd [(*Action*)yyState];
                     END (* IF *) ;
                     INC (yyStackPtr);
                     yyStateStack^ [yyStackPtr] := yyState;
                     WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                     DO 
                       WParsAttr.Scan := yyRepairAttribute;
                       WParsAttr.PaPass1Coord := Coord ( );
(*                     PutBwd_Attribute (WParsAttr); *)
                     END (*WITH*)
                  END (* IF *) ;
                  IF yyState >= yyFirstFinalState 
                  THEN (* final state ? *)
                    EXIT;
                  END (* IF *) ;
               ELSE (* Report and start recovery. *)
                  INC (yyErrorCount);
                 yyErrorPos := FM3Scanner.Attribute.Position;
                  yyErrMsgWrT := TextWr . New ( );
                  ErrorRecovery 
                    (yyTerminal, yyStateStack,
                     NUMBER ( yyStateStack ^ ), yyStackPtr,
                     yyErrMsgWrT , yyMsgLineLen );
                  yyRepairsInserted := 0;
               END (* IF *) ;
            END (* IF *) ;
         END (* LOOP *) ;

         IF yyState >= yyFirstFinalState 
         THEN (* Action, ending with a reduce. *)
            IF yyState <= yyLastReadTermState (* read terminal reduce ? *) 
            THEN (* First do the read terminal. *)
              INC (yyStackPtr);
              (* Is there such a thing as a read-reduce action where the
                 reduce is by an empty production?  And so are all the
                 subsequent reduces?  If so, it is important to store into
                 the two stacks, which will not be overlaid by reduces.
              *)
              yyStateStack^ [yyStackPtr]
                := yyState (*Read terminal reduce action*) (*ParserDebug*);
              (* ^Not a true state.  Should be overlaid very soon.  But if
                  not, due to empty reduces, this will be the wrong value
                  in the state stack. *)
              WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
              DO
                WParsAttr := ParsAttrNull; 
                WParsAttr.Scan := FM3Scanner.Attribute;
                WParsAttr.PaPass1Coord := Coord ( );
(*              PutBwd_Attribute (WParsAttr); *) 
              END (*WITH*);
             yyTerminal := FM3Scanner.GetToken ();
              IF yyRepairsInserted >= 0
              (* ^0 => repairs been happening, tho' with no insertions. *) 
              THEN (* Finished with a repair. *)
                FM3Messages.ErrorArr
                  ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
                yyErrMsgWrT := NIL; 
                yyRepairsInserted := - 1;
              END (*IF*);

               yyStateStack^ [yyStackPtr] := (*Reduce*)yyState (*ParserDebug*);
            END (* IF *) ;

            LOOP (* Through successive reductions *)
               yyPrereduceStackPtr := yyStackPtr;
               yySynAttribute := ParsAttrNull;
               yyPrereduceCoord := Coord ( );

(* -------------------------------------------------------------------------- *)
             (* Inserted semantic action code from the .lalr file: *)
             
              CASE yyState OF
              | 400 => (* P1 _0000_ (267): Compilation _EndOfFile .*)
                yyStateStack := NIL;
                yyAttributeStack := NIL;
                RETURN yyErrorCount;

              | 401,285 => (* P2 Compilation (110): Interface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 402,286 => (* P3 Compilation (110): Module .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 403,287 => (* P4 Compilation (110): GenInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 404,288 => (* P5 Compilation (110): GenModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 405,289 => (* P6 Compilation (110): InstInterface .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 406,290 => (* P7 Compilation (110): InstModule .*)
                DEC (yyStackPtr, 1); yyNonterminal := 110;

              | 407 => (* P8 InterfaceKind (116): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 116;
                (* line 291 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
              | 408 => (* P9 ModuleKind (117): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 117;
                (* line 294 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
              | 409 => (* P10 GenInterfaceKind (118): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 118;
                (* line 297 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenInterface ; 
              | 410 => (* P11 GenModuleKind (119): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 119;
                (* line 300 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
              | 411 => (* P12 InstInterfaceKind (120): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 120;
                (* line 303 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ; 
              | 412 => (* P13 InstModuleKind (121): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 121;
                (* line 306 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ; 
              | 413 => (* P14 InterfaceLt (125): OptUnsafe StkRwINTERFACE NonreservedIdent IntfPragmas .*)
                DEC (yyStackPtr, 4); yyNonterminal := 125;
                (* line 309 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkInterface , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 414,207 => (* P15 InstInterface (114): InterfaceLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 114;
                (* line 328 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstInterface ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstInterface ) ; 
                     
              | 415,296 => (* P16 InterfaceMiddle (129): InterfaceLt StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 4); yyNonterminal := 129;
                (* line 335 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInterface ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 416,212 => (* P17 Interface (109): InterfaceMiddle OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 5); yyNonterminal := 109;
                (* line 346 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+4] . Scan , Ukt . UkInterface ) ; 
                         FM3Pass1 . CheckStdUnitPragma ( FM3Units . UnitStackTopRef ) ; 
                         FM3Pass1 . PutBwd_LCIP_rip 
                           ( Itk . ItkInterfaceLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END ; 
                     
              | 417 => (* P18 IntfPragmas (124): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 124;

              | 418,291 => (* P19 IntfPragmas (124): IntfPragmas IntfPragma .*)
                DEC (yyStackPtr, 2); yyNonterminal := 124;

              | 419,202 => (* P20 IntfPragma (131): StkOpenPragma StkPragmaId StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 374 of "FM3Parser.lalr" *)
                 FM3Pass1 . RecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 420,201 => (* P21 IntfPragma (131): StkOpenPragma StkIdent StkClosePragma .*)
                DEC (yyStackPtr, 3); yyNonterminal := 131;
                (* line 377 of "FM3Parser.lalr" *)
                 FM3Pass1 . UnrecognizedPragma ( yyAttributeStack^[yyStackPtr+2] ) ; 
              | 421,292 => (* P22 ModuleLt (132): OptUnsafe StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 132;
                (* line 380 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ;  
                       BEGIN
                         yySynAttribute . PaPos := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         (* ^Module name position, in case no explicit EXPORTS. *) 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                           (* ^Already pushed when source file was opened. *) 
                         LUnitRef ^ . UntUnsafe := yyAttributeStack^[yyStackPtr+1] . PaBool ; 
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef 
                                ( LUnitRef , Skt . SkModule , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ; 
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END ; 
                     
              | 422,278 => (* P23 InstModule (115): ModuleLt StkEqual NonreservedIdent GenActualList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 115;
                (* line 401 of "FM3Parser.lalr" *)
                 FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkInstModule ;
                (*INCOMPLETE.*)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] . Scan , Ukt . UkInstModule ) ; 
                     
              | 423,399 => (* P24 ModuleMiddle (134): ModuleLt Exports StkSemicolon ImportList ExpImpDone .*)
                DEC (yyStackPtr, 5); yyNonterminal := 134;
                (* line 408 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkModule ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END ; 
                     
              | 424,279 => (* P25 Module (111): ModuleMiddle OpenDeclList StkRwBEGIN StmtList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 7); yyNonterminal := 111;
                (* line 420 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         <* ASSERT LScopeRef = FM3Scopes . DeclScopeStackTopRef *> 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . CheckUnitFinalId
                           ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+6] .Scan , Ukt . UkModule ) ; 
                         FM3Pass1 . PutBwd_LCIP_eCiP_riP 
                           ( Itk . ItkModuleLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , FM3Units . UnitStackTopRef ^ . UntSelfUnitNo 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ; 
                       END ; 
                     
              | 425,283 => (* P26 GenInterfaceLt (136): StkRwGENERIC StkRwINTERFACE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 136;
                (* line 446 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkInterface ) ; 
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . InterfaceId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef 
                                , Skt . SkInterface
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef ;
                       END ; 
                     
              | 426,281 => (* P27 GenInterface (112): GenInterfaceLt GenInterfaceKind GenFormalList StkSemicolon ImportList ExpImpDone OpenDeclList StkRwEND NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 10); yyNonterminal := 112;
                (* line 466 of "FM3Parser.lalr" *)
                 (* Scope ref:
                        FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *)
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenInterface ) ; 
                     
              | 427,284 => (* P28 GenModuleLt (138): StkRwGENERIC StkRwMODULE NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 138;
                (* line 474 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ; 
                       VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaBool := yyAttributeStack^[yyStackPtr+1] . PaBool ;
                         yySynAttribute . PaByte := ORD ( Ukt . UkGenModule ) ;
                         LUnitRef := FM3Units . UnitStackTopRef ;
                         FM3Pass1 . ModuleId ( LUnitRef , yyAttributeStack^[yyStackPtr+3] . Scan ) ;
                         LScopeRef  
                           := FM3Scopes . NewScopeRef
                                ( LUnitRef
                                , Skt . SkModule
                                , FM3Scanner . Attribute . Position
                                ) ;
                         LUnitRef ^ . UntScopeRef := LScopeRef  ; 
                       END ; 
                     
              | 428,282 => (* P29 GenModule (113): GenModuleLt GenModuleKind GenFormalList StkSemicolon ImportList ExpImpDone Block NonreservedIdent StkDot .*)
                DEC (yyStackPtr, 9); yyNonterminal := 113;
                (* line 494 of "FM3Parser.lalr" *)
                 (* scope ref
                          FM3Pass1 . PutBwd_LI ( Itk . ItkDeclScopeLt , yyAttributeStack^[yyStackPtr+1] . PaConstructNo ) ;
                       *) 
                       FM3Units . UnitStackTopRef ^ . UntKind := Ukt . UkGenModule ; 
                       FM3Pass1 . CheckUnitFinalId
                         ( FM3Units . UnitStackTopRef , yyAttributeStack^[yyStackPtr+8] . Scan , Ukt . UkGenModule ) ;
                     
              | 429,200 => (* P30 OptUnsafe (122): StkRwUNSAFE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 122;
                (* line 503 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := TRUE ; 
              | 430 => (* P31 OptUnsafe (122): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 122;
                (* line 504 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Unsafe.*) := FALSE (* Safe. *) ; 
              | 431 => (* P32 OptSemicolon (140): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 140;

              | 432 => (* P33 OptSemicolon (140): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 140;

              | 433,280 => (* P34 GenFormalList (137): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 137;
                (* line 513 of "FM3Parser.lalr" *)
                 MakeListPos 
                         ( yySynAttribute , Itk. ItkGenFormalIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                     
              | 434,206 => (* P35 GenActualList (126): StkOpenParen IdStarList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 126;
                (* line 519 of "FM3Parser.lalr" *)
                 (* Handle this in pass 1.
                          MakeListPos
                            ( yySynAttribute , Itk. ItkGenActualIdListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                       *) 
                     
              | 435 => (* P36 ImportList (127): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 127;

              | 436,297 => (* P37 ImportList (127): ImportList Import .*)
                DEC (yyStackPtr, 2); yyNonterminal := 127;

              | 437,204 => (* P38 Import (142): StkRwIMPORT ImportItemPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 438,295 => (* P39 ImportItemPlusList (143): ImportItem .*)
                DEC (yyStackPtr, 1); yyNonterminal := 143;

              | 439,294 => (* P40 ImportItemPlusList (143): ImportItemPlusList StkComma ImportItem .*)
                DEC (yyStackPtr, 3); yyNonterminal := 143;

              | 440 => (* P41 ImportItem (144): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 144;
                (* line 538 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+1] . Scan ) 
              | 441,293 => (* P42 ImportItem (144): NonreservedIdent StkRwAS NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 144;
                (* line 541 of "FM3Parser.lalr" *)
                 FM3ExpImp . ImportAS ( yyAttributeStack^[yyStackPtr+1] . Scan , yyAttributeStack^[yyStackPtr+3] . Scan ) 
              | 442,203 => (* P43 FromImportLt (145): StkRwFROM NonreservedIdent StkRwIMPORT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 145;
                (* line 545 of "FM3Parser.lalr" *)
                 yySynAttribute . PaRefany 
                         := FM3ExpImp . GetInterface
                              ( yyAttributeStack^[yyStackPtr+2] . Scan . SaChars
                              , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                              , IsExport := FALSE
                              ) ; 
                     
              | 443,205 => (* P44 Import (142): FromImportLt FromImportIdPlusList StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 142;

              | 444,298 => (* P45 FromImportIdPlusList (146): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 146;
                (* line 556 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+1] . Scan ) ; 
                     
              | 445,299 => (* P46 FromImportIdPlusList (146): FromImportIdPlusList StkComma NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 146;
                (* line 561 of "FM3Parser.lalr" *)
                 EVAL FM3ExpImp . ImportDeclByIdent
                              ( yyAttributeStack^[yyStackPtr] . PaRefany (* Implied NARROW *) , yyAttributeStack^[yyStackPtr+3] . Scan ) ; 
                     
              | 446 => (* P47 ExpImpDone (128): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 128;
                (* line 566 of "FM3Parser.lalr" *)
                 FM3ExpImp . Done ( ) ; 
              | 447 => (* P48 Exports (133): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 133;
                (* line 573 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                         LUnitRef
                           := FM3ExpImp . GetInterface 
                                ( FM3Units . UnitStackTopRef ^ . UntUnitIdent
                                , yyAttributeStack^[yyStackPtr] . PaPos
                                , IsExport := TRUE
                                ) ;
                         FM3ExpImp . ImportAllDecls
                           ( LUnitRef , FM3Scanner . Attribute . Position ) ;
                       END (* Block. *) ;  
                     
              | 448 => (* P49 Exports (133): StkRwEXPORTS ExportIdPlusList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 133;

              | 449,398 => (* P50 ExportIdPlusList (147): ExportIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 147;

              | 450,397 => (* P51 ExportIdPlusList (147): ExportIdPlusList StkComma ExportIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 147;

              | 451,396 => (* P52 ExportIdent (148): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 148;
                (* line 593 of "FM3Parser.lalr" *)
                 VAR LUnitRef : FM3Units . UnitRefTyp ;
                       BEGIN
                          LUnitRef
                            := FM3ExpImp . GetInterface
                                 ( yyAttributeStack^[yyStackPtr+1] . Scan . SaChars
                                 , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                 , IsExport := TRUE
                                 ) ;
                         FM3ExpImp . ImportAllDecls ( LUnitRef , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END (* Block. *) ;  
                     
              | 452,199 => (* P53 NonreservedIdent (123): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 123;
                (* line 608 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 453,300,305 => (* P54 IdentRef (149): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 149;
                (* line 617 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 454 => (* P55 QualIdentRef (150): NonreservedIdent StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 150;
                (* line 624 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;  
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 455 => (* P56 IdPlusList (151): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 151;
                (* line 632 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := 1 ;
                     
              | 456 => (* P57 IdPlusList (151): IdPlusList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 151;
                (* line 636 of "FM3Parser.lalr" *)
                 (* PaPass1Coord copied from yyAttributeStack^[yyStackPtr+1] by parser. *) 
                       yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                     
              | 457,220 => (* P58 DeclIdListElems (152): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 152;
                (* line 648 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+1] )
                       THEN (* Use this ident. *) 
                         yySynAttribute . PaInt := 1 ;
                         yySynAttribute . PaRefany := IntSets . Singleton ( yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) 
                       ELSE
                         yySynAttribute . PaInt := 0 ;
                         yySynAttribute . PaRefany := IntSets . Empty ( ) 
                       END (*IF*) ; 
                     
              | 458,221 => (* P59 DeclIdListElems (152): DeclIdListElems StkComma StkIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 152;
                (* line 660 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . DeclIdL2R
                            ( FM3Decls . TopDeclParseInfo ( ) . DiKind , IdAttribute := yyAttributeStack^[yyStackPtr+3] )
                       (* ^No Itk separators here.  It would be kinda silly. *) 
                       THEN (* Use this ident. *)
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                         yySynAttribute . PaRefany
                           := IntSets . Include
                                ( NARROW ( yyAttributeStack^[yyStackPtr+3] . PaRefany , IntSets . T ) , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom ) ;
                       ELSE
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+3] . PaInt (* Valid Id count, no increase. *) ;
                         yySynAttribute . PaRefany := yyAttributeStack^[yyStackPtr+3] . PaRefany ; 
                       END (*IF*) ;
                     
              | 459,301 => (* P60 IdStarList (141): IdStarList StkComma IdentRef .*)
                DEC (yyStackPtr, 3); yyNonterminal := 141;
                (* line 676 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 460 => (* P61 IdStarList (141): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 141;
                (* line 678 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 461,306 => (* P62 MaybeQualIdent (153): IdentRef .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 683 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                
                     
              | 462,308 => (* P63 MaybeQualIdent (153): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 153;
                (* line 689 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                     
              | 463 => (* P64 QualIdent (154): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 154;
                (* line 695 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . SaChars := yyAttributeStack^[yyStackPtr+1] . Scan . SaChars ;
                       yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ;
                       yySynAttribute . Scan . SaBuiltinTok := yyAttributeStack^[yyStackPtr+1] . Scan . SaBuiltinTok ;
                       FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ;
                     
              | 464 => (* P65 MaybeQualIdentStarList (155): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 155;
                (* line 703 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 465 => (* P66 MaybeQualIdentStarList (155): MaybeQualIdentPlusList .*)
                DEC (yyStackPtr, 1); yyNonterminal := 155;
                (* line 705 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 466 => (* P67 MaybeQualIdentPlusList (156): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 156;
                (* line 707 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 
              | 467 => (* P68 MaybeQualIdentPlusList (156): MaybeQualIdentPlusList StkComma MaybeQualIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 156;
                (* line 709 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ; 
              | 468,307 => (* P69 TypeId (157): MaybeQualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;

              | 469,216 => (* P70 TypeId (157): StkRwROOT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 157;
                (* line 719 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef , Stk . RidROOT , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 470,217 => (* P71 TypeId (157): StkRwUNTRACED StkRwROOT .*)
                DEC (yyStackPtr, 2); yyNonterminal := 157;
                (* line 724 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP
                         ( Itk . ItkReservedIdRef
                         , Stk . RidUNTRACEDROOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 471 => (* P72 OptConstType (159): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 159;
                (* line 734 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ; 
              | 472 => (* P73 OptConstType (159): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 159;
                (* line 736 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ; 
              | 473,208 => (* P74 ConstDeclGroupLt (160): StkRwCONST .*)
                DEC (yyStackPtr, 1); yyNonterminal := 160;
                (* line 745 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 474,304 => (* P75 ConstDeclGroup (162): ConstDeclGroupLt ConstDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 162;
                (* line 748 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 475 => (* P76 ConstDeclList (161): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 161;
                (* line 753 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 476 => (* P77 ConstDeclList (161): ConstDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 161;
                (* line 759 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 477,263 => (* P78 ConstDeclPlus (163): ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 163;
                (* line 764 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 478,213 => (* P79 ConstDeclPlus (163): ConstDeclPlus ConstDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 163;
                (* line 769 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 479,303 => (* P80 ConstDeclId (165): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 165;
                (* line 787 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, will be 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkConst , yyAttributeStack^[yyStackPtr+1] ) ) ;
                     
              | 480,375 => (* P81 ConstDecl (164): ConstDeclId OptDeclType StkEqual Expr .*)
                DEC (yyStackPtr, 4); yyNonterminal := 164;
                (* line 792 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_zCP_rP
                           ( Itk . ItkConstDeclLt 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                
                           , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 481,265 => (* P82 TypeRelation (168): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 817 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkTypeDeclLt ; 
              | 482,266 => (* P83 TypeRelation (168): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 168;
                (* line 819 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkSubtypeDeclLt ; 
              | 483,210 => (* P84 TypeDeclGroupLt (169): StkRwTYPE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 169;
                (* line 830 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position; 
              | 484,378 => (* P85 TypeDeclGroup (171): TypeDeclGroupLt TypeDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 171;
                (* line 833 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 485 => (* P86 TypeDeclList (170): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 170;
                (* line 838 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 486 => (* P87 TypeDeclList (170): TypeDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 170;
                (* line 844 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 487,267 => (* P88 TypeDeclPlus (172): TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 172;
                (* line 849 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 488,264 => (* P89 TypeDeclPlus (172): TypeDeclPlus TypeDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 172;
                (* line 854 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN  
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos (* Rt semicolon of yyAttributeStack^[yyStackPtr+1] *) 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon.*) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ;  
                     
              | 489,377 => (* P90 TypeDeclId (174): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 174;
                (* line 870 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkType , yyAttributeStack^[yyStackPtr+1] ) ) ; 
                     
              | 490,379 => (* P91 TypeDecl (173): TypeDeclId TypeRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 173;
                (* line 875 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Contribution to BlockDecl count. *) ;
                       IF yySynAttribute . PaInt > 0 
                       THEN 
                         FM3Pass1 . PutBwd_LCP_eCP_rP
                           ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                           
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                           ) ;
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ;
                       END (*IF*) ;
                     
              | 491,268 => (* P92 RevelationRelation (175): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 897 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkFullRevealLt ; 
              | 492,269 => (* P93 RevelationRelation (175): StkSubtype .*)
                DEC (yyStackPtr, 1); yyNonterminal := 175;
                (* line 899 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Itk . ItkPartialRevealLt ; 
              | 493,209 => (* P94 RevelationGroupLt (176): StkRwREVEAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 176;
                (* line 910 of "FM3Parser.lalr" *)
                  yySynAttribute. Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position  
              | 494,382 => (* P95 RevelationGroup (178): RevelationGroupLt RevelationList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 178;
                (* line 913 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                      
              | 495 => (* P96 RevelationList (177): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 177;
                (* line 918 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ;
                       yySynAttribute . PaPos (* No trailing semicolon exists. *)
                         := FM3Scanner . Attribute . Position ; 
                     
              | 496 => (* P97 RevelationList (177): RevelationPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 177;
                (* line 924 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 497,271 => (* P98 RevelationPlus (179): Revelation StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 179;
                (* line 929 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ; 
                     
              | 498,270 => (* P99 RevelationPlus (179): RevelationPlus Revelation StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 179;
                (* line 934 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 499,381 => (* P100 Revelation (180): TypeId RevelationRelation Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 180;
                (* line 950 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 1 (* BlockDecl count. *) ;
                (* CHECK^ Do we really want to count this as a block decl?  It occupies a 
                          space in the Blockdecl list, but does not introduce a new identifier,
                          but adds decl info about the identifier.
                *) 
                       FM3Pass1 . PutBwd_LCP_eCP_rP
                         ( yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 500,211 => (* P101 VarDeclGroupLt (181): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 181;
                (* line 977 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVarDeclLt
                                  , DiIdListTok := Itk . ItkVarDeclIdListLt
                                  , DiIdSepTok := Itk . ItkVarDeclIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVar
                                  }
                              ) ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                     
              | 501,384 => (* P102 VarDeclGroup (183): VarDeclGroupLt VarDeclList .*)
                DEC (yyStackPtr, 2); yyNonterminal := 183;
                (* line 990 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+2] . PaInt ;
                        yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ;  
                        <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                      
              | 502 => (* P103 VarDeclList (182): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 182;
                (* line 996 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 (* Decl count. *) ;
                        yySynAttribute . PaPos (* No trailing semicolon exists. *)
                          := FM3Scanner.Attribute . Position ; 
                      
              | 503 => (* P104 VarDeclList (182): VarDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 182;
                (* line 1002 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                
                       (*FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkVarDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                       *) 
                     
              | 504,273 => (* P105 VarDeclPlus (184): VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 184;
                (* line 1015 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+2] . Scan . Position ;  
                     
              | 505,272 => (* P106 VarDeclPlus (184): VarDeclPlus VarDecl StkSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 184;
                (* line 1020 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt ;
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN 
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+3] . Scan . Position ;  
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *) 
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE
                         yySynAttribute . PaPos (* Rt Semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ;  
                       END (*IF*) ; 
                     
              | 506,352 => (* P107 VarDecl (185): VarDeclIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 3); yyNonterminal := 185;
                (* line 1037 of "FM3Parser.lalr" *)
                 IF FM3Pass1 . RequireTypeAndOrValue
                             ( yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] . PaBool , yyAttributeStack^[yyStackPtr+3] . PaBool ) 
                       (* ^Check this even if there are no valid ids. *)
                          AND yyAttributeStack^[yyStackPtr+1] . PaInt > 0 
                       THEN 
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Valid id count. *) ;
                         WITH WDeclParseInfo = FM3Decls . TopDeclParseInfo ( )
                         DO 
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP (* The declaration itself. *) 
                             ( WDeclParseInfo . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position 
                             
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*WITH*)
                       ELSE (* Skip the decl. *) 
                         FM3Pass1 . PutBwd_LCI_ri
                           ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                         INC ( FM3Globals . NextSkipNo ) ; 
                         yySynAttribute . PaInt := 0 (* Contribution to BlockDeclCt. *) ; 
                       END (*IF*)
                     
              | 507 => (* P108 VarDeclIds (186): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 186;
                (* line 1068 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       MakeListPos (* The identifier list. *) 
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                (* CHECK: Do we still want different decl id tokens? *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 508,374 => (* P109 OptDeclType (166): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 166;
                (* line 1079 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 509 => (* P110 OptDeclType (166): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 166;
                (* line 1083 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclTypeAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 510,351 => (* P111 OptDeclValue (187): StkBecomes Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 187;
                (* line 1089 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                     
              | 511 => (* P112 OptDeclValue (187): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 187;
                (* line 1093 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkDeclValAbsent , FM3Scanner . Attribute . Position ) ; 
                     
              | 512 => (* P113 Type (158): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 513,310 => (* P114 Type (158): StkRidADDRESS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 514,311 => (* P115 Type (158): StkRidBOOLEAN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 515,312 => (* P116 Type (158): StkRidCARDINAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 516,313 => (* P117 Type (158): StkRidCHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 517,314 => (* P118 Type (158): StkRidEXTENDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 518,315 => (* P119 Type (158): StkRidINTEGER .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 519,316 => (* P120 Type (158): StkRidLONGCARD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 520,317 => (* P121 Type (158): StkRidLONGINT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 521,318 => (* P122 Type (158): StkRidLONGREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 522,319 => (* P123 Type (158): StkRidMUTEX .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 523,320 => (* P124 Type (158): StkRidNULL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 524,321 => (* P125 Type (158): StkRidREAL .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 525,322 => (* P126 Type (158): StkRidREFANY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 526,323 => (* P127 Type (158): StkRidTEXT .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 527,324 => (* P128 Type (158): StkRidTYPECODE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 528,325 => (* P129 Type (158): StkRidWIDECHAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 529,309 => (* P130 Type (158): StkRwREF Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1125 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 530,326 => (* P131 Type (158): StkUNTRACED StkRwREF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1133 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkUNTRACEDREFTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 531,327 => (* P132 Type (158): OpenArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 532,373 => (* P133 OpenArrayType (205): StkRwARRAY StkRwOF Type .*)
                DEC (yyStackPtr, 3); yyNonterminal := 205;
                (* line 1145 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkOpenArrayTypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                         ) ;
                     
              | 533,328 => (* P134 Type (158): FixedArrayType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 534 => (* P135 FixedArrayType (206): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 206;

              | 535,218 => (* P136 EnumTypeLt (207): StkOpenBrace .*)
                DEC (yyStackPtr, 1); yyNonterminal := 207;
                (* line 1160 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkEnum
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 536,219 => (* P137 EnumType (209): EnumTypeLt EnumLitList StkCloseBrace .*)
                DEC (yyStackPtr, 3); yyNonterminal := 209;
                (* line 1175 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . MakeListPos
                           ( LHSAttr := yySynAttribute 
                           , TokLt := Itk . ItkEnumLitListLt
                           , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           , ElemsAttr := yyAttributeStack^[yyStackPtr+2] 
                           ) ; 
                       END; 
                     
              | 537 => (* P138 EnumLitList (208): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 208;
                (* line 1192 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := 0 ; 
              | 538 => (* P139 EnumLitList (208): EnumLitPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 208;
                (* line 1195 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 539,331 => (* P140 EnumLitPlus (210): EnumLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 210;
                (* line 1198 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 540,330 => (* P141 EnumLitPlus (210): EnumLitPlus StkComma EnumLit .*)
                DEC (yyStackPtr, 3); yyNonterminal := 210;
                (* line 1201 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ; 
              | 541,329 => (* P142 EnumLit (211): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 211;
                (* line 1204 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . DeclIdL2R
                                    ( Dkt . DkEnumLit
                                    , yyAttributeStack^[yyStackPtr+1]
                                    , SepTok := Itk . ItkEnumLitListSep
                                    , SepPosition := yyAttributeStack^[yyStackPtr] . Scan . Position
                                    , PriorIdCt := yyAttributeStack^[yyStackPtr-1] . PaInt 
                                    )
                                ) ;
                       IF yySynAttribute . PaInt > 0
                       THEN
                       END (*IF*) 
                     
              | 542,332 => (* P143 Type (158): EnumType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 543 => (* P144 FieldDeclList (212): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 212;
                (* line 1226 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty
                          ( yySynAttribute
                          , Itk . ItkFieldDeclListLt
                          ,  FM3Scanner . Attribute . Position
                          ) ;
                      
              | 544,354 => (* P145 FieldDeclList (212): FieldDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 212;
                (* line 1234 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 545,333 => (* P146 FieldDeclPlus (213): VarDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 213;
                (* line 1243 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 546,353 => (* P147 FieldDeclPlus (213): FieldDeclPlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 213;
                (* line 1246 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFieldDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 547,215 => (* P148 RecTypeLt (214): StkRwRECORD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 214;
                (* line 1258 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok
                                        := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkRecField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkRec
                                , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the record type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 548,254 => (* P149 Type (158): RecTypeLt FieldDeclList StkRwEND .*)
                DEC (yyStackPtr, 3); yyNonterminal := 158;
                (* line 1285 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCIP_rip
                           ( Itk . ItkRecTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+2] . PaInt (* Count of decls, fields, formals, etc. *) 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 549 => (* P150 MethodDeclList (215): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 215;
                (* line 1307 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkMethodDeclListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 550 => (* P151 MethodDeclList (215): StkRwMETHODS .*)
                DEC (yyStackPtr, 1); yyNonterminal := 215;
                (* line 1315 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkMethodDeclListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 551,366 => (* P152 MethodDeclList (215): StkRwMETHODS MethodDeclPlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 215;
                (* line 1320 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 552,367 => (* P153 MethodDeclPlus (216): MethodDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 216;
                (* line 1329 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 553,357 => (* P154 MethodDeclPlus (216): MethodDeclPlus StkSemicolon MethodDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 216;
                (* line 1332 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Decl count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkMethodDeclListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 554,356 => (* P155 MethodDeclLt (218): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 218;
                (* line 1344 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkMethod , yyAttributeStack^[yyStackPtr+1] ) ) ;
                         IF yySynAttribute . PaInt > 0
                         THEN 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkFormals  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 555,362 => (* P156 MethodDecl (217): MethodDeclLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 217;
                (* line 1365 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . PaInt (* Valid method count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         IF yySynAttribute . PaInt > 0
                         THEN
                (* Reduction to Formals, within Signature, will have  already popped
                   the formals' scope. 
                           LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                *) 
                           FM3Pass1 . PutBwd_LCIP_rip
                             ( Itk . ItkMethodDeclLt
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         ELSE (* Method Id was invalid. *) 
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         END (*IF*) 
                       END (*Block*) 
                     
              | 556 => (* P157 OverrideList (220): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 220;
                (* line 1395 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                          ( yySynAttribute
                          , Itk . ItkOverrideListLt
                          , FM3Scanner . Attribute . Position
                          ) ; 
                      
              | 557 => (* P158 OverrideList (220): StkRwOVERRIDES .*)
                DEC (yyStackPtr, 1); yyNonterminal := 220;
                (* line 1403 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LIP_rip
                          ( Itk . ItkOverrideListLt , 0 , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                      
              | 558,370 => (* P159 OverrideList (220): StkRwOVERRIDES OverridePlus OptSemicolon .*)
                DEC (yyStackPtr, 3); yyNonterminal := 220;
                (* line 1408 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] (* For element count & Left patch coord. *) 
                         ) ;
                     
              | 559,371 => (* P160 OverridePlus (221): Override .*)
                DEC (yyStackPtr, 1); yyNonterminal := 221;
                (* line 1417 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 560,369 => (* P161 OverridePlus (221): OverridePlus StkSemicolon VarDecl .*)
                DEC (yyStackPtr, 3); yyNonterminal := 221;
                (* line 1420 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *):= yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkOverrideListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 561,368 => (* P162 OverrideLt (223): NonreservedIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 223;
                (* line 1432 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* override count, 0 or 1. *) 
                         := ORD ( FM3Pass1 . OverrideIdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ) ;
                       (* ^Full legality requires looking through supertypes -- do it later. *) 
                     
              | 562,372 => (* P163 Override (222): OverrideLt StkEqual Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 222;
                (* line 1438 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Override count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       FM3Pass1 . PutBwd_LCP_eCp_rp
                         ( Itk . ItkOverrideLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         ) ;
                     
              | 563 => (* P164 Brand (224): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 224;
                (* line 1450 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentBrand , FM3Scanner . Attribute . Position ) ;
                     
              | 564 => (* P165 Brand (224): StkRwBRANDED .*)
                DEC (yyStackPtr, 1); yyNonterminal := 224;
                (* line 1455 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP 
                         ( Itk . ItkBrandAnon , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 565,355 => (* P166 Brand (224): StkRwBRANDED Expr .*)
                DEC (yyStackPtr, 2); yyNonterminal := 224;
                (* line 1460 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LP_rp 
                         ( Itk . ItkBrandLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 566 => (* P167 Supertype (225): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 225;
                (* line 1467 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkAbsentSupertype , FM3Scanner . Attribute . Position ) ;
                     
              | 567 => (* P168 Supertype (225): TypeId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1473 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 568 => (* P169 Supertype (225): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 225;
                (* line 1482 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       (* ^The supertype will be nested within this object tyhpe. *) 
                       FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkSupertypeLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 569,255 => (* P170 ObjTypeLt (227): Supertype Brand StkRwOBJECT .*)
                DEC (yyStackPtr, 3); yyNonterminal := 227;
                (* line 1493 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt (* DeclParseInfoDepth *) 
                           := FM3Decls . PushDeclParseInfo
                                ( FM3Decls . DeclParseInfoTyp
                                    { DiDeclTok := Itk . ItkFieldDeclLt
                                    , DiIdListTok := Itk . ItkFieldDeclIdListLt
                                    , DiIdSepTok := Itk . ItkFieldDeclIdListLt + Itk . LtToListSep
                                    , DiKind := Dkt . DkObjField 
                                    }
                                ) ;
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkObj
                                , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                (* TODO: Store LScopeRef or its ScopeNo in the object type. *) 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END; 
                     
              | 570,262 => (* P171 ObjType (226): ObjTypeLt FieldDeclList MethodDeclList OverrideList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 226;
                (* line 1519 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ; 
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>  
                         FM3Pass1 . PutBwd_LCP_rp
                           ( Itk . ItkObjTypeLt
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( )
                                   = yyAttributeStack^[yyStackPtr+1] . PaInt (* DeclParseInfoDepth. *)
                         *> 
                       END; 
                     
              | 571 => (* P172 Type (158): ObjType .*)
                DEC (yyStackPtr, 1); yyNonterminal := 158;

              | 572,214 => (* P173 ProcTypeLt (228): StkRwPROCEDURE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 228;
                (* line 1543 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         LScopeRef 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals 
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;  
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ;
                       END (*Block*)
                     
              | 573,364 => (* P174 Type (158): ProcTypeLt Signature .*)
                DEC (yyStackPtr, 2); yyNonterminal := 158;
                (* line 1558 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkProcTypeLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 574,365 => (* P175 Signature (219): Formals ResultType Raises .*)
                DEC (yyStackPtr, 3); yyNonterminal := 219;
                (* line 1566 of "FM3Parser.lalr" *)
                 VAR LToken : Itk . TokTyp ;
                       BEGIN
                         IF yyAttributeStack^[yyStackPtr+2] . PaBool (* Is present. *) 
                         THEN LToken := Itk . ItkSignatureFuncLt
                         ELSE LToken := Itk . ItkSignatureProperLt 
                         END (*IF*) ; 
                         FM3Pass1 . PutBwd_LCP_rp
                           ( LToken 
                           , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                           , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                           ) ;
                       END (*Block*) 
                     
              | 575,259 => (* P176 Formals (229): StkOpenParen FormalsList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 229;
                (* line 1586 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF LScopeRef ^ . ScpKind = Skt . SkFormals
                         THEN (* Proc type, method, or in an interface, formals-only. *) 
                           FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                           FM3Pass1 . PutBwd_LI
                             ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                           <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                         END (*IF*) ;
                         MakeListPos
                           ( yySynAttribute , Itk . ItkFormalsListLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+2] ) ;
                (* FIXME^ different tokens for different formal modes? *)
                       END ;
                     
              | 576 => (* P177 FormalsList (232): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 232;
                (* line 1605 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 577,360 => (* P178 FormalsList (232): FormalPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 232;

              | 578,358 => (* P179 FormalPlus (233): FormalPlus StkSemicolon Formal .*)
                DEC (yyStackPtr, 3); yyNonterminal := 233;
                (* line 1610 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+3] . PaInt ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkFormalsListLt 
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 579,361 => (* P180 FormalPlus (233): Formal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 233;
                (* line 1620 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
              | 580 => (* P181 FormalLt (235): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 235;
                (* line 1624 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;  
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 581,257 => (* P182 FormalLt (235): StkRwVALUE .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1637 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                       yySynAttribute . PaByte := ORD ( Dkt . DkVALUEFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVALUEFormalLt
                                  , DiIdListTok := Itk . ItkVALUEFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVALUEFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVALUEFormal
                                  }
                              ) ;
                     
              | 582,258 => (* P183 FormalLt (235): StkRwVAR .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1651 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkVARFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkVARFormalLt
                                  , DiIdListTok := Itk . ItkVARFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkVARFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkVARFormal
                                  }
                              ) ;
                     
              | 583,256 => (* P184 FormalLt (235): StkRwREADONLY .*)
                DEC (yyStackPtr, 1); yyNonterminal := 235;
                (* line 1664 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       yySynAttribute . PaByte := ORD ( Dkt . DkROFormal ) ;
                       yySynAttribute . PaInt (* DeclParseInfoDepth after push. *) 
                         := FM3Decls . PushDeclParseInfo
                              ( FM3Decls . DeclParseInfoTyp
                                  { DiDeclTok := Itk . ItkROFormalLt
                                  , DiIdListTok := Itk . ItkROFormalIdListLt 
                                  , DiIdSepTok := Itk . ItkROFormalIdListLt + Itk . LtToListSep
                                  , DiKind := Dkt . DkROFormal
                                  }
                              ) ;
                     
              | 584,359 => (* P185 Formal (234): FormalLt FormalIds OptDeclType OptDeclValue .*)
                DEC (yyStackPtr, 4); yyNonterminal := 234;
                (* line 1680 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       VAR LOk := TRUE ; 
                       BEGIN (* Do these checks even if no valid ids. *) 
                         IF VAL ( yyAttributeStack^[yyStackPtr+1] . PaByte , Dkt ) = Dkt . DkVARFormal   
                         THEN
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* Formal type is present (absent?). *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal must have a type (2.2.8)." } 
                               , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ; 
                           IF yyAttributeStack^[yyStackPtr+4] . PaBool (* Formal expression is present? *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                   { " VAR formal cannot have a default expression (2.2.8)." }
                               , yyAttributeStack^[yyStackPtr+4] . Scan . Position
                               ) ;
                             LOk := FALSE ; 
                           END (*IF*) ;
                         ELSE (* VALUE or READONLY *)  
                           LOk := FM3Pass1 . RequireTypeAndOrValue
                                    ( yyAttributeStack^[yyStackPtr+2] . Scan . Position , yyAttributeStack^[yyStackPtr+3] . PaBool , yyAttributeStack^[yyStackPtr+4] . PaBool )
                         END (*IF*) ;
                
                         LOk := LOk AND yyAttributeStack^[yyStackPtr+2] . PaInt > 0 ;
                         
                         IF NOT LOk 
                         THEN (* Skip the whole decl, including possibly multiple idents. *)
                           yySynAttribute . PaInt := 0 ;
                           FM3Pass1 . PutBwd_LCI_ri
                             ( Itk . ItkSkipLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , FM3Globals . NextSkipNo ) ;
                           INC ( FM3Globals . NextSkipNo ) ;
                         ELSE 
                           yySynAttribute .PaInt := yyAttributeStack^[yyStackPtr+2] . PaInt (* Valid Id count. *) ;  
                           FM3Pass1 . PutBwd_LCP_eCP_zCP_rP 
                             ( FM3Decls . TopDeclParseInfo ( ) . DiDeclTok 
                             , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                             
                             , yyAttributeStack^[yyStackPtr+4] . PaPass1Coord
                             , yyAttributeStack^[yyStackPtr+4] . Scan . Position 
                             
                             , yyAttributeStack^[yyStackPtr+1] . Scan . Position 
                             ) ;
                         END (*IF*) ;
                         <* ASSERT FM3Decls . PopDeclParseInfo ( ) = yyAttributeStack^[yyStackPtr+1] . PaInt *>
                       END (*Block*) 
                     
              | 585 => (* P186 FormalIds (236): DeclIdListElems .*)
                DEC (yyStackPtr, 1); yyNonterminal := 236;
                (* line 1738 of "FM3Parser.lalr" *)
                 yySynAttribute . Scan . Position  := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos
                         ( yySynAttribute
                         , FM3Decls . TopDeclParseInfo ( ) . DiIdListTok
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+1]
                         ) ; 
                     
              | 586,363 => (* P187 ResultType (230): StkColon Type .*)
                DEC (yyStackPtr, 2); yyNonterminal := 230;
                (* line 1749 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := TRUE;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position;
                       yySynAttribute . PaTok1 := Itk . ItkSignatureFuncLt ; 
                       FM3Pass1 . PutBwd_LCP_rp
                         (Itk . ItkResultTypeLt,  yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position); 
                     
              | 587 => (* P188 ResultType (230): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 230;
                (* line 1756 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Result type is present. *) := FALSE (* Absent. *) ;
                       yySynAttribute . Scan . Position := FM3Scanner . Attribute . Position; 
                       yySynAttribute . PaTok1 := Itk . ItkSignatureProperLt ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkResultTypeAbsent , FM3Scanner . Attribute . Position ) ;
                       yySynAttribute . PaPass1Coord := FM3Pass1 . Coord ( ) ; 
                     
              | 588 => (* P189 Raises (231): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 231;
                (* line 1766 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := FALSE (* Absent. *) ;
                       FM3Pass1 . MakeListEmpty
                         ( yySynAttribute , Itk . ItkRaisesSetLt , FM3Scanner . Attribute . Position ) ; 
                     
              | 589,260 => (* P190 Raises (231): StkRwRAISES StkRwANY .*)
                DEC (yyStackPtr, 2); yyNonterminal := 231;
                (* line 1772 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       FM3Pass1 . PutBwd_LP_rp
                         ( Itk . ItkRaisesANY , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ; 
                     
              | 590,261 => (* P191 Raises (231): StkRwRAISES StkOpenBrace QualIdentStarList StkCloseBrace .*)
                DEC (yyStackPtr, 4); yyNonterminal := 231;
                (* line 1779 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Raises set is present. *) := TRUE ;
                       yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ; 
                       MakeListPos ( yySynAttribute , Itk . ItkRaisesSetLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position , yyAttributeStack^[yyStackPtr+3] ) ;
                     
              | 591,302 => (* P192 ProcDeclLt (238): StkRwPROCEDURE NonreservedIdent .*)
                DEC (yyStackPtr, 2); yyNonterminal := 238;
                (* line 1786 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LScopeKind : Skt ;
                       BEGIN
                         yySynAttribute . Scan . SaAtom := yyAttributeStack^[yyStackPtr+2] . Scan . SaAtom ; 
                         yySynAttribute . PaInt (* Ident count, 0 or 1. *) 
                           := ORD ( FM3Pass1 . DeclIdL2R ( Dkt . DkProc , yyAttributeStack^[yyStackPtr+2] ) ) ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* Body scope.*) 
                           LScopeRef
                             := FM3Scopes . NewScopeRef
                                  ( FM3Units . UnitStackTopRef
                                  , Skt . SkModule  
                                  , FM3Scanner . Attribute . Position
                                  ) ;
                           FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         END (*IF*) ; 
                         LScopeRef (* Formals scope. *) 
                           := FM3Scopes . NewScopeRef
                                ( FM3Units . UnitStackTopRef
                                , Skt . SkFormals  
                                , FM3Scanner . Attribute . Position
                                ) ;
                         FM3Scopes . PushDeclScopeRef ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeLt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                       END (*Block*) 
                     
              | 592,386 => (* P193 ProcDecl (240): ProcDeclLt Signature OptProcBody .*)
                DEC (yyStackPtr, 3); yyNonterminal := 240;
                (* line 1815 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ;
                       VAR LProcTok : Itk . TokTyp ; 
                       BEGIN
                         yySynAttribute . PaInt (* Valid decl count. *) := yyAttributeStack^[yyStackPtr+1] . PaInt ; 
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         IF FM3Units . CurrentUnitIsModule ( )
                         THEN (* => treat as having a body, regardless of source code. *) 
                           IF NOT yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has no body in source code. *)
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY
                                   { " A procedure in a module must have a body (2.5)." } 
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                           END (*IF*) ;
                           LProcTok := Itk . ItkProcWBodyLt ; 
                         ELSE (* In an interface => treat as having no body, regardless of source. *) 
                           IF yyAttributeStack^[yyStackPtr+3] . PaBool (* This procedure has a body in source code. *) 
                           THEN
                             FM3Messages . ErrorArr
                               ( ARRAY OF REFANY 
                                 { " A procedure in an interface must not have a body (2.5.2)."
                                 }
                               , yyAttributeStack^[yyStackPtr+3] . Scan . Position
                               ) ;
                             FM3Pass1 . PutBwd_LCI_ri (* Skip the body. *) 
                               ( Itk . ItkSkipLt
                               , yyAttributeStack^[yyStackPtr+3] . PaPass1Coord
                               , FM3Globals . NextSkipNo  
                               ) ;
                             INC ( FM3Globals . NextSkipNo ) ; 
                           END (*IF*);
                           LProcTok := Itk . ItkProcNoBodyLt ; 
                         END (*IF*) ;
                         FM3Pass1 . DeclScopeRtL2R ( LScopeRef ) ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkDeclScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         FM3Pass1 . PutBwd_LCI_ri
                           ( LProcTok , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom ) ; 
                         <* ASSERT FM3Scopes . PopDeclScopeRef ( ) = LScopeRef *>
                       END (*Block*) 
                     
              | 593,274 => (* P194 OptProcBody (239): StkSemicolon .*)
                DEC (yyStackPtr, 1); yyNonterminal := 239;
                (* line 1859 of "FM3Parser.lalr" *)
                 yySynAttribute . PaBool (* Procedure has a body. *) := FALSE (* Absent. *) ; 
                       FM3Pass1 . PutBwd_LP
                         ( Itk . ItkProcBodyAbsent , yyAttributeStack^[yyStackPtr+1] . Scan . Position ); 
                     
              | 594,275 => (* P195 ProcBodyLt (241): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 241;
                (* line 1868 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyLt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                         LScopeRef := FM3Scopes . DeclScopeStackTopRef ;
                         FM3Scopes . PushOpenScopeRef ( LScopeRef ) ; 
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeLt , LScopeRef ^ . ScpSelfScopeNo ) ; 
                       END (*Block*) ; 
                     
              | 595,276 => (* P196 OptProcBody (239): ProcBodyLt Block NonreservedIdent StkSemicolon .*)
                DEC (yyStackPtr, 4); yyNonterminal := 239;
                (* line 1881 of "FM3Parser.lalr" *)
                 VAR LScopeRef : FM3Scopes . ScopeRefTyp ; 
                       BEGIN
                         yySynAttribute . PaBool (* Procedure has a body. *) := TRUE ; 
                         yySynAttribute . Scan . Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position ;
                         LScopeRef := FM3Scopes . OpenScopeStackTopRef ;
                         FM3Pass1 . PutBwd_LI
                           ( Itk . ItkOpenScopeRt , LScopeRef ^ . ScpSelfScopeNo  ) ;
                         <* ASSERT FM3Scopes . PopOpenScopeRef ( ) = LScopeRef *>
                         FM3Pass1 . PutBwd_LP
                           ( Itk . ItkProcBodyRt , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                       END;
                     
              | 596 => (* P197 Expr (167): E0 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 167;

              | 597 => (* P198 E0 (242): E1 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 242;

              | 598 => (* P199 E0 (242): E0 StkRwOR E1 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 242;
                (* line 1905 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwOR
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 599,343 => (* P200 E1 (243): E2 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 243;

              | 600,336 => (* P201 E1 (243): E1 StkRwAND E2 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 243;
                (* line 1916 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwAND 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 601 => (* P202 E2 (244): E3 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 244;

              | 602 => (* P203 E2 (244): StkRwNOT E3 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 244;
                (* line 1927 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , Stk . StkRwNOT
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 603 => (* P204 E3 (245): E4 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 245;

              | 604 => (* P205 E3 (245): E3 ExprRelOp E4 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 245;
                (* line 1937 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 605 => (* P206 E4 (246): E5 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 246;

              | 606 => (* P207 E4 (246): E4 ExprAddOp E5 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 246;
                (* line 1948 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 607,342 => (* P208 E5 (248): E6 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 248;

              | 608,337 => (* P209 E5 (248): E5 ExprMulOp E6 .*)
                DEC (yyStackPtr, 3); yyNonterminal := 248;
                (* line 1959 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_eCip_rip
                         ( Itk . ItkBinaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaTok1 
                         , yyAttributeStack^[yyStackPtr+2]  . Scan . Position
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         ) ; 
                     
              | 609,338 => (* P210 E6 (250): E7 .*)
                DEC (yyStackPtr, 1); yyNonterminal := 250;

              | 610,339 => (* P211 E6 (250): ExprUnaryAddOp E7 .*)
                DEC (yyStackPtr, 2); yyNonterminal := 250;
                (* line 1970 of "FM3Parser.lalr" *)
                 (* Let's leave the unary + in there, just in case there is a need
                          to note its position, for some reason.
                       *) 
                       FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkUnaryOpLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaTok1
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ; 
                     
              | 611,249 => (* P212 E7 (252): E8WOId StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 1989 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ; 
                     
              | 612,340 => (* P213 E7 (252): E8WOId Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 1994 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 613,341 => (* P214 E7 (252): E8WOId Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2003 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 614 => (* P215 E7 (252): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 252;
                (* line 2012 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkExprDotLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+3] . Scan . SaAtom 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 615 => (* P216 E7 (252): E8WOId .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;

              | 616,251 => (* P217 E7 (252): IdentRef StkDeref .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2023 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                         ( Itk . ItkDerefLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+2] . Scan . Position ) ;
                     
              | 617,350 => (* P218 E7 (252): StkIdent Subscripts .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2028 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkSubscriptLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 618,347 => (* P219 E7 (252): IdentRef Actuals .*)
                DEC (yyStackPtr, 2); yyNonterminal := 252;
                (* line 2037 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkCallLt 
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+2] . PaInt 
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 619 => (* P220 E7 (252): StkIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;
                (* line 2046 of "FM3Parser.lalr" *)
                 FM3Pass1 . IdentRefL2R ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 620,334 => (* P221 E7 (252): QualIdent .*)
                DEC (yyStackPtr, 1); yyNonterminal := 252;

              | 621,252 => (* P222 Subscripts (255): StkOpenBracket SsPlusList StkCloseBracket .*)
                DEC (yyStackPtr, 3); yyNonterminal := 255;
                (* line 2052 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkSubscriptsPlusListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 622,348 => (* P223 SsPlusList (257): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 257;
                (* line 2061 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) :=  1 ; 
              | 623,349 => (* P224 SsPlusList (257): SsPlusList StkComma Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 257;
                (* line 2064 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Expression count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkSubscriptsPlusListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 624,250 => (* P225 Actuals (256): StkOpenParen ActualList StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 256;
                (* line 2075 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListPos
                         ( LHSAttr := yySynAttribute
                         , TokLt := Itk . ItkActualsListLt
                         , Position := yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , ElemsAttr := yyAttributeStack^[yyStackPtr+2]
                         ) ; 
                     
              | 625 => (* P226 ActualList (258): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 258;
                (* line 2084 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  0 ; 
              | 626,346 => (* P227 ActualList (258): Actual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 258;
                (* line 2087 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) :=  1 ; 
              | 627,345 => (* P228 ActualList (258): ActualList StkComma Actual .*)
                DEC (yyStackPtr, 3); yyNonterminal := 258;
                (* line 2090 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt (* Actual count *) := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 ;
                       FM3Pass1 . PutBwd_ECIP
                         ( Itk . ItkActualsListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord 
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 628,344 => (* P229 Actual (259): Expr .*)
                DEC (yyStackPtr, 1); yyNonterminal := 259;
                (* line 2100 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCP_rp
                        ( Itk . ItkAnonActualLt , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord , yyAttributeStack^[yyStackPtr+1] . Scan . Position ) ;
                     
              | 629,335 => (* P230 Actual (259): NonreservedIdent StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 259;
                (* line 2105 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCIP_rip
                         ( Itk . ItkNamedExprLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaAtom  
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 630 => (* P231 E8WOId (254): E8WOId StkDot NonreservedIdent .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;
                (* line 2120 of "FM3Parser.lalr" *)
                 FM3Pass1 . QualIdentL2R ( yyAttributeStack^[yyStackPtr+1] , yyAttributeStack^[yyStackPtr+3] ) ; 
              | 631,224 => (* P232 E8WOId (254): StkIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2125 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP
                         ( Itk . ItkIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 632,225 => (* P233 E8WOId (254): StkLongIntLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2132 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongIntLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 633,226 => (* P234 E8WOId (254): StkBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2139 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 634,227 => (* P235 E8WOId (254): StkLongBasedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2149 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNNP 
                         ( Itk . ItkLongBasedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , 16L (* Base--default.*) 
                (* FIXME ^ Get the real base from the scanner.
                           As of 2024-4-5, only FM3DisAsm uses this. *) 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 635,228 => (* P236 E8WOId (254): StkRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2159 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 636,229 => (* P237 E8WOId (254): StkLongRealLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2166 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkLongRealLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 637,230 => (* P238 E8WOId (254): StkExtendedLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2173 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkExtendedLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 638,233 => (* P239 E8WOId (254): StkCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2181 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 639,234 => (* P240 E8WOId (254): StkWideCharLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2188 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LNP 
                         ( Itk . ItkWideCharLit
                         , yyAttributeStack^[yyStackPtr+1] . Scan . SaArgValue 
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         ) ;
                     
              | 640,231 => (* P241 E8WOId (254): StkTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2195 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_TextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 641,232 => (* P242 E8WOId (254): StkWideTextLit .*)
                DEC (yyStackPtr, 1); yyNonterminal := 254;
                (* line 2197 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_WideTextLit ( yyAttributeStack^[yyStackPtr+1] ) ; 
              | 642,253 => (* P243 E8WOId (254): StkOpenParen E0 StkCloseParen .*)
                DEC (yyStackPtr, 3); yyNonterminal := 254;

              | 643,236 => (* P244 ExprRelOp (247): StkEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2201 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkEqual ; 
              | 644,237 => (* P245 ExprRelOp (247): StkUnequal .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2202 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnequal ; 
              | 645,238 => (* P246 ExprRelOp (247): StkLess .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2203 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLess ; 
              | 646,239 => (* P247 ExprRelOp (247): StkGreater .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2204 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreater ; 
              | 647,240 => (* P248 ExprRelOp (247): StkLessEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2205 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkLessEqual ; 
              | 648,241 => (* P249 ExprRelOp (247): StkGreaterEqual .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2206 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkGreaterEqual ; 
              | 649,235 => (* P250 ExprRelOp (247): StkRwIN .*)
                DEC (yyStackPtr, 1); yyNonterminal := 247;
                (* line 2207 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwIN ; 
              | 650,242 => (* P251 ExprAddOp (249): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2210 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkPlus ; 
              | 651,243 => (* P252 ExprAddOp (249): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2211 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkMinus ; 
              | 652,244 => (* P253 ExprAddOp (249): StkAmpersand .*)
                DEC (yyStackPtr, 1); yyNonterminal := 249;
                (* line 2212 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkAmpersand ; 
              | 653,247 => (* P254 ExprMulOp (251): StkStar .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2214 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkStar ; 
              | 654,248 => (* P255 ExprMulOp (251): StkSlash .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2215 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkSlash ; 
              | 655,245 => (* P256 ExprMulOp (251): StkRwDIV .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2216 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwDIV ; 
              | 656,246 => (* P257 ExprMulOp (251): StkRwMOD .*)
                DEC (yyStackPtr, 1); yyNonterminal := 251;
                (* line 2217 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkRwMOD ; 
              | 657,222 => (* P258 ExprUnaryAddOp (253): StkPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2220 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryPlus ; 
              | 658,223 => (* P259 ExprUnaryAddOp (253): StkMinus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 253;
                (* line 2221 of "FM3Parser.lalr" *)
                 yySynAttribute . PaTok1 := Stk . StkUnaryMinus ; 
              | 659 => (* P260 BlockLt (260): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 260;
                (* line 2226 of "FM3Parser.lalr" *)
                
                     
              | 660,277 => (* P261 Block (139): BlockLt OpenDeclList StkRwBEGIN StmtList StkRwEND .*)
                DEC (yyStackPtr, 5); yyNonterminal := 139;
                (* line 2230 of "FM3Parser.lalr" *)
                
                     
              | 661,376 => (* P262 BlockDecl (261): ConstDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2236 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 662,380 => (* P263 BlockDecl (261): TypeDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2240 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 663,394 => (* P264 BlockDecl (261): ExceptDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2244 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 664,385 => (* P265 BlockDecl (261): VarDeclGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2248 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 665,392 => (* P266 BlockDecl (261): ProcDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2252 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 666,383 => (* P267 BlockDecl (261): RevelationGroup .*)
                DEC (yyStackPtr, 1); yyNonterminal := 261;
                (* line 2256 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 667 => (* P268 OpenDeclList (130): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 130;
                (* line 2264 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 668 => (* P269 OpenDeclList (130): BlockDeclPlus .*)
                DEC (yyStackPtr, 1); yyNonterminal := 130;
                (* line 2272 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkOpenDeclListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 669,393 => (* P270 BlockDeclPlus (263): BlockDecl .*)
                DEC (yyStackPtr, 1); yyNonterminal := 263;
                (* line 2281 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt (* Decl count. *) ;
                       yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                     
              | 670,395 => (* P271 BlockDeclPlus (263): BlockDeclPlus BlockDecl .*)
                DEC (yyStackPtr, 2); yyNonterminal := 263;
                (* line 2286 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + yyAttributeStack^[yyStackPtr+2] . PaInt (* Decl count. *) ;
                
                       IF yyAttributeStack^[yyStackPtr+2] . PaInt > 0
                       THEN
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+2] . PaPos ; 
                         FM3Pass1 . PutBwd_ECIP (* Insert a separator. *)
                           ( Itk . ItkOpenDeclListLt
                           , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                           , yyAttributeStack^[yyStackPtr+1] . PaInt
                           , yyAttributeStack^[yyStackPtr+1] . PaPos 
                           ) ;
                       ELSE 
                         yySynAttribute . PaPos (* Rt semicolon. *) := yyAttributeStack^[yyStackPtr+1] . PaPos ; 
                       END (*IF*) ; 
                     
              | 671 => (* P272 StmtList (135): .*)
                yyAttributeStack [ yyStackPtr + 1 ] . Scan . Position
    := FM3Scanner . Attribute . Position; 
yyNonterminal := 135;
                (* line 2305 of "FM3Parser.lalr" *)
                 FM3Pass1 . MakeListEmpty 
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , FM3Scanner . Attribute . Position
                         ) ; 
                     
              | 672,390 => (* P273 StmtList (135): StmtPlus OptSemicolon .*)
                DEC (yyStackPtr, 2); yyNonterminal := 135;
                (* line 2313 of "FM3Parser.lalr" *)
                 MakeListPos
                         ( yySynAttribute
                         , Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+1] . Scan . Position
                         , yyAttributeStack^[yyStackPtr+1] (* Used for element count and left patch coordinate. *) 
                         ) ;
                     
              | 673,391 => (* P274 StmtPlus (264): Stmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 264;
                (* line 2321 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := 0 ; 
              | 674,388 => (* P275 StmtPlus (264): StmtPlus StkSemicolon Stmt .*)
                DEC (yyStackPtr, 3); yyNonterminal := 264;
                (* line 2324 of "FM3Parser.lalr" *)
                 yySynAttribute . PaInt := yyAttributeStack^[yyStackPtr+1] . PaInt + 1 (* Stmt count. *) ;
                       FM3Pass1 . PutBwd_ECIP (* Internal separator. *)
                         ( Itk . ItkStmtListLt
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+1] . PaInt
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ; 
                     
              | 675,389 => (* P276 Stmt (265): AssignStmt .*)
                DEC (yyStackPtr, 1); yyNonterminal := 265;

              | 676,387 => (* P277 AssignStmt (266): Expr StkBecomes Expr .*)
                DEC (yyStackPtr, 3); yyNonterminal := 266;
                (* line 2338 of "FM3Parser.lalr" *)
                 FM3Pass1 . PutBwd_LCPeCprp
                         ( Itk . ItkBecomesLt
                         , yyAttributeStack^[yyStackPtr+1] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . PaPass1Coord
                         , yyAttributeStack^[yyStackPtr+2] . Scan . Position
                         ) ;
                     
              END (*CASE*);

          (* End of inserted semantic action code from the .lalr file: *)
(* -------------------------------------------------------------------------- *)

               (* Here, a reduction has been partially done.  yyStackPtr has
                  been decremented by the RHS length, yyNonterminal has been set
                  to the LHS NT of the reduced-by production (but has not been
                  pushed), and any Semantic actions have been performed,
                  which may have made assignments to yySynAttribute.  Now
                  do a nonterminal read transition on
                  yyStateStack^ [yyStackPtr] (* A state*) and yyNonterminal.
               *) 

               (* SPEC yyState 
                    := Next (Top (), yyNonterminal); nonterminal transition *)
               yyNCombPtr 
                 := LOOPHOLE 
                      ( LOOPHOLE
                          ( yyNBasePtr [yyStateStack^ [yyStackPtr]], INTEGER )
                          + (yyNonterminal-(yyLastTerminal+1))
                            * BYTESIZE (yyNCombType) 
                      , yyNCombTypePtr
                      );
               (*Any action*)yyState := yyNCombPtr^;
               
               INC (yyStackPtr) (* To push new LHS. *);
               WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
                    (* Tho' already popped by lalr-generated reduce action, this
                       is still present and may have a meaningful Position. *)
               DO
                 yyNTPos := WParsAttr . Scan . Position (* Parser debug.*) ;
                 (* ^Either from LM symbol of RHS, or, if empty RHS, was set to
                    the scanner's position by lalr-generated code. *) 
                 yyRHSCoord := WParsAttr . PaPass1Coord; 
                 WParsAttr := yySynAttribute;
                 IF yySynAttribute . PaPass1Coord = ParsAttrNull . PaPass1Coord 
                 THEN (* Semantic actions didn't set it. *) 
                   IF yyStackPtr = yyPrereduceStackPtr + 1 (* Empty reduction *)
                   THEN WParsAttr . PaPass1Coord := yyPrereduceCoord; 
                   ELSE WParsAttr . PaPass1Coord := yyRHSCoord;
                   END (*IF*);
                 END (*IF*);
                 WParsAttr.Scan.SaTok := yyNonterminal;
              (* ^This requires that tScanAttribute have field 'SaTok'. *)
                 WParsAttr . Scan . Position := yyNTPos (* Parser debug.*) ; 
               END (*WITH*);
               yyStateStack^ [yyStackPtr]
                 := yyState (* Not necessarily a state*) (*ParserDebug*);
               IF yyState < yyFirstFinalState (* read nonterminal? *) 
               THEN (* A true state. *)
                 EXIT 
               END (* IF *) ; 
            END (* LOOP *) ;

         ELSE (* Read Terminal. *)
            INC (yyStackPtr);
            yyStateStack^ [yyStackPtr] := yyState (*A state*) (*ParserDebug*);
            WITH WParsAttr = yyAttributeStack^ [yyStackPtr]
            DO
              WParsAttr.Scan := FM3Scanner.Attribute;
              WParsAttr.PaPass1Coord := Coord ( );
(*            PutBwd_Attribute (WParsAttr); *)
            END (*WITH*);
            yyTerminal := FM3Scanner.GetToken ();
             IF yyRepairsInserted >= 0
                (* ^0 => repair's been happening, tho' with no insertions. *)
             THEN (* Finished with a repair. *)
               FM3Messages.ErrorArr
                 ( ARRAY OF REFANY { TextWr.ToText (yyErrMsgWrT) } , yyErrorPos );
               yyErrMsgWrT := NIL; 
               yyRepairsInserted := - 1;
             END (*IF*);
         END (* IF *);
      END (* LOOP *) ;
   END FM3Parser;

PROCEDURE QuoteAndFillOnLine
   ( FragText : TEXT ; ErrMsgWrT : Wr . T ; VAR MsgLineLen : INTEGER ) =
   VAR FragLen : INTEGER;
   BEGIN
      FragLen := Text.Length (FragText);
      IF MsgLineLen > FM3Messages.IndentLen
         (* There's already a fragment on this line. *) 
         AND MsgLineLen + FragLen + 2 (*For quotes.*)
             > FM3Messages.MsgLineLen (* Frag won't fit. *) 
      THEN
        Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
        MsgLineLen := FM3Messages.IndentLen;
      ELSIF MsgLineLen > FM3Messages.IndentLen
      THEN 
        Wr.PutChar ( ErrMsgWrT , ' ');
        INC ( MsgLineLen );
      END (*IF*);
      Wr.PutChar ( ErrMsgWrT , '\"');
      Wr.PutText ( ErrMsgWrT , FragText);
      Wr.PutText ( ErrMsgWrT , "\" ");
      INC (MsgLineLen, FragLen + 2);
   END QuoteAndFillOnLine; 

PROCEDURE ErrorRecovery (
      VAR Terminal      : yySymbolRange ;
          StateStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
          ErrMsgWrT     : Wr . T        ;
      VAR MsgLineLen    : INTEGER 
    ) =
   VAR
      ContinueSet       : IntSets . T;
      RestartSet        : IntSets . T;
      Token             : yySymbolRange;
      TokenText         : TEXT;
      TokenArray        : ARRAY [0..127] OF CHAR;
      InfoText          : TEXT;
      TokensSkipped     : BOOLEAN;

      PROCEDURE VisitTok (Elem: IntSets.ElemT) = 
      VAR TokenText : TEXT;
      BEGIN (*VisitTok*)
         TokenName (Elem, (*OUT*) TokenText);
         QuoteAndFillOnLine
           ( TokenText , ErrMsgWrT , MsgLineLen );
      END VisitTok;

   BEGIN (* ErrorRecovery *)
   (* Start the error message. *) 
      TokenName ( Terminal , (*OUT*) TokenText );
      Wr.PutText ( ErrMsgWrT , "Illegal token: \"");
      Wr.PutText ( ErrMsgWrT , TokenText );
      Wr.PutText ( ErrMsgWrT , "\"" );

   (* Append list of the set of expected terminal symbols. *)
      ComputeContinuation
        (StateStack, StackSize, StackPtr, (*OUT*) ContinueSet);
      IF IntSets.Card(ContinueSet) = 0
      THEN (* Shouldn't happen. *) 
      ELSIF IntSets.Card(ContinueSet) = 1
      THEN
         Wr.PutText ( ErrMsgWrT, ", expecting \"");
         Token := IntSets . ArbitraryMember (ContinueSet);
         TokenName (Token, (*OUT*) TokenText);
         Wr.PutText ( ErrMsgWrT, TokenText);  
         Wr.PutText ( ErrMsgWrT, "\"");  
      ELSE (* Expected set is plural. *)   
         Wr.PutText ( ErrMsgWrT, ", expecting one of:");
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent );
         MsgLineLen := FM3Messages.IndentLen;
         IntSets . ForAllDo (ContinueSet, VisitTok);
      END (*IF*);

      (* Skip terminal symbols until a restart point is reached *)
      ComputeRestartPoints
        (StateStack, StackSize, StackPtr, (*OUT*) RestartSet);
      TokensSkipped := FALSE;
      WHILE NOT IntSets.IsElement (Terminal, RestartSet) DO
       Terminal := FM3Scanner.GetToken ();
        TokensSkipped := TRUE;
      END (*WHILE*);
      (* Append restart point, if any tokens were skipped. *) 
      IF TokensSkipped
      THEN
         Wr.PutText ( ErrMsgWrT, FM3Messages.NLIndent);
         Wr.PutText ( ErrMsgWrT , "Restarting parse at ");
        FM3SharedUtils.PutPosImage ( ErrMsgWrT , FM3Scanner.Attribute.Position );
      END (*IF*);

      ContinueSet := NIL;
      RestartSet := NIL;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
          Stack         : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR ContinueSet   : IntSets . T     ) =
   VAR Terminal         : yySymbolRange;
   BEGIN
      ContinueSet:= IntSets . Empty ( );
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
         IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
            ContinueSet := IntSets . Include ( ContinueSet , Terminal )
         END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal          : yySymbolRange ;
      ParseStack        : yyStackType   ;
      StackSize         : INTEGER       ;
      StackPtr          : yyStackPtrType): BOOLEAN =
   VAR
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      Stack             : yyStackType;
   BEGIN
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      State := Stack^ [StackPtr];
      LOOP
         Stack^ [StackPtr] := State;
         State := Next (State, Terminal);
         IF State = yyNoState THEN
            Stack := NIL;
            RETURN FALSE;
         END;
         IF State <= yyLastReadTermState (* read or read terminal reduce ? *)
         THEN
            Stack := NIL;
            RETURN TRUE;
         END;
         
         LOOP (* reduce *)
            IF State =  yyStopState THEN
               Stack := NIL; 
               RETURN TRUE;
            ELSE 
               DEC (StackPtr, yyLength [State]);
               Nonterminal := yyLeftHandSide [State];
            END;

            State := Next (Stack^ [StackPtr], Nonterminal);
            (* Ensure Stack has room for at least 2 elements. *)
            IF StackPtr >= StackSize THEN
              ExpandStateStack
                (Stack, MAX (NUMBER ( Stack ^ ) * 2 , StackPtr + 2 ) );
              StackSize := NUMBER (Stack^); 
            END;
            INC (StackPtr);
            Stack^ [StackPtr] := State (*ParserDebug*);
            IF State < yyFirstFinalState
            THEN EXIT;
            END; (* read nonterminal ? *)
            State := yyFinalToProd [State]; (* read nonterminal reduce *)
            Stack^ [StackPtr] := State (*ParserDebug*);
         END;
      END;
    END IsContinuation;
(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
          ParseStack    : yyStackType   ;
          StackSize     : INTEGER       ;
          StackPtr      : yyStackPtrType;
      VAR RestartSet    : IntSets.T     ) =
   VAR
      Stack             : yyStackType;
      State             : yyStateRange;
      Nonterminal       : yySymbolRange;
      ContinueSet       : IntSets.T;
   BEGIN
      RestartSet := IntSets . Empty ( );
      Stack := NEW (yyStackType, StackSize);
      SUBARRAY (Stack^, 0, StackPtr+1 )
        := SUBARRAY (ParseStack^, 0, StackPtr+1 );
      ContinueSet := IntSets . Empty ( );
      State := Stack^ [StackPtr];

      LOOP
         (* Ensure Stack has room for at least 2 elements. *)
         IF StackPtr >= StackSize THEN
            ExpandStateStack
              (Stack, MAX (NUMBER (Stack ^) * 2 , StackPtr + 2 ) );
            StackSize := NUMBER (Stack^); 
         END;
         Stack^ [StackPtr] := State;
         ComputeContinuation (Stack, StackSize, StackPtr, (*OUT*) ContinueSet);
         RestartSet := IntSets.Union (RestartSet, ContinueSet);
         State := Next (State, yyContinuation [State]);

          IF State >= yyFirstFinalState THEN (* final state ? *)
            IF State <= yyLastReadTermState THEN (* read terminal reduce ? *)
               INC (StackPtr);
               State := yyFinalToProd [State];
               Stack^ [StackPtr] := State (*ParserDebug*);
            END;

            LOOP (* reduce *)
               IF State = yyStopState THEN
                  Stack := NIL;
                  ContinueSet := NIL;
                  RETURN;
               ELSE 
                  DEC (StackPtr, yyLength [State]);
                  Nonterminal := yyLeftHandSide [State];
               END;

               State := Next (Stack^ [StackPtr], Nonterminal);
               INC (StackPtr);
               IF State < yyFirstFinalState
               THEN EXIT;
               END; (* read nonterminal ? *)
               State := yyFinalToProd [State]; (* read nonterminal reduce *)
            END (*LOOP*);
         ELSE (* read *)
            INC (StackPtr);
         END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next
   (State: yyStateRange; Symbol: yySymbolRange)
   : yyStateRange =
   VAR
      TCombPtr          : yyTCombTypePtr;
      NCombPtr          : yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
         LOOP
            TCombPtr 
              := LOOPHOLE 
                   ( LOOPHOLE (yyTBasePtr [State],INTEGER) 
                     + Symbol * BYTESIZE (yyTCombType)
                   ,yyTCombTypePtr);
            IF TCombPtr^.Check # State THEN
               State := yyDefault [State];
               IF State = yyNoState THEN RETURN yyNoState; END;
            ELSE
               RETURN TCombPtr^.Next;
            END;
         END;
      ELSE
        NCombPtr 
          := LOOPHOLE 
               ( LOOPHOLE (yyNBasePtr [State],INTEGER) 
                 + (Symbol-(yyLastTerminal+1))
                   * BYTESIZE (yyNCombType)
               ,yyNCombTypePtr);
        RETURN NCombPtr^;
      END;
   END Next;
   
  PROCEDURE BeginFM3Parser ()=
   BEGIN
(* line 94 "FM3Parser.lalr" *)
 
      IF NOT yyModuleIsInitialized THEN
         yyModuleIsInitialized := TRUE;
      END;
   END BeginFM3Parser;

(*EXPORTED*)
  PROCEDURE CloseFM3Parser ()=
   BEGIN
(* line 97 "FM3Parser.lalr" *)
 
   END CloseFM3Parser;

BEGIN
    <*ASSERT BYTESIZE (yyTableElmt) = 2 *>
    yyModuleIsInitialized := FALSE;
     ParsTabName := "FM3Parser.Tab";
  END FM3Parser.

